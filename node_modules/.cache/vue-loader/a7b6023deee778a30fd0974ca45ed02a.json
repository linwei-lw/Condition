{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\ButtonBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\ButtonBar.vue","mtime":1662449411098},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 使用例子\n* <ButtonBar :options=\"[{label:'吃饭',value:1},{label:'睡觉',value:2}]\" v-model=\"like\" :beforeChange=\"onButtonBeforeChg\" @change=\"onButtonChg\"/>\n* \n*  data: {like: 1},\n*  methods: {\n*    onButtonBeforeChg(oldValue, newValue) {\n*      return true;  // 允许变化\n*      return false; // 不允许变化\n*    },\n*    onButtonChg(value)) {// value值是1或2\n*    }\n*  }\n* \n* options单值模式：\n* <ButtonBar :options=\"[1,2,3,4,5]\" .../>\n* <ButtonBar :options=\"['aa','bb']\" .../>\n*/\n  \nexport default {\n  name: \"ButtonBar\",\n  props: {\n    value: [String, Number],                                           // 当前值(v-model)\n    options: Array,                                                    // 多个选项 [{lable:xxx,value:xxx}...]\n    labelField:  { type: String,  default: 'label' },                  // 显示字段\n    valueField:  { type: String,  default: 'value' },                  // 值字段\n    iconField:   { type: String,  default: null },                     // 图标字段\n    mode:        { type: String,  default: 'button' },                 // 模式：button按钮模式　underline下划线模式 excel底部切换模式\n    gap:         { type: Number,  default: 0 },                        // 按钮间的间距\n    widthIsSet:  { type: Boolean, default: true },                     // 是否设置了宽度，如果没设置，按钮宽度自适应内容\n    closable:    { type: Boolean, default: false },                    // 按钮是否可关闭\n    vertical:    { type: Boolean, default: false },                    // 是否垂直显示\n    position:    { type: String,  default: 'top' },                    // top bottom left right center\n    padding:     { type: String,  default: '0 10px' },                 // 按钮padding\n    border:      { type: Boolean, default: true },                     // 是否有边框\n    borderColor: { type: String,  default: $_theme.border_color_dark}, // 边框颜色\n    radius:      { type: String,  default: $_theme.tab_radius},        // 边框圆角\n    disabled: Boolean,                                                 // 是否可操作\n    height:      { type: Number,  default: $_theme.inputHeight },      // 高度数值，单位是px,\n    splitLine:   {type: Boolean, default: false},                      // 是显示分隔线\n    beforeChange: Function,\n    buttonStyle: { default: null },\n    containerBgc: { type: String, default:'#c1c9da'}                      //显示ButtonBr背景颜色\n  },\n  _single: null,  //是否是单值，也就是options = [1,2,3]/['a','bb','ccc']\n  data() {\n    return {  \n      selectedIndex: null, // 选中项的index\n    };\n  },\n  created() {\n    this._single = false;\n    if (this.options != null && this.options.length) {\n      let type = typeof(this.options[0]);\n      if (type == 'string' || type == 'number') {\n        this._single = true;\n      }\n    }\n  },\n  methods: {\n    getItemValue(item) {\n      return this._single ? item : item[this.valueField];\n    },\n    getItemText(item) {\n      return this._single ? item : item[this.labelField];\n    },\n    handleClick(value, index) {\n      if (this.value !== value){\n        this.selectedIndex = index;\n        if (!this.beforeChange || this.beforeChange(value, this.value) !== false) {\n          let old = this.value;\n          this.$emit('input', value);\n          this.$emit('change', value, old);\n        }\n      }\n      this.$emit('click', value);\n    },\n    mouseenter(event) {\n      this.closable && (event.target.children[0].style.display ='block');\n    },\n    mouseleave(event) {\n      this.closable && (event.target.children[0].style.display ='none');\n    },\n    onCloseClick(item) {\n      this.$emit('close', item);\n    },\n    boxShadowStyle(index) {\n      return this.mode == 'underline' ? null : {boxShadow: `${(this.vertical||index==0)?'0':'-1px'} ${!this.vertical||index==0?'0':'-1px'} 0 0 ${this.mode == 'excel'?this.borderColor:this.theme.color}`}\n    },\n  },\n  computed: {\n    containerStyle() {\n      let style = this.vertical ? {flexFlow: 'column'} : {\n        height: this.height + 'px',\n        lineHeight: this.height + 'px'\n      };\n      switch (this.position) {\n        case 'top': return Object.assign(style, {borderTopLeftRadius:this.radius,borderTopRightRadius:this.radius});\n        case 'bottom': return Object.assign(style, {borderBottomLeftRadius:this.radius,borderBottomRightRadius:this.radius});\n        case 'left': return Object.assign(style, {borderTopLeftRadius:this.radius,borderBottomLeftRadius:this.radius});\n        case 'right': return Object.assign(style, {borderTopRightRadius:this.radius,borderBottomRightRadius:this.radius});\n      }\n      return Object.assign(style, {borderRadius:this.radius});\n    },\n    firstStyle() {\n      if (this.mode == 'excel') return null;\n      switch (this.position) {\n        case 'top': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderTopRightRadius:this.radius} : {borderTopLeftRadius:this.radius};\n        case 'bottom': return this.gap>1 ? {borderBottomLeftRadius:this.radius,borderBottomRightRadius:this.radius} : {borderBottomLeftRadius:this.radius};\n        case 'left': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderBottomLeftRadius:this.radius} : {borderTopLeftRadius:this.radius};\n        case 'right': return this.gap>1 ? {borderTopRightRadius:this.radius,borderBottomRightRadius:this.radius} : {borderTopRightRadius:this.radius};\n      }\n      return this.vertical ? {borderTopLeftRadius:this.radius,borderTopRightRadius:this.radius} : {borderTopLeftRadius:this.radius,borderBottomLeftRadius:this.radius};\n    },\n    middleStyle() {\n      if (this.mode == 'excel') return null;\n      switch (this.position) {\n        case 'top': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderTopRightRadius:this.radius} : null;\n        case 'bottom': return this.gap>1 ? {borderBottomLeftRadius:this.radius,borderBottomRightRadius:this.radius} : null;\n        case 'left': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderBottomLeftRadius:this.radius} : null;\n        case 'right': return this.gap>1 ? {borderTopRightRadius:this.radius,borderBottomRightRadius:this.radius} : null;\n      }\n      return null;\n    },\n    lastStyle() {\n      if (this.mode == 'excel') return null;\n      switch (this.position) {\n        case 'top': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderTopRightRadius:this.radius} : {borderTopRightRadius:this.radius};\n        case 'bottom': return this.gap>1 ? {borderBottomLeftRadius:this.radius,borderBottomRightRadius:this.radius} : {borderBottomRightRadius:this.radius};\n        case 'left': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderBottomLeftRadius:this.radius} : {borderBottomLeftRadius:this.radius};\n        case 'right': return this.gap>1 ? {borderTopRightRadius:this.radius,borderBottomRightRadius:this.radius} : {borderBottomRightRadius:this.radius};\n      }\n      return this.vertical ? {borderBottomLeftRadius:this.radius,borderBottomRightRadius:this.radius} : {borderTopRightRadius:this.radius,borderBottomRightRadius:this.radius};\n    },\n    checkedStyle() {\n      if (this.mode == 'underline') {\n        return {\n          color: this.theme.color,\n          borderBottomWidth: '2px',\n          borderBottomStyle: 'solid',\n          borderBottomColor: this.theme.color\n        }\n      } else if (this.mode == 'excel') {\n        return {\n          borderColor: this.borderColor,\n          borderWidth: '0 1px 4px 0',\n          borderBottomColor: this.theme.color,\n          backgroundColor: '#f5f5f5',\n          height: '86%',\n          display: 'flex',\n          alignItems: 'center',\n          color: '#232323'\n        }\n      } else {\n        return {\n          backgroundColor: this.theme.color,\n          borderColor: this.theme.color,\n          color: '#fff'\n        };\n      }\n    },\n    uncheckedStyle() {\n      if (this.mode == 'underline') {\n        return null;\n      } else if (this.mode == 'excel') {\n        return {\n          borderColor: this.borderColor,\n          borderWidth: '0 1px 0 0',\n          height: '48.8%',\n          display: 'flex',\n          alignItems: 'center',\n          position: 'relative',\n          top: '25.6%',\n        }\n      } else {\n        return {\n          backgroundColor: '#fff',\n          borderColor: this.borderColor\n        };\n      }\n    },\n    gapStyle() {\n      if (this.vertical) {\n        let padding = this.vertical && this.padding == '0 10px' ? '10px' : this.padding;\n        return this.gap <= 0 ? {padding: padding, whiteSpace:'normal'} : {borderTopWidth: '1px', marginBottom: this.gap+'px', padding: padding, whiteSpace:'normal'};\n      } else {\n        return this.gap <= 0 ? {padding: this.padding} : {borderLeftWidth: '1px', marginRight: this.gap+'px', padding: this.padding};\n      }\n    },\n    widthStyle() {\n      return this.widthIsSet ? {width: '100%'} : null;\n    },\n  }\n};\n",{"version":3,"sources":["ButtonBar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"ButtonBar.vue","sourceRoot":"src/components","sourcesContent":["\r\n<template>\r\n  <div :class=\"[$style.container, mode == 'excel'&&$style.excelContainer]\" :style=\"[containerStyle,{borderColor: mode == 'excel'&&borderColor||''}]\">\r\n\r\n    <!--遍历每个按钮项-->\r\n    <div v-for=\"(item,index) in options\" :key=\"getItemValue(item)\" \r\n      :class=\"[$style.btnItem, mode == 'underline' ? null : (vertical ? $style.btnItem_v : $style.btnItem_h), !border&&(vertical ? $style.no_border_v : $style.no_border_h)]\" \r\n      :style=\"getItemValue(item) === value ? [checkedStyle, gapStyle, widthStyle, boxShadowStyle(index), buttonStyle, index==0&&firstStyle, index==options.length-1&&lastStyle, index>0&&index<options.length-1&&middleStyle] : [uncheckedStyle, gapStyle, widthStyle, buttonStyle, index==0&&firstStyle, index==options.length-1&&lastStyle, index>0&&index<options.length-1&&middleStyle]\"\r\n      @mouseenter=\"mouseenter($event)\" \r\n      @mouseleave=\"mouseleave($event)\"\r\n      @click=\"handleClick(getItemValue(item), index)\">\r\n        <i :class=\"item[iconField]\" v-if=\"iconField\" style=\"font-size:16px;\"></i>\r\n        <!--按钮文字-->\r\n        {{ getItemText(item) }}\r\n        <slot :item=\"item\"></slot>\r\n        <!--鼠标经过显示关闭按钮-->\r\n        <div v-if=\"closable\" :class=\"$style.btn_close\" @click.stop=\"onCloseClick(item)\"/>\r\n        <div :class=\"$style.splitLine\" v-show=\"getItemValue(item) !== value&&selectedIndex-1 !== index\" v-if=\"splitLine\"><div :style=\"{borderColor: borderColor}\"></div></div>\r\n    </div>\r\n\r\n    <div v-if=\"disabled\" :class=\"$style.disabled\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  /*\r\n  * 使用例子\r\n  * <ButtonBar :options=\"[{label:'吃饭',value:1},{label:'睡觉',value:2}]\" v-model=\"like\" :beforeChange=\"onButtonBeforeChg\" @change=\"onButtonChg\"/>\r\n  * \r\n  *  data: {like: 1},\r\n  *  methods: {\r\n  *    onButtonBeforeChg(oldValue, newValue) {\r\n  *      return true;  // 允许变化\r\n  *      return false; // 不允许变化\r\n  *    },\r\n  *    onButtonChg(value)) {// value值是1或2\r\n  *    }\r\n  *  }\r\n  * \r\n  * options单值模式：\r\n  * <ButtonBar :options=\"[1,2,3,4,5]\" .../>\r\n  * <ButtonBar :options=\"['aa','bb']\" .../>\r\n  */\r\n    \r\n  export default {\r\n    name: \"ButtonBar\",\r\n    props: {\r\n      value: [String, Number],                                           // 当前值(v-model)\r\n      options: Array,                                                    // 多个选项 [{lable:xxx,value:xxx}...]\r\n      labelField:  { type: String,  default: 'label' },                  // 显示字段\r\n      valueField:  { type: String,  default: 'value' },                  // 值字段\r\n      iconField:   { type: String,  default: null },                     // 图标字段\r\n      mode:        { type: String,  default: 'button' },                 // 模式：button按钮模式　underline下划线模式 excel底部切换模式\r\n      gap:         { type: Number,  default: 0 },                        // 按钮间的间距\r\n      widthIsSet:  { type: Boolean, default: true },                     // 是否设置了宽度，如果没设置，按钮宽度自适应内容\r\n      closable:    { type: Boolean, default: false },                    // 按钮是否可关闭\r\n      vertical:    { type: Boolean, default: false },                    // 是否垂直显示\r\n      position:    { type: String,  default: 'top' },                    // top bottom left right center\r\n      padding:     { type: String,  default: '0 10px' },                 // 按钮padding\r\n      border:      { type: Boolean, default: true },                     // 是否有边框\r\n      borderColor: { type: String,  default: $_theme.border_color_dark}, // 边框颜色\r\n      radius:      { type: String,  default: $_theme.tab_radius},        // 边框圆角\r\n      disabled: Boolean,                                                 // 是否可操作\r\n      height:      { type: Number,  default: $_theme.inputHeight },      // 高度数值，单位是px,\r\n      splitLine:   {type: Boolean, default: false},                      // 是显示分隔线\r\n      beforeChange: Function,\r\n      buttonStyle: { default: null },\r\n      containerBgc: { type: String, default:'#c1c9da'}                      //显示ButtonBr背景颜色\r\n    },\r\n    _single: null,  //是否是单值，也就是options = [1,2,3]/['a','bb','ccc']\r\n    data() {\r\n      return {  \r\n        selectedIndex: null, // 选中项的index\r\n      };\r\n    },\r\n    created() {\r\n      this._single = false;\r\n      if (this.options != null && this.options.length) {\r\n        let type = typeof(this.options[0]);\r\n        if (type == 'string' || type == 'number') {\r\n          this._single = true;\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      getItemValue(item) {\r\n        return this._single ? item : item[this.valueField];\r\n      },\r\n      getItemText(item) {\r\n        return this._single ? item : item[this.labelField];\r\n      },\r\n      handleClick(value, index) {\r\n        if (this.value !== value){\r\n          this.selectedIndex = index;\r\n          if (!this.beforeChange || this.beforeChange(value, this.value) !== false) {\r\n            let old = this.value;\r\n            this.$emit('input', value);\r\n            this.$emit('change', value, old);\r\n          }\r\n        }\r\n        this.$emit('click', value);\r\n      },\r\n      mouseenter(event) {\r\n        this.closable && (event.target.children[0].style.display ='block');\r\n      },\r\n      mouseleave(event) {\r\n        this.closable && (event.target.children[0].style.display ='none');\r\n      },\r\n      onCloseClick(item) {\r\n        this.$emit('close', item);\r\n      },\r\n      boxShadowStyle(index) {\r\n        return this.mode == 'underline' ? null : {boxShadow: `${(this.vertical||index==0)?'0':'-1px'} ${!this.vertical||index==0?'0':'-1px'} 0 0 ${this.mode == 'excel'?this.borderColor:this.theme.color}`}\r\n      },\r\n    },\r\n    computed: {\r\n      containerStyle() {\r\n        let style = this.vertical ? {flexFlow: 'column'} : {\r\n          height: this.height + 'px',\r\n          lineHeight: this.height + 'px'\r\n        };\r\n        switch (this.position) {\r\n          case 'top': return Object.assign(style, {borderTopLeftRadius:this.radius,borderTopRightRadius:this.radius});\r\n          case 'bottom': return Object.assign(style, {borderBottomLeftRadius:this.radius,borderBottomRightRadius:this.radius});\r\n          case 'left': return Object.assign(style, {borderTopLeftRadius:this.radius,borderBottomLeftRadius:this.radius});\r\n          case 'right': return Object.assign(style, {borderTopRightRadius:this.radius,borderBottomRightRadius:this.radius});\r\n        }\r\n        return Object.assign(style, {borderRadius:this.radius});\r\n      },\r\n      firstStyle() {\r\n        if (this.mode == 'excel') return null;\r\n        switch (this.position) {\r\n          case 'top': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderTopRightRadius:this.radius} : {borderTopLeftRadius:this.radius};\r\n          case 'bottom': return this.gap>1 ? {borderBottomLeftRadius:this.radius,borderBottomRightRadius:this.radius} : {borderBottomLeftRadius:this.radius};\r\n          case 'left': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderBottomLeftRadius:this.radius} : {borderTopLeftRadius:this.radius};\r\n          case 'right': return this.gap>1 ? {borderTopRightRadius:this.radius,borderBottomRightRadius:this.radius} : {borderTopRightRadius:this.radius};\r\n        }\r\n        return this.vertical ? {borderTopLeftRadius:this.radius,borderTopRightRadius:this.radius} : {borderTopLeftRadius:this.radius,borderBottomLeftRadius:this.radius};\r\n      },\r\n      middleStyle() {\r\n        if (this.mode == 'excel') return null;\r\n        switch (this.position) {\r\n          case 'top': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderTopRightRadius:this.radius} : null;\r\n          case 'bottom': return this.gap>1 ? {borderBottomLeftRadius:this.radius,borderBottomRightRadius:this.radius} : null;\r\n          case 'left': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderBottomLeftRadius:this.radius} : null;\r\n          case 'right': return this.gap>1 ? {borderTopRightRadius:this.radius,borderBottomRightRadius:this.radius} : null;\r\n        }\r\n        return null;\r\n      },\r\n      lastStyle() {\r\n        if (this.mode == 'excel') return null;\r\n        switch (this.position) {\r\n          case 'top': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderTopRightRadius:this.radius} : {borderTopRightRadius:this.radius};\r\n          case 'bottom': return this.gap>1 ? {borderBottomLeftRadius:this.radius,borderBottomRightRadius:this.radius} : {borderBottomRightRadius:this.radius};\r\n          case 'left': return this.gap>1 ? {borderTopLeftRadius:this.radius,borderBottomLeftRadius:this.radius} : {borderBottomLeftRadius:this.radius};\r\n          case 'right': return this.gap>1 ? {borderTopRightRadius:this.radius,borderBottomRightRadius:this.radius} : {borderBottomRightRadius:this.radius};\r\n        }\r\n        return this.vertical ? {borderBottomLeftRadius:this.radius,borderBottomRightRadius:this.radius} : {borderTopRightRadius:this.radius,borderBottomRightRadius:this.radius};\r\n      },\r\n      checkedStyle() {\r\n        if (this.mode == 'underline') {\r\n          return {\r\n            color: this.theme.color,\r\n            borderBottomWidth: '2px',\r\n            borderBottomStyle: 'solid',\r\n            borderBottomColor: this.theme.color\r\n          }\r\n        } else if (this.mode == 'excel') {\r\n          return {\r\n            borderColor: this.borderColor,\r\n            borderWidth: '0 1px 4px 0',\r\n            borderBottomColor: this.theme.color,\r\n            backgroundColor: '#f5f5f5',\r\n            height: '86%',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            color: '#232323'\r\n          }\r\n        } else {\r\n          return {\r\n            backgroundColor: this.theme.color,\r\n            borderColor: this.theme.color,\r\n            color: '#fff'\r\n          };\r\n        }\r\n      },\r\n      uncheckedStyle() {\r\n        if (this.mode == 'underline') {\r\n          return null;\r\n        } else if (this.mode == 'excel') {\r\n          return {\r\n            borderColor: this.borderColor,\r\n            borderWidth: '0 1px 0 0',\r\n            height: '48.8%',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            position: 'relative',\r\n            top: '25.6%',\r\n          }\r\n        } else {\r\n          return {\r\n            backgroundColor: '#fff',\r\n            borderColor: this.borderColor\r\n          };\r\n        }\r\n      },\r\n      gapStyle() {\r\n        if (this.vertical) {\r\n          let padding = this.vertical && this.padding == '0 10px' ? '10px' : this.padding;\r\n          return this.gap <= 0 ? {padding: padding, whiteSpace:'normal'} : {borderTopWidth: '1px', marginBottom: this.gap+'px', padding: padding, whiteSpace:'normal'};\r\n        } else {\r\n          return this.gap <= 0 ? {padding: this.padding} : {borderLeftWidth: '1px', marginRight: this.gap+'px', padding: this.padding};\r\n        }\r\n      },\r\n      widthStyle() {\r\n        return this.widthIsSet ? {width: '100%'} : null;\r\n      },\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .container {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content:stretch;\r\n    white-space: nowrap;\r\n    user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    -moz-user-select: none;\r\n  }\r\n  .btnItem {\r\n    flex-shrink: 1;\r\n    position: relative;\r\n    white-space: nowrap;\r\n    cursor: pointer;\r\n    text-align: center;\r\n    min-height: 5px;\r\n  }\r\n  .btnItem:hover   { color: var(--color); }\r\n  .btnItem:last-child {\r\n    margin-right: 0!important;\r\n  }\r\n  /* 按钮 水平 */\r\n  .btnItem_h {\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-left-width: 0;\r\n  }\r\n  .btnItem_h:first-child {\r\n    border-left-width: 1px;\r\n  }\r\n  /* 按钮 垂直 */\r\n  .btnItem_v {\r\n    display: flex;\r\n    flex: 1;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-top-width: 0;\r\n  }\r\n  .btnItem_v:first-child {\r\n    border-top-width: 1px;\r\n  }\r\n\r\n  .no_border_v {\r\n    border-top: 1px solid;\r\n    border-left: 0;\r\n    border-right: 0;\r\n    border-bottom: 0;\r\n  }\r\n  .no_border_v:first-child {\r\n    border-top: 0;\r\n  }\r\n  .no_border_h {\r\n    border-left: 1px solid;\r\n    border-top: 0;\r\n    border-bottom: 0;\r\n    border-right: 0;\r\n  }\r\n  .no_border_h:first-child {\r\n    border-left: 0;\r\n  }\r\n  .btn_close {\r\n    position: absolute;\r\n    display: none;\r\n    height: 12px;\r\n    width: 16px;\r\n    top: 0;\r\n    right: 0;\r\n    cursor: pointer;\r\n    background: url(\"@/assets/main/menu-close.png\") no-repeat;\r\n    background-size: 100% 100%;\r\n  }\r\n  /* 禁止操作 */\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(255, 255, 255, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60); \r\n    cursor: not-allowed;\r\n  }\r\n  .excelContainer{\r\n    border: 1px solid;\r\n    color: #716e6a;\r\n  }\r\n  .container > .btnItem:last-child > .splitLine div{\r\n    border-right: 0px;\r\n  }\r\n  .splitLine{\r\n    position: absolute;\r\n    right: 0px;\r\n    top: 0px;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .splitLine div{\r\n    border-right: 1px solid;\r\n    height: 1.4em;\r\n  }\r\n</style>\r\n"]}]}