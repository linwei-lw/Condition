{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\InputText.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\InputText.vue","mtime":1676530266938},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 使用例子\n* <InputText label=\"你想输入啥\" v-model=\"text\" @change=\"onTextChg\" unit=\"km\" clearable required/>\n*\n*  data: {text: ''},\n*  methods: {\n*    onTextChg(text) {\n*    }\n*  }\n*/\nimport storage from '@/common/cache/Storage.js';\n\nexport default {\n  name: \"InputText\",\n  props: {\n    value: [String, Number, Array],                                   // 当前值(v-model)\n    label: String,                                                    // 标题文本\n    unit: String,                                                     // 单位\n    required: Boolean,                                                // 是否必填\n    disabled: Boolean,                                                // 是否可操作\n    readonly: Boolean,                                                // 是否只读\n    reg: RegExp,                                                      // 正则表达式\n    maxlength: Number,                                                // 输入的最大长度\n    password:       { type: Boolean, default: false },                // 是否是密码输入类型\n    passwordButton: { type: Boolean, default: true },                 // 是否显示密码显示按钮\n    trim:           { type: Boolean, default: false},                 // 是否不允许输入空格\n    number:         { type: Boolean, default: false },                // 是否是数字输入类型\n    point_num:      { type: Number,  default: null },                 // 如果是数字输入类型时，允许的小数点最多后几位\n    integer:        { type: Boolean, default: false },                // 是否是整数输入类型\n    range:          { type: Array,   default: null },                 // 如果是数字或整数，允许的最小和最大值，[最小值，最大值]\n    clearable:      { type: Boolean, default: false },                // 是否显示可清除图标\n    autocomplete:   { type: String,  default: 'off' },                // 自动补全\n    border:         { type: Boolean, default: true },                 // 是否显示边框\n    borderColor:    { type: String,  default: $_theme.border_color_light },\n    radius:         { type: String,  default: $_theme.input_radius},  // 边框圆角\n    focusClass:     { type: String,  default: null },\n    placeholder:    { type: String,  default: null },\n    height:         { type: Number,  default: $_theme.inputHeight },  // 高度数值，单位是px\n    labelMinWidth:  { type: Number,  default: 10 },  \t\t  \t\t        // lable宽度最小数值，单位是px\n    labelMaxWidth:  { type: Number},  \t\t  \t\t                      // lable宽度最大数值，单位是px\n    inputWidth:     { type: String,  default: '100%' },               // 输入框的宽度\n    inputStyle:     { default: null },                                // 输入框的style\n    labelColor:     { type: String,  default: null },                 // lable颜色\n    onInput: Function,\n    searchKey:      { type: String,  default: null },\n    isLabel:        { type: Boolean, default: true },\n  },\n  data() {\n    return {\n      hovering: false,\n      focused: false,\n      isComposing: false,\n      ishidePassword: true,\n    };\n  },\n  methods: {\n    focus() {\n      this.$refs.input.focus();\n    },\n    blur() {\n      this.$refs.input.blur();\n    },\n    keydown(event){\n      if(event.keyCode==13){\n        this.$emit('keydown', event);\n      }\n    },\n    handleFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n    },\n    handleBlur(event) {\n      this.focused = false;\n      this.$emit('blur', event);\n    },\n    handleCompositionStart() {\n      this.isComposing = true;\n    },\n    handleCompositionEnd(event) {\n      this.isComposing = false;\n      this.handleInput(event);\n    },\n    handleInput(event) {\n      if (this.isComposing) return;\n      let value = event.target.value;\n      window.$_XSS && (value = window.$_XSS(value));\n      this.reg && (value = value.replace(this.reg,''));\n      if (this.trim) value = value.replace(/\\s+|　/g,'');\n      if (this.integer) {\n        value = value.replace(/[^0-9|\\-]/g,'');\n        let _ = value.indexOf('-') == 0;\n        value = value.replace(/\\-/g, '');//移除所有-号\n        while (value.length > 1 && value.indexOf('0') == 0) value = value.substr(1);//移除多余前缀0\n        _ && (value = '-' + value);//加回-号\n      } else if (this.number) {\n        value = value.replace(/[^0-9|\\-|\\.]/g,'');//移除[0123456789-.]以外的字符\n        let _ = value.indexOf('-') == 0;\n        value = value.replace(/\\-/g, '');//移除所有-号\n        value = value.replace(/^\\./g, '').replace('.', '$#$').replace(/\\./g, '').replace('$#$', '.');//移除多余的.号\n        if (this.point_num !== null) {//移除多余小数位\n          let i = value.indexOf('.'), n = this.point_num > 0 ? (this.point_num + 1) : 0;\n          i != -1 && (value = value.substr(0, i + n));\n        }\n        while (value.length > 1 && value.indexOf('0') == 0 && value.indexOf('0.') != 0) value = value.substr(1);//移除多余前缀0\n        _ && (value = '-' + value);//加回-号\n      }\n      if ((this.integer || this.number) && this.range != null && value) {\n        this.range[0] !== null && ((value == '-' && this.range[0] >= 0) || (value != '-' && Number(value) < this.range[0])) && (value = this.value);\n        this.range[1] !== null && (value != '-' && Number(value) > this.range[1]) && (value = this.value);\n      }\n\n      event.target.value = value;\n      this.onInput && this.onInput(value);\n      this.$emit('input', value);\n      this.searchKey && storage.set(this.searchKey,value);\n    },\n    handleClick(event) {\n      this.$el.focus();\n      this.focus();\n      this.$emit('click',event);\n    },\n    clear() {\n      this.$emit('input', '');\n      this.$emit('change', '');\n      this.$emit('clear');\n      this.searchKey && storage.remove(this.searchKey);\n    },\n    togglePassword(){\n      this.ishidePassword = !this.ishidePassword;\n    },\n    handleChange(event) {\n      this.$emit('change', event.target.value);\n    }\n  },\n  mounted() {\n  },\n  watch: {\n    focused: function(v) {\n      this.$emit('focused', v);\n    }\n  },\n  computed: {\n    showClear() {\n      return this.clearable && !this.disabled && !this.readonly && this.value && (this.focused || this.hovering);\n    },\n    containerStyle() {\n      return {\n        borderRadius: this.radius,\n        height: this.height + 'px',\n        borderColor: this.focused ? this.theme.color : this.borderColor,\n        zIndex: this.focused ? this.theme.zindex() : ''\n      };\n    },\n    labelStyle() {\n      return {\n        minWidth: this.labelMinWidth + 'px',\n        maxWidth: this.labelMaxWidth + 'px',\n        borderRightColor: this.theme.border_color_light,\n        backgroundColor: this.labelColor?this.labelColor:this.theme.input_label_bg_color\n      };\n    }\n  }\n};\n",{"version":3,"sources":["InputText.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"InputText.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div :class=\"[$style.container, border && $style.border, focused && focusClass]\" :style=\"containerStyle\" @mouseenter=\"hovering=true\" @mouseleave=\"hovering=false\">\r\n\r\n    <!--label显示-->\r\n    <span :class=\"$style.label\" :style=\"labelStyle\" v-if=\"label\" :is-label=\"isLabel\">{{label}}</span>\r\n\r\n    <slot :hovering=\"hovering\"></slot>\r\n\r\n    <!--必填显示-->\r\n    <span :class=\"['el-icon-star-on', $style.required]\" :style=\"{backgroundColor:theme.input_label_bg_color}\" v-if=\"required\"></span>\r\n\r\n    <slot name=\"required\"></slot>\r\n\r\n    <!--显示密码按钮显示-->\r\n    <div :class=\"$style.togglePassword\" v-if=\"password&&passwordButton\">\r\n      <i @click=\"togglePassword\" class=\"el-icon-view\" :style=\"{cursor: 'pointer', color:ishidePassword?'#d0d0d0':theme.color}\"></i>\r\n    </div>\r\n\r\n    <!--单位显示-->\r\n    <span :class=\"$style.unit\" v-if=\"unit\">{{unit}}</span>\r\n\r\n    <!--clear按钮显示-->\r\n    <div :class=\"$style.clear\" v-if=\"showClear\">\r\n      <i></i>\r\n      <i @click=\"clear\" class=\"el-icon-close\"></i>\r\n    </div>\r\n\r\n    <!--input显示-->\r\n    <div style=\"overflow:hidden;\">\r\n      <input ref=\"input\"\r\n        :class=\"$style.input\"\r\n        :style=\"[{width:inputWidth},{paddingRight:password&&passwordButton&&'35px'}, inputStyle]\"\r\n        v-bind=\"$attrs\"\r\n        :value=\"value\"\r\n        :type=\"password && ishidePassword ? 'password' : 'text'\"\r\n        :maxlength=\"maxlength\"\r\n        :disabled=\"disabled\"\r\n        :readonly=\"readonly\"\r\n        :autocomplete=\"autocomplete\"\r\n        :placeholder=\"placeholder\"\r\n        @click=\"handleClick($event)\"\r\n        @compositionstart=\"handleCompositionStart\"\r\n        @compositionend=\"handleCompositionEnd\"\r\n        @input=\"handleInput\"\r\n        @focus=\"handleFocus\"\r\n        @blur=\"handleBlur\"\r\n        @change=\"handleChange\"\r\n        @keydown=\"keydown\">\r\n    </div >\r\n\r\n    <div v-if=\"disabled\" :class=\"$style.disabled\" :style=\"{borderRadius: radius}\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  /*\r\n  * 使用例子\r\n  * <InputText label=\"你想输入啥\" v-model=\"text\" @change=\"onTextChg\" unit=\"km\" clearable required/>\r\n  *\r\n  *  data: {text: ''},\r\n  *  methods: {\r\n  *    onTextChg(text) {\r\n  *    }\r\n  *  }\r\n  */\r\n  import storage from '@/common/cache/Storage.js';\r\n\r\n  export default {\r\n    name: \"InputText\",\r\n    props: {\r\n      value: [String, Number, Array],                                   // 当前值(v-model)\r\n      label: String,                                                    // 标题文本\r\n      unit: String,                                                     // 单位\r\n      required: Boolean,                                                // 是否必填\r\n      disabled: Boolean,                                                // 是否可操作\r\n      readonly: Boolean,                                                // 是否只读\r\n      reg: RegExp,                                                      // 正则表达式\r\n      maxlength: Number,                                                // 输入的最大长度\r\n      password:       { type: Boolean, default: false },                // 是否是密码输入类型\r\n      passwordButton: { type: Boolean, default: true },                 // 是否显示密码显示按钮\r\n      trim:           { type: Boolean, default: false},                 // 是否不允许输入空格\r\n      number:         { type: Boolean, default: false },                // 是否是数字输入类型\r\n      point_num:      { type: Number,  default: null },                 // 如果是数字输入类型时，允许的小数点最多后几位\r\n      integer:        { type: Boolean, default: false },                // 是否是整数输入类型\r\n      range:          { type: Array,   default: null },                 // 如果是数字或整数，允许的最小和最大值，[最小值，最大值]\r\n      clearable:      { type: Boolean, default: false },                // 是否显示可清除图标\r\n      autocomplete:   { type: String,  default: 'off' },                // 自动补全\r\n      border:         { type: Boolean, default: true },                 // 是否显示边框\r\n      borderColor:    { type: String,  default: $_theme.border_color_light },\r\n      radius:         { type: String,  default: $_theme.input_radius},  // 边框圆角\r\n      focusClass:     { type: String,  default: null },\r\n      placeholder:    { type: String,  default: null },\r\n      height:         { type: Number,  default: $_theme.inputHeight },  // 高度数值，单位是px\r\n      labelMinWidth:  { type: Number,  default: 10 },  \t\t  \t\t        // lable宽度最小数值，单位是px\r\n      labelMaxWidth:  { type: Number},  \t\t  \t\t                      // lable宽度最大数值，单位是px\r\n      inputWidth:     { type: String,  default: '100%' },               // 输入框的宽度\r\n      inputStyle:     { default: null },                                // 输入框的style\r\n      labelColor:     { type: String,  default: null },                 // lable颜色\r\n      onInput: Function,\r\n      searchKey:      { type: String,  default: null },\r\n      isLabel:        { type: Boolean, default: true },\r\n    },\r\n    data() {\r\n      return {\r\n        hovering: false,\r\n        focused: false,\r\n        isComposing: false,\r\n        ishidePassword: true,\r\n      };\r\n    },\r\n    methods: {\r\n      focus() {\r\n        this.$refs.input.focus();\r\n      },\r\n      blur() {\r\n        this.$refs.input.blur();\r\n      },\r\n      keydown(event){\r\n        if(event.keyCode==13){\r\n          this.$emit('keydown', event);\r\n        }\r\n      },\r\n      handleFocus(event) {\r\n        this.focused = true;\r\n        this.$emit('focus', event);\r\n      },\r\n      handleBlur(event) {\r\n        this.focused = false;\r\n        this.$emit('blur', event);\r\n      },\r\n      handleCompositionStart() {\r\n        this.isComposing = true;\r\n      },\r\n      handleCompositionEnd(event) {\r\n        this.isComposing = false;\r\n        this.handleInput(event);\r\n      },\r\n      handleInput(event) {\r\n        if (this.isComposing) return;\r\n        let value = event.target.value;\r\n        window.$_XSS && (value = window.$_XSS(value));\r\n        this.reg && (value = value.replace(this.reg,''));\r\n        if (this.trim) value = value.replace(/\\s+|　/g,'');\r\n        if (this.integer) {\r\n          value = value.replace(/[^0-9|\\-]/g,'');\r\n          let _ = value.indexOf('-') == 0;\r\n          value = value.replace(/\\-/g, '');//移除所有-号\r\n          while (value.length > 1 && value.indexOf('0') == 0) value = value.substr(1);//移除多余前缀0\r\n          _ && (value = '-' + value);//加回-号\r\n        } else if (this.number) {\r\n          value = value.replace(/[^0-9|\\-|\\.]/g,'');//移除[0123456789-.]以外的字符\r\n          let _ = value.indexOf('-') == 0;\r\n          value = value.replace(/\\-/g, '');//移除所有-号\r\n          value = value.replace(/^\\./g, '').replace('.', '$#$').replace(/\\./g, '').replace('$#$', '.');//移除多余的.号\r\n          if (this.point_num !== null) {//移除多余小数位\r\n            let i = value.indexOf('.'), n = this.point_num > 0 ? (this.point_num + 1) : 0;\r\n            i != -1 && (value = value.substr(0, i + n));\r\n          }\r\n          while (value.length > 1 && value.indexOf('0') == 0 && value.indexOf('0.') != 0) value = value.substr(1);//移除多余前缀0\r\n          _ && (value = '-' + value);//加回-号\r\n        }\r\n        if ((this.integer || this.number) && this.range != null && value) {\r\n          this.range[0] !== null && ((value == '-' && this.range[0] >= 0) || (value != '-' && Number(value) < this.range[0])) && (value = this.value);\r\n          this.range[1] !== null && (value != '-' && Number(value) > this.range[1]) && (value = this.value);\r\n        }\r\n\r\n        event.target.value = value;\r\n        this.onInput && this.onInput(value);\r\n        this.$emit('input', value);\r\n        this.searchKey && storage.set(this.searchKey,value);\r\n      },\r\n      handleClick(event) {\r\n        this.$el.focus();\r\n        this.focus();\r\n        this.$emit('click',event);\r\n      },\r\n      clear() {\r\n        this.$emit('input', '');\r\n        this.$emit('change', '');\r\n        this.$emit('clear');\r\n        this.searchKey && storage.remove(this.searchKey);\r\n      },\r\n      togglePassword(){\r\n        this.ishidePassword = !this.ishidePassword;\r\n      },\r\n      handleChange(event) {\r\n        this.$emit('change', event.target.value);\r\n      }\r\n    },\r\n    mounted() {\r\n    },\r\n    watch: {\r\n      focused: function(v) {\r\n        this.$emit('focused', v);\r\n      }\r\n    },\r\n    computed: {\r\n      showClear() {\r\n        return this.clearable && !this.disabled && !this.readonly && this.value && (this.focused || this.hovering);\r\n      },\r\n      containerStyle() {\r\n        return {\r\n          borderRadius: this.radius,\r\n          height: this.height + 'px',\r\n          borderColor: this.focused ? this.theme.color : this.borderColor,\r\n          zIndex: this.focused ? this.theme.zindex() : ''\r\n        };\r\n      },\r\n      labelStyle() {\r\n        return {\r\n          minWidth: this.labelMinWidth + 'px',\r\n          maxWidth: this.labelMaxWidth + 'px',\r\n          borderRightColor: this.theme.border_color_light,\r\n          backgroundColor: this.labelColor?this.labelColor:this.theme.input_label_bg_color\r\n        };\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .container {\r\n    overflow: hidden;\r\n    vertical-align: top;\r\n    outline: none;\r\n    position: relative;\r\n    display: inline-block;\r\n    white-space: nowrap;\r\n  }\r\n  .container > * {\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .border {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n  }\r\n  /* 标题文本 */\r\n  .label {\r\n    float: left;\r\n    padding: 0 6px;\r\n    border-right-style: solid;\r\n    border-right-width: 0px;\r\n    white-space: nowrap;\r\n    user-select: none;\r\n  }\r\n  /* 输入框 */\r\n  .input {\r\n    height: 100%;\r\n    display: inline-block;\r\n    border: 0;\r\n    outline: 0;\r\n    padding: 0 8px;\r\n    background-color: #fff;\r\n  }\r\n  .input::placeholder {\r\n    color: #B0B0B0;\r\n  }\r\n  .input::-webkit-input-placeholder {\r\n    color: #B0B0B0;\r\n  }\r\n  .input:-ms-input-placeholder {\r\n    color: #B0B0B0;\r\n  }\r\n  .input::-ms-input-placeholder {\r\n    color: #B0B0B0;\r\n  }\r\n  /* 清空按钮 */\r\n  .clear {\r\n    float: right;\r\n    position: relative;\r\n    width: 0px;\r\n  }\r\n  .clear > i {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    left: -20px;\r\n    width: 20px;\r\n    font-size: 16px;\r\n    line-height: 0;\r\n  }\r\n  .clear > i:first-child {\r\n    top: 0;\r\n    background-color: #fff;\r\n    height: calc(100% - 2px);\r\n  }\r\n  /* 显示密码按钮 */\r\n  .togglePassword{\r\n    float: right;\r\n    position: relative;\r\n    width: 0px;\r\n    text-align: center;\r\n  }\r\n  .togglePassword > i {\r\n    position: absolute;\r\n    left: -35px;\r\n    width: 35px;\r\n    font-size: 18px;\r\n    line-height: 0;\r\n  }\r\n  /* 单位 */\r\n  .unit {\r\n    float: right;\r\n    padding-right: 8px;\r\n    white-space: nowrap;\r\n    background-color: #fff;\r\n    user-select: none;\r\n  }\r\n  /* 必填 */\r\n  .required {\r\n    display: flex!important;\r\n    float: right;\r\n    padding: 0 2px;\r\n    color: #f00;\r\n  }\r\n  /* 禁止操作 */\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(255, 255, 255, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60);\r\n    cursor: not-allowed;\r\n  }\r\n</style>\r\n"]}]}