{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\InputText.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\InputText.vue","mtime":1612227987644},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 使用例子\n* <InputText label=\"你想输入啥\" v-model=\"text\" @change=\"onTextChg\" unit=\"km\" clearable required/>\n* \n*  data: {text: ''},\n*  methods: {\n*    onTextChg(text) {\n*    }\n*  }\n*/\n\nexport default {\n  name: \"InputText\",\n  props: {\n    value: [String, Number,Array],                                        // 当前值(v-model)\n    label: String,                                                  // 标题文本\n    unit: String,                                                   // 单位\n    required: Boolean,                                              // 是否必填\n    disabled: Boolean,                                              // 是否可操作\n    readonly: Boolean,                                              // 是否只读\n    reg: RegExp,                                                    // 正则表达式\n    maxlength: Number,                                              // 输入的最大长度\n    password:     { type: Boolean, default: false },                // 是否是密码输入类型\n    number:       { type: Boolean, default: false },                // 是否是数字输入类型\n    clearable:    { type: Boolean, default: false },                // 是否显示可清除图标\n    autocomplete: { type: String,  default: 'off' },                // 自动补全\n    border:       { type: Boolean, default: true },                 // 是否显示边框\n    borderColor:  { type: String,  default: $_theme.border_color_light },\n    focusClass: String,\n    height:       { type: Number,  default: $_theme.inputHeight },  // 高度数值，单位是px\n    labelMinWidth:{ type: Number,  default: 10 },  \t\t  \t\t  // lable宽度最小数值，单位是px\n    labelMaxWidth:{ type: Number},  \t\t  \t\t  // lable宽度最大数值，单位是px\n    inputWidth:   { type: String,  default: '100%' },               // 输入框的宽度\n    inputStyle:   { default: null },                                // 输入框的style\n    onInput: Function,\n  },\n  data() {\n    return {\n      hovering: false,\n      focused: false,\n      isComposing: false\n    };\n  },\n  methods: {\n    focus() {\n      this.$refs.input.focus();\n    },\n    blur() {\n      this.$refs.input.blur();\n    },\n    handleFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n    },\n    handleBlur(event) {\n      this.focused = false;\n      this.$emit('blur', event);\n    },\n    handleCompositionStart() {\n      this.isComposing = true;\n    },\n    handleCompositionEnd(event) {\n      this.isComposing = false;\n      this.handleInput(event);\n    },\n    handleInput(event) {\n      if (!this.onInput && this.isComposing) return;\n      let value = event.target.value;\n      this.reg && (value = value.replace(this.reg,''));\n      this.onInput && this.onInput(value);\n      if (this.isComposing) return;\n      this.$emit('input', value);\n      this.$nextTick(this.setNativeInputValue);\n    },\n    handleClick() {\n      this.$el.focus();\n      this.focus();\n      this.$emit('click');\n    },\n    clear() {\n      this.$emit('input', '');\n      this.$emit('change', '');\n      this.$emit('clear');\n    },\n    handleChange(event) {\n      this.$emit('change', event.target.value);\n    },\n    setNativeInputValue() {\n      let input = this.$refs.input;\n      if (input && input.value !== this.nativeInputValue) {\n        input.value = this.nativeInputValue;\n      }\n    }\n  },\n  mounted() {\n    this.setNativeInputValue();\n  },\n  watch: {\n    nativeInputValue() {\n      this.setNativeInputValue();\n    },\n    focused: function(v) {\n      this.$emit('focused', v);\n    }\n  },\n  computed: {\n    nativeInputValue() {\n      return this.value === null || this.value === undefined ? '' : String(this.value);\n    },\n    showClear() {\n      return this.clearable && !this.disabled && !this.readonly && this.nativeInputValue && (this.focused || this.hovering);\n    },\n    containerStyle() {\n      return {\n        height: this.height + 'px',\n        borderColor: this.focused ? this.theme.color : this.borderColor,\n        zIndex: this.focused ? this.theme.zindex() : ''\n      };\n    },\n    labelStyle() {\n      return {\n        minWidth:this.labelMinWidth + 'px',\n        maxWidth:this.labelMaxWidth + 'px',\n        borderRightColor: this.theme.border_color_light, \n        backgroundColor: this.theme.bg_color\n      };\n    }\n  }\n};\n",null]}