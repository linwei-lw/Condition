{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Button.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Button.vue","mtime":1612227987676},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 使用例子\n* <Button type=\"primary\" icon=\"el-icon-setting\" :height=\"40\" :border=\"false\" :disabled=\"false\" @click=\"onClick\"\">点我呀笨</Button>\n*  \n*  methods: {\n*    onClick(event) {\n*      alert('窝草，还真点了！');\n*    }\n*  }\n*/\n\nexport default {\n  name: \"Button\",\n  props: {\n    type:   { type: String,  default: 'plain' },             // 风格样式 plain:朴素(用于关闭，取消等) primary:主要(用于确认，提交等) light:浅色(用于紧挨输入框边的按钮) transparent:透明样式 custom:自定义(用于窗口右上角关闭等按钮)\n    customs:{ type: Array,   default: null},                 // 自定义设置 [正常状态[背景色，边框色，文字色]，hover状态[背景色，边框色，文字色]，按下状态[背景色，边框色，文字色]]\n    border: { type: Boolean, default: true },                // 是否有边框\n    borderColor: { type: String, default: null},             // 边框颜色\n    height: { type: Number,  default: $_theme.inputHeight }, // 高度数值，单位是px\n    padding: String,\n    radius: { type: String,  default: '0px'},                // 边框圆角\n    disabled: Boolean,                                       // 是否禁用\n    icon: String,                                            // 图标样式\n    iconStyle: { default: null },\n    slotStyle: { default: null },\n  },\n  data() {\n    return {\n      hover: false,\n      down: false,\n      disabled_: this.disabled,\n      icon_: this.icon,\n    };\n  },\n  watch: {\n    disabled: function(v) {\n      this.disabled_ = v;\n      v && (this.hover = false);\n    },\n    icon: function(v) {\n      this.icon_ = v;\n    }\n  },\n  methods: {\n    handleClick(event) {\n      this.$emit('click', event);\n    },\n    setIcon(icon) {\n      this.icon_ = icon;\n    },\n    setDisabled(v) {\n      this.disabled_ = v;\n    }\n  },\n  computed: {\n    istyle() {\n      return this.$slots.default ? { marginRight: '5px', verticalAlign:'middle'} : null;\n    },\n    buttonStyle() {\n      return {\n        height: this.height + 'px',\n        padding: this.padding || ('0 ' + Math.max(this.height/2-6, 0) + 'px'),\n        borderWidth: this.border ? '1px' : '0',\n        cursor: this.disabled ? 'not-allowed' : 'pointer'\n      }\n    },\n    buttonColor() {\n      return this[this.type][this.down ? 'down' : (this.hover ? 'hover' : 'normal')];\n    },\n    plain() {\n      return {\n        down:   { backgroundColor: this.theme.bg_color, borderColor: this.borderColor || this.theme.color, color: this.theme.color },\n        hover:  { backgroundColor: '#fff', borderColor: this.borderColor || this.theme.border_color_dark, color: this.theme.color },\n        normal: { backgroundColor: '#fff', borderColor: this.borderColor || this.theme.border_color_dark, color: this.disabled ? '#707070' : null }\n      };\n    },\n    primary() {\n      return {\n        down:   { color: '#fff', borderColor: this.theme.color, backgroundColor: this.theme.color },\n        hover:  { color: '#fff', borderColor: this.theme.rgba(this.theme.color, 0.1), backgroundColor: this.theme.rgba(this.theme.color, 0.8) },\n        normal: { color: '#fff', borderColor: this.theme.color, backgroundColor: this.theme.color }\n      };\n    },\n    light() {\n      return {\n        down:   { borderColor: this.borderColor || this.theme.border_color_light, color: this.theme.color, backgroundColor: this.theme.selected_color },\n        hover:  { borderColor: this.borderColor || this.theme.border_color_light, color: this.theme.color, backgroundColor: '#fff' },\n        normal: { borderColor: this.borderColor || this.theme.border_color_light, backgroundColor: this.theme.bg_color }\n      };\n    },\n    custom() {\n      return this.customs ? {\n        down:   { backgroundColor: this.customs[2][0], borderColor: this.customs[2][1], color: this.customs[2][2] },\n        hover:  { backgroundColor: this.customs[1][0], borderColor: this.customs[1][1], color: this.customs[1][2] },\n        normal: { backgroundColor: this.customs[0][0], borderColor: this.customs[0][1], color: this.customs[0][2] },\n      } : {};\n    }\n  }\n};\n",{"version":3,"sources":["Button.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Button.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n\r\n  <button type=\"button\" :class=\"[$style.btn,type=='transparent'&&$style.transparent]\" :style=\"[type!='transparent'&&buttonColor, buttonStyle, {borderRadius: radius}]\"\r\n    @mouseenter=\"!disabled_&&(hover=true)\" @mouseleave=\"hover=false\" \r\n    @mousedown=\"!disabled_&&(down=true);$emit('mousedown',$event)\" @mouseup=\"!disabled_&&(down=false);$emit('mouseup',$event)\" @click=\"!disabled_&&handleClick($event)\">\r\n    <i :class=\"icon_\" v-if=\"icon_\" style=\"font-size:16px;\" :style=\"[istyle,iconStyle]\"></i>\r\n    <span v-if=\"$slots.default\" :style=\"slotStyle\" style=\"display:inline-block;margin-top:-1px;vertical-align:middle;\"><slot></slot></span>\r\n    <div v-if=\"disabled_\" :class=\"$style.disabled\" :style=\"[border && {left:'-1px',top:'-1px',width:'calc(100% + 2px)',height:'calc(100% + 2px)'}]\"/>\r\n  </button>\r\n\r\n</template>\r\n\r\n<script>\r\n  /*\r\n  * 使用例子\r\n  * <Button type=\"primary\" icon=\"el-icon-setting\" :height=\"40\" :border=\"false\" :disabled=\"false\" @click=\"onClick\"\">点我呀笨</Button>\r\n  *  \r\n  *  methods: {\r\n  *    onClick(event) {\r\n  *      alert('窝草，还真点了！');\r\n  *    }\r\n  *  }\r\n  */\r\n\r\n  export default {\r\n    name: \"Button\",\r\n    props: {\r\n      type:   { type: String,  default: 'plain' },             // 风格样式 plain:朴素(用于关闭，取消等) primary:主要(用于确认，提交等) light:浅色(用于紧挨输入框边的按钮) transparent:透明样式 custom:自定义(用于窗口右上角关闭等按钮)\r\n      customs:{ type: Array,   default: null},                 // 自定义设置 [正常状态[背景色，边框色，文字色]，hover状态[背景色，边框色，文字色]，按下状态[背景色，边框色，文字色]]\r\n      border: { type: Boolean, default: true },                // 是否有边框\r\n      borderColor: { type: String, default: null},             // 边框颜色\r\n      height: { type: Number,  default: $_theme.inputHeight }, // 高度数值，单位是px\r\n      padding: String,\r\n      radius: { type: String,  default: '0px'},                // 边框圆角\r\n      disabled: Boolean,                                       // 是否禁用\r\n      icon: String,                                            // 图标样式\r\n      iconStyle: { default: null },\r\n      slotStyle: { default: null },\r\n    },\r\n    data() {\r\n      return {\r\n        hover: false,\r\n        down: false,\r\n        disabled_: this.disabled,\r\n        icon_: this.icon,\r\n      };\r\n    },\r\n    watch: {\r\n      disabled: function(v) {\r\n        this.disabled_ = v;\r\n        v && (this.hover = false);\r\n      },\r\n      icon: function(v) {\r\n        this.icon_ = v;\r\n      }\r\n    },\r\n    methods: {\r\n      handleClick(event) {\r\n        this.$emit('click', event);\r\n      },\r\n      setIcon(icon) {\r\n        this.icon_ = icon;\r\n      },\r\n      setDisabled(v) {\r\n        this.disabled_ = v;\r\n      }\r\n    },\r\n    computed: {\r\n      istyle() {\r\n        return this.$slots.default ? { marginRight: '5px', verticalAlign:'middle'} : null;\r\n      },\r\n      buttonStyle() {\r\n        return {\r\n          height: this.height + 'px',\r\n          padding: this.padding || ('0 ' + Math.max(this.height/2-6, 0) + 'px'),\r\n          borderWidth: this.border ? '1px' : '0',\r\n          cursor: this.disabled ? 'not-allowed' : 'pointer'\r\n        }\r\n      },\r\n      buttonColor() {\r\n        return this[this.type][this.down ? 'down' : (this.hover ? 'hover' : 'normal')];\r\n      },\r\n      plain() {\r\n        return {\r\n          down:   { backgroundColor: this.theme.bg_color, borderColor: this.borderColor || this.theme.color, color: this.theme.color },\r\n          hover:  { backgroundColor: '#fff', borderColor: this.borderColor || this.theme.border_color_dark, color: this.theme.color },\r\n          normal: { backgroundColor: '#fff', borderColor: this.borderColor || this.theme.border_color_dark, color: this.disabled ? '#707070' : null }\r\n        };\r\n      },\r\n      primary() {\r\n        return {\r\n          down:   { color: '#fff', borderColor: this.theme.color, backgroundColor: this.theme.color },\r\n          hover:  { color: '#fff', borderColor: this.theme.rgba(this.theme.color, 0.1), backgroundColor: this.theme.rgba(this.theme.color, 0.8) },\r\n          normal: { color: '#fff', borderColor: this.theme.color, backgroundColor: this.theme.color }\r\n        };\r\n      },\r\n      light() {\r\n        return {\r\n          down:   { borderColor: this.borderColor || this.theme.border_color_light, color: this.theme.color, backgroundColor: this.theme.selected_color },\r\n          hover:  { borderColor: this.borderColor || this.theme.border_color_light, color: this.theme.color, backgroundColor: '#fff' },\r\n          normal: { borderColor: this.borderColor || this.theme.border_color_light, backgroundColor: this.theme.bg_color }\r\n        };\r\n      },\r\n      custom() {\r\n        return this.customs ? {\r\n          down:   { backgroundColor: this.customs[2][0], borderColor: this.customs[2][1], color: this.customs[2][2] },\r\n          hover:  { backgroundColor: this.customs[1][0], borderColor: this.customs[1][1], color: this.customs[1][2] },\r\n          normal: { backgroundColor: this.customs[0][0], borderColor: this.customs[0][1], color: this.customs[0][2] },\r\n        } : {};\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .btn {\r\n    position: relative;\r\n    display: inline-block;\r\n    white-space: nowrap;\r\n    text-align: center;\r\n    border-style: solid;\r\n    outline: 0;\r\n    margin: 0;\r\n    user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    -moz-user-select: none;\r\n  }\r\n  .transparent {\r\n    color:#fff;\r\n    font-size: 16px;\r\n    background: transparent;\r\n    border: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n  }\r\n  .transparent:hover {\r\n    background-color: rgba(255,255,255,0.2);\r\n  }\r\n  .transparent:active {\r\n    background-color:rgba(0,0,0,0.2);\r\n  }\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(235, 235, 235, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60); \r\n    cursor: not-allowed;\r\n  }\r\n</style>\r\n"]}]}