{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Chart\\BarChart.vue?vue&type=style&index=0&module=true&lang=css&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Chart\\BarChart.vue","mtime":1648027442532},{"path":"D:\\cdRule\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.container {\n  background-color: #fff;\n  width: 100%;\n  height: 100%;\n}\n.border {\n  border-style: solid;\n  border-width: 1px;\n}\n.disabled {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  background-color: rgba(235, 235, 235, 0.6);\n  opacity: 0.6;\n  filter: alpha(opacity=60); \n  cursor: not-allowed;\n}\n",{"version":3,"sources":["BarChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BarChart.vue","sourceRoot":"src/components/Chart","sourcesContent":["<template>\r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"{borderColor:borderColor}\"></div>\r\n</template>\r\n\r\n<script>\r\n\r\n  import { getColor } from './Colors.js';\r\n\r\n  export default {\r\n    name: \"BarChart\",\r\n    props: {\r\n      border: { type: Boolean, default: true },                // 是否有边框\r\n      borderColor: { type: String, default: $_theme.border_color_dark },\r\n      disabled: Boolean,                                       // 是否禁用\r\n      tooltipFormatter: [Function, String],\r\n      yaxisLabelFormatter: [Function, String],\r\n      xaxisLabelFormatter: [Function, String],\r\n      xaxisField: String,\r\n      seriesFields: Array,\r\n      data: Array,\r\n      chartType:{ default: 'bar' },\r\n      animation:       { default:true, type: Boolean },\r\n      xAxisBoundaryGap:{ default:false,type: Boolean },\r\n      show_x_axisLabel:{ default:true, type: Boolean },\r\n      show_y_axisLabel:{ default:true, type: Boolean },\r\n      show_x_axisLine: { default:true, type: Boolean },\r\n      show_y_axisLine: { default:true, type: Boolean },\r\n      show_x_axisTick: { default:true, type: Boolean },\r\n      show_y_axisTick: { default:true, type: Boolean },\r\n      show_y_splitLine:{ default:true, type: Boolean },\r\n      gridOption:{ default:() => { return {left: 10, right: 10, bottom: 10, top: 15, containLabel: true} }, type:Object },\r\n      title: { type:String },\r\n      itemStyle: { type:Object }\r\n    },\r\n    watch: {\r\n      data: function(v) {\r\n        this.setData(v);\r\n      },\r\n    },\r\n    mounted() {\r\n      let series = [this._getSerieOption(0)];\r\n      if (this.seriesFields && this.seriesFields.length > 1) {\r\n        for (let i=1; i<this.seriesFields.length; i++) {\r\n          series.push(this._getSerieOption(i));\r\n        }\r\n      }\r\n      let option = {\r\n        grid: this.gridOption,\r\n        tooltip: { trigger: 'axis', formatter: this.tooltipFormatter, axisPointer: {type:'shadow', animation: false, label: { show:true, backgroundColor:'#6F6F6F' }}},\r\n        animation: this.animation,\r\n        xAxis: {\r\n          type: 'category',\r\n          data: [],\r\n          boundaryGap: this.xAxisBoundaryGap,\r\n          axisLabel: { show: this.show_x_axisLabel, color: \"#232323\", formatter: this.xaxisLabelFormatter },\r\n          axisLine: { show: this.show_x_axisLine, lineStyle: { color: this.theme.border_color_dark } },\r\n          axisTick: { show: this.show_x_axisTick }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          axisLabel: { show: this.show_y_axisLabel, color: \"#232323\", formatter: this.yaxisLabelFormatter },\r\n          splitLine: { show: this.show_y_splitLine, lineStyle: { color:this.theme.border_color_light, type:'dashed' } },\r\n          axisLine:  { show: this.show_y_axisLine,  lineStyle: { color: this.theme.border_color_dark } },\r\n          axisTick:  { show: this.show_y_axisTick }\r\n        },\r\n        series: series,\r\n        title:{text:this.title,x:'center'}\r\n      };\r\n      this._chart = echarts.init(this.$el);\r\n      this._chart.setOption(option);\r\n      this.data && this.data.length && this.setData(this.data);\r\n      addResizeListener(this.$el, this._chart.resize);\r\n    },\r\n    methods: {\r\n      getChart() {\r\n        return this._chart;\r\n      },\r\n      setData(data) {\r\n        let xAxisData = [], series = [];\r\n        if (!this.seriesFields || this.seriesFields.length == 0) {\r\n          series = [{data:data}];\r\n          if (this.xaxisField) {\r\n            for (let i=0,len=data.length,item; i<len; i++) {\r\n              xAxisData.push(item[this.xaxisField]);\r\n            }\r\n          }\r\n        } else if (this.seriesFields.length == 1) {\r\n          let seriesData = [], sfield = this.seriesFields[0];\r\n          series = [{data:seriesData}];\r\n          for (let i=0,len=data.length,item; i<len; i++) {\r\n            item = data[i];\r\n            seriesData.push(item[sfield]);\r\n            this.xaxisField && xAxisData.push(item[this.xaxisField]);\r\n          }\r\n        } else {\r\n          this.seriesFields.forEach(s => series.push({data:[]}));\r\n          for (let i=0,len=data.length,item; i<len; i++) {\r\n            item = data[i];\r\n            this.xaxisField && xAxisData.push(item[this.xaxisField]);\r\n            for (let j=0,jlen=this.seriesFields.length; j<jlen; j++) {\r\n              series[j].data.push(item[this.seriesFields[j]]);\r\n            }\r\n          }\r\n        }\r\n        this._chart && this._chart.setOption({ xAxis: [{data: xAxisData}], series: series});\r\n      },\r\n      _getSerieOption(i) {\r\n        return {\r\n          type: this.chartType,\r\n          data: [],\r\n          showSymbol: false,\r\n          hoverAnimation: false,\r\n          color: [getColor(i)],\r\n          smooth: true,\r\n          itemStyle:this.itemStyle,\r\n          barWidth: '60%'\r\n        };\r\n      }\r\n    },\r\n    \r\n    beforeDestroy() {\r\n      this._chart && removeResizeListener(this.$el, this._chart.resize);\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .container {\r\n    background-color: #fff;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  .border {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n  }\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(235, 235, 235, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60); \r\n    cursor: not-allowed;\r\n  }\r\n</style>\r\n"]}]}