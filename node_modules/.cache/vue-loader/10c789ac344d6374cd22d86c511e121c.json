{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\InputSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\InputSelect.vue","mtime":1612227987597},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  /*\n  * 使用例子\n  * <InputSelect label=\"你要选择哪一个\" :options=\"[{label:'吃饭',value:1},{label:'睡觉',value:2}]\" v-model=\"like\" @change=\"onSelectChg\"/>\n  * \n  *  data: {like: 1},\n  *  methods: {\n  *    onSelectChg(value, item) {// value值是1或2, item是{label:'吃饭',value:1}\n  *    }\n  *  }\n  */\n  \n  import { domLeftTop } from '@/components/util/Dom.js';\n  import { arrayFindItem } from '@/common/util/Arrays.js';\n  import { arrayRemoveValue } from '@/common/util/Arrays.js';\n  import { arrayGetValue } from '@/common/util/Arrays.js';\n\n  export default {\n    name: \"InputSelect\",\n    props: {\n      label: String,                                                      // 标题文本\n      value: { default: null},                                            // 当前值(v-model)\n      options: Array,                                                     // 多个选项 [{lable:xxx,value:xxx}...]\n      labelField: { type: String,  default: 'label' },                    // 显示字段\n      valueField: { type: String,  default: 'value' },                    // 值字段\n      checkbox:   { type: Boolean, default: false   },                    // 是否多选\n      showCheckAll: { type: Boolean, default: true  },                    // 是否显示全选\n      splitter:   { type: String,  default: null    },                    // 如果是多选，而value是字符串\"1,2,3,4\" 则需要定义拆分符为逗号\n      placeholder: String,\n      unit: String,                                                       // 单位\n      required:  Boolean,                                                 // 是否显示必填\n      disabled:  Boolean,                                                 // 是否可操作\n      clearable: Boolean,                                                 // 是否显示可清除图标\n      showArrow:  { type: Boolean, default: true },                       // 是否显示箭头图标\n      border:     { type: Boolean, default: true },                       // 是否显示边框\n      borderColor:{ type: String,  default: $_theme.border_color_light },\n      focusColor: { type: String,  default: $_theme.color },\n      height:     { type: Number,  default: $_theme.inputHeight },        // 高度数值，单位是px\n      maxListNum: { type: Number,  default: 10 },                         // 下拉框最多显示10个选项，多出10个选项会出现滚动条\n      afterOpen: Function,\n      beforeClose: Function,\n\t    labelMinWidth:{ type: Number,  default: 10 },  \t\t  \t              // lable宽度最小数值，单位是px\n      inputWidth:   { type: String,  default: null },                     // 输入框的宽度\n      contentStyle: { default: null},\n    },\n    data() {\n      return {\n        selectedItem: null,\n        hoverItem: null,\n        focused: false,\n        selectorHover: false,\n        createDropDown: false,\n        showDropDown: false,\n        dropdownStyle: null,\n        checkAllStyle: null,\n        checkedItems: null,\n        checkMap: {},\n        checkAll: false,\n      };\n    },\n    watch: {\n      value: function(v) {\n        if (this._myself) return this._myself=false;\n        this.checkbox ? this.setCheckedItems(v) : this.setSelectedItem(v);\n      },\n      focused: function(v) {\n        this.$emit('focused', v);\n      }\n    },\n    mounted() {\n      if (this.value === null || this.value == undefined) return;\n      this.checkbox ? this.setCheckedItems(this.value) : this.setSelectedItem(this.value);\n    },\n    methods: {\n      setSelectedItem(v) {\n        if (v === null || v == undefined) return this.selectedItem = null;\n        if (!this.selectedItem || this.selectedItem[this.valueField] != v) {\n          this.selectedItem = arrayFindItem(this.options, this.valueField, v);\n        }\n      },\n      toggleDropDown(event) {// 显示或隐藏选项列表\n        if (!this.options || this.options.length == 0) return;\n        this.focused = true;\n        if (this.showDropDown) return this.hideDropDown(event);\n        this.showDropDown = this.createDropDown = true;\n        \n        // 自动判断是显示在下面还是上面\n        let {left, top} = domLeftTop(this.$refs.selector), listHeight = 30 * Math.min(this.maxListNum, this.options.length) + 1 + (this.border ? 0 : 1);\n        let this_height = this.$el.offsetHeight, isbottom = true;\n        let down = document.documentElement.clientHeight - top - this_height;\n        if (down > listHeight) {// 下面空间充足，显示在下面\n          top += this_height - (this.border ? 1 : 0);\n        } else if (top > listHeight) {// 上面空间足够，显示在上面\n          top -= listHeight + (this.border ? 1 : 0);\n          isbottom = false;\n        } else {// 上面和下面的空间都不够\n          if (down > top) {// 下面的空间大，显示在下面\n            listHeight = down - 5;\n            top += this_height - (this.border ? 1 : 0);\n          } else {// 上面的空间大，显示在上面\n            listHeight = top - 5;\n            top -= listHeight + (this.border ? 1 : 0);\n            isbottom = false;\n          }\n        }\n        this.border && (left--);\n        this.dropdownStyle = {\n          borderColor: this.borderColor,\n          zIndex: window.$_theme.zindex(),\n          top: top + 'px',\n          left: left + 'px',\n          height: listHeight + 'px',\n          width: (this.$el.offsetWidth - this.$refs.selector.offsetLeft) + 'px'\n        };\n        this.border && (this.dropdownStyle[isbottom?'border-top-width':'border-bottom-width'] = 0);\n        if (this.checkbox && this.showCheckAll) {\n          this.checkAllStyle = {\n            borderColor: this.borderColor,\n            zIndex: window.$_theme.zindex(),\n            top: isbottom ? ((top+listHeight-1) + 'px') : ((top-30+1) + 'px'),\n            left: left + 'px',\n            width: this.dropdownStyle.width,\n          };\n        }\n        this.afterOpen && this.$nextTick(this.afterOpen);\n        document.addEventListener('click', this.onMouseClick);\n      },\n      onMouseClick(event) {\n        !this.$el.contains(event.target) && this.hideDropDown(event);\n      },\n      hideDropDown(event) {// 隐藏弹出的选项列表\n        if (this.beforeClose && this.beforeClose(event) === false) return;\n        this.showDropDown = false;\n        document.removeEventListener('click', this.onMouseClick);\n      },\n      onSelectItem(item,event) {\n        if (this.checkbox) return;\n        this.selectorHover = false;\n        if (!this.selectedItem || this.selectedItem[this.valueField] !== item[this.valueField]) {\n          let old = this.value, value = item[this.valueField];\n          this.selectedItem = item;\n          this._myself = true;\n          this.$emit('input',  value);\n          this.$emit('change', value, item, old);\n        }\n        this.hideDropDown(event);\n      },\n      onCheck(item, checked) {\n        this.checkMap[item[this.valueField]] = checked;\n        this.checkedItems = this.checkedItems || [];\n        checked ? this.checkedItems.push(item) : arrayRemoveValue(this.checkedItems, this.valueField, item[this.valueField]);\n        let values = arrayGetValue(this.checkedItems, this.valueField);\n        if (this.splitter) values = values.join(this.splitter);\n        this._myself = true;\n        let oldValue = this.value;\n        this.$emit('input',  values);\n        this.$emit('change', {value:values,text:this.text,item:item,checked:checked,oldValue:oldValue});\n      },\n      onCheckAll(checked) {\n        if (!checked) {\n          this.checkMap = {};\n          this.checkedItems = null;\n          let old = this.value;\n          this._myself = true;\n          this.$emit('input', null);\n          this.$emit('change', {value:null,text:null,oldValue:old});\n        } else {\n          this.checkedItems = [...this.options];\n          let values = arrayGetValue(this.checkedItems, this.valueField);\n          let map = {};\n          values.forEach(v => map[v] = true);\n          this.checkMap = map;\n          if (this.splitter) values = values.join(this.splitter);\n          this._myself = true;\n          let oldValue = this.value;\n          this.$emit('input',  values);\n          this.$emit('change', {value:values,text:this.text,checked:checked,oldValue:oldValue});\n        }\n      },\n      setCheckedItems(v) {\n        if (v === null || v == undefined) {\n          this.checkMap = {};\n          this.checkedItems = null;\n          return;\n        }\n        let values = Array.isArray(v) ? v : (this.splitter ? v.split(this.splitter) : []);\n        let map = {}, list = [], item;\n        values.forEach(value => {\n          map[value] = true;\n          item = arrayFindItem(this.options, this.valueField, value);\n          item && list.push(item);\n        });\n        this.checkMap = map;\n        this.checkedItems = list;\n      },\n      getSelectedItem() {\n        return this.selectedItem;\n      },\n      getCheckedItems() {\n        return this.checkedItems;\n      },\n      clear() {\n        this.showDropDown && this.hideDropDown();\n        if (this.checkbox) {\n          this.checkedItems = null;\n          this.checkMap = {};\n        } else {\n          this.selectedItem = null;\n        }\n        let old = this.value;\n        this._myself = true;\n        this.$emit('input', null);\n        this.checkbox ? this.$emit('change', {value:null,text:null,checked:false,oldValue:old}) : this.$emit('change', null, old);\n      },\n      optionItemStyle(item, index) {\n        if (!this.showDropDown) return null;\n        if (item == this.hoverItem) {\n          return { backgroundColor: this.theme.list_hover_color };\n        } else if (this.selectedItem && this.selectedItem[this.valueField] === item[this.valueField]) {\n          return { backgroundColor: this.theme.selected_color };\n        } else {\n          return { backgroundColor: this.theme.alternate_colors[index % 2] };\n        }\n      }\n    },\n    computed: {\n      text: function() {\n        if (!this.checkbox) return this.selectedItem ? this.selectedItem[this.labelField] : null;\n        if (!this.checkedItems || this.checkedItems.length == 0) return null;\n        return arrayGetValue(this.checkedItems, this.labelField).join(',');\n      },\n      showClear() {// 判断是否要显示清除按钮\n        return this.clearable && this.selectorHover && this.text;\n      },\n      containerStyle() {\n        return {\n          height: this.height + 'px',\n          borderColor: this.focused ? this.focusColor : this.borderColor,\n          zIndex: this.focused ? this.theme.zindex() : ''\n        }\n      },\n      lineHeight() {// 获取除边框外的高度\n        return this.height - (this.border ? 2 : 0);\n      },\n      labelStyle() {\n        return {\n          minWidth: this.labelMinWidth + 'px',\n          borderRightColor: this.theme.border_color_light, \n          backgroundColor: this.theme.bg_color\n        };\n      }\n    }\n  };\n",null]}