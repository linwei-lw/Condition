{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\InputTSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\InputTSelect.vue","mtime":1668755994044},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n/*\r\n* 使用例子\r\n* <InputTSelect label=\"你要选择哪一个\" :options=\"[{label:'吃饭',value:1},{label:'睡觉',value:2}]\" v-model=\"like\" @change=\"onSelectChg\"/>\r\n*\r\n*  data: {like: 1},\r\n*  methods: {\r\n*    onSelectChg(value, item) {// value值是1或2, item是{label:'吃饭',value:1}\r\n*    }\r\n*  }\r\n*/\r\nimport { domLeftTop } from '@/components/util/Dom.js';\r\nimport { arrayFindItem } from '@/common/util/Arrays.js';\r\nimport { arrayRemoveValue } from '@/common/util/Arrays.js';\r\nimport { arrayGetValue } from '@/common/util/Arrays.js';\r\nimport storage from '@/common/cache/Storage.js';\r\n\r\nexport default {\r\n  name: \"InputTSelect\",\r\n  props: {\r\n    label: String,                                                      // 标题文本\r\n    value: { default: null },                                           // 当前值(v-model)\r\n    options: Array,                                                     // 多个选项 [{lable:xxx,value:xxx}...]\r\n    labelField: { type: String, default: 'label' },                     // 显示字段\r\n    valueField: { type: String, default: 'value' },                     // 值字段\r\n    checkbox: { type: Boolean, default: false },                        // 是否多选\r\n    showCheckAll: { type: Boolean, default: true },                     // 是否显示全选\r\n    splitter: { type: String, default: null },                          // 如果是多选，而value是字符串\"1,2,3,4\" 则需要定义拆分符为逗号\r\n    placeholder: String,\r\n    unit: String,                                                       // 单位\r\n    required: Boolean,                                                  // 是否显示必填\r\n    disabled: Boolean,                                                  // 是否可操作\r\n    clearable: Boolean,                                                 // 是否显示可清除图标\r\n    focusable: { type: Boolean, default: true },                        // 是否可focus\r\n    showArrow: { type: Boolean, default: true },                        // 是否显示箭头图标\r\n    border: { type: Boolean, default: true },                           // 是否显示边框\r\n    borderColor: { type: String, default: $_theme.border_color_light },\r\n    radius: { type: String,  default: $_theme.input_radius},            // 边框圆角\r\n    focusColor: { type: String, default: $_theme.color },\r\n    height: { type: Number, default: $_theme.inputHeight },             // 高度数值，单位是px\r\n    maxListNum: { type: Number, default: 10 },                          // 下拉框最多显示10个选项，多出10个选项会出现滚动条\r\n    afterOpen: Function,\r\n    beforeClose: Function,\r\n    labelMinWidth: { type: Number, default: 10 },  \t\t  \t              // lable宽度最小数值，单位是px\r\n    inputWidth: { type: String, default: null },                        // 输入框的宽度\r\n    dropdownWidth: { type: String, default: null },                     // 选择列表的宽度\r\n    contentStyle: { default: null },\r\n    listStyle: { default: null },\r\n    labelColor: { type: String, default: null },                        // lable颜色\r\n    selectedColor: { type: String, default: null },                     // 选项选中的颜色\r\n    searchable: { type: Boolean, default: false },                      // 是否显示搜索栏\r\n    isColorBlock: { type: Boolean, default: false },                    // 是否显示色块\r\n    searchKey: { typeof: String, default: null },\r\n    autocomplete:   { type: String,  default: 'off' },                // 自动补全\r\n  },\r\n  data() {\r\n    return {\r\n      selectedItem: null,\r\n      hoverItem: null,\r\n      focused: false,\r\n      selectorHover: false,\r\n      createDropDown: false,\r\n      showDropDown: false,\r\n      dropdownStyle: null,\r\n      checkedItems: null,\r\n      checkMap: {},\r\n      checkAll: false,\r\n      searchValue: null,\r\n      searchOption: [],\r\n      showUl: false,\r\n      listMaxHeight: 0,\r\n    };\r\n  },\r\n  watch: {\r\n    value: function (v) {\r\n      if (this._myself) return this._myself = false;\r\n      this.checkbox ? this.setCheckedItems(v) : this.setSelectedItem(v);\r\n    },\r\n    focused: function (v) {\r\n      this.$emit('focused', v);\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.value === null || this.value == undefined) return;\r\n    this.checkbox ? this.setCheckedItems(this.value) : this.setSelectedItem(this.value);\r\n  },\r\n  methods: {\r\n    setSelectedItem(v) {\r\n      this.inupttext=v\r\n      if (v === null || v == undefined) return this.selectedItem = null;\r\n      if (!this.selectedItem || this.selectedItem[this.valueField] != v) {\r\n        this.selectedItem = arrayFindItem(this.options, this.valueField, v)||v;\r\n      }\r\n    },\r\n    toggleDropDown(event) {// 显示或隐藏选项列表\r\n      if (!this.options || this.options.length == 0) return;\r\n      this.focused = true;\r\n      if (this.showDropDown) return this.hideDropDown(event);\r\n      this.showDropDown = this.createDropDown = true;\r\n\r\n      // 自动判断是显示在下面还是上面\r\n      let { left, top } = domLeftTop(this.$refs.selector), isbottom = true, listHeight = 30 * Math.min(this.maxListNum, this.options.length) + 1 + (this.border ? 0 : 1);\r\n      let this_height = this.$el.offsetHeight;\r\n      let down = document.documentElement.clientHeight - top - this_height;\r\n      if (down > listHeight) {// 下面空间充足，显示在下面\r\n        top += this_height - (this.border ? 1 : 0);\r\n      } else if (top > listHeight) {// 上面空间足够，显示在上面\r\n        top -= listHeight + (this.border ? 1 : 0);\r\n        isbottom = false;\r\n      } else {// 上面和下面的空间都不够\r\n        if (down > top) {// 下面的空间大，显示在下面\r\n          listHeight = down - 5;\r\n          top += this_height - (this.border ? 1 : 0);\r\n        } else {// 上面的空间大，显示在上面\r\n          listHeight = top - 5;\r\n          top -= listHeight + (this.border ? 1 : 0);\r\n          isbottom = false;\r\n        }\r\n      }\r\n      this.listMaxHeight = listHeight;\r\n      this.border && (left--);\r\n      this.dropdownStyle = {\r\n        borderColor: this.borderColor,\r\n        zIndex: window.$_theme.zindex(),\r\n        top: top + 'px',\r\n        left: left + 'px',\r\n        // marginLeft: (this.$refs.selector.offsetLeft) + 'px',\r\n        // marginTop: isbottom ? this.border ? '1px' : '0' : '0',\r\n        width: this.dropdownWidth || ((this.$el.offsetWidth - this.$refs.selector.offsetLeft - (this.border?1:0)) + 'px')\r\n      };\r\n\r\n      // !isbottom && this.$nextTick(() => this.dropdownStyle.marginTop = -(this.$refs.dropdown.offsetHeight+this.$el.offsetHeight+(this.border?-1:0)) + 'px');\r\n      this.border && (this.dropdownStyle[isbottom ? 'border-top-width' : 'border-bottom-width'] = 0);\r\n      this.afterOpen && this.$nextTick(this.afterOpen);\r\n      document.addEventListener('click', this.onMouseClick);\r\n    },\r\n    onMouseClick(event) {\r\n      !this.$el.contains(event.target) && this.hideDropDown(event);\r\n    },\r\n    handleFocus(event) {\r\n      this.focused = true;\r\n      this.$emit('focus', event);\r\n    },\r\n    handleBlur(event) {\r\n      this.focused = false;\r\n      this.$emit('blur', event);\r\n    },\r\n    hideDropDown(event) {// 隐藏弹出的选项列表\r\n      if (this.beforeClose && this.beforeClose(event) === false) return false;\r\n      this.showDropDown = false;\r\n      document.removeEventListener('click', this.onMouseClick);\r\n      return true;\r\n    },\r\n    handleInput(event) {\r\n      let searchOption = []\r\n      this.searchValue = event.target.value;\r\n      this.searchValue = this.searchValue.trim();\r\n      this.$refs.clearBtn.style.display = (this.searchValue) ? '' : 'none';\r\n      this.options.forEach(el => {\r\n        if (el[this.labelField].indexOf(this.searchValue) != -1) {\r\n          searchOption.push(el);\r\n        }\r\n      })\r\n      this.searchOption = searchOption;\r\n    },\r\n    handleInput2(event){\r\n      let value=event.target.value;\r\n      this.inupttext=value\r\n      this.$emit('input', value);\r\n    },\r\n    onSelectItem(item, event) {\r\n      if (this.checkbox) return;\r\n      this.selectorHover = false;\r\n      if (!this.selectedItem || this.selectedItem[this.valueField] !== item[this.valueField]) {\r\n        let old = this.value, value = item[this.valueField];\r\n        this.selectedItem = item;\r\n        this._myself = true;\r\n        this.$emit('input', value);\r\n        this.$emit('change', value, item, old);\r\n        this.searchKey && storage.set(this.searchKey, value);\r\n      }\r\n      this.hideDropDown(event);\r\n      // if (!this.hideDropDown(event) && !this.dropdownWidth) {\r\n      //   this.$nextTick(()=>this.dropdownStyle.width = ((this.$el.offsetWidth - this.$refs.selector.offsetLeft - (this.border?1:0)) + 'px'));\r\n      // }\r\n    },\r\n    onCheck(item, checked) {\r\n      this.onBeforeChange(this.checkMap, this.checkedItems);\r\n      this.checkMap[item[this.valueField]] = checked;\r\n      this.checkedItems = this.checkedItems || [];\r\n      checked ? this.checkedItems.push(item) : arrayRemoveValue(this.checkedItems, this.valueField, item[this.valueField]);\r\n      let values = arrayGetValue(this.checkedItems, this.valueField);\r\n      if (this.splitter) values = values.join(this.splitter);\r\n      this._myself = true;\r\n      let oldValue = this.value;\r\n      this.$emit('input', values);\r\n      this.$emit('change', { value: values, text: this.text, item: item, checked: checked, oldValue: oldValue });\r\n      this.searchKey && storage.set(this.searchKey, values);\r\n      this.checkAll=this.options.length==values.length&&true||false;\r\n    },\r\n    onBeforeChange(value1, value2) {\r\n      this.$emit('onBeforechange', value1, value2)\r\n    },\r\n    onCheckAll(checked) {\r\n      if (!checked) {\r\n        this.checkMap = {};\r\n        this.checkedItems = null;\r\n        let old = this.value;\r\n        this._myself = true;\r\n        this.$emit('input', null);\r\n        this.$emit('change', { value: null, text: null, oldValue: old });\r\n        this.searchKey && storage.remove(this.searchKey);\r\n      } else {\r\n        this.checkedItems = [...this.options];\r\n        let values = arrayGetValue(this.checkedItems, this.valueField);\r\n        let map = {};\r\n        values.forEach(v => map[v] = true);\r\n        this.checkMap = map;\r\n        if (this.splitter) values = values.join(this.splitter);\r\n        this._myself = true;\r\n        let oldValue = this.value;\r\n        this.$emit('input', values);\r\n        this.$emit('change', { value: values, text: this.text, checked: checked, oldValue: oldValue });\r\n        this.searchKey && storage.set(this.searchKey, values);\r\n      }\r\n    },\r\n    setCheckedItems(v) {\r\n      if (v === null || v == undefined) {\r\n        this.checkMap = {};\r\n        this.checkedItems = null;\r\n        return;\r\n      }\r\n      let values = Array.isArray(v) ? v : (this.splitter ? v.split(this.splitter) : []);\r\n      let map = {}, list = [], item;\r\n      values.forEach(value => {\r\n        map[value] = true;\r\n        item = arrayFindItem(this.options, this.valueField, value);\r\n        item && list.push(item);\r\n      });\r\n      this.checkMap = map;\r\n      this.checkedItems = list;\r\n      this.checkAll=this.options.length==values.length&&true||false;\r\n    },\r\n    getSelectedItem() {\r\n      return this.selectedItem;\r\n    },\r\n    getCheckedItems() {\r\n      return this.checkedItems;\r\n    },\r\n    clear() {\r\n      this.showDropDown && this.hideDropDown();\r\n      if (this.checkbox) {\r\n        this.checkedItems = null;\r\n        this.checkMap = {};\r\n      } else {\r\n        this.selectedItem = null;\r\n      }\r\n      let old = this.value;\r\n      this._myself = true;\r\n      this.inupttext=null;\r\n      this.$emit('input', null);\r\n      this.searchKey && storage.remove(this.searchKey);\r\n      this.checkbox ? this.$emit('change', { value: null, text: null, checked: false, oldValue: old }) : this.$emit('change', null, old);\r\n    },\r\n    optionItemStyle(item, index) {\r\n      if (!this.showDropDown) return null;\r\n      if (item == this.hoverItem) {\r\n        return { backgroundColor: this.theme.list_hover_color };\r\n      } else if (this.selectedItem && this.selectedItem[this.valueField] === item[this.valueField]) {\r\n        return { backgroundColor: this.selectedColor ? this.selectedColor : this.theme.selected_color };\r\n      } else {\r\n        return { backgroundColor: this.theme.alternate_colors[index % 2] };\r\n      }\r\n    },\r\n    handleClick() {\r\n      this.showUl = true;\r\n    },\r\n    clearSearch() {\r\n      this.searchValue = null;\r\n      this.searchOption = [];\r\n      this.$refs.clearBtn.style.display = 'none';\r\n    },\r\n    ClickItem(item, event) {\r\n      this.showUl = false;\r\n      this.onSelectItem(item, event)\r\n      if (this.checkbox) {\r\n        this.onCheck(item, true)\r\n      }\r\n\r\n    },\r\n  },\r\n  computed: {\r\n    text: function () {\r\n      let text;\r\n      if (!this.checkbox){ text= this.selectedItem ? this.selectedItem[this.labelField] : null;}\r\n      else if (!this.checkedItems || this.checkedItems.length == 0){text=null}\r\n      else{text=arrayGetValue(this.checkedItems, this.labelField).join(',');}\r\n      return text||this.inupttext\r\n    },\r\n    showClear() {// 判断是否要显示清除按钮\r\n      return this.clearable && this.selectorHover && this.text;\r\n    },\r\n    containerStyle() {\r\n      return {\r\n        borderRadius: this.radius,\r\n        height: this.height + 'px',\r\n        borderColor: (this.focused && this.focusable) ? this.focusColor : this.borderColor,\r\n        zIndex: this.focused ? this.theme.zindex() : ''\r\n      };\r\n    },\r\n    lineHeight() {// 获取除边框外的高度\r\n      return this.height - (this.border ? 2 : 0);\r\n    },\r\n    labelStyle() {\r\n      return {\r\n        minWidth: this.labelMinWidth + 'px',\r\n        borderRightColor: this.theme.border_color_light,\r\n        backgroundColor: this.labelColor ? this.labelColor : this.theme.input_label_bg_color\r\n      };\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["InputTSelect.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"InputTSelect.vue","sourceRoot":"src/components","sourcesContent":["\r\n<template>\r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"containerStyle\" tabindex=\"0\" @focus=\"focused=true\" @blur=\"focused=false\" @mouseenter=\"selectorHover=true\" @mouseleave=\"selectorHover=false\">\r\n    <!--label显示-->\r\n    <span :class=\"$style.label\" :style=\"labelStyle\" v-if=\"label\" is-label>{{label}}</span>\r\n\r\n    <slot></slot>\r\n\r\n    <!--必填显示-->\r\n    <span :class=\"[$style.required,'el-icon-star-on']\" :style=\"{backgroundColor:theme.input_label_bg_color}\" v-if=\"required\"></span>\r\n\r\n    <!--单位显示-->\r\n    <span :class=\"$style.unit\" v-if=\"unit\">{{unit}}</span>\r\n\r\n    <!--下拉图标和清除图标显示-->\r\n    <i :class=\"[$style.icon,showDropDown?'el-icon-arrow-up':'el-icon-arrow-down']\" :style=\"{lineHeight:lineHeight+'px'}\" @click=\"toggleDropDown($event)\"></i>\r\n    <i :class=\"$style.icon\" :style=\"{lineHeight:lineHeight+'px'}\" v-show=\"showClear\" v-if=\"clearable\" class=\"el-icon-close\" @click=\"clear\"></i>\r\n\r\n    <!--selector显示-->\r\n    <div ref=\"selector\" :class=\"$style.selector\" style=\"padding-left:0\" :title=\"text\":style=\"[inputWidth && {width:inputWidth},{lineHeight:lineHeight+'px',paddingRight:'5px'},contentStyle]\">\r\n      <!--marginRight:showArrow||showClear?'24px':'8px'-->\r\n      <span :class=\"$style.placeholder\" v-if=\"!text && placeholder\">{{placeholder}}</span>\r\n      <div :class=\"$style.colorBlock\" v-if=\"text&&isColorBlock\">\r\n        <div :style=\"{backgroundColor: selectedItem.colorBlock}\"></div>\r\n      </div>\r\n      <input ref=\"input\" :class=\"$style.input\"  :style=\"[{width:inputWidth}]\" v-bind=\"$attrs\" :value=\"text\" type=\"text\" :disabled=\"disabled\" :autocomplete=\"autocomplete\" :placeholder=\"placeholder\"  @focus=\"handleFocus\" @blur=\"handleBlur\"  @input=\"handleInput2\">\r\n    </div>\r\n    <!--弹出selector显示-->\r\n    <div ref=\"dropdown\" :class=\"$style.dropdown\" :style=\"[theme.popup,dropdownStyle]\" v-show=\"showDropDown\" v-if=\"createDropDown\">\r\n      <!-- 搜索栏 -->\r\n      <div :class=\"$style.searchdiv\" v-if=\"searchable\" :style=\"{borderColor:borderColor}\">\r\n        <i class=\"el-icon-search\" :class=\"$style.search_icon\"></i>\r\n        <input type=\"text\" :class=\"$style.input\" :placeholder=\"$_L.get('输入进行查询')\" :value=\"searchValue\" @focus=\"$el.style['border-color'] = theme.color;$el.style['z-index'] = theme.zindex()\" @blur=\"$el.style['border-color'] = borderColor;$el.style['z-index'] = ''\" @click=\"handleClick\" @input=\"handleInput\">\r\n        <div :class=\"$style.clear\" style=\"display:none;\" ref=\"clearBtn\">\r\n          <i></i> <i @click=\"clearSearch\" class=\"el-icon-close\"></i>\r\n        </div>\r\n        <ul :class=\"$style.searchUl\" v-if=\"searchValue!=null&&searchValue!=''&&showUl\" :style=\"{maxHeight:listMaxHeight+'px'}\">\r\n          <li :class=\"$style.option_item\" v-for=\"(item,index) in searchOption\" :key=\"index+'_'+item[valueField]\" :style=\"[listStyle]\" @click=\"ClickItem(item,$event)\">\r\n            <span>{{item[labelField]}}</span>\r\n          </li>\r\n          <li :class=\"$style.option_item\" style=\"text-align:center;\" v-if=\"searchOption.length==0||!searchOption\">\r\n            <span style=\"color:red\">{{$_L.get('暂无数据')}}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <ul :class=\"$style.list\" :style=\"{maxHeight:listMaxHeight+'px'}\">\r\n        <li :class=\"$style.option_item\" :style=\"[optionItemStyle(item, index, value), listStyle]\" v-for=\"(item,index) in options\" :key=\"index+'_'+item[valueField]\" @mouseenter=\"hoverItem=item\" @mouseleave=\"hoverItem=null\" @click.stop=\"onSelectItem(item,$event)\" :title=\"item[labelField]\">\r\n          <Checkbox v-if=\"checkbox\" :label=\"item[labelField]\" :value=\"!!checkMap[item[valueField]]\" @input=\"v=>onCheck(item,v)\" style=\"width:100%\" />\r\n          <div :class=\"$style.colorBlock\" v-if=\"item.colorBlock&&isColorBlock\">\r\n            <div :style=\"{backgroundColor: item.colorBlock}\"></div>\r\n          </div>\r\n          <span v-if=\"!checkbox\">{{item[labelField]}}</span>\r\n        </li>\r\n      </ul>\r\n      <div v-if=\"checkbox && showCheckAll\" style=\"width:100%;height:30px;line-height:30px;padding-left:8px;background-color:var(--bg_color)\">\r\n        <Checkbox :label=\"$_L.get('全选')\" v-model=\"checkAll\" @change=\"onCheckAll\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"disabled\" :class=\"$style.disabled\" :style=\"{borderRadius: radius}\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n/*\r\n* 使用例子\r\n* <InputTSelect label=\"你要选择哪一个\" :options=\"[{label:'吃饭',value:1},{label:'睡觉',value:2}]\" v-model=\"like\" @change=\"onSelectChg\"/>\r\n*\r\n*  data: {like: 1},\r\n*  methods: {\r\n*    onSelectChg(value, item) {// value值是1或2, item是{label:'吃饭',value:1}\r\n*    }\r\n*  }\r\n*/\r\nimport { domLeftTop } from '@/components/util/Dom.js';\r\nimport { arrayFindItem } from '@/common/util/Arrays.js';\r\nimport { arrayRemoveValue } from '@/common/util/Arrays.js';\r\nimport { arrayGetValue } from '@/common/util/Arrays.js';\r\nimport storage from '@/common/cache/Storage.js';\r\n\r\nexport default {\r\n  name: \"InputTSelect\",\r\n  props: {\r\n    label: String,                                                      // 标题文本\r\n    value: { default: null },                                           // 当前值(v-model)\r\n    options: Array,                                                     // 多个选项 [{lable:xxx,value:xxx}...]\r\n    labelField: { type: String, default: 'label' },                     // 显示字段\r\n    valueField: { type: String, default: 'value' },                     // 值字段\r\n    checkbox: { type: Boolean, default: false },                        // 是否多选\r\n    showCheckAll: { type: Boolean, default: true },                     // 是否显示全选\r\n    splitter: { type: String, default: null },                          // 如果是多选，而value是字符串\"1,2,3,4\" 则需要定义拆分符为逗号\r\n    placeholder: String,\r\n    unit: String,                                                       // 单位\r\n    required: Boolean,                                                  // 是否显示必填\r\n    disabled: Boolean,                                                  // 是否可操作\r\n    clearable: Boolean,                                                 // 是否显示可清除图标\r\n    focusable: { type: Boolean, default: true },                        // 是否可focus\r\n    showArrow: { type: Boolean, default: true },                        // 是否显示箭头图标\r\n    border: { type: Boolean, default: true },                           // 是否显示边框\r\n    borderColor: { type: String, default: $_theme.border_color_light },\r\n    radius: { type: String,  default: $_theme.input_radius},            // 边框圆角\r\n    focusColor: { type: String, default: $_theme.color },\r\n    height: { type: Number, default: $_theme.inputHeight },             // 高度数值，单位是px\r\n    maxListNum: { type: Number, default: 10 },                          // 下拉框最多显示10个选项，多出10个选项会出现滚动条\r\n    afterOpen: Function,\r\n    beforeClose: Function,\r\n    labelMinWidth: { type: Number, default: 10 },  \t\t  \t              // lable宽度最小数值，单位是px\r\n    inputWidth: { type: String, default: null },                        // 输入框的宽度\r\n    dropdownWidth: { type: String, default: null },                     // 选择列表的宽度\r\n    contentStyle: { default: null },\r\n    listStyle: { default: null },\r\n    labelColor: { type: String, default: null },                        // lable颜色\r\n    selectedColor: { type: String, default: null },                     // 选项选中的颜色\r\n    searchable: { type: Boolean, default: false },                      // 是否显示搜索栏\r\n    isColorBlock: { type: Boolean, default: false },                    // 是否显示色块\r\n    searchKey: { typeof: String, default: null },\r\n    autocomplete:   { type: String,  default: 'off' },                // 自动补全\r\n  },\r\n  data() {\r\n    return {\r\n      selectedItem: null,\r\n      hoverItem: null,\r\n      focused: false,\r\n      selectorHover: false,\r\n      createDropDown: false,\r\n      showDropDown: false,\r\n      dropdownStyle: null,\r\n      checkedItems: null,\r\n      checkMap: {},\r\n      checkAll: false,\r\n      searchValue: null,\r\n      searchOption: [],\r\n      showUl: false,\r\n      listMaxHeight: 0,\r\n    };\r\n  },\r\n  watch: {\r\n    value: function (v) {\r\n      if (this._myself) return this._myself = false;\r\n      this.checkbox ? this.setCheckedItems(v) : this.setSelectedItem(v);\r\n    },\r\n    focused: function (v) {\r\n      this.$emit('focused', v);\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.value === null || this.value == undefined) return;\r\n    this.checkbox ? this.setCheckedItems(this.value) : this.setSelectedItem(this.value);\r\n  },\r\n  methods: {\r\n    setSelectedItem(v) {\r\n      this.inupttext=v\r\n      if (v === null || v == undefined) return this.selectedItem = null;\r\n      if (!this.selectedItem || this.selectedItem[this.valueField] != v) {\r\n        this.selectedItem = arrayFindItem(this.options, this.valueField, v)||v;\r\n      }\r\n    },\r\n    toggleDropDown(event) {// 显示或隐藏选项列表\r\n      if (!this.options || this.options.length == 0) return;\r\n      this.focused = true;\r\n      if (this.showDropDown) return this.hideDropDown(event);\r\n      this.showDropDown = this.createDropDown = true;\r\n\r\n      // 自动判断是显示在下面还是上面\r\n      let { left, top } = domLeftTop(this.$refs.selector), isbottom = true, listHeight = 30 * Math.min(this.maxListNum, this.options.length) + 1 + (this.border ? 0 : 1);\r\n      let this_height = this.$el.offsetHeight;\r\n      let down = document.documentElement.clientHeight - top - this_height;\r\n      if (down > listHeight) {// 下面空间充足，显示在下面\r\n        top += this_height - (this.border ? 1 : 0);\r\n      } else if (top > listHeight) {// 上面空间足够，显示在上面\r\n        top -= listHeight + (this.border ? 1 : 0);\r\n        isbottom = false;\r\n      } else {// 上面和下面的空间都不够\r\n        if (down > top) {// 下面的空间大，显示在下面\r\n          listHeight = down - 5;\r\n          top += this_height - (this.border ? 1 : 0);\r\n        } else {// 上面的空间大，显示在上面\r\n          listHeight = top - 5;\r\n          top -= listHeight + (this.border ? 1 : 0);\r\n          isbottom = false;\r\n        }\r\n      }\r\n      this.listMaxHeight = listHeight;\r\n      this.border && (left--);\r\n      this.dropdownStyle = {\r\n        borderColor: this.borderColor,\r\n        zIndex: window.$_theme.zindex(),\r\n        top: top + 'px',\r\n        left: left + 'px',\r\n        // marginLeft: (this.$refs.selector.offsetLeft) + 'px',\r\n        // marginTop: isbottom ? this.border ? '1px' : '0' : '0',\r\n        width: this.dropdownWidth || ((this.$el.offsetWidth - this.$refs.selector.offsetLeft - (this.border?1:0)) + 'px')\r\n      };\r\n\r\n      // !isbottom && this.$nextTick(() => this.dropdownStyle.marginTop = -(this.$refs.dropdown.offsetHeight+this.$el.offsetHeight+(this.border?-1:0)) + 'px');\r\n      this.border && (this.dropdownStyle[isbottom ? 'border-top-width' : 'border-bottom-width'] = 0);\r\n      this.afterOpen && this.$nextTick(this.afterOpen);\r\n      document.addEventListener('click', this.onMouseClick);\r\n    },\r\n    onMouseClick(event) {\r\n      !this.$el.contains(event.target) && this.hideDropDown(event);\r\n    },\r\n    handleFocus(event) {\r\n      this.focused = true;\r\n      this.$emit('focus', event);\r\n    },\r\n    handleBlur(event) {\r\n      this.focused = false;\r\n      this.$emit('blur', event);\r\n    },\r\n    hideDropDown(event) {// 隐藏弹出的选项列表\r\n      if (this.beforeClose && this.beforeClose(event) === false) return false;\r\n      this.showDropDown = false;\r\n      document.removeEventListener('click', this.onMouseClick);\r\n      return true;\r\n    },\r\n    handleInput(event) {\r\n      let searchOption = []\r\n      this.searchValue = event.target.value;\r\n      this.searchValue = this.searchValue.trim();\r\n      this.$refs.clearBtn.style.display = (this.searchValue) ? '' : 'none';\r\n      this.options.forEach(el => {\r\n        if (el[this.labelField].indexOf(this.searchValue) != -1) {\r\n          searchOption.push(el);\r\n        }\r\n      })\r\n      this.searchOption = searchOption;\r\n    },\r\n    handleInput2(event){\r\n      let value=event.target.value;\r\n      this.inupttext=value\r\n      this.$emit('input', value);\r\n    },\r\n    onSelectItem(item, event) {\r\n      if (this.checkbox) return;\r\n      this.selectorHover = false;\r\n      if (!this.selectedItem || this.selectedItem[this.valueField] !== item[this.valueField]) {\r\n        let old = this.value, value = item[this.valueField];\r\n        this.selectedItem = item;\r\n        this._myself = true;\r\n        this.$emit('input', value);\r\n        this.$emit('change', value, item, old);\r\n        this.searchKey && storage.set(this.searchKey, value);\r\n      }\r\n      this.hideDropDown(event);\r\n      // if (!this.hideDropDown(event) && !this.dropdownWidth) {\r\n      //   this.$nextTick(()=>this.dropdownStyle.width = ((this.$el.offsetWidth - this.$refs.selector.offsetLeft - (this.border?1:0)) + 'px'));\r\n      // }\r\n    },\r\n    onCheck(item, checked) {\r\n      this.onBeforeChange(this.checkMap, this.checkedItems);\r\n      this.checkMap[item[this.valueField]] = checked;\r\n      this.checkedItems = this.checkedItems || [];\r\n      checked ? this.checkedItems.push(item) : arrayRemoveValue(this.checkedItems, this.valueField, item[this.valueField]);\r\n      let values = arrayGetValue(this.checkedItems, this.valueField);\r\n      if (this.splitter) values = values.join(this.splitter);\r\n      this._myself = true;\r\n      let oldValue = this.value;\r\n      this.$emit('input', values);\r\n      this.$emit('change', { value: values, text: this.text, item: item, checked: checked, oldValue: oldValue });\r\n      this.searchKey && storage.set(this.searchKey, values);\r\n      this.checkAll=this.options.length==values.length&&true||false;\r\n    },\r\n    onBeforeChange(value1, value2) {\r\n      this.$emit('onBeforechange', value1, value2)\r\n    },\r\n    onCheckAll(checked) {\r\n      if (!checked) {\r\n        this.checkMap = {};\r\n        this.checkedItems = null;\r\n        let old = this.value;\r\n        this._myself = true;\r\n        this.$emit('input', null);\r\n        this.$emit('change', { value: null, text: null, oldValue: old });\r\n        this.searchKey && storage.remove(this.searchKey);\r\n      } else {\r\n        this.checkedItems = [...this.options];\r\n        let values = arrayGetValue(this.checkedItems, this.valueField);\r\n        let map = {};\r\n        values.forEach(v => map[v] = true);\r\n        this.checkMap = map;\r\n        if (this.splitter) values = values.join(this.splitter);\r\n        this._myself = true;\r\n        let oldValue = this.value;\r\n        this.$emit('input', values);\r\n        this.$emit('change', { value: values, text: this.text, checked: checked, oldValue: oldValue });\r\n        this.searchKey && storage.set(this.searchKey, values);\r\n      }\r\n    },\r\n    setCheckedItems(v) {\r\n      if (v === null || v == undefined) {\r\n        this.checkMap = {};\r\n        this.checkedItems = null;\r\n        return;\r\n      }\r\n      let values = Array.isArray(v) ? v : (this.splitter ? v.split(this.splitter) : []);\r\n      let map = {}, list = [], item;\r\n      values.forEach(value => {\r\n        map[value] = true;\r\n        item = arrayFindItem(this.options, this.valueField, value);\r\n        item && list.push(item);\r\n      });\r\n      this.checkMap = map;\r\n      this.checkedItems = list;\r\n      this.checkAll=this.options.length==values.length&&true||false;\r\n    },\r\n    getSelectedItem() {\r\n      return this.selectedItem;\r\n    },\r\n    getCheckedItems() {\r\n      return this.checkedItems;\r\n    },\r\n    clear() {\r\n      this.showDropDown && this.hideDropDown();\r\n      if (this.checkbox) {\r\n        this.checkedItems = null;\r\n        this.checkMap = {};\r\n      } else {\r\n        this.selectedItem = null;\r\n      }\r\n      let old = this.value;\r\n      this._myself = true;\r\n      this.inupttext=null;\r\n      this.$emit('input', null);\r\n      this.searchKey && storage.remove(this.searchKey);\r\n      this.checkbox ? this.$emit('change', { value: null, text: null, checked: false, oldValue: old }) : this.$emit('change', null, old);\r\n    },\r\n    optionItemStyle(item, index) {\r\n      if (!this.showDropDown) return null;\r\n      if (item == this.hoverItem) {\r\n        return { backgroundColor: this.theme.list_hover_color };\r\n      } else if (this.selectedItem && this.selectedItem[this.valueField] === item[this.valueField]) {\r\n        return { backgroundColor: this.selectedColor ? this.selectedColor : this.theme.selected_color };\r\n      } else {\r\n        return { backgroundColor: this.theme.alternate_colors[index % 2] };\r\n      }\r\n    },\r\n    handleClick() {\r\n      this.showUl = true;\r\n    },\r\n    clearSearch() {\r\n      this.searchValue = null;\r\n      this.searchOption = [];\r\n      this.$refs.clearBtn.style.display = 'none';\r\n    },\r\n    ClickItem(item, event) {\r\n      this.showUl = false;\r\n      this.onSelectItem(item, event)\r\n      if (this.checkbox) {\r\n        this.onCheck(item, true)\r\n      }\r\n\r\n    },\r\n  },\r\n  computed: {\r\n    text: function () {\r\n      let text;\r\n      if (!this.checkbox){ text= this.selectedItem ? this.selectedItem[this.labelField] : null;}\r\n      else if (!this.checkedItems || this.checkedItems.length == 0){text=null}\r\n      else{text=arrayGetValue(this.checkedItems, this.labelField).join(',');}\r\n      return text||this.inupttext\r\n    },\r\n    showClear() {// 判断是否要显示清除按钮\r\n      return this.clearable && this.selectorHover && this.text;\r\n    },\r\n    containerStyle() {\r\n      return {\r\n        borderRadius: this.radius,\r\n        height: this.height + 'px',\r\n        borderColor: (this.focused && this.focusable) ? this.focusColor : this.borderColor,\r\n        zIndex: this.focused ? this.theme.zindex() : ''\r\n      };\r\n    },\r\n    lineHeight() {// 获取除边框外的高度\r\n      return this.height - (this.border ? 2 : 0);\r\n    },\r\n    labelStyle() {\r\n      return {\r\n        minWidth: this.labelMinWidth + 'px',\r\n        borderRightColor: this.theme.border_color_light,\r\n        backgroundColor: this.labelColor ? this.labelColor : this.theme.input_label_bg_color\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style module>\r\n.container {\r\n  overflow: hidden;\r\n  vertical-align: top;\r\n  outline: none;\r\n  display: inline-block;\r\n  white-space: nowrap;\r\n  background-color: #fff;\r\n  position: relative;\r\n  user-select: none;\r\n  -webkit-user-select: none;\r\n  -ms-user-select: none;\r\n  -moz-user-select: none;\r\n}\r\n.container:hover {\r\n  background-color: #fff !important;\r\n}\r\n.container > * {\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.border {\r\n  border-style: solid;\r\n  border-width: 1px;\r\n}\r\n/* 标题文本 */\r\n.label {\r\n  float: left;\r\n  padding: 0 6px;\r\n  border-right-style: solid;\r\n  border-right-width: 0px;\r\n  white-space: nowrap;\r\n}\r\n\r\n/* select容器 */\r\n.selector {\r\n  padding-left: 8px;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n.placeholder {\r\n  color: #b0b0b0;\r\n}\r\n.icon {\r\n  float: right;\r\n  width: 22px;\r\n  padding-left: 2px;\r\n  line-height: 0;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n\r\n/* 下拉容器 */\r\n.dropdown {\r\n  position: fixed;\r\n  display: flex;\r\n  flex-flow: column;\r\n  height: unset !important;\r\n}\r\n.list {\r\n  padding: 0;\r\n  margin: 0;\r\n  width: 100%;\r\n  list-style: none;\r\n  background-color: #fff;\r\n  margin-block-start: 0;\r\n  border: 0;\r\n  overflow-y: auto;\r\n}\r\n.option_item {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  height: 30px;\r\n  line-height: 30px;\r\n  padding: 0 8px;\r\n  cursor: pointer;\r\n}\r\n\r\n/* 单位 */\r\n.unit {\r\n  float: right;\r\n  padding-right: 8px;\r\n  white-space: nowrap;\r\n}\r\n/* 必填 */\r\n.required {\r\n  float: right;\r\n  padding: 0 2px;\r\n  color: #f00;\r\n  user-select: none;\r\n  -webkit-user-select: none;\r\n  -ms-user-select: none;\r\n  -moz-user-select: none;\r\n}\r\n/* 禁止操作 */\r\n.disabled {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  background-color: rgba(255, 255, 255, 0.6);\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n  cursor: not-allowed;\r\n}\r\n.searchdiv {\r\n  width: 100%;\r\n  height: 32px;\r\n  line-height: 31px;\r\n  background-color: #fff;\r\n  border-bottom-width: 1px;\r\n  border-bottom-style: solid;\r\n}\r\n\r\n.search_icon {\r\n  font-size: 16px;\r\n  padding-left: 6px;\r\n}\r\n.input {\r\n  height: 100%;\r\n  width: 100%;\r\n  display: inline-block;\r\n  border: 0;\r\n  outline: 0;\r\n  padding: 2px 25px 2px 8px;\r\n}\r\n.input::placeholder {\r\n  color: #b0b0b0;\r\n}\r\n.input::-webkit-input-placeholder {\r\n  color: #b0b0b0;\r\n}\r\n.input:-ms-input-placeholder {\r\n  color: #b0b0b0;\r\n}\r\n.input::-ms-input-placeholder {\r\n  color: #b0b0b0;\r\n}\r\n/* 清空按钮 */\r\n.clear {\r\n  float: right;\r\n  position: relative;\r\n  width: 0px;\r\n}\r\n.clear > i {\r\n  position: absolute;\r\n  cursor: pointer;\r\n  left: -20px;\r\n  top: -17px;\r\n  width: 20px;\r\n  font-size: 16px;\r\n  line-height: 0;\r\n}\r\n.clear > i:first-child {\r\n  top: 0;\r\n  background-color: #fff;\r\n  height: calc(100% - 2px);\r\n}\r\n.searchUl {\r\n  width: 100%;\r\n  position: absolute;\r\n  background: #fff;\r\n  top: 32px;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-shadow: 2px 3px 10px #ccc;\r\n  overflow: auto;\r\n}\r\n.searchUl li:hover {\r\n  background-color: rgb(252, 240, 193) !important;\r\n}\r\n.searchUl li:nth-child(2n-1) {\r\n  background-color: rgb(250, 250, 250);\r\n}\r\n.colorBlock {\r\n  float: left;\r\n  margin-right: 6px;\r\n  display: flex;\r\n  height: 100%;\r\n  align-items: center;\r\n}\r\n.colorBlock > div {\r\n  width: 12px;\r\n  height: 12px;\r\n}\r\n/* 输入框 */\r\n.input {\r\n  height: 100%;\r\n  display: inline-block;\r\n  border: 0;\r\n  outline: 0;\r\n  padding: 0 8px;\r\n  background-color: #fff;\r\n}\r\n.input::placeholder {\r\n  color: #B0B0B0;\r\n}\r\n.input::-webkit-input-placeholder {\r\n  color: #B0B0B0;\r\n}\r\n.input:-ms-input-placeholder {\r\n  color: #B0B0B0;\r\n}\r\n.input::-ms-input-placeholder {\r\n  color: #B0B0B0;\r\n}\r\n</style>\r\n"]}]}