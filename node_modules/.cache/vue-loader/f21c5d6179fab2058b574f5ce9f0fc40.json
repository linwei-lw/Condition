{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Chart\\LineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Chart\\LineChart.vue","mtime":1669969501186},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\n\n//import echarts from 'echarts';\nimport {getColor} from './Colors.js';\n//import '@/components/util/element-resize.js';\n\nexport default {\n  name: \"LineChart\",\n  props: {\n    border: { type: Boolean, default: true },                // 是否有边框\n    borderColor: { type: String, default: $_theme.border_color_dark },\n    disabled: Boolean,                                       // 是否禁用\n    tooltipFormatter: [Function, String],\n    yaxisLabelFormatter: [Function, String],\n    xaxisLabelFormatter: [Function, String],\n    show_x_axisLabel:{ default:true, type: Boolean },\n    show_y_axisLabel:{ default:true, type: Boolean },\n    show_x_axisLine: { default:true, type: Boolean },\n    show_y_axisLine: { default:true, type: Boolean },\n    show_x_axisTick: { default:true, type: Boolean },\n    show_y_axisTick: { default:true, type: Boolean },\n    show_y_splitLine:{ default:true, type: Boolean },\n    legend: Array,\n    xaxisField: String,\n    seriesFields: Array,\n    data: Array,\n    chartType:{ default: 'line' },\n    xAxisBoundaryGap:{ default:false,type: Boolean },\n    gridOption:{ default:function(){\n      return {left: 10, right: 10, bottom: 10, top: 10, containLabel: true}\n    },type:Object },\n    title:{type:String},\n    itemStyle:{type:Object}\n  },\n  watch: {\n    data: function(v) {\n      this.setData(v);\n    },\n    yaxisLabelFormatter: function() {\n      this._chart && this._chart.setOption({ yAxis: {axisLabel: { color: \"#232323\", formatter: this.yaxisLabelFormatter }}});\n    },\n    tooltipFormatter: function() {\n      this._chart && this._chart.setOption({ tooltip: {formatter: this.tooltipFormatter}});\n    },\n    show_y_axisLine: function() {\n      this._chart && this._chart.setOption({ yAxis: {axisLine: { show: this.show_y_axisLine}}});\n    },\n    show_y_axisTick: function() {\n      this._chart && this._chart.setOption({ yAxis: {axisTick: { show: this.show_y_axisTick}}});\n    },\n    show_y_axisLabel: function() {\n      this._chart && this._chart.setOption({ yAxis: {axisLabel: { show: this.show_y_axisLabel}}});\n    },\n  },\n  mounted() {\n    let series = [this._getSerieOption(0)];\n    if (this.seriesFields && this.seriesFields.length > 1) {\n      for (let i=1; i<this.seriesFields.length; i++) {\n        series.push(this._getSerieOption(i));\n      }\n    }\n    let option = {\n      grid: this.gridOption,\n      legend: { data: this.legend },\n      tooltip: { trigger: 'axis', formatter: this.tooltipFormatter, axisPointer: {type:'cross', animation: false, label: { backgroundColor: '#6F6F6F' }}},\n      xAxis: {\n        type: 'category',\n        data: [],\n        boundaryGap: this.xAxisBoundaryGap,\n        axisLabel: { show: this.show_x_axisLabel, color: \"#232323\", formatter: this.xaxisLabelFormatter },\n        axisLine: { show: this.show_x_axisLine, lineStyle: { color: this.theme.border_color_dark } },\n        axisTick: { show: this.show_x_axisTick }\n      },\n      yAxis: {\n        type: 'value',\n        axisLabel: { show: this.show_y_axisLabel, color: \"#232323\", formatter: this.yaxisLabelFormatter },\n        splitLine: { show: this.show_y_splitLine, lineStyle: { color:this.theme.border_color_light, type:'dashed' } },\n        axisLine:  { show: this.show_y_axisLine,  lineStyle: { color: this.theme.border_color_dark } },\n        axisTick:  { show: this.show_y_axisTick }\n      },\n      series: series,\n      title:{text:this.title,x:'center'}\n    };\n    this._chart = echarts.init(this.$el);\n    this._chart.setOption(option);\n    this.data && this.data.length && this.setData(this.data);\n    addResizeListener(this.$el, this._chart.resize);\n  },\n  methods: {\n    getChart(){\n      return this._chart;\n    },\n    setData(data) {\n      let xAxisData = [], series = [];\n      if (!this.seriesFields || this.seriesFields.length == 0) {\n        series = [{data:data}];\n        if (this.xaxisField) {\n          for (let i=0,len=data.length,item; i<len; i++) {\n            item = data[i];\n            xAxisData.push(item[this.xaxisField]);\n          }\n        }\n      } else if (this.seriesFields.length == 1) {\n        let seriesData = [], sfield = this.seriesFields[0];\n        series = [{data:seriesData}];\n        for (let i=0,len=data.length,item; i<len; i++) {\n          item = data[i];\n          seriesData.push(item[sfield]);\n          this.xaxisField && xAxisData.push(item[this.xaxisField]);\n        }\n      } else {\n        this.seriesFields.forEach(s => series.push({data:[]}));\n        for (let i=0,len=data.length,item; i<len; i++) {\n          item = data[i];\n          this.xaxisField && xAxisData.push(item[this.xaxisField]);\n          for (let j=0,jlen=this.seriesFields.length; j<jlen; j++) {\n            series[j].data.push(item[this.seriesFields[j]]);\n          }\n        }\n      }\n      this._chart && this._chart.setOption({ xAxis: [{data: xAxisData}], series: series});\n    },\n    _getSerieOption(i) {\n      return {\n        type: this.chartType,\n        name: this.legend ? this.legend[i] : null,\n        data: [],\n        showSymbol: false,\n        hoverAnimation: false,\n        color: [getColor(i)],\n        smooth: true,\n        itemStyle:this.itemStyle\n      };\n    }\n  },\n  \n  beforeDestroy() {\n    this._chart && removeResizeListener(this.$el, this._chart.resize);\n  }\n};\n",{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"LineChart.vue","sourceRoot":"src/components/Chart","sourcesContent":["<template>\r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"{borderColor:borderColor}\"></div>\r\n</template>\r\n\r\n<script>\r\n\r\n  //import echarts from 'echarts';\r\n  import {getColor} from './Colors.js';\r\n  //import '@/components/util/element-resize.js';\r\n\r\n  export default {\r\n    name: \"LineChart\",\r\n    props: {\r\n      border: { type: Boolean, default: true },                // 是否有边框\r\n      borderColor: { type: String, default: $_theme.border_color_dark },\r\n      disabled: Boolean,                                       // 是否禁用\r\n      tooltipFormatter: [Function, String],\r\n      yaxisLabelFormatter: [Function, String],\r\n      xaxisLabelFormatter: [Function, String],\r\n      show_x_axisLabel:{ default:true, type: Boolean },\r\n      show_y_axisLabel:{ default:true, type: Boolean },\r\n      show_x_axisLine: { default:true, type: Boolean },\r\n      show_y_axisLine: { default:true, type: Boolean },\r\n      show_x_axisTick: { default:true, type: Boolean },\r\n      show_y_axisTick: { default:true, type: Boolean },\r\n      show_y_splitLine:{ default:true, type: Boolean },\r\n      legend: Array,\r\n      xaxisField: String,\r\n      seriesFields: Array,\r\n      data: Array,\r\n      chartType:{ default: 'line' },\r\n      xAxisBoundaryGap:{ default:false,type: Boolean },\r\n      gridOption:{ default:function(){\r\n        return {left: 10, right: 10, bottom: 10, top: 10, containLabel: true}\r\n      },type:Object },\r\n      title:{type:String},\r\n      itemStyle:{type:Object}\r\n    },\r\n    watch: {\r\n      data: function(v) {\r\n        this.setData(v);\r\n      },\r\n      yaxisLabelFormatter: function() {\r\n        this._chart && this._chart.setOption({ yAxis: {axisLabel: { color: \"#232323\", formatter: this.yaxisLabelFormatter }}});\r\n      },\r\n      tooltipFormatter: function() {\r\n        this._chart && this._chart.setOption({ tooltip: {formatter: this.tooltipFormatter}});\r\n      },\r\n      show_y_axisLine: function() {\r\n        this._chart && this._chart.setOption({ yAxis: {axisLine: { show: this.show_y_axisLine}}});\r\n      },\r\n      show_y_axisTick: function() {\r\n        this._chart && this._chart.setOption({ yAxis: {axisTick: { show: this.show_y_axisTick}}});\r\n      },\r\n      show_y_axisLabel: function() {\r\n        this._chart && this._chart.setOption({ yAxis: {axisLabel: { show: this.show_y_axisLabel}}});\r\n      },\r\n    },\r\n    mounted() {\r\n      let series = [this._getSerieOption(0)];\r\n      if (this.seriesFields && this.seriesFields.length > 1) {\r\n        for (let i=1; i<this.seriesFields.length; i++) {\r\n          series.push(this._getSerieOption(i));\r\n        }\r\n      }\r\n      let option = {\r\n        grid: this.gridOption,\r\n        legend: { data: this.legend },\r\n        tooltip: { trigger: 'axis', formatter: this.tooltipFormatter, axisPointer: {type:'cross', animation: false, label: { backgroundColor: '#6F6F6F' }}},\r\n        xAxis: {\r\n          type: 'category',\r\n          data: [],\r\n          boundaryGap: this.xAxisBoundaryGap,\r\n          axisLabel: { show: this.show_x_axisLabel, color: \"#232323\", formatter: this.xaxisLabelFormatter },\r\n          axisLine: { show: this.show_x_axisLine, lineStyle: { color: this.theme.border_color_dark } },\r\n          axisTick: { show: this.show_x_axisTick }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          axisLabel: { show: this.show_y_axisLabel, color: \"#232323\", formatter: this.yaxisLabelFormatter },\r\n          splitLine: { show: this.show_y_splitLine, lineStyle: { color:this.theme.border_color_light, type:'dashed' } },\r\n          axisLine:  { show: this.show_y_axisLine,  lineStyle: { color: this.theme.border_color_dark } },\r\n          axisTick:  { show: this.show_y_axisTick }\r\n        },\r\n        series: series,\r\n        title:{text:this.title,x:'center'}\r\n      };\r\n      this._chart = echarts.init(this.$el);\r\n      this._chart.setOption(option);\r\n      this.data && this.data.length && this.setData(this.data);\r\n      addResizeListener(this.$el, this._chart.resize);\r\n    },\r\n    methods: {\r\n      getChart(){\r\n        return this._chart;\r\n      },\r\n      setData(data) {\r\n        let xAxisData = [], series = [];\r\n        if (!this.seriesFields || this.seriesFields.length == 0) {\r\n          series = [{data:data}];\r\n          if (this.xaxisField) {\r\n            for (let i=0,len=data.length,item; i<len; i++) {\r\n              item = data[i];\r\n              xAxisData.push(item[this.xaxisField]);\r\n            }\r\n          }\r\n        } else if (this.seriesFields.length == 1) {\r\n          let seriesData = [], sfield = this.seriesFields[0];\r\n          series = [{data:seriesData}];\r\n          for (let i=0,len=data.length,item; i<len; i++) {\r\n            item = data[i];\r\n            seriesData.push(item[sfield]);\r\n            this.xaxisField && xAxisData.push(item[this.xaxisField]);\r\n          }\r\n        } else {\r\n          this.seriesFields.forEach(s => series.push({data:[]}));\r\n          for (let i=0,len=data.length,item; i<len; i++) {\r\n            item = data[i];\r\n            this.xaxisField && xAxisData.push(item[this.xaxisField]);\r\n            for (let j=0,jlen=this.seriesFields.length; j<jlen; j++) {\r\n              series[j].data.push(item[this.seriesFields[j]]);\r\n            }\r\n          }\r\n        }\r\n        this._chart && this._chart.setOption({ xAxis: [{data: xAxisData}], series: series});\r\n      },\r\n      _getSerieOption(i) {\r\n        return {\r\n          type: this.chartType,\r\n          name: this.legend ? this.legend[i] : null,\r\n          data: [],\r\n          showSymbol: false,\r\n          hoverAnimation: false,\r\n          color: [getColor(i)],\r\n          smooth: true,\r\n          itemStyle:this.itemStyle\r\n        };\r\n      }\r\n    },\r\n    \r\n    beforeDestroy() {\r\n      this._chart && removeResizeListener(this.$el, this._chart.resize);\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .container {\r\n    background-color: #fff;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  .border {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n  }\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(235, 235, 235, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60); \r\n    cursor: not-allowed;\r\n  }\r\n</style>\r\n"]}]}