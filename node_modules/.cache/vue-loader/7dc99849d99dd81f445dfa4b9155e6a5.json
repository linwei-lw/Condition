{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Button.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Button.vue","mtime":1612227987676},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 使用例子\n* <Button type=\"primary\" icon=\"el-icon-setting\" :height=\"40\" :border=\"false\" :disabled=\"false\" @click=\"onClick\"\">点我呀笨</Button>\n*  \n*  methods: {\n*    onClick(event) {\n*      alert('窝草，还真点了！');\n*    }\n*  }\n*/\n\nexport default {\n  name: \"Button\",\n  props: {\n    type:   { type: String,  default: 'plain' },             // 风格样式 plain:朴素(用于关闭，取消等) primary:主要(用于确认，提交等) light:浅色(用于紧挨输入框边的按钮) transparent:透明样式 custom:自定义(用于窗口右上角关闭等按钮)\n    customs:{ type: Array,   default: null},                 // 自定义设置 [正常状态[背景色，边框色，文字色]，hover状态[背景色，边框色，文字色]，按下状态[背景色，边框色，文字色]]\n    border: { type: Boolean, default: true },                // 是否有边框\n    borderColor: { type: String, default: null},             // 边框颜色\n    height: { type: Number,  default: $_theme.inputHeight }, // 高度数值，单位是px\n    padding: String,\n    radius: { type: String,  default: '0px'},                // 边框圆角\n    disabled: Boolean,                                       // 是否禁用\n    icon: String,                                            // 图标样式\n    iconStyle: { default: null },\n    slotStyle: { default: null },\n  },\n  data() {\n    return {\n      hover: false,\n      down: false,\n      disabled_: this.disabled,\n      icon_: this.icon,\n    };\n  },\n  watch: {\n    disabled: function(v) {\n      this.disabled_ = v;\n      v && (this.hover = false);\n    },\n    icon: function(v) {\n      this.icon_ = v;\n    }\n  },\n  methods: {\n    handleClick(event) {\n      this.$emit('click', event);\n    },\n    setIcon(icon) {\n      this.icon_ = icon;\n    },\n    setDisabled(v) {\n      this.disabled_ = v;\n    }\n  },\n  computed: {\n    istyle() {\n      return this.$slots.default ? { marginRight: '5px', verticalAlign:'middle'} : null;\n    },\n    buttonStyle() {\n      return {\n        height: this.height + 'px',\n        padding: this.padding || ('0 ' + Math.max(this.height/2-6, 0) + 'px'),\n        borderWidth: this.border ? '1px' : '0',\n        cursor: this.disabled ? 'not-allowed' : 'pointer'\n      }\n    },\n    buttonColor() {\n      return this[this.type][this.down ? 'down' : (this.hover ? 'hover' : 'normal')];\n    },\n    plain() {\n      return {\n        down:   { backgroundColor: this.theme.bg_color, borderColor: this.borderColor || this.theme.color, color: this.theme.color },\n        hover:  { backgroundColor: '#fff', borderColor: this.borderColor || this.theme.border_color_dark, color: this.theme.color },\n        normal: { backgroundColor: '#fff', borderColor: this.borderColor || this.theme.border_color_dark, color: this.disabled ? '#707070' : null }\n      };\n    },\n    primary() {\n      return {\n        down:   { color: '#fff', borderColor: this.theme.color, backgroundColor: this.theme.color },\n        hover:  { color: '#fff', borderColor: this.theme.rgba(this.theme.color, 0.1), backgroundColor: this.theme.rgba(this.theme.color, 0.8) },\n        normal: { color: '#fff', borderColor: this.theme.color, backgroundColor: this.theme.color }\n      };\n    },\n    light() {\n      return {\n        down:   { borderColor: this.borderColor || this.theme.border_color_light, color: this.theme.color, backgroundColor: this.theme.selected_color },\n        hover:  { borderColor: this.borderColor || this.theme.border_color_light, color: this.theme.color, backgroundColor: '#fff' },\n        normal: { borderColor: this.borderColor || this.theme.border_color_light, backgroundColor: this.theme.bg_color }\n      };\n    },\n    custom() {\n      return this.customs ? {\n        down:   { backgroundColor: this.customs[2][0], borderColor: this.customs[2][1], color: this.customs[2][2] },\n        hover:  { backgroundColor: this.customs[1][0], borderColor: this.customs[1][1], color: this.customs[1][2] },\n        normal: { backgroundColor: this.customs[0][0], borderColor: this.customs[0][1], color: this.customs[0][2] },\n      } : {};\n    }\n  }\n};\n",null]}