{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\InputTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\InputTree.vue","mtime":1612227987676},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 单选树使用例子\n* <InputTree label=\"选择地区\" valueField=\"id\" :setting=\"setting\" v-model=\"value\" :text=\"text\" :getTreeRoots=\"getTreeRoots\" @change=\"onSelectChg\"/>\n*\n*  data: {value: 0, text: '中国', setting: {参考zTree的setting}},\n*  methods: {\n*    getTreeRoots(callback) {\n*      // 异步或同步取到树根结点roots\n*      callback(roots); //记得调用回调函数，把数据传回去\n*    },\n*    onSelectChg(value, node) {// value是node的valueField值, node是树结点对象\n*    }\n*  }\n* ========================================================================================================\n*  多选树使用例子：车辆树选多部车辆\n*  <InputTree label=\"选择一部车\" :tree=\"carTree\" v-model=\"carIds\" hasOwnField=\"plate\" @change=\"onCheckChg\"/>\n*\n*  import CarTree from '@/common/tree/CarTree.vue';\n*  data: {carIds:[]}, // carIds因为是多选，所以是数组\n*  computed: {\n*    carTree: function() { return CarTree }\n*  },\n*  methods: {\n*    onCheckChg(cars, checked) {// cars是当次勾选发生变化的车辆列表；checked:true勾上,false:去勾\n*    }\n*  }\n*  hasOwnField=\"plate\" 车辆树即有车辆也有车队，plate字段是车辆才有的，表示只允许选上车辆\n*/\n\nimport Vue from 'vue';\n\nimport { domLeftTop } from '@/components/util/Dom.js';\nimport { arrayGetValue } from '@/common/util/Arrays.js';\nimport { arrayRemoveItem } from '@/common/util/Arrays.js';\nimport { getNodeByValue } from '@/common/util/Trees.js';\nimport { getNodesByValues } from '@/common/util/Trees.js';\n\nimport Tree from '@/components/Tree';\n\nexport default {\n  name: \"InputTree\",\n  props: {\n    label: String,                                               // 标题文本\n    tree:        { default: ()=>{return Tree} },                 // 树组件\n    setting:     { default: ()=>{return {}} },                   // 参考ztree的setting配置\n    getTreeRoots: Function,                                      // 调用该方法获取树结点\n    expandRoot: { type: Boolean,  default: true },               // 显示树时默认展开根结点\n    hasOwnField: { type: String,  default: null },               // 只对树有该属性的结点处理\n    value: null,                                                 // 当前值(v-model)\n    text:  null,                                                 // 初始显示文本\n    labelField: { type: String,  default: null },                // 显示字段，如果不指定，将使用tree的显示字段或nameFunction\n    valueField: { type: String,  default: 'id' },                // 值字段\n    treeWidth:  { type: Number,  default: 0 },                   // 弹出树的宽度px，0则默认InputTree的总宽度\n    treeHeight: { type: Number,  default: 350 },                 // 弹出树的高度px\n    placeholder: String,\n    searchable: { type: Boolean, default: true },                // 是否显示搜索栏\n    required:   Boolean,                                         // 是否显示必填\n    disabled:   Boolean,                                         // 是否可操作\n    clearable:  Boolean,                                         // 是否显示可清除图标\n    border:     { type: Boolean, default: true },                // 是否显示边框\n    borderColor:{ default: $_theme.border_color_light },\n    height:     { type: Number,  default: $_theme.inputHeight }, // 高度数值，单位是px\n    inputStyle: { default: null },                                // 输入框的style\n    labelMinWidth:{ type: Number,  default: 10 },  \t\t  \t   // lable宽度最小数值，单位是px\n    labelMaxWidth:{ type: Number},  \t\t  \t   // lable宽度最小数值，单位是px\n    custom: { type: Boolean, default: false }   // 自定义\n  },\n  _tree:  null,\n  _roots: null,\n  _value: null,\n  _item:  null,\n  _setting: null,\n\n  data() {\n    return {\n      txt: this.text,\n      focused: false,\n      hover: false,\n      open:  false,\n    };\n  },\n  watch: {\n    value: function(v) {\n      this._myself ? (this._myself = false) : (this._value = v, this.refresh());\n    },\n    text: function(v) {\n      this.txt = v;\n    },\n    focused: function(v) {\n      document[v?'addEventListener':'removeEventListener']('click', this.checkBlur);\n    }\n  },\n  mounted() {\n    this._setting = Object.assign({callback: {}}, this.setting);\n    this._setting.check = Object.assign({enable: false, hasOwnField: this.hasOwnField}, this.setting.check||{});\n    this._value = this.value;\n    if (this.value === null) return;\n\n    if (Array.isArray(this.value)) {//多选\n      this._setting.check.enable = true\n      if (this.value.length == 0) return;\n    }\n    // 获取文字出来显示\n    !this.text && this.refresh();\n    this.txt = this.txt || this.text;\n  },\n  methods: {\n    refresh() {\n      this.txt = null;\n      this._item = null;\n      this._getRoots(this._setItemAndText.bind(this));\n    },\n    _setItemAndText(roots) {\n      if (!roots) return;\n      if (this._setting.check.enable === true) {\n        this._item = this.valueField ? getNodesByValues(roots, this.value, this.valueField, this.hasOwnField) : [...this.value];\n        this._item && this.setTxt(this._item, true);\n      } else {\n        this._item = this.valueField ? getNodeByValue(roots, this.value, this.valueField, this.hasOwnField) : this.value;\n        this._item && this.setTxt(this._item, false);\n      }\n    },\n    setTxt(item, isarray) {\n      if (this.labelField) {//如果设置labelField，根据labelField值显示值\n        this.txt = isarray ? arrayGetValue(item,this.labelField).join(',') : item[this.labelField];\n      } else if (this.tree.getNodeText || (this._setting.view && this._setting.view.nameFunction)) {\n        let fun = this.tree.getNodeText || (this._setting.view && this._setting.view.nameFunction);\n        if (isarray) {\n          let array = [];\n          for (let i=0, len=item.length; i<len; i++) {\n            array.push(fun(item[i]));\n          }\n          this.txt = array.join(',');\n        } else {\n          this.txt = fun(item);\n        }\n      } else {\n        let feild = this._setting.data && this._setting.data.key && this._setting.data.key.name;\n        feild = feild || 'name';\n        this.txt = isarray ? arrayGetValue(item,feild).join(',') : item[feild];\n      }\n    },\n    _getRoots(callback) {\n      if (this._roots) return callback(this._roots);\n      this.getTreeRoots ? this.getTreeRoots(roots => {\n        this._roots = Array.isArray(roots) ? roots : [roots];\n        callback(this._roots);\n      }) : (\n        this.tree.getTreeRoots ? this.tree.getTreeRoots(callback) : callback(null)\n      );\n    },\n    toggleShowTree() {// 显示或隐藏选项列表\n      this.$el.focus();\n      this.$emit('click');\n      if(this.custom){\n        return;\n      }\n      this.open ? this.hideTree() : this.showTree();\n    },\n    showTree() {\n      if (!this._tree) {\n        let onTreeInited = () => {\n          if (!this._item && this.value) {\n            let roots = this._tree.getTree().getNodes();\n            this._setItemAndText(roots);\n          }\n          if (this._item) {\n            if (this._setting.check.enable === true) {//多选\n              this._tree.checkNodes(this._item, true, true);\n              this._tree.selectNode(this._item[0]);\n            } else {\n              this._tree.selectNode(this._item);\n            }\n          }\n        };\n        this.createTree(onTreeInited);\n        this._tree.init && this._getRoots(roots => this._tree.init(roots, this.expandRoot));\n      } else {\n        this.styleTree();\n      }\n      this.open = true;\n      document.addEventListener('click', this.onMouseClick);\n    },\n    hideTree() {// 隐藏弹出的选项列表\n      this._tree.$el.style.display = 'none';\n      this.open = false;\n      document.removeEventListener('click', this.onMouseClick);\n    },\n    onMouseClick(event) {\n      if (!this._tree.$el.contains(event.target) && !this.$el.contains(event.target)) {\n        this.hideTree();\n      }\n    },\n    checkBlur(event) {\n      this.focused = this.$el.contains(event.target);\n    },\n    createTree(onTreeInited) {\n      if (this._setting.check.enable === true) {//多选\n        this._setting.callback.onCheck && (this._setting.callback._onCheck = this._setting.callback.onCheck);\n        this._setting.callback.onCheck = this.onItemCheck;\n      } else {\n        this._setting.callback.onClick && (this._setting.callback._onClick = this._setting.callback.onClick);\n        this._setting.callback.onClick = this.onItemClick;\n      }\n      let constructor = Vue.extend(this.tree);\n      this._tree = new constructor({propsData: {setting:this._setting, miniBar:true, borderColor:this.borderColor, searchable:this.searchable, onTreeInited:onTreeInited}});\n      this._tree.$mount();\n      this.styleTree();\n      this.$el.appendChild(this._tree.$el);\n    },\n    styleTree() {\n      // 自动判断是显示在下面还是上面\n      let {left, top} = domLeftTop(this.$el), isbottom = true, _treeHeight = this.treeHeight;\n      let this_height = this.$el.clientHeight + (this.border ? 2 : 0);\n      let down = document.documentElement.clientHeight - top - this_height;\n      if (down > _treeHeight) {// 下面空间充足，显示在下面\n        top += this_height;\n      } else if (top > _treeHeight) {// 上面空间足够，显示在上面\n        top -= _treeHeight - 0;\n        isbottom = false;\n      } else {// 上面和下面的空间都不够\n        if (down > top) {// 下面的空间大，显示在下面\n          _treeHeight = down - 20;\n          top += this_height;\n        } else {// 上面的空间大，显示在上面\n          _treeHeight = top - 5;\n          top -= _treeHeight - 0;\n          isbottom = false;\n        }\n      }\n      let style = this._tree.$el.style;\n      style.position = \"fixed\";\n      style['box-shadow'] = '0px 0px 5px 0px RGBA(0, 0, 0, 0.1)';\n      style[isbottom?'border-top-width':'border-bottom-width'] = 0;\n      style['z-index'] = $_theme.zindex();\n      style.top = top + 'px';\n      style.left = left + 'px';\n      style.height = _treeHeight + 'px',\n      style.width = (this.treeWidth || this.$el.offsetWidth) + 'px';\n      style.display = 'block';\n    },\n    onItemClick(node, event) {\n      if (this.hasOwnField && !node.hasOwnProperty(this.hasOwnField)) return;\n      this._setting.callback._onClick && this._setting.callback._onClick(node, event);\n      if (this._item == node) return this.hideTree();\n      this._item = node;\n      let value = this.valueField ? node[this.valueField] : node;\n      if (this._value === value) return this.hideTree();\n      this._value = value;\n      this.setTxt(node, false);\n      this._myself = true;\n      this.$emit('input',  value);\n      this.$emit('change', value, node, this.txt);\n      this.hideTree();\n    },\n    onItemCheck(node, chgs, value, event) {\n      this._item = this._item || [];\n      this._value = this._value || [];\n      this._setting.callback._onCheck && this._setting.callback._onCheck(node, chgs, value, event);\n\n      let items = [], roots = value == 0 ? this._tree.getTree().getNodes() : null;\n      if (roots && roots.length == 1 && roots[0] == node) {//根结点全不选\n        this.txt = '';\n        this._item = [];\n        this._value = [];\n      } else {\n        for (let i=0,len=chgs.length; i<len; i++) {\n          node = chgs[i];\n          items.push(node);\n          if (value == 1) {\n            this._item.push(node);\n            this._value.push(this.valueField ? node[this.valueField] : node);\n          } else {\n            items.push(node);\n            arrayRemoveItem(this._item, node);\n            arrayRemoveItem(this._value, this.valueField ? node[this.valueField] : node);\n          }\n        }\n        this.setTxt(this._item, true);\n      }\n      this._myself = true;\n      this.$emit('input',  this._value);\n      this.$emit('change', items, value == 1, this.txt);\n    },\n    getSelectedItem() {\n      return this._item;\n    },\n    clear() {\n      this.open && this.hideTree();\n      this.txt = null;\n      if (this._setting.check.enable && this._tree) {\n        if (this._item && this._item.length > 0) {\n          this._tree.getTree().checkAllNodes(false);\n        }\n      }\n      this._value = null;\n      this._item = null;\n      this._myself = true;\n      this.$emit('input', null);\n      this.$emit('change', null, null, null);\n    }\n  },\n  computed: {\n    showClear() {// 判断是否要显示清除按钮\n      return this.clearable && this.hover && this.txt;\n    },\n    lineHeight() {// 获取除边框外的高度\n      return this.height - (this.border ? 2 : 0);\n    },\n    labelStyle() {\n      return {\n        minWidth:this.labelMinWidth + 'px',\n        maxWidth:this.labelMaxWidth + 'px',\n        borderRightColor: this.theme.border_color_light,\n        backgroundColor: this.theme.bg_color\n      };\n    },\n  },\n  beforeDestroy() {\n    this.focused = false;\n    this.open && this.hideTree();\n    this._tree && this._tree.destroy();\n    this._tree = null;\n    this._roots = null;\n    this._item = null;\n    this._value = null;\n    this._setting = null;\n  }\n};\n",{"version":3,"sources":["InputTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"InputTree.vue","sourceRoot":"src/components","sourcesContent":["\r\n<template>\r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"{height:`${height}px`, borderColor:focused?theme.color:borderColor, zIndex:focused?theme.zindex():''}\" tabindex=\"0\" @focus=\"focused=true\" @mouseenter=\"hover=true\" @mouseleave=\"hover=false\">\r\n\r\n    <!--label显示-->\r\n    <span :class=\"$style.label\" :style=\"labelStyle\"  v-if=\"label\" is-label>{{label}}</span>\r\n\r\n    <!--必填显示-->\r\n    <span :class=\"[$style.required,'el-icon-star-on']\" :style=\"{backgroundColor:theme.bg_color}\" v-if=\"required\"></span>\r\n\r\n    <!--下拉图标和清除图标显示-->\r\n    <i :class=\"[$style.icon,open?'el-icon-arrow-up':'el-icon-arrow-down']\" :style=\"{lineHeight:lineHeight+'px'}\" v-show=\"!showClear\" @click=\"toggleShowTree\"></i>\r\n    <i :class=\"$style.icon\" :style=\"{lineHeight:lineHeight+'px'}\" v-show=\"showClear\"  class=\"el-icon-close\" @click.stop=\"clear\"></i>\r\n\r\n    <!--selector显示-->\r\n    <div ref=\"selector\" :title=\"txt\" :class=\"$style.selector\" @click=\"toggleShowTree\" :style=\"[{lineHeight:lineHeight+'px'},inputStyle]\">\r\n        <span :class=\"$style.placeholder\" v-if=\"!txt && placeholder\">{{placeholder}}</span>\r\n        <span>{{txt}}</span>\r\n    </div>\r\n\r\n    <!--不可操作层-->\r\n    <div v-if=\"disabled\" :class=\"$style.disabled\"/>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  /*\r\n  * 单选树使用例子\r\n  * <InputTree label=\"选择地区\" valueField=\"id\" :setting=\"setting\" v-model=\"value\" :text=\"text\" :getTreeRoots=\"getTreeRoots\" @change=\"onSelectChg\"/>\r\n  *\r\n  *  data: {value: 0, text: '中国', setting: {参考zTree的setting}},\r\n  *  methods: {\r\n  *    getTreeRoots(callback) {\r\n  *      // 异步或同步取到树根结点roots\r\n  *      callback(roots); //记得调用回调函数，把数据传回去\r\n  *    },\r\n  *    onSelectChg(value, node) {// value是node的valueField值, node是树结点对象\r\n  *    }\r\n  *  }\r\n  * ========================================================================================================\r\n  *  多选树使用例子：车辆树选多部车辆\r\n  *  <InputTree label=\"选择一部车\" :tree=\"carTree\" v-model=\"carIds\" hasOwnField=\"plate\" @change=\"onCheckChg\"/>\r\n  *\r\n  *  import CarTree from '@/common/tree/CarTree.vue';\r\n  *  data: {carIds:[]}, // carIds因为是多选，所以是数组\r\n  *  computed: {\r\n  *    carTree: function() { return CarTree }\r\n  *  },\r\n  *  methods: {\r\n  *    onCheckChg(cars, checked) {// cars是当次勾选发生变化的车辆列表；checked:true勾上,false:去勾\r\n  *    }\r\n  *  }\r\n  *  hasOwnField=\"plate\" 车辆树即有车辆也有车队，plate字段是车辆才有的，表示只允许选上车辆\r\n  */\r\n\r\n  import Vue from 'vue';\r\n\r\n  import { domLeftTop } from '@/components/util/Dom.js';\r\n  import { arrayGetValue } from '@/common/util/Arrays.js';\r\n  import { arrayRemoveItem } from '@/common/util/Arrays.js';\r\n  import { getNodeByValue } from '@/common/util/Trees.js';\r\n  import { getNodesByValues } from '@/common/util/Trees.js';\r\n\r\n  import Tree from '@/components/Tree';\r\n\r\n  export default {\r\n    name: \"InputTree\",\r\n    props: {\r\n      label: String,                                               // 标题文本\r\n      tree:        { default: ()=>{return Tree} },                 // 树组件\r\n      setting:     { default: ()=>{return {}} },                   // 参考ztree的setting配置\r\n      getTreeRoots: Function,                                      // 调用该方法获取树结点\r\n      expandRoot: { type: Boolean,  default: true },               // 显示树时默认展开根结点\r\n      hasOwnField: { type: String,  default: null },               // 只对树有该属性的结点处理\r\n      value: null,                                                 // 当前值(v-model)\r\n      text:  null,                                                 // 初始显示文本\r\n      labelField: { type: String,  default: null },                // 显示字段，如果不指定，将使用tree的显示字段或nameFunction\r\n      valueField: { type: String,  default: 'id' },                // 值字段\r\n      treeWidth:  { type: Number,  default: 0 },                   // 弹出树的宽度px，0则默认InputTree的总宽度\r\n      treeHeight: { type: Number,  default: 350 },                 // 弹出树的高度px\r\n      placeholder: String,\r\n      searchable: { type: Boolean, default: true },                // 是否显示搜索栏\r\n      required:   Boolean,                                         // 是否显示必填\r\n      disabled:   Boolean,                                         // 是否可操作\r\n      clearable:  Boolean,                                         // 是否显示可清除图标\r\n      border:     { type: Boolean, default: true },                // 是否显示边框\r\n      borderColor:{ default: $_theme.border_color_light },\r\n      height:     { type: Number,  default: $_theme.inputHeight }, // 高度数值，单位是px\r\n      inputStyle: { default: null },                                // 输入框的style\r\n      labelMinWidth:{ type: Number,  default: 10 },  \t\t  \t   // lable宽度最小数值，单位是px\r\n      labelMaxWidth:{ type: Number},  \t\t  \t   // lable宽度最小数值，单位是px\r\n      custom: { type: Boolean, default: false }   // 自定义\r\n    },\r\n    _tree:  null,\r\n    _roots: null,\r\n    _value: null,\r\n    _item:  null,\r\n    _setting: null,\r\n\r\n    data() {\r\n      return {\r\n        txt: this.text,\r\n        focused: false,\r\n        hover: false,\r\n        open:  false,\r\n      };\r\n    },\r\n    watch: {\r\n      value: function(v) {\r\n        this._myself ? (this._myself = false) : (this._value = v, this.refresh());\r\n      },\r\n      text: function(v) {\r\n        this.txt = v;\r\n      },\r\n      focused: function(v) {\r\n        document[v?'addEventListener':'removeEventListener']('click', this.checkBlur);\r\n      }\r\n    },\r\n    mounted() {\r\n      this._setting = Object.assign({callback: {}}, this.setting);\r\n      this._setting.check = Object.assign({enable: false, hasOwnField: this.hasOwnField}, this.setting.check||{});\r\n      this._value = this.value;\r\n      if (this.value === null) return;\r\n\r\n      if (Array.isArray(this.value)) {//多选\r\n        this._setting.check.enable = true\r\n        if (this.value.length == 0) return;\r\n      }\r\n      // 获取文字出来显示\r\n      !this.text && this.refresh();\r\n      this.txt = this.txt || this.text;\r\n    },\r\n    methods: {\r\n      refresh() {\r\n        this.txt = null;\r\n        this._item = null;\r\n        this._getRoots(this._setItemAndText.bind(this));\r\n      },\r\n      _setItemAndText(roots) {\r\n        if (!roots) return;\r\n        if (this._setting.check.enable === true) {\r\n          this._item = this.valueField ? getNodesByValues(roots, this.value, this.valueField, this.hasOwnField) : [...this.value];\r\n          this._item && this.setTxt(this._item, true);\r\n        } else {\r\n          this._item = this.valueField ? getNodeByValue(roots, this.value, this.valueField, this.hasOwnField) : this.value;\r\n          this._item && this.setTxt(this._item, false);\r\n        }\r\n      },\r\n      setTxt(item, isarray) {\r\n        if (this.labelField) {//如果设置labelField，根据labelField值显示值\r\n          this.txt = isarray ? arrayGetValue(item,this.labelField).join(',') : item[this.labelField];\r\n        } else if (this.tree.getNodeText || (this._setting.view && this._setting.view.nameFunction)) {\r\n          let fun = this.tree.getNodeText || (this._setting.view && this._setting.view.nameFunction);\r\n          if (isarray) {\r\n            let array = [];\r\n            for (let i=0, len=item.length; i<len; i++) {\r\n              array.push(fun(item[i]));\r\n            }\r\n            this.txt = array.join(',');\r\n          } else {\r\n            this.txt = fun(item);\r\n          }\r\n        } else {\r\n          let feild = this._setting.data && this._setting.data.key && this._setting.data.key.name;\r\n          feild = feild || 'name';\r\n          this.txt = isarray ? arrayGetValue(item,feild).join(',') : item[feild];\r\n        }\r\n      },\r\n      _getRoots(callback) {\r\n        if (this._roots) return callback(this._roots);\r\n        this.getTreeRoots ? this.getTreeRoots(roots => {\r\n          this._roots = Array.isArray(roots) ? roots : [roots];\r\n          callback(this._roots);\r\n        }) : (\r\n          this.tree.getTreeRoots ? this.tree.getTreeRoots(callback) : callback(null)\r\n        );\r\n      },\r\n      toggleShowTree() {// 显示或隐藏选项列表\r\n        this.$el.focus();\r\n        this.$emit('click');\r\n        if(this.custom){\r\n          return;\r\n        }\r\n        this.open ? this.hideTree() : this.showTree();\r\n      },\r\n      showTree() {\r\n        if (!this._tree) {\r\n          let onTreeInited = () => {\r\n            if (!this._item && this.value) {\r\n              let roots = this._tree.getTree().getNodes();\r\n              this._setItemAndText(roots);\r\n            }\r\n            if (this._item) {\r\n              if (this._setting.check.enable === true) {//多选\r\n                this._tree.checkNodes(this._item, true, true);\r\n                this._tree.selectNode(this._item[0]);\r\n              } else {\r\n                this._tree.selectNode(this._item);\r\n              }\r\n            }\r\n          };\r\n          this.createTree(onTreeInited);\r\n          this._tree.init && this._getRoots(roots => this._tree.init(roots, this.expandRoot));\r\n        } else {\r\n          this.styleTree();\r\n        }\r\n        this.open = true;\r\n        document.addEventListener('click', this.onMouseClick);\r\n      },\r\n      hideTree() {// 隐藏弹出的选项列表\r\n        this._tree.$el.style.display = 'none';\r\n        this.open = false;\r\n        document.removeEventListener('click', this.onMouseClick);\r\n      },\r\n      onMouseClick(event) {\r\n        if (!this._tree.$el.contains(event.target) && !this.$el.contains(event.target)) {\r\n          this.hideTree();\r\n        }\r\n      },\r\n      checkBlur(event) {\r\n        this.focused = this.$el.contains(event.target);\r\n      },\r\n      createTree(onTreeInited) {\r\n        if (this._setting.check.enable === true) {//多选\r\n          this._setting.callback.onCheck && (this._setting.callback._onCheck = this._setting.callback.onCheck);\r\n          this._setting.callback.onCheck = this.onItemCheck;\r\n        } else {\r\n          this._setting.callback.onClick && (this._setting.callback._onClick = this._setting.callback.onClick);\r\n          this._setting.callback.onClick = this.onItemClick;\r\n        }\r\n        let constructor = Vue.extend(this.tree);\r\n        this._tree = new constructor({propsData: {setting:this._setting, miniBar:true, borderColor:this.borderColor, searchable:this.searchable, onTreeInited:onTreeInited}});\r\n        this._tree.$mount();\r\n        this.styleTree();\r\n        this.$el.appendChild(this._tree.$el);\r\n      },\r\n      styleTree() {\r\n        // 自动判断是显示在下面还是上面\r\n        let {left, top} = domLeftTop(this.$el), isbottom = true, _treeHeight = this.treeHeight;\r\n        let this_height = this.$el.clientHeight + (this.border ? 2 : 0);\r\n        let down = document.documentElement.clientHeight - top - this_height;\r\n        if (down > _treeHeight) {// 下面空间充足，显示在下面\r\n          top += this_height;\r\n        } else if (top > _treeHeight) {// 上面空间足够，显示在上面\r\n          top -= _treeHeight - 0;\r\n          isbottom = false;\r\n        } else {// 上面和下面的空间都不够\r\n          if (down > top) {// 下面的空间大，显示在下面\r\n            _treeHeight = down - 20;\r\n            top += this_height;\r\n          } else {// 上面的空间大，显示在上面\r\n            _treeHeight = top - 5;\r\n            top -= _treeHeight - 0;\r\n            isbottom = false;\r\n          }\r\n        }\r\n        let style = this._tree.$el.style;\r\n        style.position = \"fixed\";\r\n        style['box-shadow'] = '0px 0px 5px 0px RGBA(0, 0, 0, 0.1)';\r\n        style[isbottom?'border-top-width':'border-bottom-width'] = 0;\r\n        style['z-index'] = $_theme.zindex();\r\n        style.top = top + 'px';\r\n        style.left = left + 'px';\r\n        style.height = _treeHeight + 'px',\r\n        style.width = (this.treeWidth || this.$el.offsetWidth) + 'px';\r\n        style.display = 'block';\r\n      },\r\n      onItemClick(node, event) {\r\n        if (this.hasOwnField && !node.hasOwnProperty(this.hasOwnField)) return;\r\n        this._setting.callback._onClick && this._setting.callback._onClick(node, event);\r\n        if (this._item == node) return this.hideTree();\r\n        this._item = node;\r\n        let value = this.valueField ? node[this.valueField] : node;\r\n        if (this._value === value) return this.hideTree();\r\n        this._value = value;\r\n        this.setTxt(node, false);\r\n        this._myself = true;\r\n        this.$emit('input',  value);\r\n        this.$emit('change', value, node, this.txt);\r\n        this.hideTree();\r\n      },\r\n      onItemCheck(node, chgs, value, event) {\r\n        this._item = this._item || [];\r\n        this._value = this._value || [];\r\n        this._setting.callback._onCheck && this._setting.callback._onCheck(node, chgs, value, event);\r\n\r\n        let items = [], roots = value == 0 ? this._tree.getTree().getNodes() : null;\r\n        if (roots && roots.length == 1 && roots[0] == node) {//根结点全不选\r\n          this.txt = '';\r\n          this._item = [];\r\n          this._value = [];\r\n        } else {\r\n          for (let i=0,len=chgs.length; i<len; i++) {\r\n            node = chgs[i];\r\n            items.push(node);\r\n            if (value == 1) {\r\n              this._item.push(node);\r\n              this._value.push(this.valueField ? node[this.valueField] : node);\r\n            } else {\r\n              items.push(node);\r\n              arrayRemoveItem(this._item, node);\r\n              arrayRemoveItem(this._value, this.valueField ? node[this.valueField] : node);\r\n            }\r\n          }\r\n          this.setTxt(this._item, true);\r\n        }\r\n        this._myself = true;\r\n        this.$emit('input',  this._value);\r\n        this.$emit('change', items, value == 1, this.txt);\r\n      },\r\n      getSelectedItem() {\r\n        return this._item;\r\n      },\r\n      clear() {\r\n        this.open && this.hideTree();\r\n        this.txt = null;\r\n        if (this._setting.check.enable && this._tree) {\r\n          if (this._item && this._item.length > 0) {\r\n            this._tree.getTree().checkAllNodes(false);\r\n          }\r\n        }\r\n        this._value = null;\r\n        this._item = null;\r\n        this._myself = true;\r\n        this.$emit('input', null);\r\n        this.$emit('change', null, null, null);\r\n      }\r\n    },\r\n    computed: {\r\n      showClear() {// 判断是否要显示清除按钮\r\n        return this.clearable && this.hover && this.txt;\r\n      },\r\n      lineHeight() {// 获取除边框外的高度\r\n        return this.height - (this.border ? 2 : 0);\r\n      },\r\n      labelStyle() {\r\n        return {\r\n          minWidth:this.labelMinWidth + 'px',\r\n          maxWidth:this.labelMaxWidth + 'px',\r\n          borderRightColor: this.theme.border_color_light,\r\n          backgroundColor: this.theme.bg_color\r\n        };\r\n      },\r\n    },\r\n    beforeDestroy() {\r\n      this.focused = false;\r\n      this.open && this.hideTree();\r\n      this._tree && this._tree.destroy();\r\n      this._tree = null;\r\n      this._roots = null;\r\n      this._item = null;\r\n      this._value = null;\r\n      this._setting = null;\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .container {\r\n    outline: none;\r\n    display: inline-block;\r\n    white-space: nowrap;\r\n    background-color: #fff;\r\n    position: relative;\r\n    user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    -moz-user-select: none;\r\n  }\r\n  .container > *:not(ul) {\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .border {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n  }\r\n  /* 标题文本 */\r\n  .label {\r\n    float: left;\r\n    padding: 0 6px;\r\n    border-right-style: solid;\r\n    border-right-width: 0px;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  /* select容器 */\r\n  .selector {\r\n    padding-left: 8px;\r\n    margin-right: 24px;\r\n    cursor: pointer;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n  .placeholder {\r\n    color: #B0B0B0;\r\n  }\r\n  .icon {\r\n    float: right;\r\n    width: 20px;\r\n    line-height: 0;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n  }\r\n  /* 下拉容器 */\r\n  .dropdown {\r\n    position: fixed;\r\n    padding: 0;\r\n    margin: 0;\r\n    list-style: none;\r\n    background-color: #fff;\r\n    margin-block-start: 0;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    overflow-y: auto;\r\n  }\r\n  .option_item {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    padding: 0 8px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  /* 必填 */\r\n  .required {\r\n    float: right;\r\n    padding: 0 2px;\r\n    color: #f00;\r\n  }\r\n  /* 禁止操作 */\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(255, 255, 255, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60);\r\n    cursor: not-allowed;\r\n  }\r\n</style>\r\n"]}]}