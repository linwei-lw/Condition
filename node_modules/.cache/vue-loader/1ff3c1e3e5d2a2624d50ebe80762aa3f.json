{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Checkbox.vue?vue&type=style&index=0&module=true&lang=css&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Checkbox.vue","mtime":1661156214083},{"path":"D:\\cdRule\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.checked         { color: var(--checkedColor); }\n.checked:hover   { color: var(--checkedHoverColor); }\n.unchecked       { color: var(--uncheckedColor); }\n.unchecked:hover { color: var(--uncheckedHoverColor); }\n\n.container {\n  display: inline-block;\n  white-space: nowrap;\n  cursor: pointer;\n  background-repeat: no-repeat;\n  /*background-position: 0 center;*/\n}\n.disabled {\n  opacity: 0.5;\n  filter: alpha(opacity=50); \n  cursor: not-allowed;\n}\n",{"version":3,"sources":["Checkbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Checkbox.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <label :class=\"[$style.container, disabled && $style.disabled]\" >\r\n    <i style=\"font-size:13px\" :class=\"[checked ?[$style.checked,'el-icon-yixuan1'] : [$style.unchecked,'el-icon-weixuan']]\" :style=\"{'--checkedColor': checkedColor||theme.color,'--checkedHoverColor': checkedHoverColor||theme.color,'--uncheckedColor': uncheckedColor,'--uncheckedHoverColor': uncheckedHoverColor||theme.color}\"></i>\r\n    <input v-if=\"!values\"\r\n      type=\"checkbox\"\r\n      style=\"display:none;\"\r\n      :disabled=\"disabled\"\r\n      :checked=\"checked\"\r\n      @change=\"!disabled && change($event)\">\r\n    <input v-else\r\n      type=\"checkbox\"\r\n      style=\"display:none;\"\r\n      :disabled=\"disabled\"\r\n      :value=\"val\"\r\n      v-model=\"values\"\r\n      @change=\"!disabled && change($event)\">\r\n\r\n    <slot><span style=\"margin-left:4px;color:#fff\" :style=\"[labelStyle,{color:checked?checkedColor||theme.color:''}]\">{{ label }}</span></slot>\r\n  </label>\r\n\r\n</template>\r\n\r\n<script>\r\n  /*\r\n  * 单个使用例子\r\n  * <Checkbox v-model=\"rmb\" label=\"记住账号\" @change=\"onCheckChg\"/>\r\n  * \r\n  *  data: {rmb: false},\r\n  *  methods: {\r\n  *    onCheckChg(value) {// value值是true或false\r\n  *    }\r\n  *  }\r\n  * ======================================================\r\n  * 组合使用例子\r\n  * <Checkbox label=\"吃饭\" :val=\"1\" v-model=\"likes\" @change=\"onCheckChg\"/>\r\n  * <Checkbox label=\"睡觉\" :val=\"2\" v-model=\"likes\" @change=\"onCheckChg\"/>\r\n  * \r\n  *  data: {likes: [1,2]},\r\n  *  methods: {\r\n  *    onCheckChg(val, checked, likes) {\r\n  *    }\r\n  *  }\r\n  */\r\n\r\n  export default {\r\n    name: \"Checkbox\",\r\n    props: {\r\n      value: { default: false },   // 当前值(v-model)\r\n      true:  { default: true  },   // 选中的值　（组合使用无效）\r\n      false: { default: false },   // 不选中的值（组合使用无效）\r\n      label: String,               // 文本内容\r\n      val:   { default: null},     // 组合使用时，当前checkbox的值\r\n      labelStyle: { default: null },\r\n      checkedColor: { type: String, default: null },                // 选中图标颜色\r\n      checkedHoverColor: { type: String, default: null },           // 选中停留图标颜色\r\n      uncheckedColor: { type: String, default: null },              // 未选中图标颜色\r\n      uncheckedHoverColor: { type: String, default: null },         // 未选中停留图标颜色\r\n      disabled: Boolean            // 是否可操作\r\n    },\r\n    data() {\r\n      return { \r\n        values: null ,\r\n      }\r\n    },\r\n    computed: {\r\n      checked()   { return this.values ? this.values.indexOf(this.val) >= 0 : this.value === this.true; }\r\n    },\r\n    watch: {\r\n      value (v) {\r\n        Array.isArray(v) && (this.values = v);\r\n      }\r\n    },\r\n    mounted() {\r\n      Array.isArray(this.value) && (this.values = this.value);\r\n      this.$nextTick(() => {\r\n        let lineHeight = Math.max(this.$el.clientHeight || 16, 16);\r\n        this.$el.style['line-height'] = lineHeight + 'px';\r\n        this.$el.style['background-position-y'] = parseInt((lineHeight-13)/2) + 'px';\r\n      });\r\n    },\r\n    methods: {\r\n      change(event) {\r\n        if (this.values) {\r\n          this.$emit('input', this.values);\r\n          this.$emit('change',this.val, this.checked, this.values);\r\n          return;\r\n        }\r\n        let checked = event.target.checked;\r\n        let value = checked ? this.true : this.false;\r\n        this.$emit('input',  value);\r\n        this.$emit('change', value);\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .checked         { color: var(--checkedColor); }\r\n  .checked:hover   { color: var(--checkedHoverColor); }\r\n  .unchecked       { color: var(--uncheckedColor); }\r\n  .unchecked:hover { color: var(--uncheckedHoverColor); }\r\n\r\n  .container {\r\n    display: inline-block;\r\n    white-space: nowrap;\r\n    cursor: pointer;\r\n    background-repeat: no-repeat;\r\n    /*background-position: 0 center;*/\r\n  }\r\n  .disabled {\r\n    opacity: 0.5;\r\n    filter: alpha(opacity=50); \r\n    cursor: not-allowed;\r\n  }\r\n</style>"]}]}