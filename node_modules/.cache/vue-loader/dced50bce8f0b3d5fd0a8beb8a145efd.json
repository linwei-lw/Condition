{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\common\\tree\\AlarmTree.vue?vue&type=style&index=2&lang=css&","dependencies":[{"path":"D:\\cdRule\\src\\common\\tree\\AlarmTree.vue","mtime":1656123617682},{"path":"D:\\cdRule\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n/* @import '../../components/Tree/zTreeStyle.css'; */\r\n",{"version":3,"sources":["AlarmTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA","file":"AlarmTree.vue","sourceRoot":"src/common/tree","sourcesContent":["\r\n<template>\r\n\r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"{borderColor:borderColor}\">\r\n    <Toolbar v-if=\"searchable\" :border=\"false\" small :mini=\"miniBar\" style=\"border-bottom-width:1px;border-bottom-style:solid;\" :style=\"{borderColor:theme.border_color_light}\">\r\n      <SearchBox :placeholder=\"placeholder\" :style=\"{width:miniBar?'calc(100% - 6px)':'calc(100% - 10px)'}\" :height=\"miniBar?26:theme.inputHeight\" :treeBorder=\"border\" :showSearchIcon=\"showSearchIcon\" :onItemSelected=\"onSearchItemSelected\" ref=\"searchBox\">\r\n        <Button v-if=\"types.indexOf('group')>=0\" @click=\"model='group'\" :padding=\"miniBar?'0 4px':'0 7px'\" :height=\"miniBar?24:(theme.inputHeight-2)\" :type=\"model=='group'?'primary':'plain'\" :title=\"$_L.get('显示分组报警')\" :border=\"false\" :icon=\"model=='group'?'el-icon-user-solid':'el-icon-user'\" style=\"float:right;margin:1px 1px 1px 0px;\" />\r\n        <Button v-if=\"types.indexOf('fav')>=0\" @click=\"model='fav'\" :padding=\"miniBar?'0 4px':'0 7px'\" :height=\"miniBar?24:(theme.inputHeight-2)\" :type=\"model=='fav'?'primary':'plain'\" :title=\"$_L.get('显示关注报警')\" :border=\"false\" :icon=\"model=='fav'?'el-icon-star-on':'el-icon-star-off'\" style=\"float:right;margin:1px 1px 1px 0px;\" />\r\n        <Button v-if=\"types.indexOf('all')>=0\" @click=\"model='all'\" :padding=\"miniBar?'0 4px':'0 7px'\" :height=\"miniBar?24:(theme.inputHeight-2)\" :type=\"model=='all'?'primary':'plain'\" :title=\"$_L.get('显示所有报警')\" :border=\"false\" :icon=\"model=='all'?'el-icon-success':'el-icon-circle-check'\" style=\"float:right;margin:1px 1px 1px 0px;\" />\r\n      </SearchBox>\r\n      <slot></slot>\r\n    </Toolbar>\r\n\r\n    <div style=\"overflow: auto;\" :style=\"{height: searchable ? (miniBar ? 'calc(100% - 32px)' : 'calc(100% - 42px)') : '100%'}\">\r\n      <ul :id=\"treeId\" :class=\"['ztree', frozenRoot && 'ztree_frozen']\" ref=\"treeUl\"></ul>\r\n      <span v-if=\"groupEmpty && model=='group'\" style=\"position:absolute;left:0;top:60px;width:100%;text-align:center\">\r\n        {{$_L.get('[更多]->[系统设置]->[报警分组] 进行设置')}}\r\n      </span>\r\n      <div v-if=\"disabled\" :class=\"$style.disabled\" />\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport SearchBox from \"@/components/Tree/SearchBox.vue\";\r\nimport { getAlarmType, getFavAlarmType, getGroupRoot } from '@/common/cache/CacheAlarm.js';\r\nimport { onAlarmTreeAdd, onAlarmTreeRemove } from '@/common/cache/CacheAlarm.js';\r\nimport { arrayRemoveItem, arrayRemoveFilter } from '@/common/util/Arrays.js';\r\n\r\nexport default {\r\n  components: { SearchBox },\r\n  props: {\r\n    setting: { default: () => { return { type: 'group-fav-all' } } },      // 参考ztree的setting配置 fav:关注报警 group:分组报警  all:所有报警\r\n    frozenRoot: { type: Boolean, default: false },                     // 冻结根结点，不显示根结点的+-图标\r\n    disabled: { type: Boolean, default: false },                     // 是否可操作\r\n    border: { type: Boolean, default: true },                     // 是否显示边框\r\n    borderColor: { type: String, default: $_theme.border_color_dark },  // 边框颜色\r\n    searchable: { type: Boolean, default: true },                     // 是否显示搜索栏\r\n    placeholder: String,\r\n    miniBar: { type: Boolean, default: false },                     // 是否显示搜索栏\r\n    showSearchIcon: { type: Boolean, default: true },                     // 是否显示搜索图标\r\n    onSearchItemSelected: Function,                                        // 选中了搜索栏查出的某个结点的回调函数，参数(node)\r\n    onTreeInited: Function\r\n  },\r\n\r\n  _tree: null,\r\n\r\n  getTreeRoots: callback => getAlarmType(o => callback(o.tree)),\r\n  getNodeText: node => node.name,\r\n\r\n  data() {\r\n    return {\r\n      treeId: 'tree_' + $_theme.zindex(),\r\n      types: ['group', 'fav', 'all'],\r\n      model: 'group',\r\n      groupEmpty: false,\r\n    };\r\n  },\r\n\r\n  created() {\r\n    this.setting.type && (this.types = this.setting.type.split('-'));\r\n    if (this.types.indexOf('group') >= 0 && getGroupRoot().children.length == 0) {\r\n      this.groupEmpty = true;\r\n    }\r\n    if (this.types.indexOf('fav') >= 0 && getFavAlarmType().list.length == 0) {\r\n      arrayRemoveItem(this.types, 'fav');\r\n    }\r\n    this.model = this.types[0];\r\n    if (this.groupEmpty && this.model == 'group') {\r\n      if (this.types.length > 1) this.model = this.types[1];\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    model: function (v) {\r\n      //避免数据冲突\r\n      $.fn.zTree.destroy(this.treeId);\r\n      this.onModelChg(v);\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.onModelChg(this.model);\r\n  },\r\n\r\n  methods: {\r\n    onModelChg(v) {\r\n      switch (v) {\r\n        case 'fav': return this.onLoaded(getFavAlarmType().root, 'fav_children', 'fav_parent');\r\n        case 'all': return this.onLoaded(getAlarmType().root, 'children', 'parent');\r\n        case 'group': return this.onLoaded(getGroupRoot(), 'group_children', 'group_parent');\r\n      }\r\n    },\r\n    onLoaded(root, childrenKey, parentKey) {\r\n      this.setting.view = this.setting.view || {};\r\n      this.setting.view.iconUrlFunction = () => this._icon;\r\n\r\n      this.setting.data = this.setting.data || {};\r\n      this.setting.data.key = this.setting.data.key || {};\r\n      this.setting.data.key.parent = parentKey;\r\n      this.setting.data.key.children = childrenKey;\r\n\r\n      this._root = this._root || [];\r\n      this._root.forEach(root => delete root[this.treeId]);\r\n      this._root.length = 0;\r\n      this._root.push(root);\r\n      root[this.treeId] = { open: true };\r\n\r\n      this._tree = $.fn.zTree.init($(this.$refs.treeUl), this.setting, this._root);\r\n      this.searchable && this.$refs.searchBox.setTree(this._tree);\r\n      onAlarmTreeAdd(this.treeId, this);\r\n      this.onTreeInited && this.onTreeInited(this._root, this._tree, this);\r\n    },\r\n    getCheckedNodes(onlyChecked = true, onlyTop = false, field = null, hasOwnField = null, nodes = null) {\r\n      return this._tree.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes);\r\n    },\r\n    checkNodes(nodes, checked = true, checkTypeFlag, callbackFlag, value) {\r\n      //多余节点\r\n      let deleteNodes = []\r\n      for (let i = 0, len = nodes.length; i < len; i++) {\r\n        let node = this._tree.getNodeByParam('id', nodes[i].id)\r\n        node ? this._tree.checkNode(node, checked, checkTypeFlag, callbackFlag) : deleteNodes.push(nodes[i]);\r\n      }\r\n      //删除多余节点\r\n      deleteNodes.forEach(item => {\r\n        arrayRemoveFilter(nodes, eq => eq.id == item.id)\r\n        arrayRemoveItem(value, item.id)\r\n      })\r\n    },\r\n    selectNode(node, isSilent = false) {\r\n      this._tree.selectNode(node, false, isSilent);\r\n    },\r\n    getTree() { return this._tree; },\r\n    getTreeId() { return this.treeId; },\r\n    destroy() {\r\n      onAlarmTreeRemove(this.treeId);\r\n      if (this._tree) {\r\n        this._tree.destroy();\r\n        this._tree = null;\r\n      }\r\n      if (this.searchable) {\r\n        this.$refs.searchBox.clear();\r\n        this.$refs.searchBox.setTree(null);\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.destroy();\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ztree_frozen li span.button.switch.level0 {\r\n  display: none;\r\n}\r\n.ztree_frozen li ul.level0 {\r\n  padding: 0;\r\n  background: none;\r\n}\r\n</style>\r\n\r\n<style module>\r\n.container {\r\n  position: relative;\r\n  background-color: #fff;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n.border {\r\n  border-style: solid;\r\n  border-width: 1px;\r\n}\r\n.disabled {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  background-color: rgba(255, 255, 255, 0.6);\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n  cursor: not-allowed;\r\n}\r\n</style>\r\n<style>\r\n/* @import '../../components/Tree/zTreeStyle.css'; */\r\n</style>\r\n"]}]}