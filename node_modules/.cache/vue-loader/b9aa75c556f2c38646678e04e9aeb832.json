{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\common\\tree\\CarTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\common\\tree\\CarTree.vue","mtime":1656142142203},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CarTreeToolbar from \"./CarTreeToolbar.vue\";\n\nimport Storage from '@/common/cache/Storage.js';\n\nimport { getCars } from '@/common/cache/CacheTeamCar.js';\nimport { getCarById } from '@/common/cache/CacheTeamCar.js';\nimport { regetNodes } from '@/common/cache/CacheTeamCar.js';\nimport { refreshAll } from '@/common/cache/CacheTeamCar.js';\nimport { State } from '@/common/cache/CacheTeamCar.js';\nimport { getCarTreeCfg } from '@/common/cache/CacheTeamCar.js';\nimport { onCarTreeAdd, onCarTreeRemove } from '@/common/cache/CacheTeamCar.js';\n\nimport { getCarTreeIconUrl } from '@/common/util/Urls.js';\nimport { getCarStateCnMap } from '@/common/Vars.js';\nimport { objClone } from '@/common/util/Objects.js';\n\nexport default {\n  components: { CarTreeToolbar },\n  props: {\n    setting:     { default: ()=>{return {}} },\n    disabled:    { type: Boolean, default: false },\n    border:      { type: Boolean, default: true  },\n    miniBar:     { type: Boolean, default: false },\n    borderColor: { default: $_theme.border_color_dark },\n    searchable:  { type: Boolean, default: true  },\n    onTreeInited: Function,\n    onTreeRefreshed: Function,\n    onSearchItemSelected: Function\n  },\n\n  _tree: null,\n  _carTreeCfg: null,\n  _carStateCnMap: null,\n  _isStateFun: null,\n\n  getTreeRoots: callback => getCars(cars => callback(cars.tree)),\n  getNodeText: node => node.plate ? node[getCarTreeCfg().sortField] : node.name,\n  \n  data() {\n    return {\n      loading: false,\n      treeId: 'tree_' + $_theme.zindex(),\n      search: {placeholder: null, hasOwnField: null}\n    };\n  },\n\n  mounted() {\n    this.loading = true;\n    this._carTreeCfg = getCarTreeCfg();\n    this.setStateFun(this._carTreeCfg.filter);\n    this._carStateCnMap = getCarStateCnMap();\n    this.searchable && this.$refs.toolbar.init();\n    getCars(this.onCarLoaded);\n  },\n\n  computed: {\n    hw: function() { return this.miniBar ? 25 : this.theme.inputHeight; }\n  },\n\n  methods: {\n    setStateFun(filter) {\n      if (filter) {\n        filter = filter.charAt(0).toUpperCase() + filter.substr(1);\n        this._isStateFun = State['is' + filter];\n      } else {\n        this._isStateFun = null;\n      }\n    },\n    refreshClick() {\n      this.loading = true;\n      refreshAll(e => {\n        this.loading = false;\n        this.searchable && this.$refs.toolbar.showTip('刷新失败', '#f00');\n      });\n    },\n    onRefresh(cars,teams) {\n      let snodes = this._tree.getSelectedNodes();\n      let cnodes = (this._setting.check && this._setting.check.enable) ? this._tree.getCheckedNodes(true,true) : null;\n      this.onCarLoaded(cars, teams);\n      this.searchable && this.$refs.toolbar.showTip('刷新成功', '#00f');\n      snodes = regetNodes(snodes);\n      snodes.length > 0 && this._tree.selectNode(snodes[0]);\n      cnodes = regetNodes(cnodes);\n      cnodes && cnodes.length > 0 && this.checkNodes(cnodes, true, true);\n      this.onTreeRefreshed && this.onTreeRefreshed(cars);\n    },\n    onCarLoaded(cars,teams) {\n      if (!this._setting) {\n        this._setting = objClone(this.setting);\n        this._setting.view = this._setting.view || {};\n        this._setting.view.nameFunction = this.nameFunction;\n        this._setting.view.iconUrlFunction = this.iconUrlFunction;\n        this._setting.view.iconCssFunction = this.iconCssFunction;\n        this._setting.view.titleFunction = this.titleFunction;\n        this._isStateFun && (this._setting.view.hideFunction = this.hideFunction);//所有车辆，不设置hideFunction，hideFunction的变更见CarTreeToolbar\n        \n        this._setting.callback = this._setting.callback || {};\n        if (this._setting.check && this._setting.check.enable) {\n          this.__onDblClick = this.__onDblClick || this._setting.callback.onDblClick;\n          this._setting.callback.onDblClick = this.onDblClick;\n          this.__onCheck = this.__onCheck || this._setting.callback.onCheck;\n          this._setting.callback.onCheck = this.onCheck;\n        } else {\n          this.__onClick = this.__onClick || this._setting.callback.onClick;\n          this._setting.callback.onClick = this.onClick;\n        }\n      }\n      \n      cars.root[this.treeId] = {open: true};\n      this._tree = $.fn.zTree.init($(this.$refs.treeUl), this._setting, cars.root);\n      this.searchable && this.$refs.toolbar.setTree(this._tree);\n      this.loading = false;\n      onCarTreeAdd(this.treeId, this);\n      cars.list.length < 100 && this._tree.expandAll(true);\n      this.onTreeInited && this.onTreeInited(cars,teams,this._tree,this);\n    },\n    showRecent(box) {\n      let ids = Storage.get('recent_cars', null);\n      if (!ids || ids.length == 0) return;\n      let cars = [];\n      ids.forEach(id => getCarById(id) && cars.push(getCarById(id)));\n      cars.length > 0 && box.openOptions(cars);\n    },\n    onCheck(node, chgs, value, event) {\n      this.__onCheck && this.__onCheck(node, chgs, value, event);\n      if (value !== 1) return;\n      let carIds = [];\n      for (let i=0, len=chgs.length, car; i<len; i++) {\n        car = chgs[i];\n        if (car.plate) {\n          carIds.push(car.id);\n          if (carIds.length == 10) return Storage.set('recent_cars', carIds);\n        }\n      }\n      if (carIds.length == 0) return;\n      let ids = Storage.get('recent_cars', null);\n      if (!ids || ids.length == 0) return Storage.set('recent_cars', carIds);\n      for (let i=0, len=ids.length; i<len; i++) {\n        if (carIds.indexOf(ids[i]) == -1) {\n          carIds.push(ids[i]);\n          if (carIds.length == 10) break;\n        }\n      }\n      Storage.set('recent_cars', carIds);\n    },\n    onClick(node, event) {\n      this.__onClick && this.__onClick(node, event);\n      if (!node.plate) return;\n      let ids = Storage.get('recent_cars', null);\n      if (!ids || ids.length == 0) return Storage.set('recent_cars', [node.id]);\n      if (ids[0] == node.id) return;\n      let i = ids.indexOf(node.id);\n      i != -1 && ids.splice(i, 1);\n      ids.unshift(node.id);\n      ids.length > 10 && ids.pop();\n      Storage.set('recent_cars', ids);\n    },\n    onDblClick(node, event) {\n      this.__onDblClick && this.__onDblClick(node, event);\n      !node[this.treeId].value && node.plate && this._tree.checkNode(node, true, true, true);\n    },\n    iconUrlFunction(node, open) {//车辆\n      return node.plate ? getCarTreeIconUrl(node.state, node.stts, node.cmpId) : null;\n    },\n    iconCssFunction(node, open) {//车队\n      return node.plate ? null : (open ? 'ico_open' : 'ico_close');\n    },\n    titleFunction(node) {\n      return node.plate ? this._carStateCnMap[node.state] : null;\n    },\n    hideFunction(node) {\n      return !!(node.plate && this._isStateFun && !this._isStateFun(node.state));\n    },\n    nameFunction(node) {\n      if (node.plate) {//车辆\n        if (!this._carTreeCfg.showCarField) {// 没有显示其它字段，则直接返回车牌号或车辆名\n          return node[this._carTreeCfg.sortField];\n        }\n        let array = [];\n        if (this._carTreeCfg.showCarField.tmnKey) {\n          array.push('终端标识'+':'+(node.viceKeys?(node.tmnKey+','+node.viceKeys.replace(/\\_va|\\_av|\\_v|\\_a/g, '')):node.tmnKey));\n        }\n        if (this._carTreeCfg.showCarField.state) {\n          array.push(this._carStateCnMap[node.state]);\n        }\n        return node[this._carTreeCfg.sortField] +　' [' + array.join(' ') + ']';\n      } else {//车队\n        if (this.model || !this._carTreeCfg.showTeamCount) {// 没有显示其它统计字段，则直接返回l队名\n          return node.name;\n        }\n        let array = [];\n        if (this._carTreeCfg.showTeamCount.line) {\n          array.push(node.online + '/' + node.carNum);\n        }\n        if (this._carTreeCfg.showTeamCount.move) {\n          array.push('行:' + node.move);\n          array.push('停:' + node.stop);\n        }\n        if (this._carTreeCfg.showTeamCount.alarm) {\n          array.push('警:' + node.alarm);\n        }\n        if (this._carTreeCfg.showTeamCount.invalid) {\n          array.push('无效:' + node.invalid);\n        }\n        return node.name + ' ['+array.join(' ')+']';\n      }\n    },\n    getCheckedNodes(onlyChecked=true, onlyTop=false, field=null, hasOwnField=null, nodes=null) {\n      return this._tree ? this._tree.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes) : [];\n    },\n    async checkNodes(nodes, checked=true, checkTypeFlag, callbackFlag) {\n      while (this.loading) await sleep(10);\n      for (let i=0,len=nodes.length; i<len; i++) {\n        this._tree.checkNode(nodes[i], checked, checkTypeFlag, callbackFlag);\n      }\n    },\n    async selectNode(node, isSilent=false) {\n      while (this.loading) await sleep(10);\n      this._tree.selectNode(node, false, isSilent);\n    },\n    getTree() { return this._tree; },\n    getTreeId() { return this.treeId; },\n    destroy() {\n      onCarTreeRemove(this.treeId);\n      if (this._tree) {\n        this._tree.destroy();\n        this._tree = null;\n      }\n      if (this.searchable && this.$refs.toolbar) {\n        this.$refs.toolbar.destroy();\n      }\n      this._carTreeCfg = null;\n      this._carStateCnMap = null;\n    }\n  },\n\n  beforeDestroy() {\n    this.destroy();\n  }\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n",{"version":3,"sources":["CarTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgfile":"CarTree.vue","sourceRoot":"src/common/tree","sourcesContent":["\r\n<template>\r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"{borderColor:borderColor}\">\r\n    <!--搜索设置栏-->\r\n    <CarTreeToolbar ref=\"toolbar\" v-if=\"searchable\" :setting=\"setting\" :miniBar=\"miniBar\" :treeBorder=\"border\" :onSearchItemSelected=\"onSearchItemSelected\" :onCarFilterChg=\"setStateFun\" :refreshClick=\"refreshClick\" :showRecent=\"showRecent\"/>\r\n    \r\n    <!--车辆树-->\r\n    <div style=\"overflow: auto;\" :style=\"{height: !searchable ? '100%' : miniBar ? 'calc(100% - 32px)' : 'calc(100% - 42px)'}\">\r\n      <ul :id=\"treeId\" class=\"ztree\" ref=\"treeUl\"></ul>\r\n      <div v-if=\"disabled\" :class=\"$style.disabled\"/>\r\n      <div v-if=\"loading\" :class=\"$style.loading\"/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import CarTreeToolbar from \"./CarTreeToolbar.vue\";\r\n\r\n  import Storage from '@/common/cache/Storage.js';\r\n\r\n  import { getCars } from '@/common/cache/CacheTeamCar.js';\r\n  import { getCarById } from '@/common/cache/CacheTeamCar.js';\r\n  import { regetNodes } from '@/common/cache/CacheTeamCar.js';\r\n  import { refreshAll } from '@/common/cache/CacheTeamCar.js';\r\n  import { State } from '@/common/cache/CacheTeamCar.js';\r\n  import { getCarTreeCfg } from '@/common/cache/CacheTeamCar.js';\r\n  import { onCarTreeAdd, onCarTreeRemove } from '@/common/cache/CacheTeamCar.js';\r\n\r\n  import { getCarTreeIconUrl } from '@/common/util/Urls.js';\r\n  import { getCarStateCnMap } from '@/common/Vars.js';\r\n  import { objClone } from '@/common/util/Objects.js';\r\n\r\n  export default {\r\n    components: { CarTreeToolbar },\r\n    props: {\r\n      setting:     { default: ()=>{return {}} },\r\n      disabled:    { type: Boolean, default: false },\r\n      border:      { type: Boolean, default: true  },\r\n      miniBar:     { type: Boolean, default: false },\r\n      borderColor: { default: $_theme.border_color_dark },\r\n      searchable:  { type: Boolean, default: true  },\r\n      onTreeInited: Function,\r\n      onTreeRefreshed: Function,\r\n      onSearchItemSelected: Function\r\n    },\r\n\r\n    _tree: null,\r\n    _carTreeCfg: null,\r\n    _carStateCnMap: null,\r\n    _isStateFun: null,\r\n\r\n    getTreeRoots: callback => getCars(cars => callback(cars.tree)),\r\n    getNodeText: node => node.plate ? node[getCarTreeCfg().sortField] : node.name,\r\n    \r\n    data() {\r\n      return {\r\n        loading: false,\r\n        treeId: 'tree_' + $_theme.zindex(),\r\n        search: {placeholder: null, hasOwnField: null}\r\n      };\r\n    },\r\n\r\n    mounted() {\r\n      this.loading = true;\r\n      this._carTreeCfg = getCarTreeCfg();\r\n      this.setStateFun(this._carTreeCfg.filter);\r\n      this._carStateCnMap = getCarStateCnMap();\r\n      this.searchable && this.$refs.toolbar.init();\r\n      getCars(this.onCarLoaded);\r\n    },\r\n\r\n    computed: {\r\n      hw: function() { return this.miniBar ? 25 : this.theme.inputHeight; }\r\n    },\r\n\r\n    methods: {\r\n      setStateFun(filter) {\r\n        if (filter) {\r\n          filter = filter.charAt(0).toUpperCase() + filter.substr(1);\r\n          this._isStateFun = State['is' + filter];\r\n        } else {\r\n          this._isStateFun = null;\r\n        }\r\n      },\r\n      refreshClick() {\r\n        this.loading = true;\r\n        refreshAll(e => {\r\n          this.loading = false;\r\n          this.searchable && this.$refs.toolbar.showTip('刷新失败', '#f00');\r\n        });\r\n      },\r\n      onRefresh(cars,teams) {\r\n        let snodes = this._tree.getSelectedNodes();\r\n        let cnodes = (this._setting.check && this._setting.check.enable) ? this._tree.getCheckedNodes(true,true) : null;\r\n        this.onCarLoaded(cars, teams);\r\n        this.searchable && this.$refs.toolbar.showTip('刷新成功', '#00f');\r\n        snodes = regetNodes(snodes);\r\n        snodes.length > 0 && this._tree.selectNode(snodes[0]);\r\n        cnodes = regetNodes(cnodes);\r\n        cnodes && cnodes.length > 0 && this.checkNodes(cnodes, true, true);\r\n        this.onTreeRefreshed && this.onTreeRefreshed(cars);\r\n      },\r\n      onCarLoaded(cars,teams) {\r\n        if (!this._setting) {\r\n          this._setting = objClone(this.setting);\r\n          this._setting.view = this._setting.view || {};\r\n          this._setting.view.nameFunction = this.nameFunction;\r\n          this._setting.view.iconUrlFunction = this.iconUrlFunction;\r\n          this._setting.view.iconCssFunction = this.iconCssFunction;\r\n          this._setting.view.titleFunction = this.titleFunction;\r\n          this._isStateFun && (this._setting.view.hideFunction = this.hideFunction);//所有车辆，不设置hideFunction，hideFunction的变更见CarTreeToolbar\r\n          \r\n          this._setting.callback = this._setting.callback || {};\r\n          if (this._setting.check && this._setting.check.enable) {\r\n            this.__onDblClick = this.__onDblClick || this._setting.callback.onDblClick;\r\n            this._setting.callback.onDblClick = this.onDblClick;\r\n            this.__onCheck = this.__onCheck || this._setting.callback.onCheck;\r\n            this._setting.callback.onCheck = this.onCheck;\r\n          } else {\r\n            this.__onClick = this.__onClick || this._setting.callback.onClick;\r\n            this._setting.callback.onClick = this.onClick;\r\n          }\r\n        }\r\n        \r\n        cars.root[this.treeId] = {open: true};\r\n        this._tree = $.fn.zTree.init($(this.$refs.treeUl), this._setting, cars.root);\r\n        this.searchable && this.$refs.toolbar.setTree(this._tree);\r\n        this.loading = false;\r\n        onCarTreeAdd(this.treeId, this);\r\n        cars.list.length < 100 && this._tree.expandAll(true);\r\n        this.onTreeInited && this.onTreeInited(cars,teams,this._tree,this);\r\n      },\r\n      showRecent(box) {\r\n        let ids = Storage.get('recent_cars', null);\r\n        if (!ids || ids.length == 0) return;\r\n        let cars = [];\r\n        ids.forEach(id => getCarById(id) && cars.push(getCarById(id)));\r\n        cars.length > 0 && box.openOptions(cars);\r\n      },\r\n      onCheck(node, chgs, value, event) {\r\n        this.__onCheck && this.__onCheck(node, chgs, value, event);\r\n        if (value !== 1) return;\r\n        let carIds = [];\r\n        for (let i=0, len=chgs.length, car; i<len; i++) {\r\n          car = chgs[i];\r\n          if (car.plate) {\r\n            carIds.push(car.id);\r\n            if (carIds.length == 10) return Storage.set('recent_cars', carIds);\r\n          }\r\n        }\r\n        if (carIds.length == 0) return;\r\n        let ids = Storage.get('recent_cars', null);\r\n        if (!ids || ids.length == 0) return Storage.set('recent_cars', carIds);\r\n        for (let i=0, len=ids.length; i<len; i++) {\r\n          if (carIds.indexOf(ids[i]) == -1) {\r\n            carIds.push(ids[i]);\r\n            if (carIds.length == 10) break;\r\n          }\r\n        }\r\n        Storage.set('recent_cars', carIds);\r\n      },\r\n      onClick(node, event) {\r\n        this.__onClick && this.__onClick(node, event);\r\n        if (!node.plate) return;\r\n        let ids = Storage.get('recent_cars', null);\r\n        if (!ids || ids.length == 0) return Storage.set('recent_cars', [node.id]);\r\n        if (ids[0] == node.id) return;\r\n        let i = ids.indexOf(node.id);\r\n        i != -1 && ids.splice(i, 1);\r\n        ids.unshift(node.id);\r\n        ids.length > 10 && ids.pop();\r\n        Storage.set('recent_cars', ids);\r\n      },\r\n      onDblClick(node, event) {\r\n        this.__onDblClick && this.__onDblClick(node, event);\r\n        !node[this.treeId].value && node.plate && this._tree.checkNode(node, true, true, true);\r\n      },\r\n      iconUrlFunction(node, open) {//车辆\r\n        return node.plate ? getCarTreeIconUrl(node.state, node.stts, node.cmpId) : null;\r\n      },\r\n      iconCssFunction(node, open) {//车队\r\n        return node.plate ? null : (open ? 'ico_open' : 'ico_close');\r\n      },\r\n      titleFunction(node) {\r\n        return node.plate ? this._carStateCnMap[node.state] : null;\r\n      },\r\n      hideFunction(node) {\r\n        return !!(node.plate && this._isStateFun && !this._isStateFun(node.state));\r\n      },\r\n      nameFunction(node) {\r\n        if (node.plate) {//车辆\r\n          if (!this._carTreeCfg.showCarField) {// 没有显示其它字段，则直接返回车牌号或车辆名\r\n            return node[this._carTreeCfg.sortField];\r\n          }\r\n          let array = [];\r\n          if (this._carTreeCfg.showCarField.tmnKey) {\r\n            array.push('终端标识'+':'+(node.viceKeys?(node.tmnKey+','+node.viceKeys.replace(/\\_va|\\_av|\\_v|\\_a/g, '')):node.tmnKey));\r\n          }\r\n          if (this._carTreeCfg.showCarField.state) {\r\n            array.push(this._carStateCnMap[node.state]);\r\n          }\r\n          return node[this._carTreeCfg.sortField] +　' [' + array.join(' ') + ']';\r\n        } else {//车队\r\n          if (this.model || !this._carTreeCfg.showTeamCount) {// 没有显示其它统计字段，则直接返回l队名\r\n            return node.name;\r\n          }\r\n          let array = [];\r\n          if (this._carTreeCfg.showTeamCount.line) {\r\n            array.push(node.online + '/' + node.carNum);\r\n          }\r\n          if (this._carTreeCfg.showTeamCount.move) {\r\n            array.push('行:' + node.move);\r\n            array.push('停:' + node.stop);\r\n          }\r\n          if (this._carTreeCfg.showTeamCount.alarm) {\r\n            array.push('警:' + node.alarm);\r\n          }\r\n          if (this._carTreeCfg.showTeamCount.invalid) {\r\n            array.push('无效:' + node.invalid);\r\n          }\r\n          return node.name + ' ['+array.join(' ')+']';\r\n        }\r\n      },\r\n      getCheckedNodes(onlyChecked=true, onlyTop=false, field=null, hasOwnField=null, nodes=null) {\r\n        return this._tree ? this._tree.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes) : [];\r\n      },\r\n      async checkNodes(nodes, checked=true, checkTypeFlag, callbackFlag) {\r\n        while (this.loading) await sleep(10);\r\n        for (let i=0,len=nodes.length; i<len; i++) {\r\n          this._tree.checkNode(nodes[i], checked, checkTypeFlag, callbackFlag);\r\n        }\r\n      },\r\n      async selectNode(node, isSilent=false) {\r\n        while (this.loading) await sleep(10);\r\n        this._tree.selectNode(node, false, isSilent);\r\n      },\r\n      getTree() { return this._tree; },\r\n      getTreeId() { return this.treeId; },\r\n      destroy() {\r\n        onCarTreeRemove(this.treeId);\r\n        if (this._tree) {\r\n          this._tree.destroy();\r\n          this._tree = null;\r\n        }\r\n        if (this.searchable && this.$refs.toolbar) {\r\n          this.$refs.toolbar.destroy();\r\n        }\r\n        this._carTreeCfg = null;\r\n        this._carStateCnMap = null;\r\n      }\r\n    },\r\n\r\n    beforeDestroy() {\r\n      this.destroy();\r\n    }\r\n  }\r\n\r\n  function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n</script>\r\n\r\n<style module>\r\n  .container {\r\n    position: relative;\r\n    background-color: #fff;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n  }\r\n  .border {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n  }\r\n  .loading {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n    opacity: 0.3;\r\n    filter: alpha(opacity=30);\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-image: url(\"@/assets/icon/loading.gif\");\r\n  }\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(255, 255, 255, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60); \r\n    cursor: not-allowed;\r\n  }\r\n</style>\r\n"]}]}