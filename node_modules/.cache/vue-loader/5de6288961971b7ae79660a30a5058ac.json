{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Window.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Window.vue","mtime":1676336275713},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/*\n* 使用例子 MyWindow.vue\n*\n* <Window title=\"我是标题\" :width=\"100\" @closed=\"onWindowClosed\">\n*   <div v-slot:default>\n*     我是内容\n*   </div>\n*   <template v-slot:footer>\n*     <Button style=\"margin:5px;\"> 取消 </Button>\n*     <Button style=\"margin:5px;\" type=\"primary\"> 保存 </Button>\n*   </template>\n* </Window>\n* \n* let w = $_popup.open(MyWindow, {data});//打开MyWindow窗口\n* w.close();//关闭MyWindow窗口\n*/\n\nimport { labelWidthFit } from '@/components/util/LabelWidth.js';\n\nlet divX, divY;\n\nexport default {\n  name: \"Window\",\n  props: {\n    title: String,                                   // 头部标题文字\n    titleHeight: { type: Number,  default: 0 },      // 标题高度\n    titleColor:  { type: String,  default: null},    // 标题颜色\n    width:       { type: Number,  default: 0 },      // 窗体宽度数值，单位px\n    fitLabel:    { type: Boolean, default: true},    // 是否对齐标题宽度\n    modal:       { type: Boolean, default: true },   // 是否模态\n    waiting : Boolean,                               // 是否等待中\n    showClose:   { type: Boolean, default: true },   // 是否显示关闭按钮,\n    showHead:   { type: Boolean, default: true },    // 是否显示标题栏,\n    movable:     { type: Boolean, default: true },   // 是否可移动\n    showFullScreen:   { type: Boolean, default: false },   // 是否显示扩大缩小按钮,\n    TitleBgImg: { type: Boolean, default: true },    // 是否显示背景图\n    titleImg:{ type: String, default: null },        //标题图片\n    beforeClose: Function,\n    afterFullScreen: Function,\n    afterRestoreScreen: Function,\n    contentStyle: { default: null },\n    footerStyle: { default: null },\n  },\n\n  _modalDom: null,  // 模态层dom对象\n\n  data() {\n    return {\n      left: 0,    // 窗体x坐标(移动窗口用的)\n      top: 0,      // 窗体y坐标(移动窗口用的)\n      isFullScreen: false, //是否全屏\n      maxWidth: 'none',\n      headerHeight: 0,\n    };\n  },\n\n  beforeMount() {\n\n  },\n\n  mounted() {// 将dom对象加到document文档流中\n    this.headerHeight = this.showHead ? this.$refs.header.clientHeight : 0;\n    //判断是否超高超宽\n    this.$nextTick(()=>{\n      this.left = parseInt(this.$el.style.left.replace('px',''));\n      this.top = parseInt(this.$el.style.top.replace('px',''));\n      \n      let maxHeight, maxWidth;\n      if (this.contentStyle && this.contentStyle.maxHeight) {\n        this._oldMaxHeight = maxHeight = parseInt(this.contentStyle.maxHeight.replace('px',''));\n      } else {\n        this._oldMaxHeight = maxHeight = document.documentElement.clientHeight - this.headerHeight - (this.$slots.footer ? this.$refs.footer.clientHeight : 0) - this.top;\n        this.$refs.content.style['max-height'] = maxHeight + 'px';\n      }\n      if (this.contentStyle && this.contentStyle.maxWidth) {\n        this._oldMaxWidth = maxWidth = parseInt(this.contentStyle.maxWidth.replace('px',''));\n      } else {\n        this._oldMaxWidth = maxWidth = document.documentElement.clientWidth - this.left;\n        this.$refs.window.style['max-width'] = maxWidth + 'px';\n        this.$refs.content.style['max-width'] = maxWidth + 'px';\n      }\n      if (this.$refs.content.clientHeight > maxHeight) {\n        this.width += 16;\n        this.left -= 8;\n      }\n      this.fitLabel && labelWidthFit(this.$refs.content);\n    });\n    //之前在document.body里插入，某些场景全屏显示后是无法显示的。必须该dom是全屏元素的子元素才行\n    if (this.modal) {\n      this._modalDom = document.createElement(\"div\");\n      this._modalDom.className = this.$style.modal;\n      this._modalDom.style['z-index'] = $_theme.zindex();\n      this.$el.parentElement.appendChild(this._modalDom);\n    }\n  },\n\n  methods: {\n    close(event) {// 关闭窗体\n      if (this.beforeClose && this.beforeClose() === false) return;\n      if (this._modalDom != null) {\n        this.$el.parentElement.removeChild(this._modalDom);\n        this._modalDom = null;\n      }\n      this.$el.parentElement.removeChild(this.$el);\n      this.$emit('closed',event);\n      this.$parent.$destroy();\n    },\n    fullScreen(){\n      this._oldLeft = this.left;\n      this._oldTop = this.top;\n      this.left = 0;\n      this.top = 0;\n      this.isFullScreen = true;\n      let maxHeight = document.documentElement.clientHeight - this.headerHeight - (this.$slots.footer ? this.$refs.footer.clientHeight : 0);\n      this.$refs.content.style['max-height'] = maxHeight + 'px';\n      this.$refs.content.style['max-width'] = \"100%\";\n      this.afterFullScreen && this.$nextTick(this.afterFullScreen);\n    },\n    restoreScreen(){\n      this.left = this._oldLeft;\n      this.top = this._oldTop;\n      this.isFullScreen = false;\n      this.$refs.content.style['max-height'] = this._oldMaxHeight + 'px';\n      this.$refs.content.style['max-width'] = this._oldMaxWidth + 'px';\n      this.afterRestoreScreen && this.$nextTick(this.afterRestoreScreen);\n    },\n    onDragStart(e) {// 窗体开始拖动前\n      divX = e.clientX - this.$el.offsetLeft;\n      divY = e.clientY - this.$el.offsetTop;\n      document.addEventListener('mousemove', this.onDraging);\n      document.addEventListener('mouseup', this.onDragEnd);\n    },\n    onDraging(e) {// 窗体正在拖动\n      this.left = e.clientX - divX;\n      this.top = e.clientY - divY;\n    },\n    onDragEnd() {// 窗体结束拖动\n      document.removeEventListener('mousemove', this.onDraging);\n      document.removeEventListener('mouseup', this.onDragEnd);\n\n      this.left = Math.max(this.left, 0);\n      this.top = Math.max(this.top, 0);\n      if (this.left + 100 > document.documentElement.clientWidth) {\n        this.left = document.documentElement.clientWidth - this.$el.clientWidth;\n      }\n      if (this.top + 30 > document.documentElement.clientHeight) {\n        this.top = document.documentElement.clientHeight - this.$el.clientHeight;\n      }\n    }\n  }\n};\n",{"version":3,"sources":["Window.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Window.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div :class=\"[$style.container,isFullScreen&&$style.fullScreen]\" ref=\"window\" :style=\"[{width: width>0 && (width+'px'), left:left+'px', top:top+'px', maxWidth:maxWidth}, theme.window]\">\r\n    \r\n    <!--弹出窗的头部-->\r\n    <div ref=\"header\" @mousedown=\"movable && onDragStart($event)\" v-if=\"showHead\" :class=\"[$style.header, TitleBgImg && $style.window_title]\" :style=\"[titleColor && {backgroundColor:titleColor},titleHeight && {height:titleHeight+'px'}, movable && {cursor:'move'}]\" style=\"z-index:2\">\r\n      <!--头部标题-->\r\n      <slot name=\"title\"> <span :class=\"$style.title\" :style=\"{lineHeight:headerHeight+'px'}\"><img v-if=\"titleImg\" style=\"vertical-align:middle;margin-right:5px;\" :src=\"titleImg\" alt=\"\">{{ title }}</span> </slot>\r\n      <!--头部关闭按钮-->\r\n      <button type=\"button\" :class=\"$style.closebtn\" :style=\"{width:headerHeight+'px'}\" v-if=\"showClose\" @click=\"close($event)\">\r\n        <i class=\"el-icon-close\" style=\"font-size:20px\"></i>\r\n      </button>\r\n      <!--头部最大化按钮-->\r\n      <button type=\"button\" :class=\"$style.fullScreenbtn\" :style=\"{width:headerHeight+'px'}\" v-if=\"showFullScreen\" @click=\"isFullScreen?restoreScreen():fullScreen()\" :title=\"isFullScreen?$_L.get('还原'):$_L.get('最大化')\">\r\n        <i :class=\"isFullScreen?'el-icon-copy-document':'el-icon-full-screen'\"></i>\r\n      </button>\r\n    </div>\r\n\r\n    <!--窗体内容-->\r\n    <div ref=\"content\" style=\"background-color:#fff;overflow:auto;\" :style=\"contentStyle\"><slot></slot></div>\r\n\r\n    <!--窗体底部-->\r\n    <div ref=\"footer\" v-if=\"$slots.footer\" :class=\"$style.footer\" :style=\"[theme.window.footer,footerStyle]\">\r\n      <slot name=\"footer\"></slot>\r\n    </div>\r\n\r\n    <div v-if=\"waiting\" :class=\"$style.waiting\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n  /*\r\n  * 使用例子 MyWindow.vue\r\n  *\r\n  * <Window title=\"我是标题\" :width=\"100\" @closed=\"onWindowClosed\">\r\n  *   <div v-slot:default>\r\n  *     我是内容\r\n  *   </div>\r\n  *   <template v-slot:footer>\r\n  *     <Button style=\"margin:5px;\"> 取消 </Button>\r\n  *     <Button style=\"margin:5px;\" type=\"primary\"> 保存 </Button>\r\n  *   </template>\r\n  * </Window>\r\n  * \r\n  * let w = $_popup.open(MyWindow, {data});//打开MyWindow窗口\r\n  * w.close();//关闭MyWindow窗口\r\n  */\r\n  \r\n  import { labelWidthFit } from '@/components/util/LabelWidth.js';\r\n\r\n  let divX, divY;\r\n\r\n  export default {\r\n    name: \"Window\",\r\n    props: {\r\n      title: String,                                   // 头部标题文字\r\n      titleHeight: { type: Number,  default: 0 },      // 标题高度\r\n      titleColor:  { type: String,  default: null},    // 标题颜色\r\n      width:       { type: Number,  default: 0 },      // 窗体宽度数值，单位px\r\n      fitLabel:    { type: Boolean, default: true},    // 是否对齐标题宽度\r\n      modal:       { type: Boolean, default: true },   // 是否模态\r\n      waiting : Boolean,                               // 是否等待中\r\n      showClose:   { type: Boolean, default: true },   // 是否显示关闭按钮,\r\n      showHead:   { type: Boolean, default: true },    // 是否显示标题栏,\r\n      movable:     { type: Boolean, default: true },   // 是否可移动\r\n      showFullScreen:   { type: Boolean, default: false },   // 是否显示扩大缩小按钮,\r\n      TitleBgImg: { type: Boolean, default: true },    // 是否显示背景图\r\n      titleImg:{ type: String, default: null },        //标题图片\r\n      beforeClose: Function,\r\n      afterFullScreen: Function,\r\n      afterRestoreScreen: Function,\r\n      contentStyle: { default: null },\r\n      footerStyle: { default: null },\r\n    },\r\n\r\n    _modalDom: null,  // 模态层dom对象\r\n\r\n    data() {\r\n      return {\r\n        left: 0,    // 窗体x坐标(移动窗口用的)\r\n        top: 0,      // 窗体y坐标(移动窗口用的)\r\n        isFullScreen: false, //是否全屏\r\n        maxWidth: 'none',\r\n        headerHeight: 0,\r\n      };\r\n    },\r\n\r\n    beforeMount() {\r\n\r\n    },\r\n\r\n    mounted() {// 将dom对象加到document文档流中\r\n      this.headerHeight = this.showHead ? this.$refs.header.clientHeight : 0;\r\n      //判断是否超高超宽\r\n      this.$nextTick(()=>{\r\n        this.left = parseInt(this.$el.style.left.replace('px',''));\r\n        this.top = parseInt(this.$el.style.top.replace('px',''));\r\n        \r\n        let maxHeight, maxWidth;\r\n        if (this.contentStyle && this.contentStyle.maxHeight) {\r\n          this._oldMaxHeight = maxHeight = parseInt(this.contentStyle.maxHeight.replace('px',''));\r\n        } else {\r\n          this._oldMaxHeight = maxHeight = document.documentElement.clientHeight - this.headerHeight - (this.$slots.footer ? this.$refs.footer.clientHeight : 0) - this.top;\r\n          this.$refs.content.style['max-height'] = maxHeight + 'px';\r\n        }\r\n        if (this.contentStyle && this.contentStyle.maxWidth) {\r\n          this._oldMaxWidth = maxWidth = parseInt(this.contentStyle.maxWidth.replace('px',''));\r\n        } else {\r\n          this._oldMaxWidth = maxWidth = document.documentElement.clientWidth - this.left;\r\n          this.$refs.window.style['max-width'] = maxWidth + 'px';\r\n          this.$refs.content.style['max-width'] = maxWidth + 'px';\r\n        }\r\n        if (this.$refs.content.clientHeight > maxHeight) {\r\n          this.width += 16;\r\n          this.left -= 8;\r\n        }\r\n        this.fitLabel && labelWidthFit(this.$refs.content);\r\n      });\r\n      //之前在document.body里插入，某些场景全屏显示后是无法显示的。必须该dom是全屏元素的子元素才行\r\n      if (this.modal) {\r\n        this._modalDom = document.createElement(\"div\");\r\n        this._modalDom.className = this.$style.modal;\r\n        this._modalDom.style['z-index'] = $_theme.zindex();\r\n        this.$el.parentElement.appendChild(this._modalDom);\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      close(event) {// 关闭窗体\r\n        if (this.beforeClose && this.beforeClose() === false) return;\r\n        if (this._modalDom != null) {\r\n          this.$el.parentElement.removeChild(this._modalDom);\r\n          this._modalDom = null;\r\n        }\r\n        this.$el.parentElement.removeChild(this.$el);\r\n        this.$emit('closed',event);\r\n        this.$parent.$destroy();\r\n      },\r\n      fullScreen(){\r\n        this._oldLeft = this.left;\r\n        this._oldTop = this.top;\r\n        this.left = 0;\r\n        this.top = 0;\r\n        this.isFullScreen = true;\r\n        let maxHeight = document.documentElement.clientHeight - this.headerHeight - (this.$slots.footer ? this.$refs.footer.clientHeight : 0);\r\n        this.$refs.content.style['max-height'] = maxHeight + 'px';\r\n        this.$refs.content.style['max-width'] = \"100%\";\r\n        this.afterFullScreen && this.$nextTick(this.afterFullScreen);\r\n      },\r\n      restoreScreen(){\r\n        this.left = this._oldLeft;\r\n        this.top = this._oldTop;\r\n        this.isFullScreen = false;\r\n        this.$refs.content.style['max-height'] = this._oldMaxHeight + 'px';\r\n        this.$refs.content.style['max-width'] = this._oldMaxWidth + 'px';\r\n        this.afterRestoreScreen && this.$nextTick(this.afterRestoreScreen);\r\n      },\r\n      onDragStart(e) {// 窗体开始拖动前\r\n        divX = e.clientX - this.$el.offsetLeft;\r\n        divY = e.clientY - this.$el.offsetTop;\r\n        document.addEventListener('mousemove', this.onDraging);\r\n        document.addEventListener('mouseup', this.onDragEnd);\r\n      },\r\n      onDraging(e) {// 窗体正在拖动\r\n        this.left = e.clientX - divX;\r\n        this.top = e.clientY - divY;\r\n      },\r\n      onDragEnd() {// 窗体结束拖动\r\n        document.removeEventListener('mousemove', this.onDraging);\r\n        document.removeEventListener('mouseup', this.onDragEnd);\r\n\r\n        this.left = Math.max(this.left, 0);\r\n        this.top = Math.max(this.top, 0);\r\n        if (this.left + 100 > document.documentElement.clientWidth) {\r\n          this.left = document.documentElement.clientWidth - this.$el.clientWidth;\r\n        }\r\n        if (this.top + 30 > document.documentElement.clientHeight) {\r\n          this.top = document.documentElement.clientHeight - this.$el.clientHeight;\r\n        }\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .container {\r\n    position: fixed;\r\n    min-width: 150px;\r\n    background: #fff;\r\n    box-shadow: 0px 0px 10px 0px RGBA(0, 0, 0, 0.2);\r\n  }\r\n  .fullScreen{\r\n    width: 100% !important;\r\n    height: 100% !important;\r\n    max-width: 100% !important;\r\n  }\r\n  .title {\r\n    padding-left: 10px;\r\n    color: #fff;\r\n    font-size: 13px;\r\n    user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    -moz-user-select: none;\r\n  }\r\n  .closebtn {\r\n    color:#fff;\r\n    font-size: 16px;\r\n    float: right;\r\n    height: 100%;\r\n    background: transparent;\r\n    border: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n  }\r\n  .fullScreenbtn {\r\n    color:#fff;\r\n    font-size: 16px;\r\n    float: right;\r\n    height: 100%;\r\n    background: transparent;\r\n    border: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n    transform: rotate(180deg);\r\n    -ms-transform: rotate(180deg);     /* IE 9 */\r\n    -moz-transform: rotate(180deg);    /* Firefox */\r\n    -webkit-transform: rotate(180deg); /* Safari 和 Chrome */\r\n    -o-transform: rotate(180deg);      /* Opera */\r\n  }\r\n  .closebtn:hover, .fullScreenbtn:hover {\r\n    background-color: rgba(255,255,255,0.2);\r\n  }\r\n  .closebtn:active, .fullScreenbtn:active {\r\n    background-color:rgba(0,0,0,0.2);\r\n  }\r\n  .header {\r\n    height: 40px;\r\n    background-color: var(--color) !important;\r\n  }\r\n  .footer {\r\n    background-color: var(--bg_color);\r\n    border-top: 1px solid var(--border_color_light);\r\n    min-height: 40px;\r\n    text-align: center;\r\n  }\r\n  .modal {\r\n    position: fixed;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    opacity: 0.4;\r\n    filter: alpha(opacity=40); \r\n  }\r\n  /* 等待禁止操作 */\r\n  .waiting {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(255, 255, 255, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60); \r\n    cursor: not-allowed;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-image: url(\"@/assets/icon/loading.gif\");\r\n  }\r\n  .window_title{\r\n    background:url(\"@/assets/main/menu-bg.png\") no-repeat right;\r\n  }\r\n</style>\r\n"]}]}