{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\InputDateTime.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\InputDateTime.vue","mtime":1681180282533},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/*\n* 使用例子\n* <InputDateTime type=\"YMD\" label=\"你的生日\" placeholder=\"请选择日期\" required clearable v-model=\"date\" @change=\"onDateChg\" style=\"width:300px;\"/>\n*\n*  data: {date: null},\n*  methods: {\n*    onDateChg(date) {\n*    }\n*  }\n*\n* type的值是\"YMDHNS\"的组合，Y年　M月　D日　H时　N分　S秒\n*/\n\nimport { domLeftTop } from '@/components/util/Dom.js';\nimport { getNowDateTime } from '@/common/util/Dates.js';\nimport { addDateTime } from '@/common/util/Dates.js';\nimport { getDays } from '@/common/util/Dates.js';\n\n\nexport default {\n  name: \"InputDateTime\",\n  props: {\n    label: String,                                                      // 标题文本\n    value: String,                                                      // 当前值(v-model)\n    type:  { type: String, default: 'YMDHN' },\n    placeholder: String,\n    required:  Boolean,                                                 // 是否显示必填\n    disabled:  Boolean,                                                 // 是否可操作\n    clearable: Boolean,                                                 // 是否显示可清除图标\n    border:     { type: Boolean, default: true },                       // 是否显示边框\n    borderColor:{ type: String,  default: $_theme.border_color_light },\n    radius:     { type: String,  default: $_theme.input_radius},        // 边框圆角\n    height:     { type: Number,  default: $_theme.inputHeight },        // 高度数值，单位是px\n    labelMaxWidth:{ type: Number},  \t\t  \t\t  // lable宽度最小数值，单位是px\n    labelMinWidth:{ type: Number},\n    searchKey:{ typeof:String, default: null },\n    showIcon:{ type: Boolean, default: true },                          //是否显示图标\n    fontColor: { type: String, default: '#232323' },                    //除弹出框，所有字体的颜色\n    inputStyle:   { default: null },                                    // 输入框的style\n  },\n  _format: null,\n  data() {\n    return {\n      values: { year: null,  month: null,  day: null,  hour: null,  minute: null,  second: null  },\n      needs:  { year: false, month: false, day: false, hour: false, minute: false, second: false },\n      yearStep: 0,\n      popup: null,\n      nows: null,\n      days: [],\n      dropdownStyle: {zIndex:0, left:0, top:0, borderColor:$_theme.color},\n      focused: false,\n      hover: false,\n    };\n  },\n  watch: {\n    focused: function(v) {\n      document[v?'addEventListener':'removeEventListener']('click', this.checkFocus);\n      !v && (this.popup = null);\n    },\n    popup: function(v) {\n      if (!v) return this.hover = false;\n      this.focused = true;\n      v == 'day' && this.resetDays();\n      v == 'all' && !this.value && this.setValue(getNowDateTime());\n      v == 'all' && this.needs.day && this.resetDays();\n    },\n    value: function(v) {\n      v ? this.setValue(v, false) : this.clear(false);\n    },\n    type: function(v) {\n      this.typeChg(v);\n      this.value && this.setValue(this.value, true);\n    }\n  },\n\n  mounted() {\n    this.typeChg(this.type);\n    this.value && this.setValue(this.value, false);\n  },\n\n  methods: {\n    typeChg(v) {\n      this.needs.year   = v.indexOf('Y') > -1;\n      this.needs.month  = v.indexOf('M') > -1;\n      this.needs.day    = v.indexOf('D') > -1;\n      this.needs.hour   = v.indexOf('H') > -1;\n      this.needs.minute = v.indexOf('N') > -1;\n      this.needs.second = v.indexOf('S') > -1;\n\n      this._format = this.needs.year ? 'YYYY' : '';\n      this.needs.month  && (this._format += 'MM');\n      this.needs.day    && (this._format += 'DD');\n      this.needs.hour   && (this._format += 'HH');\n      this.needs.minute && (this._format += 'NN');\n      this.needs.second && (this._format += 'SS');\n      this._format = this._format.replace('YM','Y-M').replace('MD','M-D').replace('DH','D H').replace('HN','H:N').replace('NS','N:S');\n    },\n    checkFocus(event) {\n      this.focused = this.$el.contains(event.target);\n    },\n    resetDays() {\n      if (!this.needs.day) return;\n      let max = getDays(Number(this.values.year||this.nows[0]), Number(this.values.month||this.nows[1]));\n      if (Number(this.values.day) > max) {\n        this.values.day = max;\n        this.submit();\n      }\n      let days = [], week = new Date(Number(this.values.year||this.nows[0]), Number(this.values.month||this.nows[1])-1, 1).getDay();\n      while (days.length % 7 < week) {\n        days.push(null);\n      }\n      for (let i=0; i<max; i++) {\n        days.push(i+1);\n      }\n      this.days = days;\n    },\n    onAllChg(field) {\n      this.submit();\n      (field == 'year' || field == 'month') && this.resetDays();\n      field == 'day' && !this.needs.hour && !this.needs.minute && !this.needs.second && (this.popup = null);\n    },\n    allArrowClick(field, step) {\n      let v = this.values[field] + step;\n      if (field == 'year') {\n        this.values[field] = v;\n      } else {\n        if (v < 1) {\n          this.values.year -= 1;\n          this.values.month = 12;\n        } else if (v > 12) {\n          this.values.year += 1;\n          this.values.month = 1;\n        } else {\n          this.values.month = v;\n        }\n      }\n      this.submit();\n      this.resetDays();\n    },\n    setShowDropdown(item) {\n      if (this.popup == item) {\n        this.popup = null;\n        return;\n      }\n      this.resetNows();\n      this.popup = item;\n      this.$nextTick(this.setDropdownStyle);\n    },\n    setDropdownStyle() {\n      this.dropdownStyle.zIndex = $_theme.zindex();\n      let w = this.$el.children[this.$el.children.length-1];\n      let dt = this.$refs.datatime, {left, top} = domLeftTop(dt);\n      this.dropdownStyle.left = left + 'px';\n      if (top + w.clientHeight + dt.clientHeight < document.documentElement.clientHeight) {\n        this.dropdownStyle.top = (top + dt.offsetHeight) + 'px';\n      } else {\n         this.dropdownStyle.top = (top - w.offsetHeight) + 'px';\n      }\n    },\n    setValueClick(value, field, next) {\n      this.values[field] = value;\n      this.submit();\n      (!next || !this.needs[next]) && (this.popup = null);\n      next && this.needs[next] && (this.popup = next) && this.$nextTick(this.setDropdownStyle);\n    },\n    setValue(value, emit=true) {\n      this.resetNows();\n      let ymd_hns = value.split(' ');\n      if (this.needs.year || this.needs.month || this.needs.day) {\n        let ymd = ymd_hns[0].split('-'), i = 0;\n        this.needs.year  && (this.values.year  = Number(ymd.length>i ? (ymd[i++]||this.nows[0]) : this.nows[0]));\n        this.needs.month && (this.values.month = Number(ymd.length>i ? (ymd[i++]||this.nows[1]) : this.nows[1]));\n        this.needs.day   && (this.values.day   = Number(ymd.length>i ? (ymd[i++]||this.nows[2]) : this.nows[2]));\n      }\n      if (this.needs.hour || this.needs.minute || this.needs.second) {\n        let hns = ymd_hns[ymd_hns.length-1].split(':'), j = 0;\n        this.needs.hour   && (this.values.hour   = Number(hns.length>j ? (hns[j++]||this.nows[3]) : this.nows[3]));\n        this.needs.minute && (this.values.minute = Number(hns.length>j ? (hns[j++]||this.nows[4]) : this.nows[4]));\n        this.needs.second && (this.values.second = Number(hns.length>j ? (hns[j++]||this.nows[5]) : this.nows[5]));\n      }\n      emit && this.submit();\n    },\n    quickDate(i) {\n      let ymdhns = addDateTime(i).split(/[-| |:]/);\n      this.needs.year && (this.values.year  = Number(ymdhns[0]));\n      this.needs.month && (this.values.month  = Number(ymdhns[1]));\n      this.needs.day && (this.values.day  = Number(ymdhns[2]));\n      this.submit();\n      this.resetDays();\n    },\n    quickTime(v) {\n      let hns = null;\n      if (v == 'now') {\n        let date = new Date();\n        hns = [date.getHours(), date.getMinutes(), date.getSeconds()];\n      } else {\n        hns = v == '00' ? [0,0,0] : (v == '12' ? [12,0,0] : [23,59,59]);\n      }\n      this.needs.hour && (this.values.hour  = hns[0]);\n      this.needs.minute && (this.values.minute  = hns[1]);\n      this.needs.second && (this.values.second  = hns[2]);\n      this.submit();\n    },\n    resetNows() {\n      let nows = getNowDateTime().split(/[-| |:]/);\n      for (let i=0,len=nows.legnth; i<len; i++) {\n        nows[i] = Number(nows[i]);\n      }\n      this.nows = nows;\n    },\n    fillzero(v) {\n      return v === null ? '' : (v > 9 || this.type == 'D') ? v : ('0' + v);\n    },\n    submit() {\n      let value = this._format;\n      this.needs.year   && (value = value.replace('YYYY', this.values.year));\n      this.needs.month  && (value = value.replace('MM',   this.fillzero(this.values.month)));\n      this.needs.day    && (value = value.replace('DD',   this.fillzero(this.values.day)));\n      this.needs.hour   && (value = value.replace('HH',   this.fillzero(this.values.hour)));\n      this.needs.minute && (value = value.replace('NN',   this.fillzero(this.values.minute)));\n      this.needs.second && (value = value.replace('SS',   this.fillzero(this.values.second)));\n      if (this.value != value) {\n        this.$emit('input',  value);\n        this.$emit('change', value);\n      }\n    },\n    clear(emit=true) {\n      this.values.year = this.values.month = this.values.day = this.values.hour = this.values.minute = this.values.second = null;\n      this.popup = null;\n      if (emit) {\n        this.$emit('input', null);\n        this.$emit('change', null);\n      }\n    }\n  },\n  computed: {\n    containerStyle() {\n      return {\n        borderRadius: this.radius,\n        height: this.height + 'px',\n        borderColor: this.focused ? this.theme.color : this.borderColor,\n        zIndex: this.focused ? this.theme.zindex() : ''\n      }\n    },\n    lineHeight() {// 获取除边框外的高度\n      return this.height - (this.border ? 2 : 0);\n    },\n    textMinWidth() {\n      let w = 0;\n      this.needs.year   && (w += 28.92);\n      this.needs.month  && this.needs.year && (w += 4.34);\n      this.needs.month  && (w += 14.47);\n      this.needs.day    && this.needs.month && (w += 4.34);\n      this.needs.day    && (w += 14.47);\n      if (w) return w + 16;\n      this.needs.hour   && this.needs.day && (w += 7.23);\n      this.needs.hour   && (w += 14.47);\n      this.needs.minute && this.needs.hour && (w += 3.63);\n      this.needs.minute && (w += 14.47);\n      this.needs.second && this.needs.minute && (w += 3.63);\n      this.needs.second && (w += 14.47);\n      return w + 16;\n    },\n    labelStyle() {\n      return {\n        minWidth:this.labelMinWidth + 'px',\n        maxWidth:this.labelMaxWidth + 'px',\n        borderRightColor: this.theme.border_color_light,\n        backgroundColor: this.theme.bg_color,\n        color: this.fontColor,\n      };\n    }\n  }\n};\n",null]}