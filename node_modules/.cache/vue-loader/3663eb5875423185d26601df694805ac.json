{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\modules\\mnt\\MntVideoPlaybackModule\\PlaybackForSkip.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\modules\\mnt\\MntVideoPlaybackModule\\PlaybackForSkip.vue","mtime":1675239859968},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\nimport Socket from '@/common/Socket.js';\nimport PlaybackPlayerForSkip from './PlaybackPlayerForSkip.vue';\nimport { getCarById } from '@/common/cache/CacheTeamCar.js';\n\nexport default {\n  components: {PlaybackPlayerForSkip},\n  props: {\n    stime: String,  //YYYY-MM-DD HH:NN:SS\n    etime: String,  //YYYY-MM-DD HH:NN:SS\n    carId: String,\n    chn: String,\n  },\n  data () {\n    return {\n      socketIsOpen: false,\n      chns: [],\n    }\n  },\n  _socket: null,\n\n  beforeDestroy() {\n    this.$refs.player.close();\n  },\n  destroyed() {\n    this._socket && this._socket.destroy();\n    this._socket = null;\n  },\n  watch: {\n    carId: function(v) {\n      this._setChns(v);\n    },\n    socketIsOpen: function(v) {\n      if (!v || this.$refs.list.selectedItem || this.chns.length == 0) return;\n      this.$refs.list.selectedItem = this.chns[0];\n      this._play(this.chns[0]);\n    }\n  },\n  mounted() {\n      this.carId && this._setChns(this.carId); \n      this._socket = new Socket($_cache.videoHost + '/video', ()=>this.socketIsOpen=true, ()=>this.socketIsOpen=false);\n      this._socket.connect();\n      this.$refs.player.setSocket(this._socket);\n   },\n  methods: {\n    close() {\n      this.$refs.player.close();\n    },\n    _setChns(carId) {\n      let car = getCarById(carId);\n      if (!car.videos) return this.chns = [];\n      this._plate = car.plate;\n      let vs = JSON.parse(car.videos).vs || \"\", chns = [];\n      vs.split(',').forEach(item => {\n        let info = item.split(':');//[通道,名称,云台]\n        if (this.chn && this.chn != info[0]) return;\n        chns.push({name:info[1] || (window.$_L.get('通道')+info[0]), chn: parseInt(info[0])});\n      });\n      this.chns = chns;\n      this._play(this.chns[0]);\n    },\n    _play(chn) {\n      this.$refs.player.close();\n      let file = {file:false, carId:this.carId, channel:chn.chn, avType:0, streamType:0, storeType:0, stime:this.stime, etime:this.etime, startTime:this._YYMMDDJJNNSS(this.stime), endTime:this._YYMMDDJJNNSS(this.etime), play:false, chnName:chn.name, plate:this._plate};\n      this.$refs.player.play(file, this.stime);\n    },\n    _YYMMDDJJNNSS(time) {\n      return time.substr(2).split(/[-| |:]/).join('');\n    },\n  }\n}\n",{"version":3,"sources":["PlaybackForSkip.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PlaybackForSkip.vue","sourceRoot":"src/modules/mnt/MntVideoPlaybackModule","sourcesContent":["<template>\r\n  <div :class=\"$style.layout\" :style=\"{backgroundColor:theme.bg_color}\">\r\n    <List ref=\"list\" v-show=\"chns.length>1\" :border=\"false\" :list=\"chns\" labelField=\"name\" @change=\"_play\" :disabled=\"!socketIsOpen\" style=\"width:80px;height:100%;\"/>\r\n    <PlaybackPlayerForSkip ref=\"player\" style=\"position:absolute;top:0;right:0;height:100%;\" :style=\"{width:chns.length>1?'calc(100% - 80px)':'100%'}\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import Socket from '@/common/Socket.js';\r\n  import PlaybackPlayerForSkip from './PlaybackPlayerForSkip.vue';\r\n  import { getCarById } from '@/common/cache/CacheTeamCar.js';\r\n\r\n  export default {\r\n    components: {PlaybackPlayerForSkip},\r\n    props: {\r\n      stime: String,  //YYYY-MM-DD HH:NN:SS\r\n      etime: String,  //YYYY-MM-DD HH:NN:SS\r\n      carId: String,\r\n      chn: String,\r\n    },\r\n    data () {\r\n      return {\r\n        socketIsOpen: false,\r\n        chns: [],\r\n      }\r\n    },\r\n    _socket: null,\r\n\r\n    beforeDestroy() {\r\n      this.$refs.player.close();\r\n    },\r\n    destroyed() {\r\n      this._socket && this._socket.destroy();\r\n      this._socket = null;\r\n    },\r\n    watch: {\r\n      carId: function(v) {\r\n        this._setChns(v);\r\n      },\r\n      socketIsOpen: function(v) {\r\n        if (!v || this.$refs.list.selectedItem || this.chns.length == 0) return;\r\n        this.$refs.list.selectedItem = this.chns[0];\r\n        this._play(this.chns[0]);\r\n      }\r\n    },\r\n    mounted() {\r\n        this.carId && this._setChns(this.carId); \r\n        this._socket = new Socket($_cache.videoHost + '/video', ()=>this.socketIsOpen=true, ()=>this.socketIsOpen=false);\r\n        this._socket.connect();\r\n        this.$refs.player.setSocket(this._socket);\r\n     },\r\n    methods: {\r\n      close() {\r\n        this.$refs.player.close();\r\n      },\r\n      _setChns(carId) {\r\n        let car = getCarById(carId);\r\n        if (!car.videos) return this.chns = [];\r\n        this._plate = car.plate;\r\n        let vs = JSON.parse(car.videos).vs || \"\", chns = [];\r\n        vs.split(',').forEach(item => {\r\n          let info = item.split(':');//[通道,名称,云台]\r\n          if (this.chn && this.chn != info[0]) return;\r\n          chns.push({name:info[1] || (window.$_L.get('通道')+info[0]), chn: parseInt(info[0])});\r\n        });\r\n        this.chns = chns;\r\n        this._play(this.chns[0]);\r\n      },\r\n      _play(chn) {\r\n        this.$refs.player.close();\r\n        let file = {file:false, carId:this.carId, channel:chn.chn, avType:0, streamType:0, storeType:0, stime:this.stime, etime:this.etime, startTime:this._YYMMDDJJNNSS(this.stime), endTime:this._YYMMDDJJNNSS(this.etime), play:false, chnName:chn.name, plate:this._plate};\r\n        this.$refs.player.play(file, this.stime);\r\n      },\r\n      _YYMMDDJJNNSS(time) {\r\n        return time.substr(2).split(/[-| |:]/).join('');\r\n      },\r\n    }\r\n  }\r\n</script>\r\n\r\n<style module>\r\n  .layout {\r\n    background-color: #fff;\r\n    position: relative;\r\n  }\r\n</style>\r\n"]}]}