{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\common\\tree\\PoiTree.vue?vue&type=style&index=2&lang=css&","dependencies":[{"path":"D:\\cdRule\\src\\common\\tree\\PoiTree.vue","mtime":1656146987797},{"path":"D:\\cdRule\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* @import '../../components/Tree/zTreeStyle.css'; */\n",{"version":3,"sources":["PoiTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsMA","file":"PoiTree.vue","sourceRoot":"src/common/tree","sourcesContent":["\r\n<template>\r\n  \r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"{borderColor:borderColor}\">\r\n    <Toolbar v-if=\"searchable\" :border=\"false\" small :mini=\"miniBar\" style=\"border-bottom-width:1px;border-bottom-style:solid;\" :style=\"{borderColor:theme.border_color_light}\">\r\n      <SearchBox :placeholder=\"placeholder\" :style=\"{width:miniBar?'calc(100% - 6px)':'calc(100% - 10px)'}\" :height=\"miniBar?26:theme.inputHeight\" :treeBorder=\"border\" :showSearchIcon=\"showSearchIcon\" :onItemSelected=\"onSearchItemSelected\" ref=\"searchBox\">\r\n        <Button v-if=\"type.indexOf('-')>0\" @click=\"type=type=='my-all'?'all-my':'my-all'\" :padding=\"miniBar?'0 4px':'0 7px'\" :height=\"miniBar?24:(theme.inputHeight-2)\" :type=\"type=='my-all'?'primary':'plain'\" :title=\"type=='my-all'?$_L.get('点击显示所有标注'):$_L.get('点击显示我的标注')\" :border=\"false\" :icon=\"type=='my-all'?'el-icon-user-solid':'el-icon-user'\" style=\"float:right;margin:1px 1px 1px 0px;\"/>\r\n      </SearchBox>\r\n      <slot></slot>\r\n    </Toolbar>\r\n    \r\n    <div style=\"overflow: auto;\" :style=\"{height: searchable ? (miniBar ? 'calc(100% - 32px)' : 'calc(100% - 42px)') : '100%'}\">\r\n      <ul :id=\"treeId\" :class=\"['ztree', frozenRoot && 'ztree_frozen']\" ref=\"treeUl\"></ul>\r\n      <div v-if=\"disabled\" :class=\"$style.disabled\"/>\r\n      <div v-if=\"loading\" :class=\"$style.loading\"/>\r\n    </div>\r\n\r\n    <Button v-if=\"!searchable && type.indexOf('-')>0\" @click=\"type=type=='my-all'?'all-my':'my-all'\" padding=\"0 8px\" :height=\"32\" :type=\"type=='my-all'?'primary':'light'\" icon=\"el-icon-user\" radius=\"-1px\" style=\"position:absolute;bottom:-3px;right:-4px;border-top-left-radius:24px;\"/>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n  import SearchBox from \"@/components/Tree/SearchBox.vue\";\r\n  import { getPois, getDirTree, onPoiTreeAdd, onPoiTreeRemove } from '@/common/cache/CachePoi.js';\r\n  import { getPoiIconUrl } from '@/common/util/Urls.js';\r\n  import { objClone } from '@/common/util/Objects.js';\r\n\r\n  export default {\r\n    components: { SearchBox },\r\n    props: {\r\n      dir:            { type: Boolean, default: false },                     // 是否是目录树\r\n      setting:        { default: ()=>{return {type:'all-my'}} },             // 参考ztree的setting配置 type=my-all:先显示我的标注，可切到所有标注;all-my:先显示所有标注，可切到我的标注;my:我的标注;all:所有标注\r\n      frozenRoot:     { type: Boolean, default: false },                     // 冻结根结点，不显示根结点的+-图标\r\n      disabled:       { type: Boolean, default: false },                     // 是否可操作\r\n      border:         { type: Boolean, default: true  },                     // 是否显示边框\r\n      borderColor:    { type: String,  default: $_theme.border_color_dark},  // 边框颜色\r\n      searchable:     { type: Boolean, default: true  },                     // 是否显示搜索栏\r\n      placeholder:    String,\r\n      miniBar:        { type: Boolean, default: false },                     // 是否显示搜索栏\r\n      showSearchIcon: { type: Boolean, default: true  },                     // 是否显示搜索图标\r\n      onSearchItemSelected: Function,                                        // 选中了搜索栏查出的某个结点的回调函数，参数(node)\r\n      onTreeInited:         Function\r\n    },\r\n\r\n    _tree: null,\r\n\r\n    getTreeRoots: callback => getPois(cache => callback(cache.root)),\r\n    getNodeText: node => node.name,\r\n    \r\n    data() {\r\n      return {\r\n        treeId: 'tree_' + $_theme.zindex(),\r\n        loading: false,\r\n        type: this.setting.type || 'all-my'\r\n      };\r\n    },\r\n\r\n    watch: {\r\n      type: function(v) {\r\n        this._myHideFunction = v.indexOf('my') == 0 ? this.myHideFunction : null;\r\n        this._type = this._myHideFunction ? 'my' : 'all';\r\n        this._tree && this._tree.refresh();\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      this.loading = true;\r\n      this._setting = objClone(this.setting);\r\n      this._setting.view = this._setting.view || {};\r\n      this._setting.view.nameFunction = this.nameFunction;\r\n      this._setting.view.iconUrlFunction = this.iconUrlFunction;\r\n      this._setting.view.iconCssFunction = this.iconCssFunction;\r\n      if (this.dir == false) {\r\n        return getPois(this.onLoaded);\r\n      }\r\n      this._setting.data = this._setting.data || {};\r\n      this._setting.data.key = this._setting.data.key || {};\r\n      this._setting.data.key.children = 'dirs';\r\n      this.type = 'all';\r\n      getDirTree(this.onLoaded);\r\n    },\r\n\r\n    methods: {\r\n      onLoaded(cache) {\r\n        cache.root[this.treeId] = {open: true};\r\n\r\n        this._hideFunction = this._setting.view.hideFunction;\r\n        this._setting.view.hideFunction = this.hideFunction;\r\n        this._myHideFunction = this.type.indexOf('my') == 0 ? this.myHideFunction : null;\r\n        this._type = this._myHideFunction ? 'my' : 'all';\r\n\r\n        this._tree = $.fn.zTree.init($(this.$refs.treeUl), this._setting, cache.root);\r\n        this.searchable && this.$refs.searchBox.setTree(this._tree);\r\n        this.loading = false;\r\n        onPoiTreeAdd(this.treeId, this);\r\n        this.onTreeInited && this.onTreeInited(cache.root,this._tree,this);\r\n      },\r\n      iconUrlFunction(node, open) {//标注\r\n        return node.type == '0' ? null : getPoiIconUrl(node.icon);\r\n      },\r\n      iconCssFunction(node, open) {//目录\r\n        return node.type == '0' ? (open ? 'ico_open' : 'ico_close') : null;\r\n      },\r\n      nameFunction(node) {\r\n        return node.type == '0' ? (node.name + ' [' + (node[this._type]||0) + ']') : node.name;\r\n      },\r\n      hideFunction(node) {\r\n        if (this._myHideFunction && this._myHideFunction(node)) return true;\r\n        return this._hideFunction ? this._hideFunction(node) : false;\r\n      },\r\n      myHideFunction(node) {\r\n        if (node.id == '0') return false;\r\n        if (node.type == '1') return node.auser != $_cache.user.userId;\r\n        if (node.auser == $_cache.user.userId || node.my > 0) return false;\r\n        if (node.children && node.children.length) {//如果当前目录的孩子中有我创建的目录或标注，也显示当前标注\r\n          for (let i=0, len=node.children.length; i<len; i++) {\r\n            if (!this.myHideFunction(node.children[i])) return false;\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n      getCheckedNodes(onlyChecked=true, onlyTop=false, field=null, hasOwnField=null, nodes=null) {\r\n        return this._tree.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes);\r\n      },\r\n      checkNodes(nodes, checked=true, checkTypeFlag, callbackFlag) {\r\n        for (let i=0,len=nodes.length; i<len; i++) {\r\n          this._tree.checkNode(nodes[i], checked, checkTypeFlag, callbackFlag);\r\n        }\r\n      },\r\n      selectNode(node, isSilent=false) {\r\n        this._tree.selectNode(node, false, isSilent);\r\n      },\r\n      getTree() { return this._tree; },\r\n      getTreeId() { return this.treeId; },\r\n      destroy() {\r\n        onPoiTreeRemove(this.treeId);\r\n        if (this._tree) {\r\n          this._tree.destroy();\r\n          this._tree = null;\r\n        }\r\n        if (this.searchable) {\r\n          this.$refs.searchBox.clear();\r\n          this.$refs.searchBox.setTree(null);\r\n        }\r\n      }\r\n    },\r\n\r\n    beforeDestroy() {\r\n      this.destroy();\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .ztree_frozen li span.button.switch.level0 { display:none; }\r\n  .ztree_frozen li ul.level0 { padding:0; background:none; }\r\n</style>\r\n\r\n<style module>\r\n  .container {\r\n    position: relative;\r\n    background-color: #fff;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n  }\r\n  .border {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n  }\r\n  .loading {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n    opacity: 0.3;\r\n    filter: alpha(opacity=30);\r\n    cursor: not-allowed;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-image: url(\"@/assets/icon/loading.gif\");\r\n  }\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(255, 255, 255, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60); \r\n    cursor: not-allowed;\r\n  }\r\n</style>\r\n<style>\r\n  /* @import '../../components/Tree/zTreeStyle.css'; */\r\n</style>\r\n"]}]}