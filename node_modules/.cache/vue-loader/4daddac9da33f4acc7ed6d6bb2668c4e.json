{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Tree\\SearchBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Tree\\SearchBox.vue","mtime":1662449411103},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { domLeftTop } from '@/components/util/Dom.js';\nimport { treeSearch } from '@/common/util/Trees.js';\n\nexport default {\n  props: {\n    placeholder: String,\n    hasOwnField: String,                                    // 如果指定该属性，查询对象必须有该属性，否则不查询该对象\n    searchFun: Function,                                    // 查询回调函数 参数(node, searchText) 返回true(符合条件)|false(不符合条件)\n    onItemSelected: Function,                               // 选择某个查询的结果 参数(node)\n    border: { type: Boolean, default: false },              // 是否显示边框\n    borderColor: { type: String, default: $_theme.border_color_light},            // 边框颜色\n    radius: { type: String,  default: $_theme.input_radius},// 边框圆角\n    treeBorder: { type: Boolean, default: false },          // 树是否显示边框\n    showSearchIcon: { type: Boolean, default: true },       // 是否显示搜索图标\n    height: { type: Number,  default: $_theme.inputHeight },// 高度数值，单位是px\n    searchMax:{ type: Number, default: 200  },              // 搜索栏显示的最多数量\n  },\n\n  _timeout: null,\n  _tree: null,\n  _options: null,\n  _selectedInfo: null,// {dom:xxx, index:yyy}\n\n  data() {\n    return {\n      value: null,\n      showDropDown: false,\n      tip: null,\n      mytitle: null,\n    };\n  },\n\n  watch: {\n    showDropDown: function(v) {\n      this.hideDropDown = this.hideDropDown || (e => this.showDropDown = false);\n      v ? setTimeout(()=>document.addEventListener('click', this.hideDropDown), 10) : document.removeEventListener('click', this.hideDropDown);\n    },\n    tip: function(v) {\n      this.hideTip = this.hideTip || (e => this.tip = null);\n      v ? setTimeout(()=>document.addEventListener('click', this.hideTip), 10) : document.removeEventListener('click', this.hideTip);\n    }\n  },\n  methods: {\n    setTree(tree) {\n      this._tree = tree;\n      if(!tree) return;\n      this._check = tree.setting.check && tree.setting.check.enable;\n      if (this._check) this.mytitle = $_L.get('用空格、逗号或分号隔开可精确查询多个') +'\\n' + $_L.get('按回车键勾选上所有查询结果');\n    },\n    showOrHideClearBtn(show) {\n      this.$refs.clearBtn.style.display = (show && this.value) ? '' : 'none';\n    },\n    handleClick() {\n      if (!this.value) {\n        return this.$emit('blankclick', this);\n      }\n      if (this._options && this._options.length > 0 && !this.showDropDown) {\n        this.styleDropDown();\n        this.showDropDown = true;\n      }\n    },\n    handleInput(event) {\n      this.value = event.target.value;\n      this.$emit('input', event.target.value);\n      if (!this.value) {\n        this.clear();\n        this.$emit('blankinput', this);\n        return;\n      }\n      this.showOrHideClearBtn(true);\n      this._timeout && clearTimeout(this._timeout);\n      this._timeout = setTimeout(this.onSearch, 500);\n    },\n    openOptions(options) {\n      this._options = options;\n      this.openDropDown();\n    },\n    onSearch() {\n      this._timeout = null;\n      if (!this._tree) return;\n      let [text, array] = this.getSearchText(this.value);\n      this._options = treeSearch(this._tree, text, array, this.hasOwnField, this.searchFun, array ? array.length : this.searchMax);\n      this._selectedInfo = null;\n      if (this._options.length == 0) {\n        return this.showTip($_L.get('无结果'), '#f00');\n      }\n      this.tip = null;\n      this.openDropDown();\n    },\n    getSearchText(text) {\n      text = (text||'').trim();\n      if (!text) return [null, null];\n      if (!this._check) return [text, null];\n      let array = text.split(/[ |,|;|；|，|　]/);\n      if (array.length == 1) return [text.toLowerCase(), null];\n      return [null, new Set(array)];\n    },\n    showTip(tip, color) {\n      this.showDropDown = false;\n      this.tip = tip;\n      this.$nextTick(() => {\n        let treeDom = this._tree.setting.treeObj.get(0).parentNode;\n        let treeHide = treeDom.offsetWidth == 0;\n        let {left, top} = treeHide ? domLeftTop(this.$el.parentNode) : domLeftTop(treeDom);\n        treeHide && (top = this.$el.offsetHeight + top);\n        !treeHide && left--;\n        let style = this.$refs.tip.style;\n        style.color = color;\n        style['z-index'] = $_theme.zindex();\n        style.top = top + 'px';\n        style.left = left + 'px';\n        style.width = (treeHide ? this.$el.parentNode.offsetWidth : treeDom.offsetWidth + 2) + 'px';\n      });\n    },\n    handleKeypress(event) {\n      if ((event.keyCode || event.which) == 13) {\n        let setting = this._tree.setting;\n        if (setting.check && setting.check.enable && setting.check.hasChecked && this._options && this._options.length) {//hasChecked:是否需要勾选上\n          setting = setting.treeId;\n          let n;\n          this._options.forEach(node=>(!node[setting] || node[setting].value!=1) && this._tree.checkNode(n=node, true, true, true));\n          n && this._tree.selectNode(n, false);\n          this.showDropDown = false;\n        }\n      }\n    },\n    openDropDown() {// 显示或隐藏选项列表\n      this.showDropDown = true;\n      this.styleDropDown();\n      let dom = this.$refs.dropdown;\n      dom.innerHTML = '';\n      let span = [];\n      for (let i=0, len=this._options.length, node, icon_url, icon_css, li, name; i<len; i++) {\n        node = this._options[i];\n        \n        span.push(\"<span style='width:30px;height:30px;background-position:center;\");\n        icon_url = this.iconUrl(node);\n        icon_url && span.push(icon_url);\n        span.push(\"' class='button\");\n        icon_css = this.iconCss(node);\n        icon_css && span.push(\" \", icon_css);\n        span.push(\"'></span>\");\n        span.push(name = this.nameFunction(node) || '');\n\n        li = document.createElement(\"li\");\n        li.className = this.$style.option_item;\n        li.style['background-color'] = this.theme.alternate_colors[i%2];\n        li.innerHTML = span.join('');\n        li.onclick = event => this.onItemClick(event, i, name);\n        span.length = 0;\n\n        dom.appendChild(li);\n      }\n    },\n    styleDropDown() {\n      let treeDom = this._tree.setting.treeObj.get(0).parentNode;\n      let treeHide = treeDom.offsetWidth == 0;\n      let {left, top} = treeHide ? domLeftTop(this.$el.parentNode) : domLeftTop(treeDom);\n      treeHide && (top = this.$el.offsetHeight + top);\n      !treeHide && left--;\n      let style = this.$refs.dropdown.style;\n      style.color = '';\n      style['z-index'] = $_theme.zindex();\n      style.top = top + 'px';\n      style.left = left + 'px';\n      style.height = Math.min(treeHide ? (document.documentElement.clientHeight - top - 21) : (treeDom.offsetHeight-1), this._options.length * 30) + 'px';\n      style.width = (treeHide ? this.$el.parentNode.offsetWidth-2 : treeDom.offsetWidth) + 'px';\n    },\n    iconUrl(node) {\n      if (!this._tree.setting.view.iconUrlFunction) return null;\n      let iconUrl = this._tree.setting.view.iconUrlFunction(node);\n      return iconUrl ? (\"background-size:16px 16px;background-image:url(\" + iconUrl + \");\") : null;\n    },\n    iconCss(node) {\n      if (this._tree.setting.view.iconCssFunction) {\n        return this._tree.setting.view.iconCssFunction(node) || null;\n      }\n      return node[this._tree.setting.treeId].isParent ? 'ico_close' : 'ico_docu';\n    },\n    nameFunction(node) {\n      return this._tree.setting.view.nameFunction ? this._tree.setting.view.nameFunction(node) : node[this._tree.setting.data.key.name];\n    },\n    onItemClick(event, index, name) {\n      this.value = name.split(' ')[0];\n      if (this._selectedInfo) {\n        this._selectedInfo.dom.style.cssText = 'background-color:' + this.theme.alternate_colors[this._selectedInfo.index%2];\n      }\n      this._selectedInfo = {dom: event.target, index: index};\n      this._selectedInfo.dom.style.cssText = 'background-color:' + this.theme.selected_color + '!important';\n      let node = this._options[index];\n      this._tree.selectNode(node, false);\n      let setting = this._tree.setting, tools = setting.treeObj.zTree._z.tools;\n      if (!setting.callback.beforeClick || tools.apply(setting.callback.beforeClick, [node], true) !== false) {\n        setting.treeObj.trigger(setting.treeObj.zTree.consts.event.CLICK, [null, node]);\n      }\n      if (setting.check && setting.check.enable && setting.check.hasChecked) {//hasChecked:是否需要勾选上\n        this._tree.checkNode(node, true, true, true);\n      }\n      this.onItemSelected && this.onItemSelected(node);\n    },\n    clear() {\n      this._timeout && clearTimeout(this._timeout);\n      this._timeout = null;\n      this.showDropDown = false;\n      this.$refs.dropdown.innerHTML = '';\n      this.value = this.tip = null;\n      this._options = null;\n      this._selectedInfo = null;\n      this.showOrHideClearBtn(false);\n    }\n  }\n};\n",{"version":3,"sources":["SearchBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SearchBox.vue","sourceRoot":"src/components/Tree","sourcesContent":["\r\n<template>\r\n  <div\r\n    :class=\"[$style.container, border && $style.border]\" \r\n    :style=\"{height:`${height}px`, borderColor:borderColor, borderRadius:radius}\" \r\n    tabindex=\"0\"\r\n    @mouseenter=\"showOrHideClearBtn(true)\"\r\n    @mouseleave=\"showOrHideClearBtn(false)\">\r\n    \r\n    <!--搜索图标显示-->\r\n    <i :class=\"$style.search_icon\" class=\"el-icon-search\" v-if=\"showSearchIcon\"></i>\r\n\r\n    <slot></slot>\r\n\r\n    <!--clear按钮显示-->\r\n    <div :class=\"$style.clear\" style=\"display:none;\" ref=\"clearBtn\">\r\n      <i></i> <i @click=\"clear\" class=\"el-icon-close\"></i>\r\n    </div>\r\n\r\n    <!--input显示-->\r\n    <div style=\"overflow:hidden;\">\r\n      <input\r\n        type=\"text\"\r\n        :class=\"$style.input\"\r\n        :placeholder=\"placeholder || $_L.get('输入进行查询')\"\r\n        :value=\"value\"\r\n        :title=\"mytitle\"\r\n        @focus=\"$el.style['border-color'] = theme.color;$el.style['z-index'] = theme.zindex()\"\r\n        @blur=\"$el.style['border-color'] = borderColor;$el.style['z-index'] = ''\"\r\n        @click=\"handleClick\"\r\n        @input=\"handleInput\"\r\n        @keypress=\"handleKeypress($event)\">\r\n    </div>\r\n\r\n    <!--弹出搜索结果显示-->\r\n    <ul ref=\"dropdown\" v-show=\"showDropDown\" :class=\"$style.dropdown\" class=\"ztree\" style=\"padding:0; min-width:0;\" :style=\"[{borderColor:theme.border_color_dark}, theme.popup, {'overflowY':'auto'}]\"></ul>\r\n\r\n    <!--弹出提示-->\r\n    <ul ref=\"tip\" v-if=\"tip\" :class=\"$style.dropdown\" style=\"text-align:center; height:32px; line-height:31px;\" :style=\"[{borderColor:theme.border_color_dark}, theme.popup]\">\r\n        {{tip}}\r\n    </ul>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import { domLeftTop } from '@/components/util/Dom.js';\r\n  import { treeSearch } from '@/common/util/Trees.js';\r\n  \r\n  export default {\r\n    props: {\r\n      placeholder: String,\r\n      hasOwnField: String,                                    // 如果指定该属性，查询对象必须有该属性，否则不查询该对象\r\n      searchFun: Function,                                    // 查询回调函数 参数(node, searchText) 返回true(符合条件)|false(不符合条件)\r\n      onItemSelected: Function,                               // 选择某个查询的结果 参数(node)\r\n      border: { type: Boolean, default: false },              // 是否显示边框\r\n      borderColor: { type: String, default: $_theme.border_color_light},            // 边框颜色\r\n      radius: { type: String,  default: $_theme.input_radius},// 边框圆角\r\n      treeBorder: { type: Boolean, default: false },          // 树是否显示边框\r\n      showSearchIcon: { type: Boolean, default: true },       // 是否显示搜索图标\r\n      height: { type: Number,  default: $_theme.inputHeight },// 高度数值，单位是px\r\n      searchMax:{ type: Number, default: 200  },              // 搜索栏显示的最多数量\r\n    },\r\n\r\n    _timeout: null,\r\n    _tree: null,\r\n    _options: null,\r\n    _selectedInfo: null,// {dom:xxx, index:yyy}\r\n\r\n    data() {\r\n      return {\r\n        value: null,\r\n        showDropDown: false,\r\n        tip: null,\r\n        mytitle: null,\r\n      };\r\n    },\r\n\r\n    watch: {\r\n      showDropDown: function(v) {\r\n        this.hideDropDown = this.hideDropDown || (e => this.showDropDown = false);\r\n        v ? setTimeout(()=>document.addEventListener('click', this.hideDropDown), 10) : document.removeEventListener('click', this.hideDropDown);\r\n      },\r\n      tip: function(v) {\r\n        this.hideTip = this.hideTip || (e => this.tip = null);\r\n        v ? setTimeout(()=>document.addEventListener('click', this.hideTip), 10) : document.removeEventListener('click', this.hideTip);\r\n      }\r\n    },\r\n    methods: {\r\n      setTree(tree) {\r\n        this._tree = tree;\r\n        if(!tree) return;\r\n        this._check = tree.setting.check && tree.setting.check.enable;\r\n        if (this._check) this.mytitle = $_L.get('用空格、逗号或分号隔开可精确查询多个') +'\\n' + $_L.get('按回车键勾选上所有查询结果');\r\n      },\r\n      showOrHideClearBtn(show) {\r\n        this.$refs.clearBtn.style.display = (show && this.value) ? '' : 'none';\r\n      },\r\n      handleClick() {\r\n        if (!this.value) {\r\n          return this.$emit('blankclick', this);\r\n        }\r\n        if (this._options && this._options.length > 0 && !this.showDropDown) {\r\n          this.styleDropDown();\r\n          this.showDropDown = true;\r\n        }\r\n      },\r\n      handleInput(event) {\r\n        this.value = event.target.value;\r\n        this.$emit('input', event.target.value);\r\n        if (!this.value) {\r\n          this.clear();\r\n          this.$emit('blankinput', this);\r\n          return;\r\n        }\r\n        this.showOrHideClearBtn(true);\r\n        this._timeout && clearTimeout(this._timeout);\r\n        this._timeout = setTimeout(this.onSearch, 500);\r\n      },\r\n      openOptions(options) {\r\n        this._options = options;\r\n        this.openDropDown();\r\n      },\r\n      onSearch() {\r\n        this._timeout = null;\r\n        if (!this._tree) return;\r\n        let [text, array] = this.getSearchText(this.value);\r\n        this._options = treeSearch(this._tree, text, array, this.hasOwnField, this.searchFun, array ? array.length : this.searchMax);\r\n        this._selectedInfo = null;\r\n        if (this._options.length == 0) {\r\n          return this.showTip($_L.get('无结果'), '#f00');\r\n        }\r\n        this.tip = null;\r\n        this.openDropDown();\r\n      },\r\n      getSearchText(text) {\r\n        text = (text||'').trim();\r\n        if (!text) return [null, null];\r\n        if (!this._check) return [text, null];\r\n        let array = text.split(/[ |,|;|；|，|　]/);\r\n        if (array.length == 1) return [text.toLowerCase(), null];\r\n        return [null, new Set(array)];\r\n      },\r\n      showTip(tip, color) {\r\n        this.showDropDown = false;\r\n        this.tip = tip;\r\n        this.$nextTick(() => {\r\n          let treeDom = this._tree.setting.treeObj.get(0).parentNode;\r\n          let treeHide = treeDom.offsetWidth == 0;\r\n          let {left, top} = treeHide ? domLeftTop(this.$el.parentNode) : domLeftTop(treeDom);\r\n          treeHide && (top = this.$el.offsetHeight + top);\r\n          !treeHide && left--;\r\n          let style = this.$refs.tip.style;\r\n          style.color = color;\r\n          style['z-index'] = $_theme.zindex();\r\n          style.top = top + 'px';\r\n          style.left = left + 'px';\r\n          style.width = (treeHide ? this.$el.parentNode.offsetWidth : treeDom.offsetWidth + 2) + 'px';\r\n        });\r\n      },\r\n      handleKeypress(event) {\r\n        if ((event.keyCode || event.which) == 13) {\r\n          let setting = this._tree.setting;\r\n          if (setting.check && setting.check.enable && setting.check.hasChecked && this._options && this._options.length) {//hasChecked:是否需要勾选上\r\n            setting = setting.treeId;\r\n            let n;\r\n            this._options.forEach(node=>(!node[setting] || node[setting].value!=1) && this._tree.checkNode(n=node, true, true, true));\r\n            n && this._tree.selectNode(n, false);\r\n            this.showDropDown = false;\r\n          }\r\n        }\r\n      },\r\n      openDropDown() {// 显示或隐藏选项列表\r\n        this.showDropDown = true;\r\n        this.styleDropDown();\r\n        let dom = this.$refs.dropdown;\r\n        dom.innerHTML = '';\r\n        let span = [];\r\n        for (let i=0, len=this._options.length, node, icon_url, icon_css, li, name; i<len; i++) {\r\n          node = this._options[i];\r\n          \r\n          span.push(\"<span style='width:30px;height:30px;background-position:center;\");\r\n          icon_url = this.iconUrl(node);\r\n          icon_url && span.push(icon_url);\r\n          span.push(\"' class='button\");\r\n          icon_css = this.iconCss(node);\r\n          icon_css && span.push(\" \", icon_css);\r\n          span.push(\"'></span>\");\r\n          span.push(name = this.nameFunction(node) || '');\r\n\r\n          li = document.createElement(\"li\");\r\n          li.className = this.$style.option_item;\r\n          li.style['background-color'] = this.theme.alternate_colors[i%2];\r\n          li.innerHTML = span.join('');\r\n          li.onclick = event => this.onItemClick(event, i, name);\r\n          span.length = 0;\r\n\r\n          dom.appendChild(li);\r\n        }\r\n      },\r\n      styleDropDown() {\r\n        let treeDom = this._tree.setting.treeObj.get(0).parentNode;\r\n        let treeHide = treeDom.offsetWidth == 0;\r\n        let {left, top} = treeHide ? domLeftTop(this.$el.parentNode) : domLeftTop(treeDom);\r\n        treeHide && (top = this.$el.offsetHeight + top);\r\n        !treeHide && left--;\r\n        let style = this.$refs.dropdown.style;\r\n        style.color = '';\r\n        style['z-index'] = $_theme.zindex();\r\n        style.top = top + 'px';\r\n        style.left = left + 'px';\r\n        style.height = Math.min(treeHide ? (document.documentElement.clientHeight - top - 21) : (treeDom.offsetHeight-1), this._options.length * 30) + 'px';\r\n        style.width = (treeHide ? this.$el.parentNode.offsetWidth-2 : treeDom.offsetWidth) + 'px';\r\n      },\r\n      iconUrl(node) {\r\n        if (!this._tree.setting.view.iconUrlFunction) return null;\r\n        let iconUrl = this._tree.setting.view.iconUrlFunction(node);\r\n        return iconUrl ? (\"background-size:16px 16px;background-image:url(\" + iconUrl + \");\") : null;\r\n      },\r\n      iconCss(node) {\r\n        if (this._tree.setting.view.iconCssFunction) {\r\n          return this._tree.setting.view.iconCssFunction(node) || null;\r\n        }\r\n        return node[this._tree.setting.treeId].isParent ? 'ico_close' : 'ico_docu';\r\n      },\r\n      nameFunction(node) {\r\n        return this._tree.setting.view.nameFunction ? this._tree.setting.view.nameFunction(node) : node[this._tree.setting.data.key.name];\r\n      },\r\n      onItemClick(event, index, name) {\r\n        this.value = name.split(' ')[0];\r\n        if (this._selectedInfo) {\r\n          this._selectedInfo.dom.style.cssText = 'background-color:' + this.theme.alternate_colors[this._selectedInfo.index%2];\r\n        }\r\n        this._selectedInfo = {dom: event.target, index: index};\r\n        this._selectedInfo.dom.style.cssText = 'background-color:' + this.theme.selected_color + '!important';\r\n        let node = this._options[index];\r\n        this._tree.selectNode(node, false);\r\n        let setting = this._tree.setting, tools = setting.treeObj.zTree._z.tools;\r\n        if (!setting.callback.beforeClick || tools.apply(setting.callback.beforeClick, [node], true) !== false) {\r\n          setting.treeObj.trigger(setting.treeObj.zTree.consts.event.CLICK, [null, node]);\r\n        }\r\n        if (setting.check && setting.check.enable && setting.check.hasChecked) {//hasChecked:是否需要勾选上\r\n          this._tree.checkNode(node, true, true, true);\r\n        }\r\n        this.onItemSelected && this.onItemSelected(node);\r\n      },\r\n      clear() {\r\n        this._timeout && clearTimeout(this._timeout);\r\n        this._timeout = null;\r\n        this.showDropDown = false;\r\n        this.$refs.dropdown.innerHTML = '';\r\n        this.value = this.tip = null;\r\n        this._options = null;\r\n        this._selectedInfo = null;\r\n        this.showOrHideClearBtn(false);\r\n      }\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .container {\r\n    overflow: hidden;\r\n    outline: none;\r\n    display: inline-block;\r\n    white-space: nowrap;\r\n    position: relative;\r\n    background-color: #fff;\r\n  }\r\n  .container > *:not(ul) {\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .border {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n  }\r\n  \r\n  /* 搜索图标 */\r\n  .search_icon {\r\n    float: left;\r\n    font-size: 16px;\r\n    padding-left: 6px;\r\n  }\r\n  /* 输入框 */\r\n  .input {\r\n    height: 100%;\r\n    width: 100%;\r\n    display: inline-block;\r\n    border: 0;\r\n    outline: 0;\r\n    padding: 0 8px;\r\n  }\r\n  .input::placeholder {\r\n    color: #B0B0B0;\r\n  }\r\n  .input::-webkit-input-placeholder {\r\n    color: #B0B0B0;\r\n  }\r\n  .input:-ms-input-placeholder {\r\n    color: #B0B0B0;\r\n  }\r\n  .input::-ms-input-placeholder {\r\n    color: #B0B0B0;\r\n  }\r\n  /* 清空按钮 */\r\n  .clear {\r\n    float: right;\r\n    position: relative;\r\n    width: 0px;\r\n  }\r\n  .clear > i {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    left: -20px;\r\n    width: 20px;\r\n    font-size: 16px;\r\n    line-height: 0;\r\n  }\r\n  .clear > i:first-child {\r\n    top: 0;\r\n    background-color: #fff;\r\n    height: calc(100% - 2px);\r\n  }\r\n  /* 下拉容器 */\r\n  .dropdown {\r\n    position: fixed;\r\n    padding: 0;\r\n    margin: 0;\r\n    background-color: #fff;\r\n    margin-block-start: 0;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-top-width: 0;\r\n    box-shadow: 0px 0px 5px 0px RGBA(0, 0, 0, 0.2);\r\n  }\r\n  .option_item {\r\n    height: 30px;\r\n    cursor: default;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n  .option_item:hover {\r\n    background-color: #FCF0C1 !important;\r\n  }\r\n</style>\r\n"]}]}