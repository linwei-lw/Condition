{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\InputTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\InputTree.vue","mtime":1612227987676},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 单选树使用例子\n* <InputTree label=\"选择地区\" valueField=\"id\" :setting=\"setting\" v-model=\"value\" :text=\"text\" :getTreeRoots=\"getTreeRoots\" @change=\"onSelectChg\"/>\n*\n*  data: {value: 0, text: '中国', setting: {参考zTree的setting}},\n*  methods: {\n*    getTreeRoots(callback) {\n*      // 异步或同步取到树根结点roots\n*      callback(roots); //记得调用回调函数，把数据传回去\n*    },\n*    onSelectChg(value, node) {// value是node的valueField值, node是树结点对象\n*    }\n*  }\n* ========================================================================================================\n*  多选树使用例子：车辆树选多部车辆\n*  <InputTree label=\"选择一部车\" :tree=\"carTree\" v-model=\"carIds\" hasOwnField=\"plate\" @change=\"onCheckChg\"/>\n*\n*  import CarTree from '@/common/tree/CarTree.vue';\n*  data: {carIds:[]}, // carIds因为是多选，所以是数组\n*  computed: {\n*    carTree: function() { return CarTree }\n*  },\n*  methods: {\n*    onCheckChg(cars, checked) {// cars是当次勾选发生变化的车辆列表；checked:true勾上,false:去勾\n*    }\n*  }\n*  hasOwnField=\"plate\" 车辆树即有车辆也有车队，plate字段是车辆才有的，表示只允许选上车辆\n*/\n\nimport Vue from 'vue';\n\nimport { domLeftTop } from '@/components/util/Dom.js';\nimport { arrayGetValue } from '@/common/util/Arrays.js';\nimport { arrayRemoveItem } from '@/common/util/Arrays.js';\nimport { getNodeByValue } from '@/common/util/Trees.js';\nimport { getNodesByValues } from '@/common/util/Trees.js';\n\nimport Tree from '@/components/Tree';\n\nexport default {\n  name: \"InputTree\",\n  props: {\n    label: String,                                               // 标题文本\n    tree:        { default: ()=>{return Tree} },                 // 树组件\n    setting:     { default: ()=>{return {}} },                   // 参考ztree的setting配置\n    getTreeRoots: Function,                                      // 调用该方法获取树结点\n    expandRoot: { type: Boolean,  default: true },               // 显示树时默认展开根结点\n    hasOwnField: { type: String,  default: null },               // 只对树有该属性的结点处理\n    value: null,                                                 // 当前值(v-model)\n    text:  null,                                                 // 初始显示文本\n    labelField: { type: String,  default: null },                // 显示字段，如果不指定，将使用tree的显示字段或nameFunction\n    valueField: { type: String,  default: 'id' },                // 值字段\n    treeWidth:  { type: Number,  default: 0 },                   // 弹出树的宽度px，0则默认InputTree的总宽度\n    treeHeight: { type: Number,  default: 350 },                 // 弹出树的高度px\n    placeholder: String,\n    searchable: { type: Boolean, default: true },                // 是否显示搜索栏\n    required:   Boolean,                                         // 是否显示必填\n    disabled:   Boolean,                                         // 是否可操作\n    clearable:  Boolean,                                         // 是否显示可清除图标\n    border:     { type: Boolean, default: true },                // 是否显示边框\n    borderColor:{ default: $_theme.border_color_light },\n    height:     { type: Number,  default: $_theme.inputHeight }, // 高度数值，单位是px\n    inputStyle: { default: null },                                // 输入框的style\n    labelMinWidth:{ type: Number,  default: 10 },  \t\t  \t   // lable宽度最小数值，单位是px\n    labelMaxWidth:{ type: Number},  \t\t  \t   // lable宽度最小数值，单位是px\n    custom: { type: Boolean, default: false }   // 自定义\n  },\n  _tree:  null,\n  _roots: null,\n  _value: null,\n  _item:  null,\n  _setting: null,\n\n  data() {\n    return {\n      txt: this.text,\n      focused: false,\n      hover: false,\n      open:  false,\n    };\n  },\n  watch: {\n    value: function(v) {\n      this._myself ? (this._myself = false) : (this._value = v, this.refresh());\n    },\n    text: function(v) {\n      this.txt = v;\n    },\n    focused: function(v) {\n      document[v?'addEventListener':'removeEventListener']('click', this.checkBlur);\n    }\n  },\n  mounted() {\n    this._setting = Object.assign({callback: {}}, this.setting);\n    this._setting.check = Object.assign({enable: false, hasOwnField: this.hasOwnField}, this.setting.check||{});\n    this._value = this.value;\n    if (this.value === null) return;\n\n    if (Array.isArray(this.value)) {//多选\n      this._setting.check.enable = true\n      if (this.value.length == 0) return;\n    }\n    // 获取文字出来显示\n    !this.text && this.refresh();\n    this.txt = this.txt || this.text;\n  },\n  methods: {\n    refresh() {\n      this.txt = null;\n      this._item = null;\n      this._getRoots(this._setItemAndText.bind(this));\n    },\n    _setItemAndText(roots) {\n      if (!roots) return;\n      if (this._setting.check.enable === true) {\n        this._item = this.valueField ? getNodesByValues(roots, this.value, this.valueField, this.hasOwnField) : [...this.value];\n        this._item && this.setTxt(this._item, true);\n      } else {\n        this._item = this.valueField ? getNodeByValue(roots, this.value, this.valueField, this.hasOwnField) : this.value;\n        this._item && this.setTxt(this._item, false);\n      }\n    },\n    setTxt(item, isarray) {\n      if (this.labelField) {//如果设置labelField，根据labelField值显示值\n        this.txt = isarray ? arrayGetValue(item,this.labelField).join(',') : item[this.labelField];\n      } else if (this.tree.getNodeText || (this._setting.view && this._setting.view.nameFunction)) {\n        let fun = this.tree.getNodeText || (this._setting.view && this._setting.view.nameFunction);\n        if (isarray) {\n          let array = [];\n          for (let i=0, len=item.length; i<len; i++) {\n            array.push(fun(item[i]));\n          }\n          this.txt = array.join(',');\n        } else {\n          this.txt = fun(item);\n        }\n      } else {\n        let feild = this._setting.data && this._setting.data.key && this._setting.data.key.name;\n        feild = feild || 'name';\n        this.txt = isarray ? arrayGetValue(item,feild).join(',') : item[feild];\n      }\n    },\n    _getRoots(callback) {\n      if (this._roots) return callback(this._roots);\n      this.getTreeRoots ? this.getTreeRoots(roots => {\n        this._roots = Array.isArray(roots) ? roots : [roots];\n        callback(this._roots);\n      }) : (\n        this.tree.getTreeRoots ? this.tree.getTreeRoots(callback) : callback(null)\n      );\n    },\n    toggleShowTree() {// 显示或隐藏选项列表\n      this.$el.focus();\n      this.$emit('click');\n      if(this.custom){\n        return;\n      }\n      this.open ? this.hideTree() : this.showTree();\n    },\n    showTree() {\n      if (!this._tree) {\n        let onTreeInited = () => {\n          if (!this._item && this.value) {\n            let roots = this._tree.getTree().getNodes();\n            this._setItemAndText(roots);\n          }\n          if (this._item) {\n            if (this._setting.check.enable === true) {//多选\n              this._tree.checkNodes(this._item, true, true);\n              this._tree.selectNode(this._item[0]);\n            } else {\n              this._tree.selectNode(this._item);\n            }\n          }\n        };\n        this.createTree(onTreeInited);\n        this._tree.init && this._getRoots(roots => this._tree.init(roots, this.expandRoot));\n      } else {\n        this.styleTree();\n      }\n      this.open = true;\n      document.addEventListener('click', this.onMouseClick);\n    },\n    hideTree() {// 隐藏弹出的选项列表\n      this._tree.$el.style.display = 'none';\n      this.open = false;\n      document.removeEventListener('click', this.onMouseClick);\n    },\n    onMouseClick(event) {\n      if (!this._tree.$el.contains(event.target) && !this.$el.contains(event.target)) {\n        this.hideTree();\n      }\n    },\n    checkBlur(event) {\n      this.focused = this.$el.contains(event.target);\n    },\n    createTree(onTreeInited) {\n      if (this._setting.check.enable === true) {//多选\n        this._setting.callback.onCheck && (this._setting.callback._onCheck = this._setting.callback.onCheck);\n        this._setting.callback.onCheck = this.onItemCheck;\n      } else {\n        this._setting.callback.onClick && (this._setting.callback._onClick = this._setting.callback.onClick);\n        this._setting.callback.onClick = this.onItemClick;\n      }\n      let constructor = Vue.extend(this.tree);\n      this._tree = new constructor({propsData: {setting:this._setting, miniBar:true, borderColor:this.borderColor, searchable:this.searchable, onTreeInited:onTreeInited}});\n      this._tree.$mount();\n      this.styleTree();\n      this.$el.appendChild(this._tree.$el);\n    },\n    styleTree() {\n      // 自动判断是显示在下面还是上面\n      let {left, top} = domLeftTop(this.$el), isbottom = true, _treeHeight = this.treeHeight;\n      let this_height = this.$el.clientHeight + (this.border ? 2 : 0);\n      let down = document.documentElement.clientHeight - top - this_height;\n      if (down > _treeHeight) {// 下面空间充足，显示在下面\n        top += this_height;\n      } else if (top > _treeHeight) {// 上面空间足够，显示在上面\n        top -= _treeHeight - 0;\n        isbottom = false;\n      } else {// 上面和下面的空间都不够\n        if (down > top) {// 下面的空间大，显示在下面\n          _treeHeight = down - 20;\n          top += this_height;\n        } else {// 上面的空间大，显示在上面\n          _treeHeight = top - 5;\n          top -= _treeHeight - 0;\n          isbottom = false;\n        }\n      }\n      let style = this._tree.$el.style;\n      style.position = \"fixed\";\n      style['box-shadow'] = '0px 0px 5px 0px RGBA(0, 0, 0, 0.1)';\n      style[isbottom?'border-top-width':'border-bottom-width'] = 0;\n      style['z-index'] = $_theme.zindex();\n      style.top = top + 'px';\n      style.left = left + 'px';\n      style.height = _treeHeight + 'px',\n      style.width = (this.treeWidth || this.$el.offsetWidth) + 'px';\n      style.display = 'block';\n    },\n    onItemClick(node, event) {\n      if (this.hasOwnField && !node.hasOwnProperty(this.hasOwnField)) return;\n      this._setting.callback._onClick && this._setting.callback._onClick(node, event);\n      if (this._item == node) return this.hideTree();\n      this._item = node;\n      let value = this.valueField ? node[this.valueField] : node;\n      if (this._value === value) return this.hideTree();\n      this._value = value;\n      this.setTxt(node, false);\n      this._myself = true;\n      this.$emit('input',  value);\n      this.$emit('change', value, node, this.txt);\n      this.hideTree();\n    },\n    onItemCheck(node, chgs, value, event) {\n      this._item = this._item || [];\n      this._value = this._value || [];\n      this._setting.callback._onCheck && this._setting.callback._onCheck(node, chgs, value, event);\n\n      let items = [], roots = value == 0 ? this._tree.getTree().getNodes() : null;\n      if (roots && roots.length == 1 && roots[0] == node) {//根结点全不选\n        this.txt = '';\n        this._item = [];\n        this._value = [];\n      } else {\n        for (let i=0,len=chgs.length; i<len; i++) {\n          node = chgs[i];\n          items.push(node);\n          if (value == 1) {\n            this._item.push(node);\n            this._value.push(this.valueField ? node[this.valueField] : node);\n          } else {\n            items.push(node);\n            arrayRemoveItem(this._item, node);\n            arrayRemoveItem(this._value, this.valueField ? node[this.valueField] : node);\n          }\n        }\n        this.setTxt(this._item, true);\n      }\n      this._myself = true;\n      this.$emit('input',  this._value);\n      this.$emit('change', items, value == 1, this.txt);\n    },\n    getSelectedItem() {\n      return this._item;\n    },\n    clear() {\n      this.open && this.hideTree();\n      this.txt = null;\n      if (this._setting.check.enable && this._tree) {\n        if (this._item && this._item.length > 0) {\n          this._tree.getTree().checkAllNodes(false);\n        }\n      }\n      this._value = null;\n      this._item = null;\n      this._myself = true;\n      this.$emit('input', null);\n      this.$emit('change', null, null, null);\n    }\n  },\n  computed: {\n    showClear() {// 判断是否要显示清除按钮\n      return this.clearable && this.hover && this.txt;\n    },\n    lineHeight() {// 获取除边框外的高度\n      return this.height - (this.border ? 2 : 0);\n    },\n    labelStyle() {\n      return {\n        minWidth:this.labelMinWidth + 'px',\n        maxWidth:this.labelMaxWidth + 'px',\n        borderRightColor: this.theme.border_color_light,\n        backgroundColor: this.theme.bg_color\n      };\n    },\n  },\n  beforeDestroy() {\n    this.focused = false;\n    this.open && this.hideTree();\n    this._tree && this._tree.destroy();\n    this._tree = null;\n    this._roots = null;\n    this._item = null;\n    this._value = null;\n    this._setting = null;\n  }\n};\n",null]}