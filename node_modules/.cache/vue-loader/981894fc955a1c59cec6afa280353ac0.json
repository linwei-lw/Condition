{"remainingRequest":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\common\\tree\\TeamTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\common\\tree\\TeamTree.vue","mtime":1612227987723},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SearchBox from \"@/components/Tree/SearchBox.vue\";\nimport { getTeams, onTeamTreeAdd, onTeamTreeRemove } from '@/common/cache/CacheTeamCar.js';\nimport { refreshAll } from '@/common/cache/CacheTeamCar.js';\nimport { regetNodes } from '@/common/cache/CacheTeamCar.js';\nimport { objClone } from '@/common/util/Objects.js';\n\nexport default {\n  components: { SearchBox },\n  props: {\n    setting:        { default: ()=>{return {}} },                               // 参考ztree的setting配置\n    frozenRoot:     { type: Boolean, default: false },                          // 冻结根结点，不显示根结点的+-图标\n    disabled:       { type: Boolean, default: false },                          // 是否可操作\n    border:         { type: Boolean, default: true  },                          // 是否显示边框\n    borderColor:    { type: String,  default: $_theme.border_color_dark},       // 边框颜色\n    searchable:     { type: Boolean, default: true  },                          // 是否显示搜索栏\n    placeholder:    String,\n    miniBar:        { type: Boolean, default: false },                          // 是否显示搜索栏\n    showSearchIcon: { type: Boolean, default: true  },                          // 是否显示搜索图标\n    onSearchItemSelected: Function,                                             // 选中了搜索栏查出的某个结点的回调函数，参数(node)\n    onTreeInited:         Function,\n    onTreeRefreshed: Function,\n  },\n\n  _tree: null,\n\n  getTreeRoots: callback => getTeams(cache => callback(cache.root)),\n  getNodeText: node => node.name,\n  \n  data() {\n    return {\n      treeId: 'tree_' + $_theme.zindex(),\n      loading: false,\n    };\n  },\n\n  watch: {\n    'setting.view.nameFunction': function(v) {\n      if (!this._tree) return;\n      this._tree.setting.view.nameFunction = v;\n      this._updateNodeName(this._tree.getNodes());\n    }\n  },\n\n  mounted() {\n    this.loading = true;\n    getTeams(this.onLoaded);\n  },\n\n  methods: {\n    onLoaded(cache) {\n      if (!this._setting) {\n        this._setting = objClone(this.setting);\n        this._setting.data = this._setting.data || {};\n        this._setting.data.key = this._setting.data.key || {};\n        this._setting.data.key.children = 'teams';\n        this._setting.view = this._setting.view || {};\n        this._setting.view.iconCssFunction = this.iconCssFunction;\n      }\n      \n      cache.root[this.treeId] = {open: true};\n      this._tree = $.fn.zTree.init($(this.$refs.treeUl), this._setting, cache.root);\n      this.searchable && this.$refs.searchBox.setTree(this._tree);\n      this.loading = false;\n      onTeamTreeAdd(this.treeId, this);\n      this.onTreeInited && this.onTreeInited(cache.root,this._tree,this);\n    },\n    refreshClick() {\n      this.loading = true;\n      refreshAll(e => {\n        this.loading = false;\n        this.searchable && this.showTip('刷新失败', '#f00');\n      });\n    },\n    onRefresh(cars,teams) {\n      let snodes = this._tree.getSelectedNodes();\n      let cnodes = (this._setting.check && this._setting.check.enable) ? this._tree.getCheckedNodes(true,true) : null;\n      this.onLoaded(teams);\n      this.searchable && this.showTip('刷新成功', '#00f');\n      snodes = regetNodes(snodes);\n      snodes.length > 0 && this._tree.selectNode(snodes[0]);\n      cnodes = regetNodes(cnodes);\n      cnodes && cnodes.length > 0 && this.checkNodes(cnodes, true, true);\n      this.onTreeRefreshed && this.onTreeRefreshed(snodes,cnodes);\n    },\n    showTip(tip, color) {\n      this.$refs.searchBox.clear();\n      this.$refs.searchBox.showTip(tip, color);\n    },\n    iconCssFunction(node, open) {\n      return open ? 'ico_open' : 'ico_close';\n    },\n    _updateNodeName(nodes) {\n      for (let i=0,len=nodes.length,node; i<len; i++) {\n        if (this._tree.updateNodeName(node = nodes[i])) {\n          node.teams && this._updateNodeName(node.teams);\n        }\n      }\n    },\n    getCheckedNodes(onlyChecked=true, onlyTop=false, field=null, hasOwnField=null, nodes=null) {\n      return this._tree.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes);\n    },\n    checkNodes(nodes, checked=true, checkTypeFlag, callbackFlag) {\n      for (let i=0,len=nodes.length; i<len; i++) {\n        this._tree.checkNode(nodes[i], checked, checkTypeFlag, callbackFlag);\n      }\n    },\n    selectNode(node, isSilent=false) {\n      this._tree.selectNode(node, false, isSilent);\n    },\n    getTree() { return this._tree; },\n    getTreeId() { return this.treeId; },\n    destroy() {\n      onTeamTreeRemove(this.treeId);\n      if (this._tree) {\n        this._tree.destroy();\n        this._tree = null;\n      }\n      if (this.searchable) {\n        this.$refs.searchBox.clear();\n        this.$refs.searchBox.setTree(null);\n      }\n    }\n  },\n\n  beforeDestroy() {\n    this.destroy();\n  }\n}\n",{"version":3,"sources":["TeamTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsfile":"TeamTree.vue","sourceRoot":"src/common/tree","sourcesContent":["\r\n<template>\r\n  \r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"{borderColor:borderColor}\">\r\n    <Toolbar v-if=\"searchable\" :border=\"false\" small :mini=\"miniBar\" style=\"border-bottom-width:1px;border-bottom-style:solid;\" :style=\"{borderColor:theme.border_color_light}\">\r\n      <SearchBox :placeholder=\"placeholder\" border :borderColor=\"theme.border_color_light\"\r\n      :style=\"{width:`calc(100% - ${miniBar?31:41}px`}\" \r\n       :height=\"miniBar?25:theme.inputHeight\" :treeBorder=\"border\" :showSearchIcon=\"showSearchIcon\" :onItemSelected=\"onSearchItemSelected\" ref=\"searchBox\"/>\r\n      <Button type=\"light\" style=\"margin-left:-1px;padding:2px 0 0 0;\" :height=\"miniBar?25:theme.inputHeight\" :style=\"{width:`${miniBar?25:theme.inputHeight}px`}\" icon=\"el-icon-refresh-right\" @click=\"refreshClick\"/>\r\n      <slot></slot>\r\n    </Toolbar>\r\n    \r\n    <div style=\"overflow: auto;\" :style=\"{height: searchable ? (miniBar ? 'calc(100% - 32px)' : 'calc(100% - 42px)') : '100%'}\">\r\n      <ul :id=\"treeId\" :class=\"['ztree', frozenRoot && 'ztree_frozen']\" ref=\"treeUl\"></ul>\r\n      <div v-if=\"disabled\" :class=\"$style.disabled\"/>\r\n      <div v-if=\"loading\" :class=\"$style.loading\"/>\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n  import SearchBox from \"@/components/Tree/SearchBox.vue\";\r\n  import { getTeams, onTeamTreeAdd, onTeamTreeRemove } from '@/common/cache/CacheTeamCar.js';\r\n  import { refreshAll } from '@/common/cache/CacheTeamCar.js';\r\n  import { regetNodes } from '@/common/cache/CacheTeamCar.js';\r\n  import { objClone } from '@/common/util/Objects.js';\r\n\r\n  export default {\r\n    components: { SearchBox },\r\n    props: {\r\n      setting:        { default: ()=>{return {}} },                               // 参考ztree的setting配置\r\n      frozenRoot:     { type: Boolean, default: false },                          // 冻结根结点，不显示根结点的+-图标\r\n      disabled:       { type: Boolean, default: false },                          // 是否可操作\r\n      border:         { type: Boolean, default: true  },                          // 是否显示边框\r\n      borderColor:    { type: String,  default: $_theme.border_color_dark},       // 边框颜色\r\n      searchable:     { type: Boolean, default: true  },                          // 是否显示搜索栏\r\n      placeholder:    String,\r\n      miniBar:        { type: Boolean, default: false },                          // 是否显示搜索栏\r\n      showSearchIcon: { type: Boolean, default: true  },                          // 是否显示搜索图标\r\n      onSearchItemSelected: Function,                                             // 选中了搜索栏查出的某个结点的回调函数，参数(node)\r\n      onTreeInited:         Function,\r\n      onTreeRefreshed: Function,\r\n    },\r\n\r\n    _tree: null,\r\n\r\n    getTreeRoots: callback => getTeams(cache => callback(cache.root)),\r\n    getNodeText: node => node.name,\r\n    \r\n    data() {\r\n      return {\r\n        treeId: 'tree_' + $_theme.zindex(),\r\n        loading: false,\r\n      };\r\n    },\r\n\r\n    watch: {\r\n      'setting.view.nameFunction': function(v) {\r\n        if (!this._tree) return;\r\n        this._tree.setting.view.nameFunction = v;\r\n        this._updateNodeName(this._tree.getNodes());\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      this.loading = true;\r\n      getTeams(this.onLoaded);\r\n    },\r\n\r\n    methods: {\r\n      onLoaded(cache) {\r\n        if (!this._setting) {\r\n          this._setting = objClone(this.setting);\r\n          this._setting.data = this._setting.data || {};\r\n          this._setting.data.key = this._setting.data.key || {};\r\n          this._setting.data.key.children = 'teams';\r\n          this._setting.view = this._setting.view || {};\r\n          this._setting.view.iconCssFunction = this.iconCssFunction;\r\n        }\r\n        \r\n        cache.root[this.treeId] = {open: true};\r\n        this._tree = $.fn.zTree.init($(this.$refs.treeUl), this._setting, cache.root);\r\n        this.searchable && this.$refs.searchBox.setTree(this._tree);\r\n        this.loading = false;\r\n        onTeamTreeAdd(this.treeId, this);\r\n        this.onTreeInited && this.onTreeInited(cache.root,this._tree,this);\r\n      },\r\n      refreshClick() {\r\n        this.loading = true;\r\n        refreshAll(e => {\r\n          this.loading = false;\r\n          this.searchable && this.showTip('刷新失败', '#f00');\r\n        });\r\n      },\r\n      onRefresh(cars,teams) {\r\n        let snodes = this._tree.getSelectedNodes();\r\n        let cnodes = (this._setting.check && this._setting.check.enable) ? this._tree.getCheckedNodes(true,true) : null;\r\n        this.onLoaded(teams);\r\n        this.searchable && this.showTip('刷新成功', '#00f');\r\n        snodes = regetNodes(snodes);\r\n        snodes.length > 0 && this._tree.selectNode(snodes[0]);\r\n        cnodes = regetNodes(cnodes);\r\n        cnodes && cnodes.length > 0 && this.checkNodes(cnodes, true, true);\r\n        this.onTreeRefreshed && this.onTreeRefreshed(snodes,cnodes);\r\n      },\r\n      showTip(tip, color) {\r\n        this.$refs.searchBox.clear();\r\n        this.$refs.searchBox.showTip(tip, color);\r\n      },\r\n      iconCssFunction(node, open) {\r\n        return open ? 'ico_open' : 'ico_close';\r\n      },\r\n      _updateNodeName(nodes) {\r\n        for (let i=0,len=nodes.length,node; i<len; i++) {\r\n          if (this._tree.updateNodeName(node = nodes[i])) {\r\n            node.teams && this._updateNodeName(node.teams);\r\n          }\r\n        }\r\n      },\r\n      getCheckedNodes(onlyChecked=true, onlyTop=false, field=null, hasOwnField=null, nodes=null) {\r\n        return this._tree.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes);\r\n      },\r\n      checkNodes(nodes, checked=true, checkTypeFlag, callbackFlag) {\r\n        for (let i=0,len=nodes.length; i<len; i++) {\r\n          this._tree.checkNode(nodes[i], checked, checkTypeFlag, callbackFlag);\r\n        }\r\n      },\r\n      selectNode(node, isSilent=false) {\r\n        this._tree.selectNode(node, false, isSilent);\r\n      },\r\n      getTree() { return this._tree; },\r\n      getTreeId() { return this.treeId; },\r\n      destroy() {\r\n        onTeamTreeRemove(this.treeId);\r\n        if (this._tree) {\r\n          this._tree.destroy();\r\n          this._tree = null;\r\n        }\r\n        if (this.searchable) {\r\n          this.$refs.searchBox.clear();\r\n          this.$refs.searchBox.setTree(null);\r\n        }\r\n      }\r\n    },\r\n\r\n    beforeDestroy() {\r\n      this.destroy();\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .ztree_frozen li span.button.switch.level0 { display:none; }\r\n  .ztree_frozen li ul.level0 { padding:0; background:none; }\r\n</style>\r\n\r\n<style module>\r\n  .container {\r\n    position: relative;\r\n    background-color: #fff;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n  }\r\n  .border {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n  }\r\n  .loading {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n    opacity: 0.3;\r\n    filter: alpha(opacity=30);\r\n    cursor: not-allowed;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    background-image: url(\"@/assets/icon/loading.gif\");\r\n  }\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(255, 255, 255, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60); \r\n    cursor: not-allowed;\r\n  }\r\n</style>"]}]}