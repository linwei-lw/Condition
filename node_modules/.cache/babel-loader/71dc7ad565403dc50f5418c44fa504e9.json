{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\header\\src\\util.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\header\\src\\util.js","mtime":1635230121727},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\n\nvar getAllColumns = function getAllColumns(columns, parentColumn) {\n  var result = [];\n  columns.forEach(function (column) {\n    column.parentId = parentColumn ? parentColumn.id : null;\n\n    if (column.visible) {\n      if (column.children && column.children.length && column.children.some(function (column) {\n        return column.visible;\n      })) {\n        result.push(column);\n        result.push.apply(result, _toConsumableArray(getAllColumns(column.children, column)));\n      } else {\n        result.push(column);\n      }\n    }\n  });\n  return result;\n};\n\nexport var convertToRows = function convertToRows(originColumns) {\n  var maxLevel = 1;\n\n  var traverse = function traverse(column, parent) {\n    if (parent) {\n      column.level = parent.level + 1;\n\n      if (maxLevel < column.level) {\n        maxLevel = column.level;\n      }\n    }\n\n    if (column.children && column.children.length && column.children.some(function (column) {\n      return column.visible;\n    })) {\n      var colSpan = 0;\n      column.children.forEach(function (subColumn) {\n        if (subColumn.visible) {\n          traverse(subColumn, column);\n          colSpan += subColumn.colSpan;\n        }\n      });\n      column.colSpan = colSpan;\n    } else {\n      column.colSpan = 1;\n    }\n  };\n\n  originColumns.forEach(function (column) {\n    column.level = 1;\n    traverse(column);\n  });\n  var rows = [];\n\n  for (var i = 0; i < maxLevel; i++) {\n    rows.push([]);\n  }\n\n  var allColumns = getAllColumns(originColumns);\n  allColumns.forEach(function (column) {\n    if (column.children && column.children.length && column.children.some(function (column) {\n      return column.visible;\n    })) {\n      column.rowSpan = 1;\n    } else {\n      column.rowSpan = maxLevel - column.level + 1;\n    }\n\n    rows[column.level - 1].push(column);\n  });\n  return rows;\n};",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\header\\src\\util.js"],"names":["getAllColumns","result","columns","column","parentColumn","convertToRows","maxLevel","traverse","parent","colSpan","subColumn","originColumns","rows","i","allColumns"],"mappings":"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","sourcesContent":["const getAllColumns = (columns, parentColumn) => {\r\n  const result = []\r\n  columns.forEach((column) => {\r\n    column.parentId = parentColumn ? parentColumn.id : null\r\n    if (column.visible) {\r\n      if (column.children && column.children.length && column.children.some(column => column.visible)) {\r\n        result.push(column)\r\n        result.push(...getAllColumns(column.children, column))\r\n      } else {\r\n        result.push(column)\r\n      }\r\n    }\r\n  })\r\n  return result\r\n}\r\n\r\nexport const convertToRows = (originColumns) => {\r\n  let maxLevel = 1\r\n  const traverse = (column, parent) => {\r\n    if (parent) {\r\n      column.level = parent.level + 1\r\n      if (maxLevel < column.level) {\r\n        maxLevel = column.level\r\n      }\r\n    }\r\n    if (column.children && column.children.length && column.children.some(column => column.visible)) {\r\n      let colSpan = 0\r\n      column.children.forEach((subColumn) => {\r\n        if (subColumn.visible) {\r\n          traverse(subColumn, column)\r\n          colSpan += subColumn.colSpan\r\n        }\r\n      })\r\n      column.colSpan = colSpan\r\n    } else {\r\n      column.colSpan = 1\r\n    }\r\n  }\r\n\r\n  originColumns.forEach((column) => {\r\n    column.level = 1\r\n    traverse(column)\r\n  })\r\n\r\n  const rows = []\r\n  for (let i = 0; i < maxLevel; i++) {\r\n    rows.push([])\r\n  }\r\n\r\n  const allColumns = getAllColumns(originColumns)\r\n\r\n  allColumns.forEach((column) => {\r\n    if (column.children && column.children.length && column.children.some(column => column.visible)) {\r\n      column.rowSpan = 1\r\n    } else {\r\n      column.rowSpan = maxLevel - column.level + 1\r\n    }\r\n    rows[column.level - 1].push(column)\r\n  })\r\n\r\n  return rows\r\n}\r\n"]}]}