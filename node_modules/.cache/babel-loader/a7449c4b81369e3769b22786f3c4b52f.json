{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Tree\\jquery.ztree.exedit.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Tree\\jquery.ztree.exedit.js","mtime":1612227987598},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.find\";\n/*\r\n * JQuery zTree exedit\r\n * v3.5.43\r\n * http://treejs.cn/\r\n *\r\n * Copyright (c) 2010 Hunter.z\r\n *\r\n * Licensed same as jquery - MIT License\r\n * http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * Date: 2020-04-04\r\n */\n\n(function ($) {\n  //default consts of exedit\n  var _consts = {\n    event: {\n      DRAG: \"ztree_drag\",\n      DROP: \"ztree_drop\",\n      RENAME: \"ztree_rename\",\n      DRAGMOVE: \"ztree_dragmove\"\n    },\n    id: {\n      EDIT: \"_edit\",\n      INPUT: \"_input\",\n      REMOVE: \"_remove\"\n    },\n    move: {\n      TYPE_INNER: \"inner\",\n      TYPE_PREV: \"prev\",\n      TYPE_NEXT: \"next\"\n    },\n    node: {\n      CURSELECTED_EDIT: \"curSelectedNode_Edit\",\n      TMPTARGET_TREE: \"tmpTargetzTree\",\n      TMPTARGET_NODE: \"tmpTargetNode\"\n    }\n  },\n      //default setting of exedit\n  _setting = {\n    edit: {\n      enable: false,\n      editNameSelectAll: false,\n      showRemoveBtn: true,\n      showRenameBtn: true,\n      removeTitle: \"remove\",\n      renameTitle: \"rename\",\n      drag: {\n        autoExpandTrigger: false,\n        isCopy: true,\n        isMove: true,\n        prev: true,\n        next: true,\n        inner: true,\n        minMoveSize: 5,\n        borderMax: 10,\n        borderMin: -5,\n        maxShowNodeNum: 5,\n        autoOpenTime: 500\n      }\n    },\n    view: {\n      addHoverDom: null,\n      removeHoverDom: null\n    },\n    callback: {\n      beforeDrag: null,\n      beforeDragOpen: null,\n      beforeDrop: null,\n      beforeEditName: null,\n      beforeRename: null,\n      onDrag: null,\n      onDragMove: null,\n      onDrop: null,\n      onRename: null\n    }\n  },\n      //default root of exedit\n  _initRoot = function _initRoot(setting) {\n    var r = data.getRoot(setting),\n        rs = data.getRoots();\n    r.curEditNode = null;\n    r.curEditInput = null;\n    r.curHoverNode = null;\n    r.dragFlag = 0;\n    r.dragNodeShowBefore = [];\n    r.dragMaskList = new Array();\n    rs.showHoverDom = true;\n  },\n      //default cache of exedit\n  _initCache = function _initCache(treeId) {},\n      //default bind event of exedit\n  _bindEvent = function _bindEvent(setting) {\n    var o = setting.treeObj;\n    var c = consts.event;\n    o.bind(c.RENAME, function (event, treeId, treeNode, isCancel) {\n      tools.apply(setting.callback.onRename, [event, treeId, treeNode, isCancel]);\n    });\n    o.bind(c.DRAG, function (event, srcEvent, treeId, treeNodes) {\n      tools.apply(setting.callback.onDrag, [srcEvent, treeId, treeNodes]);\n    });\n    o.bind(c.DRAGMOVE, function (event, srcEvent, treeId, treeNodes) {\n      tools.apply(setting.callback.onDragMove, [srcEvent, treeId, treeNodes]);\n    });\n    o.bind(c.DROP, function (event, srcEvent, treeId, treeNodes, targetNode, moveType, isCopy) {\n      tools.apply(setting.callback.onDrop, [srcEvent, treeId, treeNodes, targetNode, moveType, isCopy]);\n    });\n  },\n      _unbindEvent = function _unbindEvent(setting) {\n    var o = setting.treeObj;\n    var c = consts.event;\n    o.unbind(c.RENAME);\n    o.unbind(c.DRAG);\n    o.unbind(c.DRAGMOVE);\n    o.unbind(c.DROP);\n  },\n      //default event proxy of exedit\n  _eventProxy = function _eventProxy(e) {\n    var target = e.target,\n        setting = data.getSetting(e.data.treeId),\n        relatedTarget = e.relatedTarget,\n        tId = \"\",\n        node = null,\n        nodeEventType = \"\",\n        treeEventType = \"\",\n        nodeEventCallback = null,\n        treeEventCallback = null,\n        tmp = null;\n\n    if (tools.eqs(e.type, \"mouseover\")) {\n      tmp = tools.getMDom(setting, target, [{\n        tagName: \"a\",\n        attrName: \"treeNode\" + consts.id.A\n      }]);\n\n      if (tmp) {\n        tId = tools.getNodeMainDom(tmp).id;\n        nodeEventType = \"hoverOverNode\";\n      }\n    } else if (tools.eqs(e.type, \"mouseout\")) {\n      tmp = tools.getMDom(setting, relatedTarget, [{\n        tagName: \"a\",\n        attrName: \"treeNode\" + consts.id.A\n      }]);\n\n      if (!tmp) {\n        tId = \"remove\";\n        nodeEventType = \"hoverOutNode\";\n      }\n    } else if (tools.eqs(e.type, \"mousedown\")) {\n      tmp = tools.getMDom(setting, target, [{\n        tagName: \"a\",\n        attrName: \"treeNode\" + consts.id.A\n      }]);\n\n      if (tmp) {\n        tId = tools.getNodeMainDom(tmp).id;\n        nodeEventType = \"mousedownNode\";\n      }\n    }\n\n    if (tId.length > 0) {\n      node = data.getNodeCache(setting, tId);\n\n      switch (nodeEventType) {\n        case \"mousedownNode\":\n          nodeEventCallback = _handler.onMousedownNode;\n          break;\n\n        case \"hoverOverNode\":\n          nodeEventCallback = _handler.onHoverOverNode;\n          break;\n\n        case \"hoverOutNode\":\n          nodeEventCallback = _handler.onHoverOutNode;\n          break;\n      }\n    }\n\n    var proxyResult = {\n      stop: false,\n      node: node,\n      nodeEventType: nodeEventType,\n      nodeEventCallback: nodeEventCallback,\n      treeEventType: treeEventType,\n      treeEventCallback: treeEventCallback\n    };\n    return proxyResult;\n  },\n      //default init node of exedit\n  _initNode = function _initNode(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {\n    if (!n) return;\n    n.isHover = false;\n    n.editNameFlag = false;\n  },\n      //update zTreeObj, add method of edit\n  _zTreeTools = function _zTreeTools(setting, zTreeTools) {\n    zTreeTools.cancelEditName = function (newName) {\n      var root = data.getRoot(this.setting);\n      if (!root.curEditNode) return;\n      view.cancelCurEditNode(this.setting, newName ? newName : null, true);\n    };\n\n    zTreeTools.copyNode = function (targetNode, node, moveType, isSilent) {\n      if (!node) return null;\n      var isParent = data.nodeIsParent(setting, targetNode);\n      if (targetNode && !isParent && this.setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) return null;\n\n      var _this = this,\n          newNode = tools.clone(node);\n\n      if (!targetNode) {\n        targetNode = null;\n        moveType = consts.move.TYPE_INNER;\n      }\n\n      if (moveType == consts.move.TYPE_INNER) {\n        var copyCallback = function copyCallback() {\n          view.addNodes(_this.setting, targetNode, -1, [newNode], isSilent);\n        };\n\n        if (tools.canAsync(this.setting, targetNode)) {\n          view.asyncNode(this.setting, targetNode, isSilent, copyCallback);\n        } else {\n          copyCallback();\n        }\n      } else {\n        view.addNodes(this.setting, targetNode.parentNode, -1, [newNode], isSilent);\n        view.moveNode(this.setting, targetNode, newNode, moveType, false, isSilent);\n      }\n\n      return newNode;\n    };\n\n    zTreeTools.editName = function (node) {\n      if (!node || !node.tId || node !== data.getNodeCache(this.setting, node.tId)) return;\n      if (node.parentTId) view.expandCollapseParentNode(this.setting, node.getParentNode(), true);\n      view.editNode(this.setting, node);\n    };\n\n    zTreeTools.moveNode = function (targetNode, node, moveType, isSilent) {\n      if (!node) return node;\n      var isParent = data.nodeIsParent(setting, targetNode);\n\n      if (targetNode && !isParent && this.setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) {\n        return null;\n      } else if (targetNode && (node.parentTId == targetNode.tId && moveType == consts.move.TYPE_INNER || $$(node, this.setting).find(\"#\" + targetNode.tId).length > 0)) {\n        return null;\n      } else if (!targetNode) {\n        targetNode = null;\n      }\n\n      var _this = this;\n\n      function moveCallback() {\n        view.moveNode(_this.setting, targetNode, node, moveType, false, isSilent);\n      }\n\n      if (tools.canAsync(this.setting, targetNode) && moveType === consts.move.TYPE_INNER) {\n        view.asyncNode(this.setting, targetNode, isSilent, moveCallback);\n      } else {\n        moveCallback();\n      }\n\n      return node;\n    };\n\n    zTreeTools.setEditable = function (editable) {\n      this.setting.edit.enable = editable;\n      return this.refresh();\n    };\n  },\n      //method of operate data\n  _data = {\n    setSonNodeLevel: function setSonNodeLevel(setting, parentNode, node) {\n      if (!node) return;\n      var children = data.nodeChildren(setting, node);\n      node.level = parentNode ? parentNode.level + 1 : 0;\n      if (!children) return;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        if (children[i]) data.setSonNodeLevel(setting, node, children[i]);\n      }\n    }\n  },\n      //method of event proxy\n  _event = {},\n      //method of event handler\n  _handler = {\n    onHoverOverNode: function onHoverOverNode(event, node) {\n      var setting = data.getSetting(event.data.treeId),\n          root = data.getRoot(setting);\n\n      if (root.curHoverNode != node) {\n        _handler.onHoverOutNode(event);\n      }\n\n      root.curHoverNode = node;\n      view.addHoverDom(setting, node);\n    },\n    onHoverOutNode: function onHoverOutNode(event, node) {\n      var setting = data.getSetting(event.data.treeId),\n          root = data.getRoot(setting);\n\n      if (root.curHoverNode && !data.isSelectedNode(setting, root.curHoverNode)) {\n        view.removeTreeDom(setting, root.curHoverNode);\n        root.curHoverNode = null;\n      }\n    },\n    onMousedownNode: function onMousedownNode(eventMouseDown, _node) {\n      var i,\n          l,\n          setting = data.getSetting(eventMouseDown.data.treeId),\n          root = data.getRoot(setting),\n          roots = data.getRoots(); //right click can't drag & drop\n\n      if (eventMouseDown.button == 2 || !(setting.edit && setting.edit.enable) || !(setting.edit && setting.edit.drag.isCopy) && !(setting.edit && setting.edit.drag.isMove)) return true; //input of edit node name can't drag & drop\n\n      var target = eventMouseDown.target,\n          _nodes = data.getRoot(setting).curSelectedList,\n          nodes = [];\n\n      if (!data.isSelectedNode(setting, _node)) {\n        nodes = [_node];\n      } else {\n        for (i = 0, l = _nodes.length; i < l; i++) {\n          if (_nodes[i].editNameFlag && tools.eqs(target.tagName, \"input\") && target.getAttribute(\"treeNode\" + consts.id.INPUT) !== null) {\n            return true;\n          }\n\n          nodes.push(_nodes[i]);\n\n          if (nodes[0].parentTId !== _nodes[i].parentTId) {\n            nodes = [_node];\n            break;\n          }\n        }\n      }\n\n      view.editNodeBlur = true;\n      view.cancelCurEditNode(setting);\n      var doc = $(setting.treeObj.get(0).ownerDocument),\n          body = $(setting.treeObj.get(0).ownerDocument.body),\n          curNode,\n          tmpArrow,\n          tmpTarget,\n          isOtherTree = false,\n          targetSetting = setting,\n          sourceSetting = setting,\n          preNode,\n          nextNode,\n          preTmpTargetNodeId = null,\n          preTmpMoveType = null,\n          tmpTargetNodeId = null,\n          moveType = consts.move.TYPE_INNER,\n          mouseDownX = eventMouseDown.clientX,\n          mouseDownY = eventMouseDown.clientY,\n          startTime = new Date().getTime();\n\n      if (tools.uCanDo(setting)) {\n        doc.bind(\"mousemove\", _docMouseMove);\n      }\n\n      function _docMouseMove(event) {\n        //avoid start drag after click node\n        if (root.dragFlag == 0 && Math.abs(mouseDownX - event.clientX) < setting.edit.drag.minMoveSize && Math.abs(mouseDownY - event.clientY) < setting.edit.drag.minMoveSize) {\n          return true;\n        }\n\n        var i, l, tmpNode, tmpDom, tmpNodes;\n        body.css(\"cursor\", \"pointer\");\n\n        if (root.dragFlag == 0) {\n          if (tools.apply(setting.callback.beforeDrag, [setting.treeId, nodes], true) == false) {\n            _docMouseUp(event);\n\n            return true;\n          }\n\n          for (i = 0, l = nodes.length; i < l; i++) {\n            if (i == 0) {\n              root.dragNodeShowBefore = [];\n            }\n\n            tmpNode = nodes[i];\n\n            if (data.nodeIsParent(setting, tmpNode) && tmpNode.open) {\n              view.expandCollapseNode(setting, tmpNode, !tmpNode.open);\n              root.dragNodeShowBefore[tmpNode.tId] = true;\n            } else {\n              root.dragNodeShowBefore[tmpNode.tId] = false;\n            }\n          }\n\n          root.dragFlag = 1;\n          roots.showHoverDom = false;\n          tools.showIfameMask(setting, true); //sort\n\n          var isOrder = true,\n              lastIndex = -1;\n\n          if (nodes.length > 1) {\n            var pNodes = nodes[0].parentTId ? data.nodeChildren(setting, nodes[0].getParentNode()) : data.getNodes(setting);\n            tmpNodes = [];\n\n            for (i = 0, l = pNodes.length; i < l; i++) {\n              if (root.dragNodeShowBefore[pNodes[i].tId] !== undefined) {\n                if (isOrder && lastIndex > -1 && lastIndex + 1 !== i) {\n                  isOrder = false;\n                }\n\n                tmpNodes.push(pNodes[i]);\n                lastIndex = i;\n              }\n\n              if (nodes.length === tmpNodes.length) {\n                nodes = tmpNodes;\n                break;\n              }\n            }\n          }\n\n          if (isOrder) {\n            preNode = nodes[0].getPreNode();\n            nextNode = nodes[nodes.length - 1].getNextNode();\n          } //set node in selected\n\n\n          curNode = $$(\"<ul class='zTreeDragUL'></ul>\", setting);\n\n          for (i = 0, l = nodes.length; i < l; i++) {\n            tmpNode = nodes[i];\n            tmpNode.editNameFlag = false;\n            view.selectNode(setting, tmpNode, i > 0);\n            view.removeTreeDom(setting, tmpNode);\n\n            if (i > setting.edit.drag.maxShowNodeNum - 1) {\n              continue;\n            }\n\n            tmpDom = $$(\"<li id='\" + tmpNode.tId + \"_tmp'></li>\", setting);\n            tmpDom.append($$(tmpNode, consts.id.A, setting).clone());\n            tmpDom.css(\"padding\", \"0\");\n            tmpDom.children(\"#\" + tmpNode.tId + consts.id.A).removeClass(consts.node.CURSELECTED);\n            curNode.append(tmpDom);\n\n            if (i == setting.edit.drag.maxShowNodeNum - 1) {\n              tmpDom = $$(\"<li id='\" + tmpNode.tId + \"_moretmp'><a>  ...  </a></li>\", setting);\n              curNode.append(tmpDom);\n            }\n          }\n\n          curNode.attr(\"id\", nodes[0].tId + consts.id.UL + \"_tmp\");\n          curNode.addClass(setting.treeObj.attr(\"class\"));\n          curNode.appendTo(body);\n          tmpArrow = $$(\"<span class='tmpzTreeMove_arrow'></span>\", setting);\n          tmpArrow.attr(\"id\", \"zTreeMove_arrow_tmp\");\n          tmpArrow.appendTo(body);\n          setting.treeObj.trigger(consts.event.DRAG, [event, setting.treeId, nodes]);\n        }\n\n        if (root.dragFlag == 1) {\n          if (tmpTarget && tmpArrow.attr(\"id\") == event.target.id && tmpTargetNodeId && event.clientX + doc.scrollLeft() + 2 > $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget).offset().left) {\n            var xT = $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget);\n            event.target = xT.length > 0 ? xT.get(0) : event.target;\n          } else if (tmpTarget) {\n            tmpTarget.removeClass(consts.node.TMPTARGET_TREE);\n            if (tmpTargetNodeId) $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + \"_\" + consts.move.TYPE_PREV).removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_INNER);\n          }\n\n          tmpTarget = null;\n          tmpTargetNodeId = null; //judge drag & drop in multi ztree\n\n          isOtherTree = false;\n          targetSetting = setting;\n          var settings = data.getSettings();\n\n          for (var s in settings) {\n            if (settings[s].treeId && settings[s].edit.enable && settings[s].treeId != setting.treeId && (event.target.id == settings[s].treeId || $(event.target).parents(\"#\" + settings[s].treeId).length > 0)) {\n              isOtherTree = true;\n              targetSetting = settings[s];\n            }\n          }\n\n          var docScrollTop = doc.scrollTop(),\n              docScrollLeft = doc.scrollLeft(),\n              treeOffset = targetSetting.treeObj.offset(),\n              scrollHeight = targetSetting.treeObj.get(0).scrollHeight,\n              scrollWidth = targetSetting.treeObj.get(0).scrollWidth,\n              dTop = event.clientY + docScrollTop - treeOffset.top,\n              dBottom = targetSetting.treeObj.height() + treeOffset.top - event.clientY - docScrollTop,\n              dLeft = event.clientX + docScrollLeft - treeOffset.left,\n              dRight = targetSetting.treeObj.width() + treeOffset.left - event.clientX - docScrollLeft,\n              isTop = dTop < setting.edit.drag.borderMax && dTop > setting.edit.drag.borderMin,\n              isBottom = dBottom < setting.edit.drag.borderMax && dBottom > setting.edit.drag.borderMin,\n              isLeft = dLeft < setting.edit.drag.borderMax && dLeft > setting.edit.drag.borderMin,\n              isRight = dRight < setting.edit.drag.borderMax && dRight > setting.edit.drag.borderMin,\n              isTreeInner = dTop > setting.edit.drag.borderMin && dBottom > setting.edit.drag.borderMin && dLeft > setting.edit.drag.borderMin && dRight > setting.edit.drag.borderMin,\n              isTreeTop = isTop && targetSetting.treeObj.scrollTop() <= 0,\n              isTreeBottom = isBottom && targetSetting.treeObj.scrollTop() + targetSetting.treeObj.height() + 10 >= scrollHeight,\n              isTreeLeft = isLeft && targetSetting.treeObj.scrollLeft() <= 0,\n              isTreeRight = isRight && targetSetting.treeObj.scrollLeft() + targetSetting.treeObj.width() + 10 >= scrollWidth;\n\n          if (event.target && tools.isChildOrSelf(event.target, targetSetting.treeId)) {\n            //get node <li> dom\n            var targetObj = event.target;\n\n            while (targetObj && targetObj.tagName && !tools.eqs(targetObj.tagName, \"li\") && targetObj.id != targetSetting.treeId) {\n              targetObj = targetObj.parentNode;\n            }\n\n            var canMove = true; //don't move to self or children of self\n\n            for (i = 0, l = nodes.length; i < l; i++) {\n              tmpNode = nodes[i];\n\n              if (targetObj.id === tmpNode.tId) {\n                canMove = false;\n                break;\n              } else if ($$(tmpNode, setting).find(\"#\" + targetObj.id).length > 0) {\n                canMove = false;\n                break;\n              }\n            }\n\n            if (canMove && event.target && tools.isChildOrSelf(event.target, targetObj.id + consts.id.A)) {\n              tmpTarget = $(targetObj);\n              tmpTargetNodeId = targetObj.id;\n            }\n          } //the mouse must be in zTree\n\n\n          tmpNode = nodes[0];\n\n          if (isTreeInner && tools.isChildOrSelf(event.target, targetSetting.treeId)) {\n            //judge mouse move in root of ztree\n            if (!tmpTarget && (event.target.id == targetSetting.treeId || isTreeTop || isTreeBottom || isTreeLeft || isTreeRight) && (isOtherTree || !isOtherTree && tmpNode.parentTId)) {\n              tmpTarget = targetSetting.treeObj;\n            } //auto scroll top\n\n\n            if (isTop) {\n              targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop() - 10);\n            } else if (isBottom) {\n              targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop() + 10);\n            }\n\n            if (isLeft) {\n              targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() - 10);\n            } else if (isRight) {\n              targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() + 10);\n            } //auto scroll left\n\n\n            if (tmpTarget && tmpTarget != targetSetting.treeObj && tmpTarget.offset().left < targetSetting.treeObj.offset().left) {\n              targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() + tmpTarget.offset().left - targetSetting.treeObj.offset().left);\n            }\n          }\n\n          curNode.css({\n            \"top\": event.clientY + docScrollTop + 3 + \"px\",\n            \"left\": event.clientX + docScrollLeft + 3 + \"px\"\n          });\n          var dX = 0;\n          var dY = 0;\n\n          if (tmpTarget && tmpTarget.attr(\"id\") != targetSetting.treeId) {\n            var clearMove = function clearMove() {\n              tmpTarget = null;\n              tmpTargetNodeId = \"\";\n              moveType = consts.move.TYPE_INNER;\n              tmpArrow.css({\n                \"display\": \"none\"\n              });\n\n              if (window.zTreeMoveTimer) {\n                clearTimeout(window.zTreeMoveTimer);\n                window.zTreeMoveTargetNodeTId = null;\n              }\n            };\n\n            var tmpTargetNode = tmpTargetNodeId == null ? null : data.getNodeCache(targetSetting, tmpTargetNodeId),\n                isCopy = (event.ctrlKey || event.metaKey) && setting.edit.drag.isMove && setting.edit.drag.isCopy || !setting.edit.drag.isMove && setting.edit.drag.isCopy,\n                isPrev = !!(preNode && tmpTargetNodeId === preNode.tId),\n                isNext = !!(nextNode && tmpTargetNodeId === nextNode.tId),\n                isInner = tmpNode.parentTId && tmpNode.parentTId == tmpTargetNodeId,\n                canPrev = (isCopy || !isNext) && tools.apply(targetSetting.edit.drag.prev, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.prev),\n                canNext = (isCopy || !isPrev) && tools.apply(targetSetting.edit.drag.next, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.next),\n                canInner = (isCopy || !isInner) && !(targetSetting.data.keep.leaf && !data.nodeIsParent(setting, tmpTargetNode)) && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.inner);\n\n            if (!canPrev && !canNext && !canInner) {\n              clearMove();\n            } else {\n              var tmpTargetA = $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget),\n                  tmpNextA = tmpTargetNode.isLastNode ? null : $(\"#\" + tmpTargetNode.getNextNode().tId + consts.id.A, tmpTarget.next()),\n                  tmpTop = tmpTargetA.offset().top,\n                  tmpLeft = tmpTargetA.offset().left,\n                  prevPercent = canPrev ? canInner ? 0.25 : canNext ? 0.5 : 1 : -1,\n                  nextPercent = canNext ? canInner ? 0.75 : canPrev ? 0.5 : 0 : -1,\n                  dY_percent = (event.clientY + docScrollTop - tmpTop) / tmpTargetA.height();\n\n              if ((prevPercent == 1 || dY_percent <= prevPercent && dY_percent >= -.2) && canPrev) {\n                dX = 1 - tmpArrow.width();\n                dY = tmpTop - tmpArrow.height() / 2;\n                moveType = consts.move.TYPE_PREV;\n              } else if ((nextPercent == 0 || dY_percent >= nextPercent && dY_percent <= 1.2) && canNext) {\n                dX = 1 - tmpArrow.width();\n                dY = tmpNextA == null || data.nodeIsParent(setting, tmpTargetNode) && tmpTargetNode.open ? tmpTop + tmpTargetA.height() - tmpArrow.height() / 2 : tmpNextA.offset().top - tmpArrow.height() / 2;\n                moveType = consts.move.TYPE_NEXT;\n              } else if (canInner) {\n                dX = 5 - tmpArrow.width();\n                dY = tmpTop;\n                moveType = consts.move.TYPE_INNER;\n              } else {\n                clearMove();\n              }\n\n              if (tmpTarget) {\n                tmpArrow.css({\n                  \"display\": \"block\",\n                  \"top\": dY + \"px\",\n                  \"left\": tmpLeft + dX + \"px\"\n                });\n                tmpTargetA.addClass(consts.node.TMPTARGET_NODE + \"_\" + moveType);\n\n                if (preTmpTargetNodeId != tmpTargetNodeId || preTmpMoveType != moveType) {\n                  startTime = new Date().getTime();\n                }\n\n                if (tmpTargetNode && data.nodeIsParent(setting, tmpTargetNode) && moveType == consts.move.TYPE_INNER) {\n                  var startTimer = true;\n\n                  if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId !== tmpTargetNode.tId) {\n                    clearTimeout(window.zTreeMoveTimer);\n                    window.zTreeMoveTargetNodeTId = null;\n                  } else if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId === tmpTargetNode.tId) {\n                    startTimer = false;\n                  }\n\n                  if (startTimer) {\n                    window.zTreeMoveTimer = setTimeout(function () {\n                      if (moveType != consts.move.TYPE_INNER) return;\n\n                      if (tmpTargetNode && data.nodeIsParent(setting, tmpTargetNode) && !tmpTargetNode.open && new Date().getTime() - startTime > targetSetting.edit.drag.autoOpenTime && tools.apply(targetSetting.callback.beforeDragOpen, [targetSetting.treeId, tmpTargetNode], true)) {\n                        view.switchNode(targetSetting, tmpTargetNode);\n\n                        if (targetSetting.edit.drag.autoExpandTrigger) {\n                          targetSetting.treeObj.trigger(consts.event.EXPAND, [targetSetting.treeId, tmpTargetNode]);\n                        }\n                      }\n                    }, targetSetting.edit.drag.autoOpenTime + 50);\n                    window.zTreeMoveTargetNodeTId = tmpTargetNode.tId;\n                  }\n                }\n              }\n            }\n          } else {\n            moveType = consts.move.TYPE_INNER;\n\n            if (tmpTarget && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, null], !!targetSetting.edit.drag.inner)) {\n              tmpTarget.addClass(consts.node.TMPTARGET_TREE);\n            } else {\n              tmpTarget = null;\n            }\n\n            tmpArrow.css({\n              \"display\": \"none\"\n            });\n\n            if (window.zTreeMoveTimer) {\n              clearTimeout(window.zTreeMoveTimer);\n              window.zTreeMoveTargetNodeTId = null;\n            }\n          }\n\n          preTmpTargetNodeId = tmpTargetNodeId;\n          preTmpMoveType = moveType;\n          setting.treeObj.trigger(consts.event.DRAGMOVE, [event, setting.treeId, nodes]);\n        }\n\n        return false;\n      }\n\n      doc.bind(\"mouseup\", _docMouseUp);\n\n      function _docMouseUp(event) {\n        if (window.zTreeMoveTimer) {\n          clearTimeout(window.zTreeMoveTimer);\n          window.zTreeMoveTargetNodeTId = null;\n        }\n\n        preTmpTargetNodeId = null;\n        preTmpMoveType = null;\n        doc.unbind(\"mousemove\", _docMouseMove);\n        doc.unbind(\"mouseup\", _docMouseUp);\n        doc.unbind(\"selectstart\", _docSelect);\n        body.css(\"cursor\", \"\");\n\n        if (tmpTarget) {\n          tmpTarget.removeClass(consts.node.TMPTARGET_TREE);\n          if (tmpTargetNodeId) $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + \"_\" + consts.move.TYPE_PREV).removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_INNER);\n        }\n\n        tools.showIfameMask(setting, false);\n        roots.showHoverDom = true;\n        if (root.dragFlag == 0) return;\n        root.dragFlag = 0;\n        var i, l, tmpNode;\n\n        for (i = 0, l = nodes.length; i < l; i++) {\n          tmpNode = nodes[i];\n\n          if (data.nodeIsParent(setting, tmpNode) && root.dragNodeShowBefore[tmpNode.tId] && !tmpNode.open) {\n            view.expandCollapseNode(setting, tmpNode, !tmpNode.open);\n            delete root.dragNodeShowBefore[tmpNode.tId];\n          }\n        }\n\n        if (curNode) curNode.remove();\n        if (tmpArrow) tmpArrow.remove();\n        var isCopy = (event.ctrlKey || event.metaKey) && setting.edit.drag.isMove && setting.edit.drag.isCopy || !setting.edit.drag.isMove && setting.edit.drag.isCopy;\n\n        if (!isCopy && tmpTarget && tmpTargetNodeId && nodes[0].parentTId && tmpTargetNodeId == nodes[0].parentTId && moveType == consts.move.TYPE_INNER) {\n          tmpTarget = null;\n        }\n\n        if (tmpTarget) {\n          var dropCallback = function dropCallback() {\n            if (isOtherTree) {\n              if (!isCopy) {\n                for (var i = 0, l = nodes.length; i < l; i++) {\n                  view.removeNode(setting, nodes[i]);\n                }\n              }\n\n              if (moveType == consts.move.TYPE_INNER) {\n                view.addNodes(targetSetting, dragTargetNode, -1, newNodes);\n              } else {\n                view.addNodes(targetSetting, dragTargetNode.getParentNode(), moveType == consts.move.TYPE_PREV ? dragTargetNode.getIndex() : dragTargetNode.getIndex() + 1, newNodes);\n              }\n            } else {\n              if (isCopy && moveType == consts.move.TYPE_INNER) {\n                view.addNodes(targetSetting, dragTargetNode, -1, newNodes);\n              } else if (isCopy) {\n                view.addNodes(targetSetting, dragTargetNode.getParentNode(), moveType == consts.move.TYPE_PREV ? dragTargetNode.getIndex() : dragTargetNode.getIndex() + 1, newNodes);\n              } else {\n                if (moveType != consts.move.TYPE_NEXT) {\n                  for (i = 0, l = newNodes.length; i < l; i++) {\n                    view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);\n                  }\n                } else {\n                  for (i = -1, l = newNodes.length - 1; i < l; l--) {\n                    view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);\n                  }\n                }\n              }\n            }\n\n            view.selectNodes(targetSetting, newNodes);\n            var a = $$(newNodes[0], setting).get(0);\n            view.scrollIntoView(setting, a);\n            setting.treeObj.trigger(consts.event.DROP, [event, targetSetting.treeId, newNodes, dragTargetNode, moveType, isCopy]);\n          };\n\n          var dragTargetNode = tmpTargetNodeId == null ? null : data.getNodeCache(targetSetting, tmpTargetNodeId);\n\n          if (tools.apply(setting.callback.beforeDrop, [targetSetting.treeId, nodes, dragTargetNode, moveType, isCopy], true) == false) {\n            view.selectNodes(sourceSetting, nodes);\n            return;\n          }\n\n          var newNodes = isCopy ? tools.clone(nodes) : nodes;\n\n          if (moveType == consts.move.TYPE_INNER && tools.canAsync(targetSetting, dragTargetNode)) {\n            view.asyncNode(targetSetting, dragTargetNode, false, dropCallback);\n          } else {\n            dropCallback();\n          }\n        } else {\n          view.selectNodes(sourceSetting, nodes);\n          setting.treeObj.trigger(consts.event.DROP, [event, setting.treeId, nodes, null, null, null]);\n        }\n      }\n\n      doc.bind(\"selectstart\", _docSelect);\n\n      function _docSelect() {\n        return false;\n      } // 2018-03-30 FireFox has fixed this issue.\n      //Avoid FireFox's Bug\n      //If zTree Div CSS set 'overflow', so drag node outside of zTree, and event.target is error.\n      // if(eventMouseDown.preventDefault) {\n      //  eventMouseDown.preventDefault();\n      // }\n\n\n      return true;\n    }\n  },\n      //method of tools for zTree\n  _tools = {\n    getAbs: function getAbs(obj) {\n      var oRect = obj.getBoundingClientRect(),\n          scrollTop = document.body.scrollTop + document.documentElement.scrollTop,\n          scrollLeft = document.body.scrollLeft + document.documentElement.scrollLeft;\n      return [oRect.left + scrollLeft, oRect.top + scrollTop];\n    },\n    inputFocus: function inputFocus(inputObj) {\n      if (inputObj.get(0)) {\n        inputObj.focus();\n        tools.setCursorPosition(inputObj.get(0), inputObj.val().length);\n      }\n    },\n    inputSelect: function inputSelect(inputObj) {\n      if (inputObj.get(0)) {\n        inputObj.focus();\n        inputObj.select();\n      }\n    },\n    setCursorPosition: function setCursorPosition(obj, pos) {\n      if (obj.setSelectionRange) {\n        obj.focus();\n        obj.setSelectionRange(pos, pos);\n      } else if (obj.createTextRange) {\n        var range = obj.createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', pos);\n        range.moveStart('character', pos);\n        range.select();\n      }\n    },\n    showIfameMask: function showIfameMask(setting, showSign) {\n      var root = data.getRoot(setting); //clear full mask\n\n      while (root.dragMaskList.length > 0) {\n        root.dragMaskList[0].remove();\n        root.dragMaskList.shift();\n      }\n\n      if (showSign) {\n        //show mask\n        var iframeList = $$(\"iframe\", setting);\n\n        for (var i = 0, l = iframeList.length; i < l; i++) {\n          var obj = iframeList.get(i),\n              r = tools.getAbs(obj),\n              dragMask = $$(\"<div id='zTreeMask_\" + i + \"' class='zTreeMask' style='top:\" + r[1] + \"px; left:\" + r[0] + \"px; width:\" + obj.offsetWidth + \"px; height:\" + obj.offsetHeight + \"px;'></div>\", setting);\n          dragMask.appendTo($$(\"body\", setting));\n          root.dragMaskList.push(dragMask);\n        }\n      }\n    }\n  },\n      //method of operate ztree dom\n  _view = {\n    addEditBtn: function addEditBtn(setting, node) {\n      if (node.editNameFlag || $$(node, consts.id.EDIT, setting).length > 0) {\n        return;\n      }\n\n      if (!tools.apply(setting.edit.showRenameBtn, [setting.treeId, node], setting.edit.showRenameBtn)) {\n        return;\n      }\n\n      var aObj = $$(node, consts.id.A, setting),\n          editStr = \"<span class='\" + consts.className.BUTTON + \" edit' id='\" + node.tId + consts.id.EDIT + \"' title='\" + tools.apply(setting.edit.renameTitle, [setting.treeId, node], setting.edit.renameTitle) + \"' treeNode\" + consts.id.EDIT + \" style='display:none;'></span>\";\n      aObj.append(editStr);\n      $$(node, consts.id.EDIT, setting).bind('click', function () {\n        if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeEditName, [setting.treeId, node], true) == false) return false;\n        view.editNode(setting, node);\n        return false;\n      }).show();\n    },\n    addRemoveBtn: function addRemoveBtn(setting, node) {\n      if (node.editNameFlag || $$(node, consts.id.REMOVE, setting).length > 0) {\n        return;\n      }\n\n      if (!tools.apply(setting.edit.showRemoveBtn, [setting.treeId, node], setting.edit.showRemoveBtn)) {\n        return;\n      }\n\n      var aObj = $$(node, consts.id.A, setting),\n          removeStr = \"<span class='\" + consts.className.BUTTON + \" remove' id='\" + node.tId + consts.id.REMOVE + \"' title='\" + tools.apply(setting.edit.removeTitle, [setting.treeId, node], setting.edit.removeTitle) + \"' treeNode\" + consts.id.REMOVE + \" style='display:none;'></span>\";\n      aObj.append(removeStr);\n      $$(node, consts.id.REMOVE, setting).bind('click', function () {\n        if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return false;\n        view.removeNode(setting, node);\n        setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);\n        return false;\n      }).bind('mousedown', function (eventMouseDown) {\n        return true;\n      }).show();\n    },\n    addHoverDom: function addHoverDom(setting, node) {\n      if (data.getRoots().showHoverDom) {\n        node.isHover = true;\n\n        if (setting.edit && setting.edit.enable) {\n          view.addEditBtn(setting, node);\n          view.addRemoveBtn(setting, node);\n        }\n\n        tools.apply(setting.view.addHoverDom, [setting.treeId, node]);\n      }\n    },\n    cancelCurEditNode: function cancelCurEditNode(setting, forceName, isCancel) {\n      var root = data.getRoot(setting),\n          node = root.curEditNode;\n\n      if (node) {\n        var inputObj = root.curEditInput,\n            newName = forceName ? forceName : isCancel ? data.nodeName(setting, node) : inputObj.val();\n\n        if (tools.apply(setting.callback.beforeRename, [setting.treeId, node, newName, isCancel], true) === false) {\n          return false;\n        }\n\n        data.nodeName(setting, node, newName);\n        var aObj = $$(node, consts.id.A, setting);\n        aObj.removeClass(consts.node.CURSELECTED_EDIT);\n        inputObj.unbind();\n        view.setNodeName(setting, node);\n        node.editNameFlag = false;\n        root.curEditNode = null;\n        root.curEditInput = null;\n        view.selectNode(setting, node, false);\n        setting.treeObj.trigger(consts.event.RENAME, [setting.treeId, node, isCancel]);\n      }\n\n      root.noSelection = true;\n      return true;\n    },\n    editNode: function editNode(setting, node) {\n      var root = data.getRoot(setting);\n      view.editNodeBlur = false;\n\n      if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {\n        setTimeout(function () {\n          tools.inputFocus(root.curEditInput);\n        }, 0);\n        return;\n      }\n\n      node.editNameFlag = true;\n      view.removeTreeDom(setting, node);\n      view.cancelCurEditNode(setting);\n      view.selectNode(setting, node, false);\n      $$(node, consts.id.SPAN, setting).html(\"<input type=text class='rename' id='\" + node.tId + consts.id.INPUT + \"' treeNode\" + consts.id.INPUT + \" >\");\n      var inputObj = $$(node, consts.id.INPUT, setting);\n      inputObj.attr(\"value\", data.nodeName(setting, node));\n\n      if (setting.edit && setting.edit.editNameSelectAll) {\n        tools.inputSelect(inputObj);\n      } else {\n        tools.inputFocus(inputObj);\n      }\n\n      inputObj.bind('blur', function (event) {\n        if (!view.editNodeBlur) {\n          view.cancelCurEditNode(setting);\n        }\n      }).bind('keydown', function (event) {\n        if (event.keyCode == \"13\") {\n          view.editNodeBlur = true;\n          view.cancelCurEditNode(setting);\n        } else if (event.keyCode == \"27\") {\n          view.cancelCurEditNode(setting, null, true);\n        }\n      }).bind('click', function (event) {\n        return false;\n      }).bind('dblclick', function (event) {\n        return false;\n      });\n      $$(node, consts.id.A, setting).addClass(consts.node.CURSELECTED_EDIT);\n      root.curEditInput = inputObj;\n      root.noSelection = false;\n      root.curEditNode = node;\n    },\n    moveNode: function moveNode(setting, targetNode, node, moveType, animateFlag, isSilent) {\n      var root = data.getRoot(setting);\n      if (targetNode == node) return;\n      if (setting.data.keep.leaf && targetNode && !data.nodeIsParent(setting, targetNode) && moveType == consts.move.TYPE_INNER) return;\n      var oldParentNode = node.parentTId ? node.getParentNode() : root,\n          targetNodeIsRoot = targetNode === null || targetNode == root;\n      if (targetNodeIsRoot && targetNode === null) targetNode = root;\n      if (targetNodeIsRoot) moveType = consts.move.TYPE_INNER;\n      var targetParentNode = targetNode.parentTId ? targetNode.getParentNode() : root;\n\n      if (moveType != consts.move.TYPE_PREV && moveType != consts.move.TYPE_NEXT) {\n        moveType = consts.move.TYPE_INNER;\n      }\n\n      if (moveType == consts.move.TYPE_INNER) {\n        if (targetNodeIsRoot) {\n          //parentTId of root node is null\n          node.parentTId = null;\n        } else {\n          if (!data.nodeIsParent(setting, targetNode)) {\n            data.nodeIsParent(setting, targetNode, true);\n            targetNode.open = !!targetNode.open;\n            view.setNodeLineIcos(setting, targetNode);\n          }\n\n          node.parentTId = targetNode.tId;\n        }\n      } //move node Dom\n\n\n      var targetObj, target_ulObj;\n\n      if (targetNodeIsRoot) {\n        targetObj = setting.treeObj;\n        target_ulObj = targetObj;\n      } else {\n        if (!isSilent && moveType == consts.move.TYPE_INNER) {\n          view.expandCollapseNode(setting, targetNode, true, false);\n        } else if (!isSilent) {\n          view.expandCollapseNode(setting, targetNode.getParentNode(), true, false);\n        }\n\n        targetObj = $$(targetNode, setting);\n        target_ulObj = $$(targetNode, consts.id.UL, setting);\n\n        if (!!targetObj.get(0) && !target_ulObj.get(0)) {\n          var ulstr = [];\n          view.makeUlHtml(setting, targetNode, ulstr, '');\n          targetObj.append(ulstr.join(''));\n        }\n\n        target_ulObj = $$(targetNode, consts.id.UL, setting);\n      }\n\n      var nodeDom = $$(node, setting);\n\n      if (!nodeDom.get(0)) {\n        nodeDom = view.appendNodes(setting, node.level, [node], null, -1, false, true).join('');\n      } else if (!targetObj.get(0)) {\n        nodeDom.remove();\n      }\n\n      if (target_ulObj.get(0) && moveType == consts.move.TYPE_INNER) {\n        target_ulObj.append(nodeDom);\n      } else if (targetObj.get(0) && moveType == consts.move.TYPE_PREV) {\n        targetObj.before(nodeDom);\n      } else if (targetObj.get(0) && moveType == consts.move.TYPE_NEXT) {\n        targetObj.after(nodeDom);\n      } //repair the data after move\n\n\n      var i,\n          l,\n          tmpSrcIndex = -1,\n          tmpTargetIndex = 0,\n          oldNeighbor = null,\n          newNeighbor = null,\n          oldLevel = node.level;\n      var oldChildren = data.nodeChildren(setting, oldParentNode);\n      var targetParentChildren = data.nodeChildren(setting, targetParentNode);\n      var targetChildren = data.nodeChildren(setting, targetNode);\n\n      if (node.isFirstNode) {\n        tmpSrcIndex = 0;\n\n        if (oldChildren.length > 1) {\n          oldNeighbor = oldChildren[1];\n          oldNeighbor.isFirstNode = true;\n        }\n      } else if (node.isLastNode) {\n        tmpSrcIndex = oldChildren.length - 1;\n        oldNeighbor = oldChildren[tmpSrcIndex - 1];\n        oldNeighbor.isLastNode = true;\n      } else {\n        for (i = 0, l = oldChildren.length; i < l; i++) {\n          if (oldChildren[i].tId == node.tId) {\n            tmpSrcIndex = i;\n            break;\n          }\n        }\n      }\n\n      if (tmpSrcIndex >= 0) {\n        oldChildren.splice(tmpSrcIndex, 1);\n      }\n\n      if (moveType != consts.move.TYPE_INNER) {\n        for (i = 0, l = targetParentChildren.length; i < l; i++) {\n          if (targetParentChildren[i].tId == targetNode.tId) tmpTargetIndex = i;\n        }\n      }\n\n      if (moveType == consts.move.TYPE_INNER) {\n        if (!targetChildren) {\n          targetChildren = data.nodeChildren(setting, targetNode, []);\n        }\n\n        if (targetChildren.length > 0) {\n          newNeighbor = targetChildren[targetChildren.length - 1];\n          newNeighbor.isLastNode = false;\n        }\n\n        targetChildren.splice(targetChildren.length, 0, node);\n        node.isLastNode = true;\n        node.isFirstNode = targetChildren.length == 1;\n      } else if (targetNode.isFirstNode && moveType == consts.move.TYPE_PREV) {\n        targetParentChildren.splice(tmpTargetIndex, 0, node);\n        newNeighbor = targetNode;\n        newNeighbor.isFirstNode = false;\n        node.parentTId = targetNode.parentTId;\n        node.isFirstNode = true;\n        node.isLastNode = false;\n      } else if (targetNode.isLastNode && moveType == consts.move.TYPE_NEXT) {\n        targetParentChildren.splice(tmpTargetIndex + 1, 0, node);\n        newNeighbor = targetNode;\n        newNeighbor.isLastNode = false;\n        node.parentTId = targetNode.parentTId;\n        node.isFirstNode = false;\n        node.isLastNode = true;\n      } else {\n        if (moveType == consts.move.TYPE_PREV) {\n          targetParentChildren.splice(tmpTargetIndex, 0, node);\n        } else {\n          targetParentChildren.splice(tmpTargetIndex + 1, 0, node);\n        }\n\n        node.parentTId = targetNode.parentTId;\n        node.isFirstNode = false;\n        node.isLastNode = false;\n      }\n\n      data.fixPIdKeyValue(setting, node);\n      data.setSonNodeLevel(setting, node.getParentNode(), node); //repair node what been moved\n\n      view.setNodeLineIcos(setting, node);\n      view.repairNodeLevelClass(setting, node, oldLevel); //repair node's old parentNode dom\n\n      if (!setting.data.keep.parent && oldChildren.length < 1) {\n        //old parentNode has no child nodes\n        data.nodeIsParent(setting, oldParentNode, false);\n        oldParentNode.open = false;\n        var tmp_ulObj = $$(oldParentNode, consts.id.UL, setting),\n            tmp_switchObj = $$(oldParentNode, consts.id.SWITCH, setting),\n            tmp_icoObj = $$(oldParentNode, consts.id.ICON, setting);\n        view.replaceSwitchClass(oldParentNode, tmp_switchObj, consts.folder.DOCU);\n        view.replaceIcoClass(oldParentNode, tmp_icoObj, consts.folder.DOCU);\n        tmp_ulObj.css(\"display\", \"none\");\n      } else if (oldNeighbor) {\n        //old neigbor node\n        view.setNodeLineIcos(setting, oldNeighbor);\n      } //new neigbor node\n\n\n      if (newNeighbor) {\n        view.setNodeLineIcos(setting, newNeighbor);\n      } //repair checkbox / radio\n\n\n      if (!!setting.check && setting.check.enable && view.repairChkClass) {\n        view.repairChkClass(setting, oldParentNode);\n        view.repairParentChkClassWithSelf(setting, oldParentNode);\n        if (oldParentNode != node.parent) view.repairParentChkClassWithSelf(setting, node);\n      } //expand parents after move\n\n\n      if (!isSilent) {\n        view.expandCollapseParentNode(setting, node.getParentNode(), true, animateFlag);\n      }\n    },\n    removeEditBtn: function removeEditBtn(setting, node) {\n      $$(node, consts.id.EDIT, setting).unbind().remove();\n    },\n    removeRemoveBtn: function removeRemoveBtn(setting, node) {\n      $$(node, consts.id.REMOVE, setting).unbind().remove();\n    },\n    removeTreeDom: function removeTreeDom(setting, node) {\n      node.isHover = false;\n      view.removeEditBtn(setting, node);\n      view.removeRemoveBtn(setting, node);\n      tools.apply(setting.view.removeHoverDom, [setting.treeId, node]);\n    },\n    repairNodeLevelClass: function repairNodeLevelClass(setting, node, oldLevel) {\n      if (oldLevel === node.level) return;\n      var liObj = $$(node, setting),\n          aObj = $$(node, consts.id.A, setting),\n          ulObj = $$(node, consts.id.UL, setting),\n          oldClass = consts.className.LEVEL + oldLevel,\n          newClass = consts.className.LEVEL + node.level;\n      liObj.removeClass(oldClass);\n      liObj.addClass(newClass);\n      aObj.removeClass(oldClass);\n      aObj.addClass(newClass);\n      ulObj.removeClass(oldClass);\n      ulObj.addClass(newClass);\n    },\n    selectNodes: function selectNodes(setting, nodes) {\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        view.selectNode(setting, nodes[i], i > 0);\n      }\n    }\n  },\n      _z = {\n    tools: _tools,\n    view: _view,\n    event: _event,\n    data: _data\n  };\n\n  $.extend(true, $.fn.zTree.consts, _consts);\n  $.extend(true, $.fn.zTree._z, _z);\n  var zt = $.fn.zTree,\n      tools = zt._z.tools,\n      consts = zt.consts,\n      view = zt._z.view,\n      data = zt._z.data,\n      event = zt._z.event,\n      $$ = tools.$;\n  data.exSetting(_setting);\n  data.addInitBind(_bindEvent);\n  data.addInitUnBind(_unbindEvent);\n  data.addInitCache(_initCache);\n  data.addInitNode(_initNode);\n  data.addInitProxy(_eventProxy);\n  data.addInitRoot(_initRoot);\n  data.addZTreeTools(_zTreeTools);\n  var _cancelPreSelectedNode = view.cancelPreSelectedNode;\n\n  view.cancelPreSelectedNode = function (setting, node) {\n    var list = data.getRoot(setting).curSelectedList;\n\n    for (var i = 0, j = list.length; i < j; i++) {\n      if (!node || node === list[i]) {\n        view.removeTreeDom(setting, list[i]);\n        if (node) break;\n      }\n    }\n\n    if (_cancelPreSelectedNode) _cancelPreSelectedNode.apply(view, arguments);\n  };\n\n  var _createNodes = view.createNodes;\n\n  view.createNodes = function (setting, level, nodes, parentNode, index) {\n    if (_createNodes) {\n      _createNodes.apply(view, arguments);\n    }\n\n    if (!nodes) return;\n\n    if (view.repairParentChkClassWithSelf) {\n      view.repairParentChkClassWithSelf(setting, parentNode);\n    }\n  };\n\n  var _makeNodeUrl = view.makeNodeUrl;\n\n  view.makeNodeUrl = function (setting, node) {\n    return setting.edit && setting.edit.enable ? null : _makeNodeUrl.apply(view, arguments);\n  };\n\n  var _removeNode = view.removeNode;\n\n  view.removeNode = function (setting, node) {\n    var root = data.getRoot(setting);\n    if (root.curEditNode === node) root.curEditNode = null;\n\n    if (_removeNode) {\n      _removeNode.apply(view, arguments);\n    }\n  };\n\n  var _selectNode = view.selectNode;\n\n  view.selectNode = function (setting, node, addFlag) {\n    var root = data.getRoot(setting);\n\n    if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {\n      return false;\n    }\n\n    if (_selectNode) _selectNode.apply(view, arguments);\n    view.addHoverDom(setting, node);\n    return true;\n  };\n\n  var _uCanDo = tools.uCanDo;\n\n  tools.uCanDo = function (setting, e) {\n    var root = data.getRoot(setting);\n\n    if (e && (tools.eqs(e.type, \"mouseover\") || tools.eqs(e.type, \"mouseout\") || tools.eqs(e.type, \"mousedown\") || tools.eqs(e.type, \"mouseup\"))) {\n      return true;\n    }\n\n    if (root.curEditNode) {\n      view.editNodeBlur = false;\n      root.curEditInput.focus();\n    }\n\n    return !root.curEditNode && (_uCanDo ? _uCanDo.apply(view, arguments) : true);\n  };\n})(jQuery);",{"version":3,"sources":["D:\\cdRule\\src\\components\\Tree\\jquery.ztree.exedit.js"],"names":["_consts","event","DRAG","DROP","RENAME","DRAGMOVE","id","EDIT","INPUT","REMOVE","move","TYPE_INNER","TYPE_PREV","TYPE_NEXT","node","CURSELECTED_EDIT","TMPTARGET_TREE","TMPTARGET_NODE","_setting","edit","enable","editNameSelectAll","showRemoveBtn","showRenameBtn","removeTitle","renameTitle","drag","autoExpandTrigger","isCopy","isMove","prev","next","inner","minMoveSize","borderMax","borderMin","maxShowNodeNum","autoOpenTime","view","addHoverDom","removeHoverDom","callback","beforeDrag","beforeDragOpen","beforeDrop","beforeEditName","beforeRename","onDrag","onDragMove","onDrop","onRename","_initRoot","r","data","rs","_initCache","_bindEvent","o","setting","c","consts","tools","_unbindEvent","_eventProxy","target","e","relatedTarget","tId","nodeEventType","treeEventType","nodeEventCallback","treeEventCallback","tmp","tagName","attrName","A","_handler","proxyResult","stop","_initNode","n","_zTreeTools","zTreeTools","root","newName","isParent","targetNode","moveType","_this","newNode","copyCallback","$$","moveCallback","_data","setSonNodeLevel","children","parentNode","i","l","_event","onHoverOverNode","onHoverOutNode","onMousedownNode","eventMouseDown","roots","_nodes","nodes","doc","$","body","isOtherTree","targetSetting","sourceSetting","preTmpTargetNodeId","preTmpMoveType","tmpTargetNodeId","mouseDownX","mouseDownY","startTime","Math","_docMouseUp","tmpNode","isOrder","lastIndex","pNodes","tmpNodes","preNode","nextNode","curNode","tmpDom","tmpArrow","tmpTarget","xT","settings","docScrollTop","docScrollLeft","treeOffset","scrollHeight","scrollWidth","dTop","dBottom","dLeft","dRight","isTop","isBottom","isLeft","isRight","isTreeInner","isTreeTop","isTreeBottom","isTreeLeft","isTreeRight","targetObj","canMove","dX","dY","tmpTargetNode","isPrev","isNext","isInner","canPrev","canNext","canInner","clearMove","window","clearTimeout","tmpTargetA","tmpNextA","tmpTop","tmpLeft","prevPercent","nextPercent","dY_percent","startTimer","setTimeout","dragTargetNode","newNodes","dropCallback","a","_tools","getAbs","oRect","obj","scrollTop","document","scrollLeft","inputFocus","inputObj","inputSelect","setCursorPosition","range","showIfameMask","iframeList","dragMask","_view","addEditBtn","aObj","editStr","addRemoveBtn","removeStr","cancelCurEditNode","forceName","isCancel","editNode","moveNode","oldParentNode","targetNodeIsRoot","targetParentNode","target_ulObj","ulstr","nodeDom","tmpSrcIndex","tmpTargetIndex","oldNeighbor","newNeighbor","oldLevel","oldChildren","targetParentChildren","targetChildren","tmp_ulObj","tmp_switchObj","tmp_icoObj","removeEditBtn","removeRemoveBtn","removeTreeDom","repairNodeLevelClass","liObj","ulObj","oldClass","newClass","selectNodes","_z","zt","_cancelPreSelectedNode","list","j","_createNodes","_makeNodeUrl","_removeNode","_selectNode","_uCanDo"],"mappings":"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","sourcesContent":["/*\r\n * JQuery zTree exedit\r\n * v3.5.43\r\n * http://treejs.cn/\r\n *\r\n * Copyright (c) 2010 Hunter.z\r\n *\r\n * Licensed same as jquery - MIT License\r\n * http://www.opensource.org/licenses/mit-license.php\r\n *\r\n * Date: 2020-04-04\r\n */\r\n\r\n(function ($) {\r\n  //default consts of exedit\r\n  var _consts = {\r\n      event: {\r\n        DRAG: \"ztree_drag\",\r\n        DROP: \"ztree_drop\",\r\n        RENAME: \"ztree_rename\",\r\n        DRAGMOVE: \"ztree_dragmove\"\r\n      },\r\n      id: {\r\n        EDIT: \"_edit\",\r\n        INPUT: \"_input\",\r\n        REMOVE: \"_remove\"\r\n      },\r\n      move: {\r\n        TYPE_INNER: \"inner\",\r\n        TYPE_PREV: \"prev\",\r\n        TYPE_NEXT: \"next\"\r\n      },\r\n      node: {\r\n        CURSELECTED_EDIT: \"curSelectedNode_Edit\",\r\n        TMPTARGET_TREE: \"tmpTargetzTree\",\r\n        TMPTARGET_NODE: \"tmpTargetNode\"\r\n      }\r\n    },\r\n    //default setting of exedit\r\n    _setting = {\r\n      edit: {\r\n        enable: false,\r\n        editNameSelectAll: false,\r\n        showRemoveBtn: true,\r\n        showRenameBtn: true,\r\n        removeTitle: \"remove\",\r\n        renameTitle: \"rename\",\r\n        drag: {\r\n          autoExpandTrigger: false,\r\n          isCopy: true,\r\n          isMove: true,\r\n          prev: true,\r\n          next: true,\r\n          inner: true,\r\n          minMoveSize: 5,\r\n          borderMax: 10,\r\n          borderMin: -5,\r\n          maxShowNodeNum: 5,\r\n          autoOpenTime: 500\r\n        }\r\n      },\r\n      view: {\r\n        addHoverDom: null,\r\n        removeHoverDom: null\r\n      },\r\n      callback: {\r\n        beforeDrag: null,\r\n        beforeDragOpen: null,\r\n        beforeDrop: null,\r\n        beforeEditName: null,\r\n        beforeRename: null,\r\n        onDrag: null,\r\n        onDragMove: null,\r\n        onDrop: null,\r\n        onRename: null\r\n      }\r\n    },\r\n    //default root of exedit\r\n    _initRoot = function (setting) {\r\n      var r = data.getRoot(setting), rs = data.getRoots();\r\n      r.curEditNode = null;\r\n      r.curEditInput = null;\r\n      r.curHoverNode = null;\r\n      r.dragFlag = 0;\r\n      r.dragNodeShowBefore = [];\r\n      r.dragMaskList = new Array();\r\n      rs.showHoverDom = true;\r\n    },\r\n    //default cache of exedit\r\n    _initCache = function (treeId) {\r\n    },\r\n    //default bind event of exedit\r\n    _bindEvent = function (setting) {\r\n      var o = setting.treeObj;\r\n      var c = consts.event;\r\n      o.bind(c.RENAME, function (event, treeId, treeNode, isCancel) {\r\n        tools.apply(setting.callback.onRename, [event, treeId, treeNode, isCancel]);\r\n      });\r\n\r\n      o.bind(c.DRAG, function (event, srcEvent, treeId, treeNodes) {\r\n        tools.apply(setting.callback.onDrag, [srcEvent, treeId, treeNodes]);\r\n      });\r\n\r\n      o.bind(c.DRAGMOVE, function (event, srcEvent, treeId, treeNodes) {\r\n        tools.apply(setting.callback.onDragMove, [srcEvent, treeId, treeNodes]);\r\n      });\r\n\r\n      o.bind(c.DROP, function (event, srcEvent, treeId, treeNodes, targetNode, moveType, isCopy) {\r\n        tools.apply(setting.callback.onDrop, [srcEvent, treeId, treeNodes, targetNode, moveType, isCopy]);\r\n      });\r\n    },\r\n    _unbindEvent = function (setting) {\r\n      var o = setting.treeObj;\r\n      var c = consts.event;\r\n      o.unbind(c.RENAME);\r\n      o.unbind(c.DRAG);\r\n      o.unbind(c.DRAGMOVE);\r\n      o.unbind(c.DROP);\r\n    },\r\n    //default event proxy of exedit\r\n    _eventProxy = function (e) {\r\n      var target = e.target,\r\n        setting = data.getSetting(e.data.treeId),\r\n        relatedTarget = e.relatedTarget,\r\n        tId = \"\", node = null,\r\n        nodeEventType = \"\", treeEventType = \"\",\r\n        nodeEventCallback = null, treeEventCallback = null,\r\n        tmp = null;\r\n\r\n      if (tools.eqs(e.type, \"mouseover\")) {\r\n        tmp = tools.getMDom(setting, target, [{tagName: \"a\", attrName: \"treeNode\" + consts.id.A}]);\r\n        if (tmp) {\r\n          tId = tools.getNodeMainDom(tmp).id;\r\n          nodeEventType = \"hoverOverNode\";\r\n        }\r\n      } else if (tools.eqs(e.type, \"mouseout\")) {\r\n        tmp = tools.getMDom(setting, relatedTarget, [{tagName: \"a\", attrName: \"treeNode\" + consts.id.A}]);\r\n        if (!tmp) {\r\n          tId = \"remove\";\r\n          nodeEventType = \"hoverOutNode\";\r\n        }\r\n      } else if (tools.eqs(e.type, \"mousedown\")) {\r\n        tmp = tools.getMDom(setting, target, [{tagName: \"a\", attrName: \"treeNode\" + consts.id.A}]);\r\n        if (tmp) {\r\n          tId = tools.getNodeMainDom(tmp).id;\r\n          nodeEventType = \"mousedownNode\";\r\n        }\r\n      }\r\n      if (tId.length > 0) {\r\n        node = data.getNodeCache(setting, tId);\r\n        switch (nodeEventType) {\r\n          case \"mousedownNode\" :\r\n            nodeEventCallback = _handler.onMousedownNode;\r\n            break;\r\n          case \"hoverOverNode\" :\r\n            nodeEventCallback = _handler.onHoverOverNode;\r\n            break;\r\n          case \"hoverOutNode\" :\r\n            nodeEventCallback = _handler.onHoverOutNode;\r\n            break;\r\n        }\r\n      }\r\n      var proxyResult = {\r\n        stop: false,\r\n        node: node,\r\n        nodeEventType: nodeEventType,\r\n        nodeEventCallback: nodeEventCallback,\r\n        treeEventType: treeEventType,\r\n        treeEventCallback: treeEventCallback\r\n      };\r\n      return proxyResult\r\n    },\r\n    //default init node of exedit\r\n    _initNode = function (setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {\r\n      if (!n) return;\r\n      n.isHover = false;\r\n      n.editNameFlag = false;\r\n    },\r\n    //update zTreeObj, add method of edit\r\n    _zTreeTools = function (setting, zTreeTools) {\r\n      zTreeTools.cancelEditName = function (newName) {\r\n        var root = data.getRoot(this.setting);\r\n        if (!root.curEditNode) return;\r\n        view.cancelCurEditNode(this.setting, newName ? newName : null, true);\r\n      }\r\n      zTreeTools.copyNode = function (targetNode, node, moveType, isSilent) {\r\n        if (!node) return null;\r\n        var isParent = data.nodeIsParent(setting, targetNode);\r\n        if (targetNode && !isParent && this.setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) return null;\r\n        var _this = this,\r\n          newNode = tools.clone(node);\r\n        if (!targetNode) {\r\n          targetNode = null;\r\n          moveType = consts.move.TYPE_INNER;\r\n        }\r\n        if (moveType == consts.move.TYPE_INNER) {\r\n          function copyCallback() {\r\n            view.addNodes(_this.setting, targetNode, -1, [newNode], isSilent);\r\n          }\r\n\r\n          if (tools.canAsync(this.setting, targetNode)) {\r\n            view.asyncNode(this.setting, targetNode, isSilent, copyCallback);\r\n          } else {\r\n            copyCallback();\r\n          }\r\n        } else {\r\n          view.addNodes(this.setting, targetNode.parentNode, -1, [newNode], isSilent);\r\n          view.moveNode(this.setting, targetNode, newNode, moveType, false, isSilent);\r\n        }\r\n        return newNode;\r\n      }\r\n      zTreeTools.editName = function (node) {\r\n        if (!node || !node.tId || node !== data.getNodeCache(this.setting, node.tId)) return;\r\n        if (node.parentTId) view.expandCollapseParentNode(this.setting, node.getParentNode(), true);\r\n        view.editNode(this.setting, node)\r\n      }\r\n      zTreeTools.moveNode = function (targetNode, node, moveType, isSilent) {\r\n        if (!node) return node;\r\n        var isParent = data.nodeIsParent(setting, targetNode);\r\n        if (targetNode && !isParent && this.setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) {\r\n          return null;\r\n        } else if (targetNode && ((node.parentTId == targetNode.tId && moveType == consts.move.TYPE_INNER) || $$(node, this.setting).find(\"#\" + targetNode.tId).length > 0)) {\r\n          return null;\r\n        } else if (!targetNode) {\r\n          targetNode = null;\r\n        }\r\n        var _this = this;\r\n\r\n        function moveCallback() {\r\n          view.moveNode(_this.setting, targetNode, node, moveType, false, isSilent);\r\n        }\r\n\r\n        if (tools.canAsync(this.setting, targetNode) && moveType === consts.move.TYPE_INNER) {\r\n          view.asyncNode(this.setting, targetNode, isSilent, moveCallback);\r\n        } else {\r\n          moveCallback();\r\n        }\r\n        return node;\r\n      }\r\n      zTreeTools.setEditable = function (editable) {\r\n        this.setting.edit.enable = editable;\r\n        return this.refresh();\r\n      }\r\n    },\r\n    //method of operate data\r\n    _data = {\r\n      setSonNodeLevel: function (setting, parentNode, node) {\r\n        if (!node) return;\r\n        var children = data.nodeChildren(setting, node);\r\n        node.level = (parentNode) ? parentNode.level + 1 : 0;\r\n        if (!children) return;\r\n        for (var i = 0, l = children.length; i < l; i++) {\r\n          if (children[i]) data.setSonNodeLevel(setting, node, children[i]);\r\n        }\r\n      }\r\n    },\r\n    //method of event proxy\r\n    _event = {},\r\n    //method of event handler\r\n    _handler = {\r\n      onHoverOverNode: function (event, node) {\r\n        var setting = data.getSetting(event.data.treeId),\r\n          root = data.getRoot(setting);\r\n        if (root.curHoverNode != node) {\r\n          _handler.onHoverOutNode(event);\r\n        }\r\n        root.curHoverNode = node;\r\n        view.addHoverDom(setting, node);\r\n      },\r\n      onHoverOutNode: function (event, node) {\r\n        var setting = data.getSetting(event.data.treeId),\r\n          root = data.getRoot(setting);\r\n        if (root.curHoverNode && !data.isSelectedNode(setting, root.curHoverNode)) {\r\n          view.removeTreeDom(setting, root.curHoverNode);\r\n          root.curHoverNode = null;\r\n        }\r\n      },\r\n      onMousedownNode: function (eventMouseDown, _node) {\r\n        var i, l,\r\n          setting = data.getSetting(eventMouseDown.data.treeId),\r\n          root = data.getRoot(setting), roots = data.getRoots();\r\n        //right click can't drag & drop\r\n        if (eventMouseDown.button == 2 || !(setting.edit&&setting.edit.enable) || (!(setting.edit&&setting.edit.drag.isCopy) && !(setting.edit&&setting.edit.drag.isMove))) return true;\r\n\r\n        //input of edit node name can't drag & drop\r\n        var target = eventMouseDown.target,\r\n          _nodes = data.getRoot(setting).curSelectedList,\r\n          nodes = [];\r\n        if (!data.isSelectedNode(setting, _node)) {\r\n          nodes = [_node];\r\n        } else {\r\n          for (i = 0, l = _nodes.length; i < l; i++) {\r\n            if (_nodes[i].editNameFlag && tools.eqs(target.tagName, \"input\") && target.getAttribute(\"treeNode\" + consts.id.INPUT) !== null) {\r\n              return true;\r\n            }\r\n            nodes.push(_nodes[i]);\r\n            if (nodes[0].parentTId !== _nodes[i].parentTId) {\r\n              nodes = [_node];\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        view.editNodeBlur = true;\r\n        view.cancelCurEditNode(setting);\r\n\r\n        var doc = $(setting.treeObj.get(0).ownerDocument),\r\n          body = $(setting.treeObj.get(0).ownerDocument.body), curNode, tmpArrow, tmpTarget,\r\n          isOtherTree = false,\r\n          targetSetting = setting,\r\n          sourceSetting = setting,\r\n          preNode, nextNode,\r\n          preTmpTargetNodeId = null,\r\n          preTmpMoveType = null,\r\n          tmpTargetNodeId = null,\r\n          moveType = consts.move.TYPE_INNER,\r\n          mouseDownX = eventMouseDown.clientX,\r\n          mouseDownY = eventMouseDown.clientY,\r\n          startTime = (new Date()).getTime();\r\n\r\n        if (tools.uCanDo(setting)) {\r\n          doc.bind(\"mousemove\", _docMouseMove);\r\n        }\r\n\r\n        function _docMouseMove(event) {\r\n          //avoid start drag after click node\r\n          if (root.dragFlag == 0 && Math.abs(mouseDownX - event.clientX) < setting.edit.drag.minMoveSize\r\n            && Math.abs(mouseDownY - event.clientY) < setting.edit.drag.minMoveSize) {\r\n            return true;\r\n          }\r\n          var i, l, tmpNode, tmpDom, tmpNodes;\r\n          body.css(\"cursor\", \"pointer\");\r\n\r\n          if (root.dragFlag == 0) {\r\n            if (tools.apply(setting.callback.beforeDrag, [setting.treeId, nodes], true) == false) {\r\n              _docMouseUp(event);\r\n              return true;\r\n            }\r\n\r\n            for (i = 0, l = nodes.length; i < l; i++) {\r\n              if (i == 0) {\r\n                root.dragNodeShowBefore = [];\r\n              }\r\n              tmpNode = nodes[i];\r\n              if (data.nodeIsParent(setting, tmpNode) && tmpNode.open) {\r\n                view.expandCollapseNode(setting, tmpNode, !tmpNode.open);\r\n                root.dragNodeShowBefore[tmpNode.tId] = true;\r\n              } else {\r\n                root.dragNodeShowBefore[tmpNode.tId] = false;\r\n              }\r\n            }\r\n\r\n            root.dragFlag = 1;\r\n            roots.showHoverDom = false;\r\n            tools.showIfameMask(setting, true);\r\n\r\n            //sort\r\n            var isOrder = true, lastIndex = -1;\r\n            if (nodes.length > 1) {\r\n              var pNodes = nodes[0].parentTId ? data.nodeChildren(setting, nodes[0].getParentNode()) : data.getNodes(setting);\r\n              tmpNodes = [];\r\n              for (i = 0, l = pNodes.length; i < l; i++) {\r\n                if (root.dragNodeShowBefore[pNodes[i].tId] !== undefined) {\r\n                  if (isOrder && lastIndex > -1 && (lastIndex + 1) !== i) {\r\n                    isOrder = false;\r\n                  }\r\n                  tmpNodes.push(pNodes[i]);\r\n                  lastIndex = i;\r\n                }\r\n                if (nodes.length === tmpNodes.length) {\r\n                  nodes = tmpNodes;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            if (isOrder) {\r\n              preNode = nodes[0].getPreNode();\r\n              nextNode = nodes[nodes.length - 1].getNextNode();\r\n            }\r\n\r\n            //set node in selected\r\n            curNode = $$(\"<ul class='zTreeDragUL'></ul>\", setting);\r\n            for (i = 0, l = nodes.length; i < l; i++) {\r\n              tmpNode = nodes[i];\r\n              tmpNode.editNameFlag = false;\r\n              view.selectNode(setting, tmpNode, i > 0);\r\n              view.removeTreeDom(setting, tmpNode);\r\n\r\n              if (i > setting.edit.drag.maxShowNodeNum - 1) {\r\n                continue;\r\n              }\r\n\r\n              tmpDom = $$(\"<li id='\" + tmpNode.tId + \"_tmp'></li>\", setting);\r\n              tmpDom.append($$(tmpNode, consts.id.A, setting).clone());\r\n              tmpDom.css(\"padding\", \"0\");\r\n              tmpDom.children(\"#\" + tmpNode.tId + consts.id.A).removeClass(consts.node.CURSELECTED);\r\n              curNode.append(tmpDom);\r\n              if (i == setting.edit.drag.maxShowNodeNum - 1) {\r\n                tmpDom = $$(\"<li id='\" + tmpNode.tId + \"_moretmp'><a>  ...  </a></li>\", setting);\r\n                curNode.append(tmpDom);\r\n              }\r\n            }\r\n            curNode.attr(\"id\", nodes[0].tId + consts.id.UL + \"_tmp\");\r\n            curNode.addClass(setting.treeObj.attr(\"class\"));\r\n            curNode.appendTo(body);\r\n\r\n            tmpArrow = $$(\"<span class='tmpzTreeMove_arrow'></span>\", setting);\r\n            tmpArrow.attr(\"id\", \"zTreeMove_arrow_tmp\");\r\n            tmpArrow.appendTo(body);\r\n\r\n            setting.treeObj.trigger(consts.event.DRAG, [event, setting.treeId, nodes]);\r\n          }\r\n\r\n          if (root.dragFlag == 1) {\r\n            if (tmpTarget && tmpArrow.attr(\"id\") == event.target.id && tmpTargetNodeId && (event.clientX + doc.scrollLeft() + 2) > ($(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget).offset().left)) {\r\n              var xT = $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget);\r\n              event.target = (xT.length > 0) ? xT.get(0) : event.target;\r\n            } else if (tmpTarget) {\r\n              tmpTarget.removeClass(consts.node.TMPTARGET_TREE);\r\n              if (tmpTargetNodeId) $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + \"_\" + consts.move.TYPE_PREV)\r\n                .removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_INNER);\r\n            }\r\n            tmpTarget = null;\r\n            tmpTargetNodeId = null;\r\n\r\n            //judge drag & drop in multi ztree\r\n            isOtherTree = false;\r\n            targetSetting = setting;\r\n            var settings = data.getSettings();\r\n            for (var s in settings) {\r\n              if (settings[s].treeId && settings[s].edit.enable && settings[s].treeId != setting.treeId\r\n                && (event.target.id == settings[s].treeId || $(event.target).parents(\"#\" + settings[s].treeId).length > 0)) {\r\n                isOtherTree = true;\r\n                targetSetting = settings[s];\r\n              }\r\n            }\r\n\r\n            var docScrollTop = doc.scrollTop(),\r\n              docScrollLeft = doc.scrollLeft(),\r\n              treeOffset = targetSetting.treeObj.offset(),\r\n              scrollHeight = targetSetting.treeObj.get(0).scrollHeight,\r\n              scrollWidth = targetSetting.treeObj.get(0).scrollWidth,\r\n              dTop = (event.clientY + docScrollTop - treeOffset.top),\r\n              dBottom = (targetSetting.treeObj.height() + treeOffset.top - event.clientY - docScrollTop),\r\n              dLeft = (event.clientX + docScrollLeft - treeOffset.left),\r\n              dRight = (targetSetting.treeObj.width() + treeOffset.left - event.clientX - docScrollLeft),\r\n              isTop = (dTop < setting.edit.drag.borderMax && dTop > setting.edit.drag.borderMin),\r\n              isBottom = (dBottom < setting.edit.drag.borderMax && dBottom > setting.edit.drag.borderMin),\r\n              isLeft = (dLeft < setting.edit.drag.borderMax && dLeft > setting.edit.drag.borderMin),\r\n              isRight = (dRight < setting.edit.drag.borderMax && dRight > setting.edit.drag.borderMin),\r\n              isTreeInner = dTop > setting.edit.drag.borderMin && dBottom > setting.edit.drag.borderMin && dLeft > setting.edit.drag.borderMin && dRight > setting.edit.drag.borderMin,\r\n              isTreeTop = (isTop && targetSetting.treeObj.scrollTop() <= 0),\r\n              isTreeBottom = (isBottom && (targetSetting.treeObj.scrollTop() + targetSetting.treeObj.height() + 10) >= scrollHeight),\r\n              isTreeLeft = (isLeft && targetSetting.treeObj.scrollLeft() <= 0),\r\n              isTreeRight = (isRight && (targetSetting.treeObj.scrollLeft() + targetSetting.treeObj.width() + 10) >= scrollWidth);\r\n\r\n            if (event.target && tools.isChildOrSelf(event.target, targetSetting.treeId)) {\r\n              //get node <li> dom\r\n              var targetObj = event.target;\r\n              while (targetObj && targetObj.tagName && !tools.eqs(targetObj.tagName, \"li\") && targetObj.id != targetSetting.treeId) {\r\n                targetObj = targetObj.parentNode;\r\n              }\r\n\r\n              var canMove = true;\r\n              //don't move to self or children of self\r\n              for (i = 0, l = nodes.length; i < l; i++) {\r\n                tmpNode = nodes[i];\r\n                if (targetObj.id === tmpNode.tId) {\r\n                  canMove = false;\r\n                  break;\r\n                } else if ($$(tmpNode, setting).find(\"#\" + targetObj.id).length > 0) {\r\n                  canMove = false;\r\n                  break;\r\n                }\r\n              }\r\n              if (canMove && event.target && tools.isChildOrSelf(event.target, targetObj.id + consts.id.A)) {\r\n                tmpTarget = $(targetObj);\r\n                tmpTargetNodeId = targetObj.id;\r\n              }\r\n            }\r\n\r\n            //the mouse must be in zTree\r\n            tmpNode = nodes[0];\r\n            if (isTreeInner && tools.isChildOrSelf(event.target, targetSetting.treeId)) {\r\n              //judge mouse move in root of ztree\r\n              if (!tmpTarget && (event.target.id == targetSetting.treeId || isTreeTop || isTreeBottom || isTreeLeft || isTreeRight) && (isOtherTree || (!isOtherTree && tmpNode.parentTId))) {\r\n                tmpTarget = targetSetting.treeObj;\r\n              }\r\n              //auto scroll top\r\n              if (isTop) {\r\n                targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop() - 10);\r\n              } else if (isBottom) {\r\n                targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop() + 10);\r\n              }\r\n              if (isLeft) {\r\n                targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() - 10);\r\n              } else if (isRight) {\r\n                targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() + 10);\r\n              }\r\n              //auto scroll left\r\n              if (tmpTarget && tmpTarget != targetSetting.treeObj && tmpTarget.offset().left < targetSetting.treeObj.offset().left) {\r\n                targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() + tmpTarget.offset().left - targetSetting.treeObj.offset().left);\r\n              }\r\n            }\r\n\r\n            curNode.css({\r\n              \"top\": (event.clientY + docScrollTop + 3) + \"px\",\r\n              \"left\": (event.clientX + docScrollLeft + 3) + \"px\"\r\n            });\r\n\r\n            var dX = 0;\r\n            var dY = 0;\r\n            if (tmpTarget && tmpTarget.attr(\"id\") != targetSetting.treeId) {\r\n              var tmpTargetNode = tmpTargetNodeId == null ? null : data.getNodeCache(targetSetting, tmpTargetNodeId),\r\n                isCopy = ((event.ctrlKey || event.metaKey) && setting.edit.drag.isMove && setting.edit.drag.isCopy) || (!setting.edit.drag.isMove && setting.edit.drag.isCopy),\r\n                isPrev = !!(preNode && tmpTargetNodeId === preNode.tId),\r\n                isNext = !!(nextNode && tmpTargetNodeId === nextNode.tId),\r\n                isInner = (tmpNode.parentTId && tmpNode.parentTId == tmpTargetNodeId),\r\n                canPrev = (isCopy || !isNext) && tools.apply(targetSetting.edit.drag.prev, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.prev),\r\n                canNext = (isCopy || !isPrev) && tools.apply(targetSetting.edit.drag.next, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.next),\r\n                canInner = (isCopy || !isInner) && !(targetSetting.data.keep.leaf && !data.nodeIsParent(setting, tmpTargetNode)) && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.inner);\r\n\r\n              function clearMove() {\r\n                tmpTarget = null;\r\n                tmpTargetNodeId = \"\";\r\n                moveType = consts.move.TYPE_INNER;\r\n                tmpArrow.css({\r\n                  \"display\": \"none\"\r\n                });\r\n                if (window.zTreeMoveTimer) {\r\n                  clearTimeout(window.zTreeMoveTimer);\r\n                  window.zTreeMoveTargetNodeTId = null\r\n                }\r\n              }\r\n\r\n              if (!canPrev && !canNext && !canInner) {\r\n                clearMove();\r\n              } else {\r\n                var tmpTargetA = $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget),\r\n                  tmpNextA = tmpTargetNode.isLastNode ? null : $(\"#\" + tmpTargetNode.getNextNode().tId + consts.id.A, tmpTarget.next()),\r\n                  tmpTop = tmpTargetA.offset().top,\r\n                  tmpLeft = tmpTargetA.offset().left,\r\n                  prevPercent = canPrev ? (canInner ? 0.25 : (canNext ? 0.5 : 1)) : -1,\r\n                  nextPercent = canNext ? (canInner ? 0.75 : (canPrev ? 0.5 : 0)) : -1,\r\n                  dY_percent = (event.clientY + docScrollTop - tmpTop) / tmpTargetA.height();\r\n\r\n                if ((prevPercent == 1 || dY_percent <= prevPercent && dY_percent >= -.2) && canPrev) {\r\n                  dX = 1 - tmpArrow.width();\r\n                  dY = tmpTop - tmpArrow.height() / 2;\r\n                  moveType = consts.move.TYPE_PREV;\r\n                } else if ((nextPercent == 0 || dY_percent >= nextPercent && dY_percent <= 1.2) && canNext) {\r\n                  dX = 1 - tmpArrow.width();\r\n                  dY = (tmpNextA == null || (data.nodeIsParent(setting, tmpTargetNode) && tmpTargetNode.open)) ? (tmpTop + tmpTargetA.height() - tmpArrow.height() / 2) : (tmpNextA.offset().top - tmpArrow.height() / 2);\r\n                  moveType = consts.move.TYPE_NEXT;\r\n                } else if (canInner) {\r\n                  dX = 5 - tmpArrow.width();\r\n                  dY = tmpTop;\r\n                  moveType = consts.move.TYPE_INNER;\r\n                } else {\r\n                  clearMove();\r\n                }\r\n\r\n                if (tmpTarget) {\r\n                  tmpArrow.css({\r\n                    \"display\": \"block\",\r\n                    \"top\": dY + \"px\",\r\n                    \"left\": (tmpLeft + dX) + \"px\"\r\n                  });\r\n                  tmpTargetA.addClass(consts.node.TMPTARGET_NODE + \"_\" + moveType);\r\n\r\n                  if (preTmpTargetNodeId != tmpTargetNodeId || preTmpMoveType != moveType) {\r\n                    startTime = (new Date()).getTime();\r\n                  }\r\n                  if (tmpTargetNode && data.nodeIsParent(setting, tmpTargetNode) && moveType == consts.move.TYPE_INNER) {\r\n                    var startTimer = true;\r\n                    if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId !== tmpTargetNode.tId) {\r\n                      clearTimeout(window.zTreeMoveTimer);\r\n                      window.zTreeMoveTargetNodeTId = null;\r\n                    } else if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId === tmpTargetNode.tId) {\r\n                      startTimer = false;\r\n                    }\r\n                    if (startTimer) {\r\n                      window.zTreeMoveTimer = setTimeout(function () {\r\n                        if (moveType != consts.move.TYPE_INNER) return;\r\n                        if (tmpTargetNode && data.nodeIsParent(setting, tmpTargetNode) && !tmpTargetNode.open && (new Date()).getTime() - startTime > targetSetting.edit.drag.autoOpenTime\r\n                          && tools.apply(targetSetting.callback.beforeDragOpen, [targetSetting.treeId, tmpTargetNode], true)) {\r\n                          view.switchNode(targetSetting, tmpTargetNode);\r\n                          if (targetSetting.edit.drag.autoExpandTrigger) {\r\n                            targetSetting.treeObj.trigger(consts.event.EXPAND, [targetSetting.treeId, tmpTargetNode]);\r\n                          }\r\n                        }\r\n                      }, targetSetting.edit.drag.autoOpenTime + 50);\r\n                      window.zTreeMoveTargetNodeTId = tmpTargetNode.tId;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              moveType = consts.move.TYPE_INNER;\r\n              if (tmpTarget && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, null], !!targetSetting.edit.drag.inner)) {\r\n                tmpTarget.addClass(consts.node.TMPTARGET_TREE);\r\n              } else {\r\n                tmpTarget = null;\r\n              }\r\n              tmpArrow.css({\r\n                \"display\": \"none\"\r\n              });\r\n              if (window.zTreeMoveTimer) {\r\n                clearTimeout(window.zTreeMoveTimer);\r\n                window.zTreeMoveTargetNodeTId = null;\r\n              }\r\n            }\r\n            preTmpTargetNodeId = tmpTargetNodeId;\r\n            preTmpMoveType = moveType;\r\n\r\n            setting.treeObj.trigger(consts.event.DRAGMOVE, [event, setting.treeId, nodes]);\r\n          }\r\n          return false;\r\n        }\r\n\r\n        doc.bind(\"mouseup\", _docMouseUp);\r\n\r\n        function _docMouseUp(event) {\r\n          if (window.zTreeMoveTimer) {\r\n            clearTimeout(window.zTreeMoveTimer);\r\n            window.zTreeMoveTargetNodeTId = null;\r\n          }\r\n          preTmpTargetNodeId = null;\r\n          preTmpMoveType = null;\r\n          doc.unbind(\"mousemove\", _docMouseMove);\r\n          doc.unbind(\"mouseup\", _docMouseUp);\r\n          doc.unbind(\"selectstart\", _docSelect);\r\n          body.css(\"cursor\", \"\");\r\n          if (tmpTarget) {\r\n            tmpTarget.removeClass(consts.node.TMPTARGET_TREE);\r\n            if (tmpTargetNodeId) $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + \"_\" + consts.move.TYPE_PREV)\r\n              .removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_INNER);\r\n          }\r\n          tools.showIfameMask(setting, false);\r\n\r\n          roots.showHoverDom = true;\r\n          if (root.dragFlag == 0) return;\r\n          root.dragFlag = 0;\r\n\r\n          var i, l, tmpNode;\r\n          for (i = 0, l = nodes.length; i < l; i++) {\r\n            tmpNode = nodes[i];\r\n            if (data.nodeIsParent(setting, tmpNode) && root.dragNodeShowBefore[tmpNode.tId] && !tmpNode.open) {\r\n              view.expandCollapseNode(setting, tmpNode, !tmpNode.open);\r\n              delete root.dragNodeShowBefore[tmpNode.tId];\r\n            }\r\n          }\r\n\r\n          if (curNode) curNode.remove();\r\n          if (tmpArrow) tmpArrow.remove();\r\n\r\n          var isCopy = ((event.ctrlKey || event.metaKey) && setting.edit.drag.isMove && setting.edit.drag.isCopy) || (!setting.edit.drag.isMove && setting.edit.drag.isCopy);\r\n          if (!isCopy && tmpTarget && tmpTargetNodeId && nodes[0].parentTId && tmpTargetNodeId == nodes[0].parentTId && moveType == consts.move.TYPE_INNER) {\r\n            tmpTarget = null;\r\n          }\r\n          if (tmpTarget) {\r\n            var dragTargetNode = tmpTargetNodeId == null ? null : data.getNodeCache(targetSetting, tmpTargetNodeId);\r\n            if (tools.apply(setting.callback.beforeDrop, [targetSetting.treeId, nodes, dragTargetNode, moveType, isCopy], true) == false) {\r\n              view.selectNodes(sourceSetting, nodes);\r\n              return;\r\n            }\r\n            var newNodes = isCopy ? tools.clone(nodes) : nodes;\r\n\r\n            function dropCallback() {\r\n              if (isOtherTree) {\r\n                if (!isCopy) {\r\n                  for (var i = 0, l = nodes.length; i < l; i++) {\r\n                    view.removeNode(setting, nodes[i]);\r\n                  }\r\n                }\r\n                if (moveType == consts.move.TYPE_INNER) {\r\n                  view.addNodes(targetSetting, dragTargetNode, -1, newNodes);\r\n                } else {\r\n                  view.addNodes(targetSetting, dragTargetNode.getParentNode(), moveType == consts.move.TYPE_PREV ? dragTargetNode.getIndex() : dragTargetNode.getIndex() + 1, newNodes);\r\n                }\r\n              } else {\r\n                if (isCopy && moveType == consts.move.TYPE_INNER) {\r\n                  view.addNodes(targetSetting, dragTargetNode, -1, newNodes);\r\n                } else if (isCopy) {\r\n                  view.addNodes(targetSetting, dragTargetNode.getParentNode(), moveType == consts.move.TYPE_PREV ? dragTargetNode.getIndex() : dragTargetNode.getIndex() + 1, newNodes);\r\n                } else {\r\n                  if (moveType != consts.move.TYPE_NEXT) {\r\n                    for (i = 0, l = newNodes.length; i < l; i++) {\r\n                      view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);\r\n                    }\r\n                  } else {\r\n                    for (i = -1, l = newNodes.length - 1; i < l; l--) {\r\n                      view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              view.selectNodes(targetSetting, newNodes);\r\n\r\n              var a = $$(newNodes[0], setting).get(0);\r\n              view.scrollIntoView(setting, a);\r\n\r\n              setting.treeObj.trigger(consts.event.DROP, [event, targetSetting.treeId, newNodes, dragTargetNode, moveType, isCopy]);\r\n            }\r\n\r\n            if (moveType == consts.move.TYPE_INNER && tools.canAsync(targetSetting, dragTargetNode)) {\r\n              view.asyncNode(targetSetting, dragTargetNode, false, dropCallback);\r\n            } else {\r\n              dropCallback();\r\n            }\r\n\r\n          } else {\r\n            view.selectNodes(sourceSetting, nodes);\r\n            setting.treeObj.trigger(consts.event.DROP, [event, setting.treeId, nodes, null, null, null]);\r\n          }\r\n        }\r\n\r\n        doc.bind(\"selectstart\", _docSelect);\r\n\r\n        function _docSelect() {\r\n          return false;\r\n        }\r\n\r\n        // 2018-03-30 FireFox has fixed this issue.\r\n        //Avoid FireFox's Bug\r\n        //If zTree Div CSS set 'overflow', so drag node outside of zTree, and event.target is error.\r\n        // if(eventMouseDown.preventDefault) {\r\n        //  eventMouseDown.preventDefault();\r\n        // }\r\n        return true;\r\n      }\r\n    },\r\n    //method of tools for zTree\r\n    _tools = {\r\n      getAbs: function (obj) {\r\n        var oRect = obj.getBoundingClientRect(),\r\n          scrollTop = document.body.scrollTop + document.documentElement.scrollTop,\r\n          scrollLeft = document.body.scrollLeft + document.documentElement.scrollLeft;\r\n        return [oRect.left + scrollLeft, oRect.top + scrollTop];\r\n      },\r\n      inputFocus: function (inputObj) {\r\n        if (inputObj.get(0)) {\r\n          inputObj.focus();\r\n          tools.setCursorPosition(inputObj.get(0), inputObj.val().length);\r\n        }\r\n      },\r\n      inputSelect: function (inputObj) {\r\n        if (inputObj.get(0)) {\r\n          inputObj.focus();\r\n          inputObj.select();\r\n        }\r\n      },\r\n      setCursorPosition: function (obj, pos) {\r\n        if (obj.setSelectionRange) {\r\n          obj.focus();\r\n          obj.setSelectionRange(pos, pos);\r\n        } else if (obj.createTextRange) {\r\n          var range = obj.createTextRange();\r\n          range.collapse(true);\r\n          range.moveEnd('character', pos);\r\n          range.moveStart('character', pos);\r\n          range.select();\r\n        }\r\n      },\r\n      showIfameMask: function (setting, showSign) {\r\n        var root = data.getRoot(setting);\r\n        //clear full mask\r\n        while (root.dragMaskList.length > 0) {\r\n          root.dragMaskList[0].remove();\r\n          root.dragMaskList.shift();\r\n        }\r\n        if (showSign) {\r\n          //show mask\r\n          var iframeList = $$(\"iframe\", setting);\r\n          for (var i = 0, l = iframeList.length; i < l; i++) {\r\n            var obj = iframeList.get(i),\r\n              r = tools.getAbs(obj),\r\n              dragMask = $$(\"<div id='zTreeMask_\" + i + \"' class='zTreeMask' style='top:\" + r[1] + \"px; left:\" + r[0] + \"px; width:\" + obj.offsetWidth + \"px; height:\" + obj.offsetHeight + \"px;'></div>\", setting);\r\n            dragMask.appendTo($$(\"body\", setting));\r\n            root.dragMaskList.push(dragMask);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    //method of operate ztree dom\r\n    _view = {\r\n      addEditBtn: function (setting, node) {\r\n        if (node.editNameFlag || $$(node, consts.id.EDIT, setting).length > 0) {\r\n          return;\r\n        }\r\n        if (!tools.apply(setting.edit.showRenameBtn, [setting.treeId, node], setting.edit.showRenameBtn)) {\r\n          return;\r\n        }\r\n        var aObj = $$(node, consts.id.A, setting),\r\n          editStr = \"<span class='\" + consts.className.BUTTON + \" edit' id='\" + node.tId + consts.id.EDIT + \"' title='\" + tools.apply(setting.edit.renameTitle, [setting.treeId, node], setting.edit.renameTitle) + \"' treeNode\" + consts.id.EDIT + \" style='display:none;'></span>\";\r\n        aObj.append(editStr);\r\n\r\n        $$(node, consts.id.EDIT, setting).bind('click',\r\n          function () {\r\n            if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeEditName, [setting.treeId, node], true) == false) return false;\r\n            view.editNode(setting, node);\r\n            return false;\r\n          }\r\n        ).show();\r\n      },\r\n      addRemoveBtn: function (setting, node) {\r\n        if (node.editNameFlag || $$(node, consts.id.REMOVE, setting).length > 0) {\r\n          return;\r\n        }\r\n        if (!tools.apply(setting.edit.showRemoveBtn, [setting.treeId, node], setting.edit.showRemoveBtn)) {\r\n          return;\r\n        }\r\n        var aObj = $$(node, consts.id.A, setting),\r\n          removeStr = \"<span class='\" + consts.className.BUTTON + \" remove' id='\" + node.tId + consts.id.REMOVE + \"' title='\" + tools.apply(setting.edit.removeTitle, [setting.treeId, node], setting.edit.removeTitle) + \"' treeNode\" + consts.id.REMOVE + \" style='display:none;'></span>\";\r\n        aObj.append(removeStr);\r\n\r\n        $$(node, consts.id.REMOVE, setting).bind('click',\r\n          function () {\r\n            if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return false;\r\n            view.removeNode(setting, node);\r\n            setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);\r\n            return false;\r\n          }\r\n        ).bind('mousedown',\r\n          function (eventMouseDown) {\r\n            return true;\r\n          }\r\n        ).show();\r\n      },\r\n      addHoverDom: function (setting, node) {\r\n        if (data.getRoots().showHoverDom) {\r\n          node.isHover = true;\r\n          if (setting.edit && setting.edit.enable) {\r\n            view.addEditBtn(setting, node);\r\n            view.addRemoveBtn(setting, node);\r\n          }\r\n          tools.apply(setting.view.addHoverDom, [setting.treeId, node]);\r\n        }\r\n      },\r\n      cancelCurEditNode: function (setting, forceName, isCancel) {\r\n        var root = data.getRoot(setting),\r\n          node = root.curEditNode;\r\n\r\n        if (node) {\r\n          var inputObj = root.curEditInput,\r\n            newName = forceName ? forceName : (isCancel ? data.nodeName(setting, node) : inputObj.val());\r\n          if (tools.apply(setting.callback.beforeRename, [setting.treeId, node, newName, isCancel], true) === false) {\r\n            return false;\r\n          }\r\n          data.nodeName(setting, node, newName);\r\n          var aObj = $$(node, consts.id.A, setting);\r\n          aObj.removeClass(consts.node.CURSELECTED_EDIT);\r\n          inputObj.unbind();\r\n          view.setNodeName(setting, node);\r\n          node.editNameFlag = false;\r\n          root.curEditNode = null;\r\n          root.curEditInput = null;\r\n          view.selectNode(setting, node, false);\r\n          setting.treeObj.trigger(consts.event.RENAME, [setting.treeId, node, isCancel]);\r\n        }\r\n        root.noSelection = true;\r\n        return true;\r\n      },\r\n      editNode: function (setting, node) {\r\n        var root = data.getRoot(setting);\r\n        view.editNodeBlur = false;\r\n        if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {\r\n          setTimeout(function () {\r\n            tools.inputFocus(root.curEditInput);\r\n          }, 0);\r\n          return;\r\n        }\r\n        node.editNameFlag = true;\r\n        view.removeTreeDom(setting, node);\r\n        view.cancelCurEditNode(setting);\r\n        view.selectNode(setting, node, false);\r\n        $$(node, consts.id.SPAN, setting).html(\"<input type=text class='rename' id='\" + node.tId + consts.id.INPUT + \"' treeNode\" + consts.id.INPUT + \" >\");\r\n        var inputObj = $$(node, consts.id.INPUT, setting);\r\n        inputObj.attr(\"value\", data.nodeName(setting, node));\r\n        if (setting.edit && setting.edit.editNameSelectAll) {\r\n          tools.inputSelect(inputObj);\r\n        } else {\r\n          tools.inputFocus(inputObj);\r\n        }\r\n\r\n        inputObj.bind('blur', function (event) {\r\n          if (!view.editNodeBlur) {\r\n            view.cancelCurEditNode(setting);\r\n          }\r\n        }).bind('keydown', function (event) {\r\n          if (event.keyCode == \"13\") {\r\n            view.editNodeBlur = true;\r\n            view.cancelCurEditNode(setting);\r\n          } else if (event.keyCode == \"27\") {\r\n            view.cancelCurEditNode(setting, null, true);\r\n          }\r\n        }).bind('click', function (event) {\r\n          return false;\r\n        }).bind('dblclick', function (event) {\r\n          return false;\r\n        });\r\n\r\n        $$(node, consts.id.A, setting).addClass(consts.node.CURSELECTED_EDIT);\r\n        root.curEditInput = inputObj;\r\n        root.noSelection = false;\r\n        root.curEditNode = node;\r\n      },\r\n      moveNode: function (setting, targetNode, node, moveType, animateFlag, isSilent) {\r\n        var root = data.getRoot(setting);\r\n        if (targetNode == node) return;\r\n        if (setting.data.keep.leaf && targetNode && !data.nodeIsParent(setting, targetNode) && moveType == consts.move.TYPE_INNER) return;\r\n        var oldParentNode = (node.parentTId ? node.getParentNode() : root),\r\n          targetNodeIsRoot = (targetNode === null || targetNode == root);\r\n        if (targetNodeIsRoot && targetNode === null) targetNode = root;\r\n        if (targetNodeIsRoot) moveType = consts.move.TYPE_INNER;\r\n        var targetParentNode = (targetNode.parentTId ? targetNode.getParentNode() : root);\r\n\r\n        if (moveType != consts.move.TYPE_PREV && moveType != consts.move.TYPE_NEXT) {\r\n          moveType = consts.move.TYPE_INNER;\r\n        }\r\n\r\n        if (moveType == consts.move.TYPE_INNER) {\r\n          if (targetNodeIsRoot) {\r\n            //parentTId of root node is null\r\n            node.parentTId = null;\r\n          } else {\r\n            if (!data.nodeIsParent(setting, targetNode)) {\r\n              data.nodeIsParent(setting, targetNode, true);\r\n              targetNode.open = !!targetNode.open;\r\n              view.setNodeLineIcos(setting, targetNode);\r\n            }\r\n            node.parentTId = targetNode.tId;\r\n          }\r\n        }\r\n\r\n        //move node Dom\r\n        var targetObj, target_ulObj;\r\n        if (targetNodeIsRoot) {\r\n          targetObj = setting.treeObj;\r\n          target_ulObj = targetObj;\r\n        } else {\r\n          if (!isSilent && moveType == consts.move.TYPE_INNER) {\r\n            view.expandCollapseNode(setting, targetNode, true, false);\r\n          } else if (!isSilent) {\r\n            view.expandCollapseNode(setting, targetNode.getParentNode(), true, false);\r\n          }\r\n          targetObj = $$(targetNode, setting);\r\n          target_ulObj = $$(targetNode, consts.id.UL, setting);\r\n          if (!!targetObj.get(0) && !target_ulObj.get(0)) {\r\n            var ulstr = [];\r\n            view.makeUlHtml(setting, targetNode, ulstr, '');\r\n            targetObj.append(ulstr.join(''));\r\n          }\r\n          target_ulObj = $$(targetNode, consts.id.UL, setting);\r\n        }\r\n        var nodeDom = $$(node, setting);\r\n        if (!nodeDom.get(0)) {\r\n          nodeDom = view.appendNodes(setting, node.level, [node], null, -1, false, true).join('');\r\n        } else if (!targetObj.get(0)) {\r\n          nodeDom.remove();\r\n        }\r\n        if (target_ulObj.get(0) && moveType == consts.move.TYPE_INNER) {\r\n          target_ulObj.append(nodeDom);\r\n        } else if (targetObj.get(0) && moveType == consts.move.TYPE_PREV) {\r\n          targetObj.before(nodeDom);\r\n        } else if (targetObj.get(0) && moveType == consts.move.TYPE_NEXT) {\r\n          targetObj.after(nodeDom);\r\n        }\r\n\r\n        //repair the data after move\r\n        var i, l,\r\n          tmpSrcIndex = -1,\r\n          tmpTargetIndex = 0,\r\n          oldNeighbor = null,\r\n          newNeighbor = null,\r\n          oldLevel = node.level;\r\n        var oldChildren = data.nodeChildren(setting, oldParentNode);\r\n        var targetParentChildren = data.nodeChildren(setting, targetParentNode);\r\n        var targetChildren = data.nodeChildren(setting, targetNode);\r\n        if (node.isFirstNode) {\r\n          tmpSrcIndex = 0;\r\n          if (oldChildren.length > 1) {\r\n            oldNeighbor = oldChildren[1];\r\n            oldNeighbor.isFirstNode = true;\r\n          }\r\n        } else if (node.isLastNode) {\r\n          tmpSrcIndex = oldChildren.length - 1;\r\n          oldNeighbor = oldChildren[tmpSrcIndex - 1];\r\n          oldNeighbor.isLastNode = true;\r\n        } else {\r\n          for (i = 0, l = oldChildren.length; i < l; i++) {\r\n            if (oldChildren[i].tId == node.tId) {\r\n              tmpSrcIndex = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (tmpSrcIndex >= 0) {\r\n          oldChildren.splice(tmpSrcIndex, 1);\r\n        }\r\n        if (moveType != consts.move.TYPE_INNER) {\r\n          for (i = 0, l = targetParentChildren.length; i < l; i++) {\r\n            if (targetParentChildren[i].tId == targetNode.tId) tmpTargetIndex = i;\r\n          }\r\n        }\r\n        if (moveType == consts.move.TYPE_INNER) {\r\n          if (!targetChildren) {\r\n            targetChildren = data.nodeChildren(setting, targetNode, []);\r\n          }\r\n          if (targetChildren.length > 0) {\r\n            newNeighbor = targetChildren[targetChildren.length - 1];\r\n            newNeighbor.isLastNode = false;\r\n          }\r\n          targetChildren.splice(targetChildren.length, 0, node);\r\n          node.isLastNode = true;\r\n          node.isFirstNode = (targetChildren.length == 1);\r\n        } else if (targetNode.isFirstNode && moveType == consts.move.TYPE_PREV) {\r\n          targetParentChildren.splice(tmpTargetIndex, 0, node);\r\n          newNeighbor = targetNode;\r\n          newNeighbor.isFirstNode = false;\r\n          node.parentTId = targetNode.parentTId;\r\n          node.isFirstNode = true;\r\n          node.isLastNode = false;\r\n\r\n        } else if (targetNode.isLastNode && moveType == consts.move.TYPE_NEXT) {\r\n          targetParentChildren.splice(tmpTargetIndex + 1, 0, node);\r\n          newNeighbor = targetNode;\r\n          newNeighbor.isLastNode = false;\r\n          node.parentTId = targetNode.parentTId;\r\n          node.isFirstNode = false;\r\n          node.isLastNode = true;\r\n\r\n        } else {\r\n          if (moveType == consts.move.TYPE_PREV) {\r\n            targetParentChildren.splice(tmpTargetIndex, 0, node);\r\n          } else {\r\n            targetParentChildren.splice(tmpTargetIndex + 1, 0, node);\r\n          }\r\n          node.parentTId = targetNode.parentTId;\r\n          node.isFirstNode = false;\r\n          node.isLastNode = false;\r\n        }\r\n        data.fixPIdKeyValue(setting, node);\r\n        data.setSonNodeLevel(setting, node.getParentNode(), node);\r\n\r\n        //repair node what been moved\r\n        view.setNodeLineIcos(setting, node);\r\n        view.repairNodeLevelClass(setting, node, oldLevel);\r\n\r\n        //repair node's old parentNode dom\r\n        if (!setting.data.keep.parent && oldChildren.length < 1) {\r\n          //old parentNode has no child nodes\r\n          data.nodeIsParent(setting, oldParentNode, false);\r\n          oldParentNode.open = false;\r\n          var tmp_ulObj = $$(oldParentNode, consts.id.UL, setting),\r\n            tmp_switchObj = $$(oldParentNode, consts.id.SWITCH, setting),\r\n            tmp_icoObj = $$(oldParentNode, consts.id.ICON, setting);\r\n          view.replaceSwitchClass(oldParentNode, tmp_switchObj, consts.folder.DOCU);\r\n          view.replaceIcoClass(oldParentNode, tmp_icoObj, consts.folder.DOCU);\r\n          tmp_ulObj.css(\"display\", \"none\");\r\n\r\n        } else if (oldNeighbor) {\r\n          //old neigbor node\r\n          view.setNodeLineIcos(setting, oldNeighbor);\r\n        }\r\n\r\n        //new neigbor node\r\n        if (newNeighbor) {\r\n          view.setNodeLineIcos(setting, newNeighbor);\r\n        }\r\n\r\n        //repair checkbox / radio\r\n        if (!!setting.check && setting.check.enable && view.repairChkClass) {\r\n          view.repairChkClass(setting, oldParentNode);\r\n          view.repairParentChkClassWithSelf(setting, oldParentNode);\r\n          if (oldParentNode != node.parent)\r\n            view.repairParentChkClassWithSelf(setting, node);\r\n        }\r\n\r\n        //expand parents after move\r\n        if (!isSilent) {\r\n          view.expandCollapseParentNode(setting, node.getParentNode(), true, animateFlag);\r\n        }\r\n      },\r\n      removeEditBtn: function (setting, node) {\r\n        $$(node, consts.id.EDIT, setting).unbind().remove();\r\n      },\r\n      removeRemoveBtn: function (setting, node) {\r\n        $$(node, consts.id.REMOVE, setting).unbind().remove();\r\n      },\r\n      removeTreeDom: function (setting, node) {\r\n        node.isHover = false;\r\n        view.removeEditBtn(setting, node);\r\n        view.removeRemoveBtn(setting, node);\r\n        tools.apply(setting.view.removeHoverDom, [setting.treeId, node]);\r\n      },\r\n      repairNodeLevelClass: function (setting, node, oldLevel) {\r\n        if (oldLevel === node.level) return;\r\n        var liObj = $$(node, setting),\r\n          aObj = $$(node, consts.id.A, setting),\r\n          ulObj = $$(node, consts.id.UL, setting),\r\n          oldClass = consts.className.LEVEL + oldLevel,\r\n          newClass = consts.className.LEVEL + node.level;\r\n        liObj.removeClass(oldClass);\r\n        liObj.addClass(newClass);\r\n        aObj.removeClass(oldClass);\r\n        aObj.addClass(newClass);\r\n        ulObj.removeClass(oldClass);\r\n        ulObj.addClass(newClass);\r\n      },\r\n      selectNodes: function (setting, nodes) {\r\n        for (var i = 0, l = nodes.length; i < l; i++) {\r\n          view.selectNode(setting, nodes[i], i > 0);\r\n        }\r\n      }\r\n    },\r\n\r\n    _z = {\r\n      tools: _tools,\r\n      view: _view,\r\n      event: _event,\r\n      data: _data\r\n    };\r\n  $.extend(true, $.fn.zTree.consts, _consts);\r\n  $.extend(true, $.fn.zTree._z, _z);\r\n\r\n  var zt = $.fn.zTree,\r\n    tools = zt._z.tools,\r\n    consts = zt.consts,\r\n    view = zt._z.view,\r\n    data = zt._z.data,\r\n    event = zt._z.event,\r\n    $$ = tools.$;\r\n\r\n  data.exSetting(_setting);\r\n  data.addInitBind(_bindEvent);\r\n  data.addInitUnBind(_unbindEvent);\r\n  data.addInitCache(_initCache);\r\n  data.addInitNode(_initNode);\r\n  data.addInitProxy(_eventProxy);\r\n  data.addInitRoot(_initRoot);\r\n  data.addZTreeTools(_zTreeTools);\r\n\r\n  var _cancelPreSelectedNode = view.cancelPreSelectedNode;\r\n  view.cancelPreSelectedNode = function (setting, node) {\r\n    var list = data.getRoot(setting).curSelectedList;\r\n    for (var i = 0, j = list.length; i < j; i++) {\r\n      if (!node || node === list[i]) {\r\n        view.removeTreeDom(setting, list[i]);\r\n        if (node) break;\r\n      }\r\n    }\r\n    if (_cancelPreSelectedNode) _cancelPreSelectedNode.apply(view, arguments);\r\n  }\r\n\r\n  var _createNodes = view.createNodes;\r\n  view.createNodes = function (setting, level, nodes, parentNode, index) {\r\n    if (_createNodes) {\r\n      _createNodes.apply(view, arguments);\r\n    }\r\n    if (!nodes) return;\r\n    if (view.repairParentChkClassWithSelf) {\r\n      view.repairParentChkClassWithSelf(setting, parentNode);\r\n    }\r\n  }\r\n\r\n  var _makeNodeUrl = view.makeNodeUrl;\r\n  view.makeNodeUrl = function (setting, node) {\r\n    return setting.edit && setting.edit.enable ? null : (_makeNodeUrl.apply(view, arguments));\r\n  }\r\n\r\n  var _removeNode = view.removeNode;\r\n  view.removeNode = function (setting, node) {\r\n    var root = data.getRoot(setting);\r\n    if (root.curEditNode === node) root.curEditNode = null;\r\n    if (_removeNode) {\r\n      _removeNode.apply(view, arguments);\r\n    }\r\n  }\r\n\r\n  var _selectNode = view.selectNode;\r\n  view.selectNode = function (setting, node, addFlag) {\r\n    var root = data.getRoot(setting);\r\n    if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {\r\n      return false;\r\n    }\r\n    if (_selectNode) _selectNode.apply(view, arguments);\r\n    view.addHoverDom(setting, node);\r\n    return true;\r\n  }\r\n\r\n  var _uCanDo = tools.uCanDo;\r\n  tools.uCanDo = function (setting, e) {\r\n    var root = data.getRoot(setting);\r\n    if (e && (tools.eqs(e.type, \"mouseover\") || tools.eqs(e.type, \"mouseout\") || tools.eqs(e.type, \"mousedown\") || tools.eqs(e.type, \"mouseup\"))) {\r\n      return true;\r\n    }\r\n    if (root.curEditNode) {\r\n      view.editNodeBlur = false;\r\n      root.curEditInput.focus();\r\n    }\r\n    return (!root.curEditNode) && (_uCanDo ? _uCanDo.apply(view, arguments) : true);\r\n  }\r\n})(jQuery);"]}]}