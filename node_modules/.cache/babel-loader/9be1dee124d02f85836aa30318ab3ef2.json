{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\header\\src\\util.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\header\\src\\util.js","mtime":1635230121727},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/web.dom.iterable\";\n\nconst getAllColumns = (columns, parentColumn) => {\n  const result = [];\n  columns.forEach(column => {\n    column.parentId = parentColumn ? parentColumn.id : null;\n\n    if (column.visible) {\n      if (column.children && column.children.length && column.children.some(column => column.visible)) {\n        result.push(column);\n        result.push(...getAllColumns(column.children, column));\n      } else {\n        result.push(column);\n      }\n    }\n  });\n  return result;\n};\n\nexport const convertToRows = originColumns => {\n  let maxLevel = 1;\n\n  const traverse = (column, parent) => {\n    if (parent) {\n      column.level = parent.level + 1;\n\n      if (maxLevel < column.level) {\n        maxLevel = column.level;\n      }\n    }\n\n    if (column.children && column.children.length && column.children.some(column => column.visible)) {\n      let colSpan = 0;\n      column.children.forEach(subColumn => {\n        if (subColumn.visible) {\n          traverse(subColumn, column);\n          colSpan += subColumn.colSpan;\n        }\n      });\n      column.colSpan = colSpan;\n    } else {\n      column.colSpan = 1;\n    }\n  };\n\n  originColumns.forEach(column => {\n    column.level = 1;\n    traverse(column);\n  });\n  const rows = [];\n\n  for (let i = 0; i < maxLevel; i++) {\n    rows.push([]);\n  }\n\n  const allColumns = getAllColumns(originColumns);\n  allColumns.forEach(column => {\n    if (column.children && column.children.length && column.children.some(column => column.visible)) {\n      column.rowSpan = 1;\n    } else {\n      column.rowSpan = maxLevel - column.level + 1;\n    }\n\n    rows[column.level - 1].push(column);\n  });\n  return rows;\n};",null]}