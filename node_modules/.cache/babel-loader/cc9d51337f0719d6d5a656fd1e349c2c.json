{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\filter\\src\\panel.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\filter\\src\\panel.js","mtime":1638515711241},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/web.dom.iterable\";\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport VXETable from '../../v-x-e-table';\nimport { UtilTools } from '../../tools';\nimport XEUtils from 'xe-utils';\nexport default {\n  name: 'VxeTableFilter',\n  props: {\n    filterStore: Object\n  },\n  computed: {\n    hasCheckOption() {\n      const filterStore = this.filterStore;\n      return filterStore && filterStore.options.some(option => option.checked);\n    }\n\n  },\n\n  render(h) {\n    const $xetable = this.$parent,\n          filterStore = this.filterStore;\n    const column = filterStore.column;\n    const filterRender = column ? column.filterRender : null;\n    const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n    return h('div', {\n      class: ['vxe-table--filter-wrapper', 'filter--prevent-default', compConf && compConf.className ? compConf.className : '', {\n        'is--animat': $xetable.animat,\n        'is--multiple': filterStore.multiple,\n        'filter--active': filterStore.visible\n      }],\n      style: filterStore.style\n    }, filterStore.visible ? this.renderOptions(h, filterRender, compConf).concat(this.renderFooter(h)) : []);\n  },\n\n  methods: {\n    renderOptions(h, filterRender, compConf) {\n      const $xetable = this.$parent,\n            filterStore = this.filterStore;\n      const args = filterStore.args,\n            column = filterStore.column,\n            multiple = filterStore.multiple,\n            maxHeight = filterStore.maxHeight;\n      const slots = column.slots;\n\n      if (slots && slots.filter) {\n        return [h('div', {\n          class: 'vxe-table--filter-template'\n        }, $xetable.callSlot(slots.filter, Object.assign({\n          $panel: this,\n          context: this\n        }, args), h))];\n      } else if (compConf && compConf.renderFilter) {\n        return [h('div', {\n          class: 'vxe-table--filter-template'\n        }, compConf.renderFilter.call($xetable, h, filterRender, Object.assign({\n          $panel: this,\n          context: this\n        }, args)))];\n      }\n\n      return [h('ul', {\n        class: 'vxe-table--filter-header'\n      }, [h('li', {\n        class: ['vxe-table--filter-option', {\n          'is--checked': multiple ? filterStore.isAllSelected : !filterStore.options.some(item => item._checked),\n          'is--indeterminate': multiple && filterStore.isIndeterminate\n        }],\n        attrs: {\n          title: GlobalConfig.i18n(multiple ? 'vxe.table.allTitle' : 'vxe.table.allFilter')\n        },\n        on: {\n          click: evnt => {\n            this.changeAllOption(evnt, !filterStore.isAllSelected);\n          }\n        }\n      }, (multiple ? [h('span', {\n        class: 'vxe-checkbox--icon vxe-checkbox--checked-icon',\n        style: {\n          '--checkedColor': $_theme.color\n        }\n      }), h('span', {\n        class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon',\n        style: {\n          '--checkedColor': $_theme.color\n        }\n      }), h('span', {\n        class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon',\n        style: {\n          '--checkedColor': $_theme.color\n        }\n      })] : []).concat([h('span', {\n        class: 'vxe-checkbox--label'\n      }, GlobalConfig.i18n('vxe.table.allFilter'))]))]), h('ul', {\n        class: 'vxe-table--filter-body',\n        style: maxHeight ? {\n          maxHeight: `${maxHeight}px`\n        } : {}\n      }, filterStore.options.map(item => {\n        return h('li', {\n          class: ['vxe-table--filter-option', {\n            'is--checked': item._checked\n          }],\n          attrs: {\n            title: item.label\n          },\n          on: {\n            click: evnt => {\n              this.changeOption(evnt, !item._checked, item);\n            }\n          }\n        }, (multiple ? [h('span', {\n          class: 'vxe-checkbox--icon vxe-checkbox--checked-icon',\n          style: {\n            '--checkedColor': $_theme.color\n          }\n        }), h('span', {\n          class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon',\n          style: {\n            '--checkedColor': $_theme.color\n          }\n        }), h('span', {\n          class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon',\n          style: {\n            '--checkedColor': $_theme.color\n          }\n        })] : []).concat([h('span', {\n          class: 'vxe-checkbox--label'\n        }, UtilTools.formatText(item.label, 1))]));\n      }))];\n    },\n\n    renderFooter(h) {\n      const hasCheckOption = this.hasCheckOption,\n            filterStore = this.filterStore;\n      const column = filterStore.column,\n            multiple = filterStore.multiple;\n      const filterRender = column.filterRender;\n      const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n      const isDisabled = !hasCheckOption && !filterStore.isAllSelected && !filterStore.isIndeterminate;\n      return multiple && (!compConf || (XEUtils.isBoolean(compConf.showFilterFooter) ? compConf.showFilterFooter !== false : compConf.isFooter !== false)) ? [h('div', {\n        class: 'vxe-table--filter-footer'\n      }, [h('button', {\n        class: {\n          'is--disabled': isDisabled\n        },\n        attrs: {\n          disabled: isDisabled\n        },\n        on: {\n          click: this.confirmFilter\n        }\n      }, GlobalConfig.i18n('vxe.table.confirmFilter')), h('button', {\n        on: {\n          click: this.resetFilter\n        }\n      }, GlobalConfig.i18n('vxe.table.resetFilter'))])] : [];\n    },\n\n    // 全部筛选事件\n    filterCheckAllEvent(evnt, value) {\n      const filterStore = this.filterStore;\n      filterStore.options.forEach(option => {\n        option._checked = value;\n        option.checked = value;\n      });\n      filterStore.isAllSelected = value;\n      filterStore.isIndeterminate = false;\n    },\n\n    /*************************\r\n     * Publish methods\r\n     *************************/\n    // （单选）筛选发生改变\n    changeRadioOption(evnt, checked, item) {\n      const $xetable = this.$parent,\n            filterStore = this.filterStore;\n      filterStore.options.forEach(option => {\n        option._checked = false;\n      });\n      item._checked = checked;\n      $xetable.checkFilterOptions();\n      this.confirmFilter(evnt);\n    },\n\n    // （多选）筛选发生改变\n    changeMultipleOption(evnt, checked, item) {\n      const $xetable = this.$parent;\n      item._checked = checked;\n      $xetable.checkFilterOptions();\n    },\n\n    changeAllOption(evnt, checked) {\n      if (this.filterStore.multiple) {\n        this.filterCheckAllEvent(evnt, checked);\n      } else {\n        this.resetFilter(evnt);\n      }\n    },\n\n    // 筛选发生改变\n    changeOption(evnt, checked, item) {\n      if (this.filterStore.multiple) {\n        this.changeMultipleOption(evnt, checked, item);\n      } else {\n        this.changeRadioOption(evnt, checked, item);\n      }\n    },\n\n    // 确认筛选\n    confirmFilter(evnt) {\n      const $xetable = this.$parent,\n            filterStore = this.filterStore;\n      filterStore.options.forEach(option => {\n        option.checked = option._checked;\n      });\n      $xetable.confirmFilterEvent(evnt);\n    },\n\n    // 重置筛选\n    resetFilter(evnt) {\n      const $xetable = this.$parent;\n      $xetable.resetFilterEvent(evnt);\n    }\n    /*************************\r\n     * Publish methods\r\n     *************************/\n\n\n  }\n};",null]}