{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\select\\src\\util.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\select\\src\\util.js","mtime":1635230120857},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport XEUtils from 'xe-utils';\n\nvar OptionConfig =\n/*#__PURE__*/\nfunction () {\n  function OptionConfig($xeselect, _vm) {\n    _classCallCheck(this, OptionConfig);\n\n    Object.assign(this, {\n      value: _vm.value,\n      label: _vm.label,\n      visible: _vm.visible,\n      className: _vm.className,\n      disabled: _vm.disabled\n    });\n  }\n\n  _createClass(OptionConfig, [{\n    key: \"update\",\n    value: function update(name, value) {\n      this[name] = value;\n    }\n  }]);\n\n  return OptionConfig;\n}();\n\nexport function isOption(option) {\n  return option instanceof OptionConfig;\n}\nexport function getOptionConfig($xeselect, _vm, options) {\n  return isOption(_vm) ? _vm : new OptionConfig($xeselect, _vm, options);\n}\nexport function createOption($xeselect, _vm) {\n  return getOptionConfig($xeselect, _vm);\n}\nexport function destroyOption(_vm) {\n  var $xeselect = _vm.$xeselect,\n      optionConfig = _vm.optionConfig;\n  var matchObj = XEUtils.findTree($xeselect.collectOption, function (option) {\n    return option === optionConfig;\n  });\n\n  if (matchObj) {\n    matchObj.items.splice(matchObj.index, 1);\n  }\n}\nexport function assemOption(_vm) {\n  var $el = _vm.$el,\n      $xeselect = _vm.$xeselect,\n      $xeoptgroup = _vm.$xeoptgroup,\n      optionConfig = _vm.optionConfig;\n  var groupConfig = $xeoptgroup ? $xeoptgroup.optionConfig : null;\n  optionConfig.slots = _vm.$scopedSlots;\n\n  if (groupConfig) {\n    if (!groupConfig.options) {\n      groupConfig.options = [];\n    }\n\n    groupConfig.options.splice([].indexOf.call($xeoptgroup.$el.children, $el), 0, optionConfig);\n  } else {\n    $xeselect.collectOption.splice([].indexOf.call($xeselect.$refs.hideOption.children, $el), 0, optionConfig);\n  }\n}",null]}