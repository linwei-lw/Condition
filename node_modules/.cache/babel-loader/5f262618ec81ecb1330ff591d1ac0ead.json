{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\button\\src\\button.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\button\\src\\button.js","mtime":1635230121871},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport vSize from '../../mixins/size';\nimport { UtilTools, DomTools, GlobalEvent } from '../../tools';\nexport default {\n  name: 'VxeButton',\n  mixins: [vSize],\n  props: {\n    type: String,\n    size: {\n      type: String,\n      default: () => GlobalConfig.button.size || GlobalConfig.size\n    },\n    name: [String, Number],\n    content: String,\n    placement: String,\n    status: String,\n    icon: String,\n    round: Boolean,\n    circle: Boolean,\n    disabled: Boolean,\n    loading: Boolean,\n    destroyOnClose: Boolean,\n    className: String,\n    transfer: {\n      type: Boolean,\n      default: () => GlobalConfig.button.transfer\n    }\n  },\n\n  data() {\n    return {\n      inited: false,\n      showPanel: false,\n      animatVisible: false,\n      panelIndex: 0,\n      panelStyle: null,\n      panelPlacement: null\n    };\n  },\n\n  computed: {\n    isText() {\n      return this.type === 'text';\n    },\n\n    isFormBtn() {\n      return ['submit', 'reset', 'button'].indexOf(this.type) > -1;\n    },\n\n    btnType() {\n      return this.isText ? this.type : 'button';\n    }\n\n  },\n\n  created() {\n    GlobalEvent.on(this, 'mousewheel', this.handleGlobalMousewheelEvent);\n  },\n\n  beforeDestroy() {\n    const panelElem = this.$refs.panel;\n\n    if (panelElem && panelElem.parentNode) {\n      panelElem.parentNode.removeChild(panelElem);\n    }\n  },\n\n  destroyed() {\n    GlobalEvent.off(this, 'mousewheel');\n  },\n\n  render(h) {\n    const $scopedSlots = this.$scopedSlots,\n          $listeners = this.$listeners,\n          className = this.className,\n          inited = this.inited,\n          type = this.type,\n          destroyOnClose = this.destroyOnClose,\n          isFormBtn = this.isFormBtn,\n          status = this.status,\n          btnType = this.btnType,\n          vSize = this.vSize,\n          name = this.name,\n          disabled = this.disabled,\n          loading = this.loading,\n          showPanel = this.showPanel,\n          animatVisible = this.animatVisible,\n          panelPlacement = this.panelPlacement;\n    const downsSlot = $scopedSlots.dropdowns;\n    return downsSlot ? h('div', {\n      class: ['vxe-button--dropdown', className, {\n        [`size--${vSize}`]: vSize,\n        'is--active': showPanel\n      }]\n    }, [h('button', {\n      ref: 'xBtn',\n      class: ['vxe-button', `type--${btnType}`, {\n        [`size--${vSize}`]: vSize,\n        [`skin--${status}`]: status,\n        'is--round': this.round,\n        'is--circle': this.circle,\n        'is--disabled': disabled || loading,\n        'is--loading': loading\n      }],\n      attrs: {\n        name,\n        type: isFormBtn ? type : 'button',\n        disabled: disabled || loading\n      },\n      on: Object.assign({\n        mouseenter: this.mouseenterTargetEvent,\n        mouseleave: this.mouseleaveEvent\n      }, XEUtils.objectMap($listeners, (cb, type) => evnt => this.$emit(type, {\n        $event: evnt\n      })))\n    }, this.renderContent(h).concat([h('i', {\n      class: `vxe-button--dropdown-arrow ${GlobalConfig.icon.BUTTON_DROPDOWN}`\n    })])), h('div', {\n      ref: 'panel',\n      class: ['vxe-button--dropdown-panel', {\n        [`size--${vSize}`]: vSize,\n        'animat--leave': animatVisible,\n        'animat--enter': showPanel\n      }],\n      attrs: {\n        placement: panelPlacement\n      },\n      style: this.panelStyle\n    }, inited ? [h('div', {\n      class: 'vxe-button--dropdown-wrapper',\n      on: {\n        mousedown: this.mousedownDropdownEvent,\n        click: this.clickDropdownEvent,\n        mouseenter: this.mouseenterEvent,\n        mouseleave: this.mouseleaveEvent\n      }\n    }, destroyOnClose && !showPanel ? [] : downsSlot.call(this, {}, h))] : null)]) : h('button', {\n      ref: 'xBtn',\n      class: ['vxe-button', `type--${btnType}`, className, {\n        [`size--${vSize}`]: vSize,\n        [`skin--${status}`]: status,\n        'is--round': this.round,\n        'is--circle': this.circle,\n        'is--disabled': disabled || loading,\n        'is--loading': loading\n      }],\n      attrs: {\n        name,\n        type: isFormBtn ? type : 'button',\n        disabled: disabled || loading\n      },\n      on: XEUtils.objectMap($listeners, (cb, type) => evnt => this.$emit(type, {\n        $event: evnt\n      }))\n    }, this.renderContent(h));\n  },\n\n  methods: {\n    renderContent(h) {\n      const $scopedSlots = this.$scopedSlots,\n            content = this.content,\n            icon = this.icon,\n            loading = this.loading;\n      const contents = [];\n\n      if (loading) {\n        contents.push(h('i', {\n          class: ['vxe-button--loading-icon', GlobalConfig.icon.BUTTON_LOADING]\n        }));\n      } else if (icon) {\n        contents.push(h('i', {\n          class: ['vxe-button--icon', icon]\n        }));\n      }\n\n      if ($scopedSlots.default) {\n        contents.push(h('span', {\n          class: 'vxe-button--content'\n        }, $scopedSlots.default.call(this)));\n      } else if (content) {\n        contents.push(h('span', {\n          class: 'vxe-button--content'\n        }, [UtilTools.getFuncText(content)]));\n      }\n\n      return contents;\n    },\n\n    handleGlobalMousewheelEvent(evnt) {\n      if (this.showPanel && !DomTools.getEventTargetNode(evnt, this.$refs.panel).flag) {\n        this.closePanel();\n      }\n    },\n\n    updateZindex() {\n      if (this.panelIndex < UtilTools.getLastZIndex()) {\n        this.panelIndex = UtilTools.nextZIndex();\n      }\n    },\n\n    mousedownDropdownEvent(evnt) {\n      const isLeftBtn = evnt.button === 0;\n\n      if (isLeftBtn) {\n        evnt.stopPropagation();\n      }\n    },\n\n    clickDropdownEvent(evnt) {\n      const dropdownElem = evnt.currentTarget;\n      const panelElem = this.$refs.panel;\n\n      const _DomTools$getEventTar = DomTools.getEventTargetNode(evnt, dropdownElem, 'vxe-button'),\n            flag = _DomTools$getEventTar.flag,\n            targetElem = _DomTools$getEventTar.targetElem;\n\n      if (flag) {\n        if (panelElem) {\n          panelElem.dataset.active = 'N';\n        }\n\n        this.showPanel = false;\n        setTimeout(() => {\n          if (!panelElem || panelElem.dataset.active !== 'Y') {\n            this.animatVisible = false;\n          }\n        }, 350);\n        this.$emit('dropdown-click', {\n          name: targetElem.getAttribute('name'),\n          $event: evnt\n        });\n      }\n    },\n\n    mouseenterTargetEvent() {\n      const panelElem = this.$refs.panel;\n      panelElem.dataset.active = 'Y';\n\n      if (!this.inited) {\n        this.inited = true;\n\n        if (this.transfer) {\n          document.body.appendChild(panelElem);\n        }\n      }\n\n      this.showTime = setTimeout(() => {\n        if (panelElem.dataset.active === 'Y') {\n          this.mouseenterEvent();\n        } else {\n          this.animatVisible = false;\n        }\n      }, 250);\n    },\n\n    mouseenterEvent() {\n      const panelElem = this.$refs.panel;\n      panelElem.dataset.active = 'Y';\n      this.animatVisible = true;\n      setTimeout(() => {\n        if (panelElem.dataset.active === 'Y') {\n          this.showPanel = true;\n          this.updateZindex();\n          this.updatePlacement();\n          setTimeout(() => {\n            if (this.showPanel) {\n              this.updatePlacement();\n            }\n          }, 50);\n        }\n      }, 20);\n    },\n\n    mouseleaveEvent() {\n      this.closePanel();\n    },\n\n    closePanel() {\n      const panelElem = this.$refs.panel;\n      clearTimeout(this.showTime);\n\n      if (panelElem) {\n        panelElem.dataset.active = 'N';\n        setTimeout(() => {\n          if (panelElem.dataset.active !== 'Y') {\n            this.showPanel = false;\n            setTimeout(() => {\n              if (panelElem.dataset.active !== 'Y') {\n                this.animatVisible = false;\n              }\n            }, 350);\n          }\n        }, 100);\n      } else {\n        this.animatVisible = false;\n        this.showPanel = false;\n      }\n    },\n\n    updatePlacement() {\n      return this.$nextTick().then(() => {\n        const $refs = this.$refs,\n              transfer = this.transfer,\n              placement = this.placement,\n              panelIndex = this.panelIndex;\n        const targetElem = $refs.xBtn;\n        const panelElem = $refs.panel;\n\n        if (panelElem && targetElem) {\n          const targetHeight = targetElem.offsetHeight;\n          const targetWidth = targetElem.offsetWidth;\n          const panelHeight = panelElem.offsetHeight;\n          const panelWidth = panelElem.offsetWidth;\n          const marginSize = 5;\n          const panelStyle = {\n            zIndex: panelIndex\n          };\n\n          const _DomTools$getAbsolute = DomTools.getAbsolutePos(targetElem),\n                boundingTop = _DomTools$getAbsolute.boundingTop,\n                boundingLeft = _DomTools$getAbsolute.boundingLeft,\n                visibleHeight = _DomTools$getAbsolute.visibleHeight,\n                visibleWidth = _DomTools$getAbsolute.visibleWidth;\n\n          let panelPlacement = 'bottom';\n\n          if (transfer) {\n            let left = boundingLeft + targetWidth - panelWidth;\n            let top = boundingTop + targetHeight;\n\n            if (placement === 'top') {\n              panelPlacement = 'top';\n              top = boundingTop - panelHeight;\n            } else if (!placement) {\n              // 如果下面不够放，则向上\n              if (top + panelHeight + marginSize > visibleHeight) {\n                panelPlacement = 'top';\n                top = boundingTop - panelHeight;\n              } // 如果上面不够放，则向下（优先）\n\n\n              if (top < marginSize) {\n                panelPlacement = 'bottom';\n                top = boundingTop + targetHeight;\n              }\n            } // 如果溢出右边\n\n\n            if (left + panelWidth + marginSize > visibleWidth) {\n              left -= left + panelWidth + marginSize - visibleWidth;\n            } // 如果溢出左边\n\n\n            if (left < marginSize) {\n              left = marginSize;\n            }\n\n            Object.assign(panelStyle, {\n              left: `${left}px`,\n              right: 'auto',\n              top: `${top}px`,\n              minWidth: `${targetWidth}px`\n            });\n          } else {\n            if (placement === 'top') {\n              panelPlacement = 'top';\n              panelStyle.bottom = `${targetHeight}px`;\n            } else if (!placement) {\n              // 如果下面不够放，则向上\n              if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                // 如果上面不够放，则向下（优先）\n                if (boundingTop - targetHeight - panelHeight > marginSize) {\n                  panelPlacement = 'top';\n                  panelStyle.bottom = `${targetHeight}px`;\n                }\n              }\n            }\n          }\n\n          this.panelStyle = panelStyle;\n          this.panelPlacement = panelPlacement;\n          return this.$nextTick();\n        }\n      });\n    },\n\n    focus() {\n      this.$el.focus();\n      return this.$nextTick();\n    },\n\n    blur() {\n      this.$el.blur();\n      return this.$nextTick();\n    }\n\n  }\n};",null]}