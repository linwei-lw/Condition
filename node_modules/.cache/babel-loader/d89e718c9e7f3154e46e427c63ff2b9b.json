{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\modules\\cdRule\\CdInfoRModule.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\modules\\cdRule\\CdInfoRModule.vue","mtime":1681712531547},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.search\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport EditWindow from './EditWindow.vue';\nimport deductedWindow from './deductedWindow.vue';\nimport { arrayToMap } from '@/common/util/Arrays.js';\nimport { arrayToTree } from '@/common/util/Trees.js';\nimport { addDateTime } from '@/common/util/Dates.js';\nexport default {\n  data() {\n    return {\n      querying: false,\n      datas: [],\n      taskState: 2,\n      selectedItem: null,\n      carId: null,\n      stime: addDateTime(-1),\n      etime: addDateTime(0),\n      driverId: null,\n      cdId: null,\n      list: null\n    };\n  },\n\n  created() {},\n\n  mounted() {\n    $_main.http.get('rule/get', {\n      sessionId: $_main.sessionId,\n      userId: $_main.userId\n    }).then(result => {\n      this.list = result;\n    });\n    this.search();\n  },\n\n  methods: {\n    getTreeRoots(callback) {\n      $_main.http.get('data/getCars', {\n        sessionId: $_main.sessionId\n      }).then(result => {\n        result.carList.forEach(el => {\n          el.name = el.carName;\n        });\n        result.teamList.forEach(el => {\n          el.name = el.teamName;\n        });\n        let TEAMS = {\n          list: null,\n          map: null,\n          root: {\n            id: '0',\n            name: $_L.get('所有车辆'),\n            children: []\n          }\n        };\n        let CARS = {\n          list: null,\n          map: null,\n          root: null\n        };\n        TEAMS.list = result.teamList || [];\n        TEAMS.map = arrayToMap(TEAMS.list, \"teamId\");\n        TEAMS.tree = arrayToTree(TEAMS.list, \"teamId\", \"pid\", TEAMS.map, TEAMS.root, 'teams');\n        CARS.list = result.carList || [];\n        CARS.map = arrayToMap(CARS.list, \"carId\");\n        CARS.root = TEAMS.root;\n        CARS.root.teams && (CARS.root.children = [...CARS.root.teams]);\n\n        for (let i = 0, len = TEAMS.list.length, team; i < len; i++) {\n          team = TEAMS.list[i];\n          team.teams && (team.children = [...team.teams]);\n        }\n\n        CARS.tree = arrayToTree(CARS.list, \"carId\", \"teamId\", TEAMS.map, CARS.root, \"children\");\n        callback(CARS.root);\n      });\n    },\n\n    getTreeRoots1(callback) {\n      $_main.http.get('data/getSubUser', {\n        sessionId: $_main.sessionId\n      }).then(result => {\n        result.forEach(el => {\n          el.name = el.cnName;\n        });\n        let root = {\n          id: '0',\n          name: $_L.get('所有司机'),\n          children: []\n        };\n        let children = arrayToTree(result, \"userId\", \"pid\");\n        root.children = children;\n        callback(root);\n      });\n    },\n\n    iconCssFunction(node, open) {\n      return !node.carId ? open ? 'ico_open' : 'ico_close' : null;\n    },\n\n    iconCssFunction1(node, open) {\n      return !node.userId ? open ? 'ico_open' : 'ico_close' : null;\n    },\n\n    search() {\n      if (this.etime < this.stime) return $_alert.warn($_L.get('开始时间不能大于结束时间！'));\n      this.datas = [];\n      this.querying = true;\n      let url = this.taskState == 2 ? 'info/getInfoByH' : 'info/getInfo';\n      let params = this.taskState == 2 ? {\n        carId: this.carId,\n        stime: this.stime,\n        etime: this.etime,\n        driverId: this.driverId,\n        cdId: this.cdId\n      } : {\n        taskState: this.taskState\n      };\n      $_main.http.get(url, Object.assign({\n        sessionId: $_main.sessionId,\n        userId: $_main.userId\n      }, params)).then(result => {\n        this.datas = result;\n        this.toFinish();\n      });\n    },\n\n    toFinish() {\n      this.querying = false;\n      if (!this.datas || this.datas.length == 0) return $_alert.warn($_L.get('暂无数据！'));\n    },\n\n    editClick() {\n      $_popup.open(EditWindow, {\n        callback: this.addOrUpdateCallback\n      });\n    },\n\n    addOrUpdateCallback() {\n      this.search();\n    },\n\n    ClickBtn(row) {\n      let exts = row.exts && (typeof row.exts == 'string' ? JSON.parse(row.exts) : row.exts) || {};\n      let deductedDetail = [];\n\n      if (exts.deductedDetail) {\n        for (let k in exts.deductedDetail) {\n          deductedDetail.push(Object.assign({\n            'regionId': k\n          }, exts.deductedDetail[k]));\n        }\n      }\n\n      $_popup.open(deductedWindow, {\n        name: row.taskName,\n        deductedDetail: deductedDetail || []\n      });\n    }\n\n  }\n};",null]}