{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\table\\src\\body.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\table\\src\\body.js","mtime":1635230121669},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.string.fixed\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport VXETable from \"../../v-x-e-table\";\nimport { UtilTools, DomTools, isEnableConf } from \"../../tools\";\nimport { getOffsetSize, calcTreeLine, mergeBodyMethod } from \"./util\";\nimport { browse } from \"../../tools/src/dom\";\nvar renderType = 'body'; // 滚动、拖动过程中不需要触发\n\nfunction isOperateMouse($xetable) {\n  return $xetable._isResize || $xetable.lastScrollTime && Date.now() < $xetable.lastScrollTime + $xetable.delayHover;\n}\n\nfunction renderLine(h, _vm, $xetable, rowLevel, items, params) {\n  var column = params.column;\n  var treeOpts = $xetable.treeOpts,\n      treeConfig = $xetable.treeConfig;\n  var slots = column.slots,\n      treeNode = column.treeNode;\n\n  if (slots && slots.line) {\n    return $xetable.callSlot(slots.line, params, h);\n  }\n\n  if (treeConfig && treeNode && treeOpts.line) {\n    return [h('div', {\n      class: 'vxe-tree--line-wrapper'\n    }, [h('div', {\n      class: 'vxe-tree--line',\n      style: {\n        height: \"\".concat(calcTreeLine(params, items), \"px\"),\n        left: \"\".concat(rowLevel * treeOpts.indent + (rowLevel ? 2 - getOffsetSize($xetable) : 0) + 16, \"px\")\n      }\n    })])];\n  }\n\n  return [];\n}\n/**\r\n * 渲染列\r\n */\n\n\nfunction renderColumn(h, _vm, $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, columns, items) {\n  var _ref2;\n\n  var tableListeners = $xetable.$listeners,\n      afterFullData = $xetable.afterFullData,\n      tableData = $xetable.tableData,\n      height = $xetable.height,\n      columnKey = $xetable.columnKey,\n      overflowX = $xetable.overflowX,\n      scrollXLoad = $xetable.scrollXLoad,\n      scrollYLoad = $xetable.scrollYLoad,\n      highlightCurrentRow = $xetable.highlightCurrentRow,\n      allColumnOverflow = $xetable.showOverflow,\n      isAllOverflow = $xetable.isAllOverflow,\n      allAlign = $xetable.align,\n      currentColumn = $xetable.currentColumn,\n      cellClassName = $xetable.cellClassName,\n      cellStyle = $xetable.cellStyle,\n      mergeList = $xetable.mergeList,\n      spanMethod = $xetable.spanMethod,\n      radioOpts = $xetable.radioOpts,\n      checkboxOpts = $xetable.checkboxOpts,\n      expandOpts = $xetable.expandOpts,\n      treeOpts = $xetable.treeOpts,\n      tooltipOpts = $xetable.tooltipOpts,\n      mouseConfig = $xetable.mouseConfig,\n      editConfig = $xetable.editConfig,\n      editOpts = $xetable.editOpts,\n      editRules = $xetable.editRules,\n      validOpts = $xetable.validOpts,\n      editStore = $xetable.editStore,\n      validStore = $xetable.validStore,\n      tooltipConfig = $xetable.tooltipConfig;\n  var type = column.type,\n      cellRender = column.cellRender,\n      editRender = column.editRender,\n      align = column.align,\n      showOverflow = column.showOverflow,\n      className = column.className,\n      treeNode = column.treeNode;\n  var actived = editStore.actived;\n  var showAllTip = tooltipOpts.showAll || tooltipOpts.enabled;\n  var columnIndex = $xetable.getColumnIndex(column);\n\n  var _columnIndex = $xetable.getVTColumnIndex(column);\n\n  var isEdit = isEnableConf(editRender);\n  var fixedHiddenColumn = fixedType ? column.fixed !== fixedType : column.fixed && overflowX;\n  var cellOverflow = XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow) ? allColumnOverflow : showOverflow;\n  var showEllipsis = cellOverflow === 'ellipsis';\n  var showTitle = cellOverflow === 'title';\n  var showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n  var hasEllipsis = showTitle || showTooltip || showEllipsis;\n  var isDirty;\n  var tdOns = {};\n  var cellAlign = align || allAlign;\n  var hasValidError = validStore.row === row && validStore.column === column;\n  var showValidTip = editRules && validOpts.showMessage && (validOpts.message === 'default' ? height || tableData.length > 1 : validOpts.message === 'inline');\n  var attrs = {\n    colid: column.id\n  };\n  var bindMouseenter = tableListeners['cell-mouseenter'];\n  var bindMouseleave = tableListeners['cell-mouseleave'];\n  var triggerDblclick = editRender && editConfig && editOpts.trigger === 'dblclick';\n  var params = {\n    $table: $xetable,\n    $seq: $seq,\n    seq: seq,\n    rowid: rowid,\n    row: row,\n    rowIndex: rowIndex,\n    $rowIndex: $rowIndex,\n    _rowIndex: _rowIndex,\n    column: column,\n    columnIndex: columnIndex,\n    $columnIndex: $columnIndex,\n    _columnIndex: _columnIndex,\n    fixed: fixedType,\n    type: renderType,\n    isHidden: fixedHiddenColumn,\n    level: rowLevel,\n    visibleData: afterFullData,\n    data: tableData,\n    items: items // 虚拟滚动不支持动态高度\n\n  };\n\n  if ((scrollXLoad || scrollYLoad) && !hasEllipsis) {\n    showEllipsis = hasEllipsis = true;\n  } // hover 进入事件\n\n\n  if (showTitle || showTooltip || showAllTip || bindMouseenter || tooltipConfig) {\n    tdOns.mouseenter = function (evnt) {\n      if (isOperateMouse($xetable)) {\n        return;\n      }\n\n      if (showTitle) {\n        DomTools.updateCellTitle(evnt.currentTarget, column);\n      } else if (showTooltip || showAllTip) {\n        // 如果配置了显示 tooltip\n        $xetable.triggerBodyTooltipEvent(evnt, params);\n      }\n\n      if (bindMouseenter) {\n        $xetable.emitEvent('cell-mouseenter', Object.assign({\n          cell: evnt.currentTarget\n        }, params), evnt);\n      }\n    };\n  } // hover 退出事件\n\n\n  if (showTooltip || showAllTip || bindMouseleave || tooltipConfig) {\n    tdOns.mouseleave = function (evnt) {\n      if (isOperateMouse($xetable)) {\n        return;\n      }\n\n      if (showTooltip || showAllTip) {\n        $xetable.handleTargetLeaveEvent(evnt);\n      }\n\n      if (bindMouseleave) {\n        $xetable.emitEvent('cell-mouseleave', Object.assign({\n          cell: evnt.currentTarget\n        }, params), evnt);\n      }\n    };\n  } // 按下事件处理\n\n\n  if (checkboxOpts.range || mouseConfig) {\n    tdOns.mousedown = function (evnt) {\n      $xetable.triggerCellMousedownEvent(evnt, params);\n    };\n  } // 点击事件处理\n\n\n  if (highlightCurrentRow || tableListeners['cell-click'] || editRender && editConfig || expandOpts.trigger === 'row' || expandOpts.trigger === 'cell' || radioOpts.trigger === 'row' || column.type === 'radio' && radioOpts.trigger === 'cell' || checkboxOpts.trigger === 'row' || column.type === 'checkbox' && checkboxOpts.trigger === 'cell' || treeOpts.trigger === 'row' || column.treeNode && treeOpts.trigger === 'cell') {\n    tdOns.click = function (evnt) {\n      $xetable.triggerCellClickEvent(evnt, params);\n    };\n  } // 双击事件处理\n\n\n  if (triggerDblclick || tableListeners['cell-dblclick']) {\n    tdOns.dblclick = function (evnt) {\n      $xetable.triggerCellDblclickEvent(evnt, params);\n    };\n  } // 合并行或列\n\n\n  if (mergeList.length) {\n    var spanRest = mergeBodyMethod(mergeList, _rowIndex, _columnIndex);\n\n    if (spanRest) {\n      var rowspan = spanRest.rowspan,\n          colspan = spanRest.colspan;\n\n      if (!rowspan || !colspan) {\n        return null;\n      }\n\n      if (rowspan > 1) {\n        attrs.rowspan = rowspan;\n      }\n\n      if (colspan > 1) {\n        attrs.colspan = colspan;\n      }\n    }\n  } else if (spanMethod) {\n    // 自定义合并行或列的方法\n    var _ref = spanMethod(params) || {},\n        _ref$rowspan = _ref.rowspan,\n        _rowspan = _ref$rowspan === void 0 ? 1 : _ref$rowspan,\n        _ref$colspan = _ref.colspan,\n        _colspan = _ref$colspan === void 0 ? 1 : _ref$colspan;\n\n    if (!_rowspan || !_colspan) {\n      return null;\n    }\n\n    if (_rowspan > 1) {\n      attrs.rowspan = _rowspan;\n    }\n\n    if (_colspan > 1) {\n      attrs.colspan = _colspan;\n    }\n  } // 如果被合并不可隐藏\n\n\n  if (fixedHiddenColumn && mergeList) {\n    if (attrs.colspan > 1 || attrs.rowspan > 1) {\n      fixedHiddenColumn = false;\n    }\n  } // 如果编辑列开启显示状态\n\n\n  if (!fixedHiddenColumn && editConfig && (editRender || cellRender) && (editOpts.showStatus || editOpts.showUpdateStatus)) {\n    isDirty = $xetable.isUpdateByRow(row, column.property);\n  }\n\n  var tdVNs = [];\n\n  if (fixedHiddenColumn && (allColumnOverflow ? isAllOverflow : allColumnOverflow)) {\n    tdVNs.push(h('div', {\n      class: ['vxe-cell', {\n        'c--title': showTitle,\n        'c--tooltip': showTooltip,\n        'c--ellipsis': showEllipsis\n      }]\n    }));\n  } else {\n    // 渲染单元格\n    tdVNs.push.apply(tdVNs, _toConsumableArray(renderLine(h, _vm, $xetable, rowLevel, items, params)).concat([h('div', {\n      class: ['vxe-cell', {\n        'c--title': showTitle,\n        'c--tooltip': showTooltip,\n        'c--ellipsis': showEllipsis\n      }],\n      attrs: {\n        title: showTitle ? $xetable.getCellLabel(row, column) : null\n      }\n    }, column.renderCell(h, params))]));\n\n    if (showValidTip && hasValidError) {\n      tdVNs.push(h('div', {\n        class: 'vxe-cell--valid',\n        style: validStore.rule && validStore.rule.maxWidth ? {\n          width: \"\".concat(validStore.rule.maxWidth, \"px\")\n        } : null\n      }, [h('span', {\n        class: 'vxe-cell--valid-msg'\n      }, validStore.content)]));\n    }\n  }\n\n  return h('td', {\n    class: ['vxe-body--column', column.id, (_ref2 = {}, _defineProperty(_ref2, \"col--\".concat(cellAlign), cellAlign), _defineProperty(_ref2, \"col--\".concat(type), type), _defineProperty(_ref2, 'col--last', $columnIndex === columns.length - 1), _defineProperty(_ref2, 'col--tree-node', treeNode), _defineProperty(_ref2, 'col--edit', isEdit), _defineProperty(_ref2, 'col--ellipsis', hasEllipsis), _defineProperty(_ref2, 'fixed--hidden', fixedHiddenColumn), _defineProperty(_ref2, 'col--dirty', isDirty), _defineProperty(_ref2, 'col--actived', editConfig && isEdit && actived.row === row && (actived.column === column || editOpts.mode === 'row')), _defineProperty(_ref2, 'col--valid-error', hasValidError), _defineProperty(_ref2, 'col--current', currentColumn === column), _ref2), UtilTools.getClass(className, params), UtilTools.getClass(cellClassName, params)],\n    key: columnKey ? column.id : $columnIndex,\n    attrs: attrs,\n    style: cellStyle ? XEUtils.isFunction(cellStyle) ? cellStyle(params) : cellStyle : null,\n    on: tdOns\n  }, tdVNs);\n}\n\nfunction renderRows(h, _vm, $xetable, $seq, rowLevel, fixedType, tableData, tableColumn) {\n  var stripe = $xetable.stripe,\n      rowKey = $xetable.rowKey,\n      highlightHoverRow = $xetable.highlightHoverRow,\n      rowClassName = $xetable.rowClassName,\n      rowStyle = $xetable.rowStyle,\n      editConfig = $xetable.editConfig,\n      allColumnOverflow = $xetable.showOverflow,\n      treeConfig = $xetable.treeConfig,\n      treeOpts = $xetable.treeOpts,\n      editOpts = $xetable.editOpts,\n      treeExpandeds = $xetable.treeExpandeds,\n      scrollYLoad = $xetable.scrollYLoad,\n      scrollYStore = $xetable.scrollYStore,\n      editStore = $xetable.editStore,\n      rowExpandeds = $xetable.rowExpandeds,\n      radioOpts = $xetable.radioOpts,\n      checkboxOpts = $xetable.checkboxOpts,\n      expandColumn = $xetable.expandColumn,\n      hasFixedColumn = $xetable.hasFixedColumn;\n  var rows = [];\n  tableData.forEach(function (row, $rowIndex) {\n    var trOn = {};\n    var rowIndex = $rowIndex;\n    var seq = rowIndex + 1;\n\n    if (scrollYLoad) {\n      seq += scrollYStore.startIndex;\n    }\n\n    var _rowIndex = $xetable.getVTRowIndex(row); // 确保任何情况下 rowIndex 都精准指向真实 data 索引\n\n\n    rowIndex = $xetable.getRowIndex(row); // 事件绑定\n\n    if (highlightHoverRow) {\n      trOn.mouseenter = function (evnt) {\n        if (isOperateMouse($xetable)) {\n          return;\n        }\n\n        $xetable.triggerHoverEvent(evnt, {\n          row: row,\n          rowIndex: rowIndex\n        });\n      };\n\n      trOn.mouseleave = function () {\n        if (isOperateMouse($xetable)) {\n          return;\n        }\n\n        $xetable.clearHoverRow();\n      };\n    }\n\n    var rowid = UtilTools.getRowid($xetable, row);\n    var params = {\n      $table: $xetable,\n      $seq: $seq,\n      seq: seq,\n      rowid: rowid,\n      fixed: fixedType,\n      type: renderType,\n      level: rowLevel,\n      row: row,\n      rowIndex: rowIndex,\n      $rowIndex: $rowIndex\n    };\n    var isNewRow = false;\n\n    if (editConfig) {\n      isNewRow = editStore.insertList.indexOf(row) > -1;\n    }\n\n    rows.push(h('tr', {\n      class: ['vxe-body--row', {\n        'row--stripe': stripe && ($xetable.getVTRowIndex(row) + 1) % 2 === 0,\n        'is--new': isNewRow,\n        'row--new': isNewRow && (editOpts.showStatus || editOpts.showInsertStatus),\n        'row--radio': radioOpts.highlight && $xetable.selectRow === row,\n        'row--checked': checkboxOpts.highlight && $xetable.isCheckedByCheckboxRow(row)\n      }, rowClassName ? XEUtils.isFunction(rowClassName) ? rowClassName(params) : rowClassName : ''],\n      attrs: {\n        rowid: rowid\n      },\n      style: rowStyle ? XEUtils.isFunction(rowStyle) ? rowStyle(params) : rowStyle : null,\n      key: rowKey || treeConfig ? rowid : $rowIndex,\n      on: trOn\n    }, tableColumn.map(function (column, $columnIndex) {\n      return renderColumn(h, _vm, $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, tableColumn, tableData);\n    }))); // 如果行被展开了\n\n    if (expandColumn && rowExpandeds.length && rowExpandeds.indexOf(row) > -1) {\n      var cellStyle;\n\n      if (treeConfig) {\n        cellStyle = {\n          paddingLeft: \"\".concat(rowLevel * treeOpts.indent + 30, \"px\")\n        };\n      }\n\n      var showOverflow = expandColumn.showOverflow;\n      var hasEllipsis = XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow) ? allColumnOverflow : showOverflow;\n      var expandParams = {\n        $table: $xetable,\n        $seq: $seq,\n        seq: seq,\n        column: expandColumn,\n        fixed: fixedType,\n        type: renderType,\n        level: rowLevel,\n        row: row,\n        rowIndex: rowIndex,\n        $rowIndex: $rowIndex\n      };\n      rows.push(h('tr', {\n        class: 'vxe-body--expanded-row',\n        key: \"expand_\".concat(rowid),\n        style: rowStyle ? XEUtils.isFunction(rowStyle) ? rowStyle(expandParams) : rowStyle : null,\n        on: trOn\n      }, [h('td', {\n        class: ['vxe-body--expanded-column', {\n          'fixed--hidden': fixedType && !hasFixedColumn,\n          'col--ellipsis': hasEllipsis\n        }],\n        attrs: {\n          colspan: tableColumn.length\n        }\n      }, [h('div', {\n        class: 'vxe-body--expanded-cell',\n        style: cellStyle\n      }, [expandColumn.renderData(h, expandParams)])])]));\n    } // 如果是树形表格\n\n\n    if (treeConfig && treeExpandeds.length) {\n      var rowChildren = row[treeOpts.children];\n\n      if (rowChildren && rowChildren.length && treeExpandeds.indexOf(row) > -1) {\n        rows.push.apply(rows, _toConsumableArray(renderRows(h, _vm, $xetable, $seq ? \"\".concat($seq, \".\").concat(seq) : \"\".concat(seq), rowLevel + 1, fixedType, rowChildren, tableColumn)));\n      }\n    }\n  });\n  return rows;\n}\n/**\r\n * 同步滚动条\r\n */\n\n\nvar scrollProcessTimeout;\n\nfunction syncBodyScroll(scrollTop, elem1, elem2) {\n  if (elem1 || elem2) {\n    if (elem1) {\n      elem1.onscroll = null;\n      elem1.scrollTop = scrollTop;\n    }\n\n    if (elem2) {\n      elem2.onscroll = null;\n      elem2.scrollTop = scrollTop;\n    }\n\n    clearTimeout(scrollProcessTimeout);\n    scrollProcessTimeout = setTimeout(function () {\n      if (elem1) {\n        elem1.onscroll = elem1._onscroll;\n      }\n\n      if (elem2) {\n        elem2.onscroll = elem2._onscroll;\n      }\n    }, 300);\n  }\n}\n\nexport default {\n  name: 'VxeTableBody',\n  props: {\n    tableData: Array,\n    tableColumn: Array,\n    fixedColumn: Array,\n    size: String,\n    fixedType: String\n  },\n  data: function data() {\n    return {\n      wheelTime: null,\n      wheelYSize: 0,\n      wheelYInterval: 0,\n      wheelYTotal: 0\n    };\n  },\n  mounted: function mounted() {\n    var $xetable = this.$parent,\n        $el = this.$el,\n        $refs = this.$refs,\n        fixedType = this.fixedType;\n    var elemStore = $xetable.elemStore;\n    var prefix = \"\".concat(fixedType || 'main', \"-body-\");\n    elemStore[\"\".concat(prefix, \"wrapper\")] = $el;\n    elemStore[\"\".concat(prefix, \"table\")] = $refs.table;\n    elemStore[\"\".concat(prefix, \"colgroup\")] = $refs.colgroup;\n    elemStore[\"\".concat(prefix, \"list\")] = $refs.tbody;\n    elemStore[\"\".concat(prefix, \"xSpace\")] = $refs.xSpace;\n    elemStore[\"\".concat(prefix, \"ySpace\")] = $refs.ySpace;\n    elemStore[\"\".concat(prefix, \"emptyBlock\")] = $refs.emptyBlock;\n    this.$el.onscroll = this.scrollEvent;\n    this.$el._onscroll = this.scrollEvent;\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearTimeout(this.wheelTime);\n    this.$el._onscroll = null;\n    this.$el.onscroll = null;\n  },\n  render: function render(h) {\n    var _e = this._e,\n        $xetable = this.$parent,\n        fixedColumn = this.fixedColumn,\n        fixedType = this.fixedType;\n    var $scopedSlots = $xetable.$scopedSlots,\n        tId = $xetable.tId,\n        tableData = $xetable.tableData,\n        tableColumn = $xetable.tableColumn,\n        allColumnOverflow = $xetable.showOverflow,\n        keyboardConfig = $xetable.keyboardConfig,\n        keyboardOpts = $xetable.keyboardOpts,\n        mergeList = $xetable.mergeList,\n        spanMethod = $xetable.spanMethod,\n        scrollXLoad = $xetable.scrollXLoad,\n        scrollYLoad = $xetable.scrollYLoad,\n        isAllOverflow = $xetable.isAllOverflow,\n        emptyOpts = $xetable.emptyOpts,\n        mouseConfig = $xetable.mouseConfig,\n        mouseOpts = $xetable.mouseOpts,\n        sYOpts = $xetable.sYOpts; // 如果是使用优化模式\n\n    if (fixedType) {\n      if (!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts.isMerge) && (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow))) {\n        tableColumn = fixedColumn;\n      }\n    }\n\n    var emptyContent;\n\n    if ($scopedSlots.empty) {\n      emptyContent = $scopedSlots.empty.call(this, {\n        $table: $xetable\n      }, h);\n    } else {\n      var compConf = emptyOpts.name ? VXETable.renderer.get(emptyOpts.name) : null;\n      var renderEmpty = compConf ? compConf.renderEmpty : null;\n\n      if (renderEmpty) {\n        emptyContent = renderEmpty.call(this, h, emptyOpts, {\n          $table: $xetable\n        });\n      } else {\n        emptyContent = $xetable.emptyText || GlobalConfig.i18n('vxe.table.emptyText');\n      }\n    }\n\n    return h('div', {\n      class: ['vxe-table--body-wrapper', fixedType ? \"fixed-\".concat(fixedType, \"--wrapper\") : 'body--wrapper'],\n      attrs: {\n        xid: tId\n      },\n      on: scrollYLoad && sYOpts.mode === 'wheel' ? {\n        wheel: this.wheelEvent\n      } : {}\n    }, [fixedType ? _e() : h('div', {\n      class: 'vxe-body--x-space',\n      ref: 'xSpace'\n    }), h('div', {\n      class: 'vxe-body--y-space',\n      ref: 'ySpace'\n    }), h('table', {\n      class: 'vxe-table--body',\n      attrs: {\n        xid: tId,\n        cellspacing: 0,\n        cellpadding: 0,\n        border: 0\n      },\n      ref: 'table'\n    }, [\n    /**\r\n     * 列宽\r\n     */\n    h('colgroup', {\n      ref: 'colgroup'\n    }, tableColumn.map(function (column, $columnIndex) {\n      return h('col', {\n        attrs: {\n          name: column.id\n        },\n        key: $columnIndex\n      });\n    })),\n    /**\r\n     * 内容\r\n     */\n    h('tbody', {\n      ref: 'tbody'\n    }, renderRows(h, this, $xetable, '', 0, fixedType, tableData, tableColumn))]), h('div', {\n      class: 'vxe-table--checkbox-range'\n    }), mouseConfig && mouseOpts.area ? h('div', {\n      class: 'vxe-table--cell-area'\n    }, [h('span', {\n      class: 'vxe-table--cell-main-area'\n    }, mouseOpts.extension ? [h('span', {\n      class: 'vxe-table--cell-main-area-btn',\n      on: {\n        mousedown: function mousedown(evnt) {\n          $xetable.triggerCellExtendMousedownEvent(evnt, {\n            $table: $xetable,\n            fixed: fixedType,\n            type: renderType\n          });\n        }\n      }\n    })] : null), h('span', {\n      class: 'vxe-table--cell-copy-area'\n    }), h('span', {\n      class: 'vxe-table--cell-extend-area'\n    }), h('span', {\n      class: 'vxe-table--cell-multi-area'\n    }), h('span', {\n      class: 'vxe-table--cell-active-area'\n    })]) : null, !fixedType ? h('div', {\n      class: 'vxe-table--empty-block',\n      ref: 'emptyBlock'\n    }, [h('div', {\n      class: 'vxe-table--empty-content'\n    }, emptyContent)]) : null]);\n  },\n  methods: {\n    /**\r\n     * 滚动处理\r\n     * 如果存在列固定左侧，同步更新滚动状态\r\n     * 如果存在列固定右侧，同步更新滚动状态\r\n     */\n    scrollEvent: function scrollEvent(evnt) {\n      var scrollBodyElem = this.$el,\n          $xetable = this.$parent,\n          fixedType = this.fixedType;\n      var $refs = $xetable.$refs,\n          highlightHoverRow = $xetable.highlightHoverRow,\n          scrollXLoad = $xetable.scrollXLoad,\n          scrollYLoad = $xetable.scrollYLoad,\n          lastScrollTop = $xetable.lastScrollTop,\n          lastScrollLeft = $xetable.lastScrollLeft;\n      var tableHeader = $refs.tableHeader,\n          tableBody = $refs.tableBody,\n          leftBody = $refs.leftBody,\n          rightBody = $refs.rightBody,\n          tableFooter = $refs.tableFooter,\n          validTip = $refs.validTip;\n      var headerElem = tableHeader ? tableHeader.$el : null;\n      var footerElem = tableFooter ? tableFooter.$el : null;\n      var bodyElem = tableBody.$el;\n      var leftElem = leftBody ? leftBody.$el : null;\n      var rightElem = rightBody ? rightBody.$el : null;\n      var scrollTop = scrollBodyElem.scrollTop;\n      var scrollLeft = bodyElem.scrollLeft;\n      var isRollX = scrollLeft !== lastScrollLeft;\n      var isRollY = scrollTop !== lastScrollTop;\n      $xetable.lastScrollTop = scrollTop;\n      $xetable.lastScrollLeft = scrollLeft;\n      $xetable.lastScrollTime = Date.now();\n\n      if (highlightHoverRow) {\n        $xetable.clearHoverRow();\n      }\n\n      if (leftElem && fixedType === 'left') {\n        scrollTop = leftElem.scrollTop;\n        syncBodyScroll(scrollTop, bodyElem, rightElem);\n      } else if (rightElem && fixedType === 'right') {\n        scrollTop = rightElem.scrollTop;\n        syncBodyScroll(scrollTop, bodyElem, leftElem);\n      } else {\n        if (isRollX) {\n          if (headerElem) {\n            headerElem.scrollLeft = bodyElem.scrollLeft;\n          }\n\n          if (footerElem) {\n            footerElem.scrollLeft = bodyElem.scrollLeft;\n          }\n        }\n\n        if (leftElem || rightElem) {\n          $xetable.checkScrolling();\n\n          if (isRollY) {\n            syncBodyScroll(scrollTop, leftElem, rightElem);\n          }\n        }\n      }\n\n      if (scrollXLoad && isRollX) {\n        $xetable.triggerScrollXEvent(evnt);\n      }\n\n      if (scrollYLoad && isRollY) {\n        $xetable.triggerScrollYEvent(evnt);\n      }\n\n      if (isRollX && validTip && validTip.visible) {\n        validTip.updatePlacement();\n      }\n\n      $xetable.emitEvent('scroll', {\n        type: renderType,\n        fixed: fixedType,\n        scrollTop: scrollTop,\n        scrollLeft: scrollLeft,\n        isX: isRollX,\n        isY: isRollY\n      }, evnt);\n    },\n    handleWheel: function handleWheel(evnt, isTopWheel, deltaTop, isRollX, isRollY) {\n      var _this = this;\n\n      var $xetable = this.$parent;\n      var $refs = $xetable.$refs;\n      var tableBody = $refs.tableBody,\n          leftBody = $refs.leftBody,\n          rightBody = $refs.rightBody;\n      var bodyElem = tableBody.$el;\n      var leftElem = leftBody ? leftBody.$el : null;\n      var rightElem = rightBody ? rightBody.$el : null;\n      var remainSize = this.isPrevWheelTop === isTopWheel ? Math.max(0, this.wheelYSize - this.wheelYTotal) : 0;\n      this.isPrevWheelTop = isTopWheel;\n      this.wheelYSize = Math.abs(isTopWheel ? deltaTop - remainSize : deltaTop + remainSize);\n      this.wheelYInterval = 0;\n      this.wheelYTotal = 0;\n      clearTimeout(this.wheelTime);\n\n      var handleSmooth = function handleSmooth() {\n        var fixedType = _this.fixedType,\n            wheelYTotal = _this.wheelYTotal,\n            wheelYSize = _this.wheelYSize,\n            wheelYInterval = _this.wheelYInterval;\n\n        if (wheelYTotal < wheelYSize) {\n          wheelYInterval = Math.max(5, Math.floor(wheelYInterval * 1.5));\n          wheelYTotal = wheelYTotal + wheelYInterval;\n\n          if (wheelYTotal > wheelYSize) {\n            wheelYInterval = wheelYInterval - (wheelYTotal - wheelYSize);\n          }\n\n          var scrollTop = bodyElem.scrollTop,\n              clientHeight = bodyElem.clientHeight,\n              scrollHeight = bodyElem.scrollHeight;\n          var targerTop = scrollTop + wheelYInterval * (isTopWheel ? -1 : 1);\n          bodyElem.scrollTop = targerTop;\n\n          if (leftElem) {\n            leftElem.scrollTop = targerTop;\n          }\n\n          if (rightElem) {\n            rightElem.scrollTop = targerTop;\n          }\n\n          if (isTopWheel ? targerTop < scrollHeight - clientHeight : targerTop >= 0) {\n            _this.wheelTime = setTimeout(handleSmooth, 10);\n          }\n\n          _this.wheelYTotal = wheelYTotal;\n          _this.wheelYInterval = wheelYInterval;\n          $xetable.emitEvent('scroll', {\n            type: renderType,\n            fixed: fixedType,\n            scrollTop: bodyElem.scrollTop,\n            scrollLeft: bodyElem.scrollLeft,\n            isX: isRollX,\n            isY: isRollY\n          }, evnt);\n        }\n      };\n\n      handleSmooth();\n    },\n\n    /**\r\n     * 滚轮处理\r\n     */\n    wheelEvent: function wheelEvent(evnt) {\n      var deltaY = evnt.deltaY,\n          deltaX = evnt.deltaX;\n      var scrollBodyElem = this.$el,\n          $xetable = this.$parent;\n      var $refs = $xetable.$refs,\n          highlightHoverRow = $xetable.highlightHoverRow,\n          scrollYLoad = $xetable.scrollYLoad,\n          lastScrollTop = $xetable.lastScrollTop,\n          lastScrollLeft = $xetable.lastScrollLeft;\n      var tableBody = $refs.tableBody;\n      var bodyElem = tableBody.$el;\n      var deltaTop = browse.firefox ? deltaY * 40 : deltaY;\n      var deltaLeft = browse.firefox ? deltaX * 40 : deltaX;\n      var isTopWheel = deltaTop < 0; // 如果滚动位置已经是顶部或底部，则不需要触发\n\n      if (isTopWheel ? scrollBodyElem.scrollTop <= 0 : scrollBodyElem.scrollTop >= scrollBodyElem.scrollHeight - scrollBodyElem.clientHeight) {\n        return;\n      }\n\n      var scrollTop = scrollBodyElem.scrollTop + deltaTop;\n      var scrollLeft = bodyElem.scrollLeft + deltaLeft;\n      var isRollX = scrollLeft !== lastScrollLeft;\n      var isRollY = scrollTop !== lastScrollTop; // 用于鼠标纵向滚轮处理\n\n      if (isRollY) {\n        evnt.preventDefault();\n        $xetable.lastScrollTop = scrollTop;\n        $xetable.lastScrollLeft = scrollLeft;\n        $xetable.lastScrollTime = Date.now();\n\n        if (highlightHoverRow) {\n          $xetable.clearHoverRow();\n        }\n\n        this.handleWheel(evnt, isTopWheel, deltaTop, isRollX, isRollY);\n\n        if (scrollYLoad) {\n          $xetable.triggerScrollYEvent(evnt);\n        }\n      }\n    }\n  }\n};",null]}