{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\export\\src\\import-panel.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\export\\src\\import-panel.js","mtime":1635230120956},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport VxeModal from '../../modal/src/modal';\nimport VxeRadio from '../../radio/src/radio';\nimport { UtilTools } from '../../tools';\nexport default {\n  name: 'VxeImportPanel',\n  props: {\n    defaultOptions: Object,\n    storeData: Object\n  },\n  components: {\n    VxeModal,\n    VxeRadio\n  },\n\n  data() {\n    return {\n      loading: false\n    };\n  },\n\n  computed: {\n    vSize() {\n      return this.size || this.$parent.size || this.$parent.vSize;\n    },\n\n    selectName() {\n      return `${this.storeData.filename}.${this.storeData.type}`;\n    },\n\n    hasFile() {\n      return this.storeData.file && this.storeData.type;\n    },\n\n    parseTypeLabel() {\n      const storeData = this.storeData;\n      const type = storeData.type,\n            typeList = storeData.typeList;\n\n      if (type) {\n        const selectItem = XEUtils.find(typeList, item => type === item.value);\n        return selectItem ? GlobalConfig.i18n(selectItem.label) : '*.*';\n      }\n\n      return `*.${typeList.map(item => item.value).join(', *.')}`;\n    }\n\n  },\n\n  render(h) {\n    const hasFile = this.hasFile,\n          parseTypeLabel = this.parseTypeLabel,\n          defaultOptions = this.defaultOptions,\n          storeData = this.storeData,\n          selectName = this.selectName;\n    return h('vxe-modal', {\n      res: 'modal',\n      props: {\n        value: storeData.visible,\n        title: GlobalConfig.i18n('vxe.import.impTitle'),\n        width: 440,\n        mask: true,\n        lockView: true,\n        showFooter: false,\n        escClosable: true,\n        maskClosable: true,\n        loading: this.loading\n      },\n      on: {\n        input(value) {\n          storeData.visible = value;\n        },\n\n        show: this.showEvent\n      }\n    }, [h('div', {\n      class: 'vxe-export--panel'\n    }, [h('table', {\n      attrs: {\n        cellspacing: 0,\n        cellpadding: 0,\n        border: 0\n      }\n    }, [h('tbody', [h('tr', [h('td', GlobalConfig.i18n('vxe.import.impFile')), h('td', [hasFile ? h('div', {\n      class: 'vxe-import-selected--file',\n      attrs: {\n        title: selectName\n      }\n    }, [h('span', selectName), h('i', {\n      class: GlobalConfig.icon.INPUT_CLEAR,\n      on: {\n        click: this.clearFileEvent\n      }\n    })]) : h('button', {\n      ref: 'fileBtn',\n      class: 'vxe-import-select--file',\n      attrs: {\n        type: 'button'\n      },\n      on: {\n        click: this.selectFileEvent\n      }\n    }, GlobalConfig.i18n('vxe.import.impSelect'))])]), h('tr', [h('td', GlobalConfig.i18n('vxe.import.impType')), h('td', parseTypeLabel)]), h('tr', [h('td', GlobalConfig.i18n('vxe.import.impOpts')), h('td', [h('vxe-radio-group', {\n      props: {\n        value: defaultOptions.mode\n      },\n      on: {\n        input(value) {\n          defaultOptions.mode = value;\n        }\n\n      }\n    }, storeData.modeList.map(item => {\n      return h('vxe-radio', {\n        props: {\n          label: item.value\n        }\n      }, GlobalConfig.i18n(item.label));\n    }))])])])]), h('div', {\n      class: 'vxe-export--panel-btns'\n    }, [h('vxe-button', {\n      on: {\n        click: this.cancelEvent\n      }\n    }, GlobalConfig.i18n('vxe.import.impCancel')), h('vxe-button', {\n      props: {\n        status: 'primary',\n        disabled: !hasFile\n      },\n      on: {\n        click: this.importEvent\n      }\n    }, GlobalConfig.i18n('vxe.import.impConfirm'))])])]);\n  },\n\n  methods: {\n    clearFileEvent() {\n      Object.assign(this.storeData, {\n        filename: '',\n        sheetName: '',\n        type: ''\n      });\n    },\n\n    selectFileEvent() {\n      const $xetable = this.$parent;\n      $xetable.readFile(this.defaultOptions).then(params => {\n        const file = params.file;\n        Object.assign(this.storeData, UtilTools.parseFile(file), {\n          file\n        });\n      }).catch(e => e);\n    },\n\n    showEvent() {\n      this.$nextTick(() => {\n        const $refs = this.$refs;\n        const targetElem = $refs.fileBtn;\n\n        if (targetElem) {\n          targetElem.focus();\n        }\n      });\n    },\n\n    cancelEvent() {\n      this.storeData.visible = false;\n    },\n\n    importEvent() {\n      const $xetable = this.$parent;\n      this.loading = true;\n      $xetable.importByFile(this.storeData.file, Object.assign({}, $xetable.importOpts, this.defaultOptions)).then(() => {\n        this.loading = false;\n        this.storeData.visible = false;\n      }).catch(() => {\n        this.loading = false;\n      });\n    }\n\n  }\n};",null]}