{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\pager\\src\\pager.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\pager\\src\\pager.js","mtime":1635230121125},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport vSize from '../../mixins/size';\nexport default {\n  name: 'VxePager',\n  mixins: [vSize],\n  props: {\n    size: {\n      type: String,\n      default: () => GlobalConfig.pager.size || GlobalConfig.size\n    },\n    // 自定义布局\n    layouts: {\n      type: Array,\n      default: () => GlobalConfig.pager.layouts || ['PrevJump', 'PrevPage', 'Jump', 'PageCount', 'NextPage', 'NextJump', 'Sizes', 'Total']\n    },\n    // 当前页\n    currentPage: {\n      type: Number,\n      default: 1\n    },\n    // 加载中\n    loading: Boolean,\n    // 每页大小\n    pageSize: {\n      type: Number,\n      default: () => GlobalConfig.pager.pageSize || 10\n    },\n    // 总条数\n    total: {\n      type: Number,\n      default: 0\n    },\n    // 显示页码按钮的数量\n    pagerCount: {\n      type: Number,\n      default: () => GlobalConfig.pager.pagerCount || 7\n    },\n    // 每页大小选项列表\n    pageSizes: {\n      type: Array,\n      default: () => GlobalConfig.pager.pageSizes || [10, 15, 20, 50, 100]\n    },\n    // 列对其方式\n    align: {\n      type: String,\n      default: () => GlobalConfig.pager.align\n    },\n    // 带边框\n    border: {\n      type: Boolean,\n      default: () => GlobalConfig.pager.border\n    },\n    // 带背景颜色\n    background: {\n      type: Boolean,\n      default: () => GlobalConfig.pager.background\n    },\n    // 配套的样式\n    perfect: {\n      type: Boolean,\n      default: () => GlobalConfig.pager.perfect\n    },\n    // 当只有一页时隐藏\n    autoHidden: {\n      type: Boolean,\n      default: () => GlobalConfig.pager.autoHidden\n    },\n    transfer: {\n      type: Boolean,\n      default: () => GlobalConfig.pager.transfer\n    },\n    className: [String, Function],\n    // 自定义图标\n    iconPrevPage: String,\n    iconJumpPrev: String,\n    iconJumpNext: String,\n    iconNextPage: String,\n    iconJumpMore: String\n  },\n  inject: {\n    $xegrid: {\n      default: null\n    }\n  },\n  computed: {\n    isSizes() {\n      return this.layouts.some(name => name === 'Sizes');\n    },\n\n    pageCount() {\n      return this.getPageCount(this.total, this.pageSize);\n    },\n\n    numList() {\n      const len = this.pageCount > this.pagerCount ? this.pagerCount - 2 : this.pagerCount;\n      const rest = [];\n\n      for (let index = 0; index < len; index++) {\n        rest.push(index);\n      }\n\n      return rest;\n    },\n\n    offsetNumber() {\n      return Math.floor((this.pagerCount - 2) / 2);\n    },\n\n    sizeList() {\n      return this.pageSizes.map(item => {\n        if (XEUtils.isNumber(item)) {\n          return {\n            value: item,\n            label: `${GlobalConfig.i18n('vxe.pager.pagesize', [item])}`\n          };\n        }\n\n        return _objectSpread({\n          value: '',\n          label: ''\n        }, item);\n      });\n    }\n\n  },\n\n  render(h) {\n    const $scopedSlots = this.$scopedSlots,\n          $xegrid = this.$xegrid,\n          vSize = this.vSize,\n          align = this.align,\n          className = this.className;\n    const childNodes = [];\n\n    if ($scopedSlots.left) {\n      childNodes.push(h('span', {\n        class: 'vxe-pager--left-wrapper'\n      }, $scopedSlots.left.call(this, {\n        $grid: $xegrid\n      })));\n    }\n\n    this.layouts.forEach(name => {\n      childNodes.push(this[`render${name}`](h));\n    });\n\n    if ($scopedSlots.right) {\n      childNodes.push(h('span', {\n        class: 'vxe-pager--right-wrapper'\n      }, $scopedSlots.right.call(this, {\n        $grid: $xegrid\n      })));\n    }\n\n    return h('div', {\n      class: ['vxe-pager', className ? XEUtils.isFunction(className) ? className({\n        $pager: this\n      }) : className : '', {\n        [`size--${vSize}`]: vSize,\n        [`align--${align}`]: align,\n        'is--border': this.border,\n        'is--background': this.background,\n        'is--perfect': this.perfect,\n        'is--hidden': this.autoHidden && this.pageCount === 1,\n        'is--loading': this.loading\n      }]\n    }, [h('div', {\n      class: 'vxe-pager--wrapper'\n    }, childNodes)]);\n  },\n\n  methods: {\n    // 上一页\n    renderPrevPage(h) {\n      return h('button', {\n        class: ['vxe-pager--prev-btn', {\n          'is--disabled': this.currentPage <= 1\n        }],\n        attrs: {\n          title: GlobalConfig.i18n('vxe.pager.prevPage')\n        },\n        on: {\n          click: this.prevPage\n        }\n      }, [h('i', {\n        class: ['vxe-pager--btn-icon', this.iconPrevPage || GlobalConfig.icon.PAGER_PREV_PAGE]\n      })]);\n    },\n\n    // 向上翻页\n    renderPrevJump(h, tagName) {\n      return h(tagName || 'button', {\n        class: ['vxe-pager--jump-prev', {\n          'is--fixed': !tagName,\n          'is--disabled': this.currentPage <= 1\n        }],\n        attrs: {\n          title: GlobalConfig.i18n('vxe.pager.prevJump')\n        },\n        on: {\n          click: this.prevJump\n        }\n      }, [tagName ? h('i', {\n        class: ['vxe-pager--jump-more-icon', this.iconJumpMore || GlobalConfig.icon.PAGER_JUMP_MORE]\n      }) : null, h('i', {\n        class: ['vxe-pager--jump-icon', this.iconJumpPrev || GlobalConfig.icon.PAGER_JUMP_PREV]\n      })]);\n    },\n\n    // number\n    renderNumber(h) {\n      return h('span', {\n        class: 'vxe-pager--btn-wrapper'\n      }, this.renderPageBtn(h));\n    },\n\n    // jumpNumber\n    renderJumpNumber(h) {\n      return h('span', {\n        class: 'vxe-pager--btn-wrapper'\n      }, this.renderPageBtn(h, true));\n    },\n\n    // 向下翻页\n    renderNextJump(h, tagName) {\n      return h(tagName || 'button', {\n        class: ['vxe-pager--jump-next', {\n          'is--fixed': !tagName,\n          'is--disabled': this.currentPage >= this.pageCount\n        }],\n        attrs: {\n          title: GlobalConfig.i18n('vxe.pager.nextJump')\n        },\n        on: {\n          click: this.nextJump\n        }\n      }, [tagName ? h('i', {\n        class: ['vxe-pager--jump-more-icon', this.iconJumpMore || GlobalConfig.icon.PAGER_JUMP_MORE]\n      }) : null, h('i', {\n        class: ['vxe-pager--jump-icon', this.iconJumpNext || GlobalConfig.icon.PAGER_JUMP_NEXT]\n      })]);\n    },\n\n    // 下一页\n    renderNextPage(h) {\n      return h('button', {\n        class: ['vxe-pager--next-btn', {\n          'is--disabled': this.currentPage >= this.pageCount\n        }],\n        attrs: {\n          title: GlobalConfig.i18n('vxe.pager.nextPage')\n        },\n        on: {\n          click: this.nextPage\n        }\n      }, [h('i', {\n        class: ['vxe-pager--btn-icon', this.iconNextPage || GlobalConfig.icon.PAGER_NEXT_PAGE]\n      })]);\n    },\n\n    // sizes\n    renderSizes(h) {\n      return h('vxe-select', {\n        class: 'vxe-pager--sizes',\n        props: {\n          value: this.pageSize,\n          placement: 'top',\n          transfer: this.transfer,\n          options: this.sizeList\n        },\n        on: {\n          change: _ref => {\n            let value = _ref.value;\n            this.pageSizeEvent(value);\n          }\n        }\n      });\n    },\n\n    // FullJump\n    renderFullJump(h) {\n      return this.renderJump(h, true);\n    },\n\n    // Jump\n    renderJump(h, isFull) {\n      return h('span', {\n        class: 'vxe-pager--jump'\n      }, [isFull ? h('span', {\n        class: 'vxe-pager--goto-text'\n      }, GlobalConfig.i18n('vxe.pager.goto')) : null, h('input', {\n        class: 'vxe-pager--goto',\n        domProps: {\n          value: this.currentPage\n        },\n        attrs: {\n          type: 'text',\n          autocomplete: 'off'\n        },\n        on: {\n          keydown: this.jumpKeydownEvent,\n          blur: this.triggerJumpEvent\n        }\n      }), isFull ? h('span', {\n        class: 'vxe-pager--classifier-text'\n      }, GlobalConfig.i18n('vxe.pager.pageClassifier')) : null]);\n    },\n\n    // PageCount\n    renderPageCount(h) {\n      return h('span', {\n        class: 'vxe-pager--count'\n      }, [h('span', {\n        class: 'vxe-pager--separator'\n      }), h('span', this.pageCount)]);\n    },\n\n    // total\n    renderTotal(h) {\n      return h('span', {\n        class: 'vxe-pager--total'\n      }, GlobalConfig.i18n('vxe.pager.total', [this.total]));\n    },\n\n    // number\n    renderPageBtn(h, showJump) {\n      const numList = this.numList,\n            currentPage = this.currentPage,\n            pageCount = this.pageCount,\n            pagerCount = this.pagerCount,\n            offsetNumber = this.offsetNumber;\n      const nums = [];\n      const isOv = pageCount > pagerCount;\n      const isLt = isOv && currentPage > offsetNumber + 1;\n      const isGt = isOv && currentPage < pageCount - offsetNumber;\n      let startNumber = 1;\n\n      if (isOv) {\n        if (currentPage >= pageCount - offsetNumber) {\n          startNumber = Math.max(pageCount - numList.length + 1, 1);\n        } else {\n          startNumber = Math.max(currentPage - offsetNumber, 1);\n        }\n      }\n\n      if (showJump && isLt) {\n        nums.push(h('button', {\n          class: 'vxe-pager--num-btn',\n          on: {\n            click: () => this.jumpPage(1)\n          }\n        }, 1), this.renderPrevJump(h, 'span'));\n      }\n\n      numList.forEach((item, index) => {\n        const number = startNumber + index;\n\n        if (number <= pageCount) {\n          nums.push(h('button', {\n            class: ['vxe-pager--num-btn', {\n              'is--active': currentPage === number\n            }],\n            on: {\n              click: () => this.jumpPage(number)\n            },\n            key: number\n          }, number));\n        }\n      });\n\n      if (showJump && isGt) {\n        nums.push(this.renderNextJump(h, 'button'), h('button', {\n          class: 'vxe-pager--num-btn',\n          on: {\n            click: () => this.jumpPage(pageCount)\n          }\n        }, pageCount));\n      }\n\n      return nums;\n    },\n\n    getPageCount(total, size) {\n      return Math.max(Math.ceil(total / size), 1);\n    },\n\n    prevPage() {\n      const currentPage = this.currentPage,\n            pageCount = this.pageCount;\n\n      if (currentPage > 1) {\n        this.jumpPage(Math.min(pageCount, Math.max(currentPage - 1, 1)));\n      }\n    },\n\n    nextPage() {\n      const currentPage = this.currentPage,\n            pageCount = this.pageCount;\n\n      if (currentPage < pageCount) {\n        this.jumpPage(Math.min(pageCount, currentPage + 1));\n      }\n    },\n\n    prevJump() {\n      this.jumpPage(Math.max(this.currentPage - this.numList.length, 1));\n    },\n\n    nextJump() {\n      this.jumpPage(Math.min(this.currentPage + this.numList.length, this.pageCount));\n    },\n\n    jumpPage(currentPage) {\n      if (currentPage !== this.currentPage) {\n        this.$emit('update:currentPage', currentPage);\n        this.$emit('page-change', {\n          type: 'current',\n          pageSize: this.pageSize,\n          currentPage\n        });\n      }\n    },\n\n    pageSizeEvent(pageSize) {\n      this.changePageSize(pageSize);\n    },\n\n    changePageSize(pageSize) {\n      if (pageSize !== this.pageSize) {\n        this.$emit('update:pageSize', pageSize);\n        this.$emit('page-change', {\n          type: 'size',\n          pageSize,\n          currentPage: Math.min(this.currentPage, this.getPageCount(this.total, pageSize))\n        });\n      }\n    },\n\n    jumpKeydownEvent(evnt) {\n      if (evnt.keyCode === 13) {\n        this.triggerJumpEvent(evnt);\n      } else if (evnt.keyCode === 38) {\n        evnt.preventDefault();\n        this.nextPage();\n      } else if (evnt.keyCode === 40) {\n        evnt.preventDefault();\n        this.prevPage();\n      }\n    },\n\n    triggerJumpEvent(evnt) {\n      const value = XEUtils.toNumber(evnt.target.value);\n      const current = value <= 0 ? 1 : value >= this.pageCount ? this.pageCount : value;\n      evnt.target.value = current;\n      this.jumpPage(current);\n    }\n\n  }\n};",null]}