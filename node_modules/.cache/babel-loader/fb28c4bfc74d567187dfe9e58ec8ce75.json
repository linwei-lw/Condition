{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\button\\src\\button.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\button\\src\\button.js","mtime":1635230121871},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport vSize from \"../../mixins/size\";\nimport { UtilTools, DomTools, GlobalEvent } from \"../../tools\";\nexport default {\n  name: 'VxeButton',\n  mixins: [vSize],\n  props: {\n    type: String,\n    size: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.button.size || GlobalConfig.size;\n      }\n    },\n    name: [String, Number],\n    content: String,\n    placement: String,\n    status: String,\n    icon: String,\n    round: Boolean,\n    circle: Boolean,\n    disabled: Boolean,\n    loading: Boolean,\n    destroyOnClose: Boolean,\n    className: String,\n    transfer: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.button.transfer;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      inited: false,\n      showPanel: false,\n      animatVisible: false,\n      panelIndex: 0,\n      panelStyle: null,\n      panelPlacement: null\n    };\n  },\n  computed: {\n    isText: function isText() {\n      return this.type === 'text';\n    },\n    isFormBtn: function isFormBtn() {\n      return ['submit', 'reset', 'button'].indexOf(this.type) > -1;\n    },\n    btnType: function btnType() {\n      return this.isText ? this.type : 'button';\n    }\n  },\n  created: function created() {\n    GlobalEvent.on(this, 'mousewheel', this.handleGlobalMousewheelEvent);\n  },\n  beforeDestroy: function beforeDestroy() {\n    var panelElem = this.$refs.panel;\n\n    if (panelElem && panelElem.parentNode) {\n      panelElem.parentNode.removeChild(panelElem);\n    }\n  },\n  destroyed: function destroyed() {\n    GlobalEvent.off(this, 'mousewheel');\n  },\n  render: function render(h) {\n    var _ref,\n        _ref2,\n        _this = this,\n        _ref3,\n        _ref4;\n\n    var $scopedSlots = this.$scopedSlots,\n        $listeners = this.$listeners,\n        className = this.className,\n        inited = this.inited,\n        type = this.type,\n        destroyOnClose = this.destroyOnClose,\n        isFormBtn = this.isFormBtn,\n        status = this.status,\n        btnType = this.btnType,\n        vSize = this.vSize,\n        name = this.name,\n        disabled = this.disabled,\n        loading = this.loading,\n        showPanel = this.showPanel,\n        animatVisible = this.animatVisible,\n        panelPlacement = this.panelPlacement;\n    var downsSlot = $scopedSlots.dropdowns;\n    return downsSlot ? h('div', {\n      class: ['vxe-button--dropdown', className, (_ref = {}, _defineProperty(_ref, \"size--\".concat(vSize), vSize), _defineProperty(_ref, 'is--active', showPanel), _ref)]\n    }, [h('button', {\n      ref: 'xBtn',\n      class: ['vxe-button', \"type--\".concat(btnType), (_ref2 = {}, _defineProperty(_ref2, \"size--\".concat(vSize), vSize), _defineProperty(_ref2, \"skin--\".concat(status), status), _defineProperty(_ref2, 'is--round', this.round), _defineProperty(_ref2, 'is--circle', this.circle), _defineProperty(_ref2, 'is--disabled', disabled || loading), _defineProperty(_ref2, 'is--loading', loading), _ref2)],\n      attrs: {\n        name: name,\n        type: isFormBtn ? type : 'button',\n        disabled: disabled || loading\n      },\n      on: Object.assign({\n        mouseenter: this.mouseenterTargetEvent,\n        mouseleave: this.mouseleaveEvent\n      }, XEUtils.objectMap($listeners, function (cb, type) {\n        return function (evnt) {\n          return _this.$emit(type, {\n            $event: evnt\n          });\n        };\n      }))\n    }, this.renderContent(h).concat([h('i', {\n      class: \"vxe-button--dropdown-arrow \".concat(GlobalConfig.icon.BUTTON_DROPDOWN)\n    })])), h('div', {\n      ref: 'panel',\n      class: ['vxe-button--dropdown-panel', (_ref3 = {}, _defineProperty(_ref3, \"size--\".concat(vSize), vSize), _defineProperty(_ref3, 'animat--leave', animatVisible), _defineProperty(_ref3, 'animat--enter', showPanel), _ref3)],\n      attrs: {\n        placement: panelPlacement\n      },\n      style: this.panelStyle\n    }, inited ? [h('div', {\n      class: 'vxe-button--dropdown-wrapper',\n      on: {\n        mousedown: this.mousedownDropdownEvent,\n        click: this.clickDropdownEvent,\n        mouseenter: this.mouseenterEvent,\n        mouseleave: this.mouseleaveEvent\n      }\n    }, destroyOnClose && !showPanel ? [] : downsSlot.call(this, {}, h))] : null)]) : h('button', {\n      ref: 'xBtn',\n      class: ['vxe-button', \"type--\".concat(btnType), className, (_ref4 = {}, _defineProperty(_ref4, \"size--\".concat(vSize), vSize), _defineProperty(_ref4, \"skin--\".concat(status), status), _defineProperty(_ref4, 'is--round', this.round), _defineProperty(_ref4, 'is--circle', this.circle), _defineProperty(_ref4, 'is--disabled', disabled || loading), _defineProperty(_ref4, 'is--loading', loading), _ref4)],\n      attrs: {\n        name: name,\n        type: isFormBtn ? type : 'button',\n        disabled: disabled || loading\n      },\n      on: XEUtils.objectMap($listeners, function (cb, type) {\n        return function (evnt) {\n          return _this.$emit(type, {\n            $event: evnt\n          });\n        };\n      })\n    }, this.renderContent(h));\n  },\n  methods: {\n    renderContent: function renderContent(h) {\n      var $scopedSlots = this.$scopedSlots,\n          content = this.content,\n          icon = this.icon,\n          loading = this.loading;\n      var contents = [];\n\n      if (loading) {\n        contents.push(h('i', {\n          class: ['vxe-button--loading-icon', GlobalConfig.icon.BUTTON_LOADING]\n        }));\n      } else if (icon) {\n        contents.push(h('i', {\n          class: ['vxe-button--icon', icon]\n        }));\n      }\n\n      if ($scopedSlots.default) {\n        contents.push(h('span', {\n          class: 'vxe-button--content'\n        }, $scopedSlots.default.call(this)));\n      } else if (content) {\n        contents.push(h('span', {\n          class: 'vxe-button--content'\n        }, [UtilTools.getFuncText(content)]));\n      }\n\n      return contents;\n    },\n    handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent(evnt) {\n      if (this.showPanel && !DomTools.getEventTargetNode(evnt, this.$refs.panel).flag) {\n        this.closePanel();\n      }\n    },\n    updateZindex: function updateZindex() {\n      if (this.panelIndex < UtilTools.getLastZIndex()) {\n        this.panelIndex = UtilTools.nextZIndex();\n      }\n    },\n    mousedownDropdownEvent: function mousedownDropdownEvent(evnt) {\n      var isLeftBtn = evnt.button === 0;\n\n      if (isLeftBtn) {\n        evnt.stopPropagation();\n      }\n    },\n    clickDropdownEvent: function clickDropdownEvent(evnt) {\n      var _this2 = this;\n\n      var dropdownElem = evnt.currentTarget;\n      var panelElem = this.$refs.panel;\n\n      var _DomTools$getEventTar = DomTools.getEventTargetNode(evnt, dropdownElem, 'vxe-button'),\n          flag = _DomTools$getEventTar.flag,\n          targetElem = _DomTools$getEventTar.targetElem;\n\n      if (flag) {\n        if (panelElem) {\n          panelElem.dataset.active = 'N';\n        }\n\n        this.showPanel = false;\n        setTimeout(function () {\n          if (!panelElem || panelElem.dataset.active !== 'Y') {\n            _this2.animatVisible = false;\n          }\n        }, 350);\n        this.$emit('dropdown-click', {\n          name: targetElem.getAttribute('name'),\n          $event: evnt\n        });\n      }\n    },\n    mouseenterTargetEvent: function mouseenterTargetEvent() {\n      var _this3 = this;\n\n      var panelElem = this.$refs.panel;\n      panelElem.dataset.active = 'Y';\n\n      if (!this.inited) {\n        this.inited = true;\n\n        if (this.transfer) {\n          document.body.appendChild(panelElem);\n        }\n      }\n\n      this.showTime = setTimeout(function () {\n        if (panelElem.dataset.active === 'Y') {\n          _this3.mouseenterEvent();\n        } else {\n          _this3.animatVisible = false;\n        }\n      }, 250);\n    },\n    mouseenterEvent: function mouseenterEvent() {\n      var _this4 = this;\n\n      var panelElem = this.$refs.panel;\n      panelElem.dataset.active = 'Y';\n      this.animatVisible = true;\n      setTimeout(function () {\n        if (panelElem.dataset.active === 'Y') {\n          _this4.showPanel = true;\n\n          _this4.updateZindex();\n\n          _this4.updatePlacement();\n\n          setTimeout(function () {\n            if (_this4.showPanel) {\n              _this4.updatePlacement();\n            }\n          }, 50);\n        }\n      }, 20);\n    },\n    mouseleaveEvent: function mouseleaveEvent() {\n      this.closePanel();\n    },\n    closePanel: function closePanel() {\n      var _this5 = this;\n\n      var panelElem = this.$refs.panel;\n      clearTimeout(this.showTime);\n\n      if (panelElem) {\n        panelElem.dataset.active = 'N';\n        setTimeout(function () {\n          if (panelElem.dataset.active !== 'Y') {\n            _this5.showPanel = false;\n            setTimeout(function () {\n              if (panelElem.dataset.active !== 'Y') {\n                _this5.animatVisible = false;\n              }\n            }, 350);\n          }\n        }, 100);\n      } else {\n        this.animatVisible = false;\n        this.showPanel = false;\n      }\n    },\n    updatePlacement: function updatePlacement() {\n      var _this6 = this;\n\n      return this.$nextTick().then(function () {\n        var $refs = _this6.$refs,\n            transfer = _this6.transfer,\n            placement = _this6.placement,\n            panelIndex = _this6.panelIndex;\n        var targetElem = $refs.xBtn;\n        var panelElem = $refs.panel;\n\n        if (panelElem && targetElem) {\n          var targetHeight = targetElem.offsetHeight;\n          var targetWidth = targetElem.offsetWidth;\n          var panelHeight = panelElem.offsetHeight;\n          var panelWidth = panelElem.offsetWidth;\n          var marginSize = 5;\n          var panelStyle = {\n            zIndex: panelIndex\n          };\n\n          var _DomTools$getAbsolute = DomTools.getAbsolutePos(targetElem),\n              boundingTop = _DomTools$getAbsolute.boundingTop,\n              boundingLeft = _DomTools$getAbsolute.boundingLeft,\n              visibleHeight = _DomTools$getAbsolute.visibleHeight,\n              visibleWidth = _DomTools$getAbsolute.visibleWidth;\n\n          var panelPlacement = 'bottom';\n\n          if (transfer) {\n            var left = boundingLeft + targetWidth - panelWidth;\n            var top = boundingTop + targetHeight;\n\n            if (placement === 'top') {\n              panelPlacement = 'top';\n              top = boundingTop - panelHeight;\n            } else if (!placement) {\n              // 如果下面不够放，则向上\n              if (top + panelHeight + marginSize > visibleHeight) {\n                panelPlacement = 'top';\n                top = boundingTop - panelHeight;\n              } // 如果上面不够放，则向下（优先）\n\n\n              if (top < marginSize) {\n                panelPlacement = 'bottom';\n                top = boundingTop + targetHeight;\n              }\n            } // 如果溢出右边\n\n\n            if (left + panelWidth + marginSize > visibleWidth) {\n              left -= left + panelWidth + marginSize - visibleWidth;\n            } // 如果溢出左边\n\n\n            if (left < marginSize) {\n              left = marginSize;\n            }\n\n            Object.assign(panelStyle, {\n              left: \"\".concat(left, \"px\"),\n              right: 'auto',\n              top: \"\".concat(top, \"px\"),\n              minWidth: \"\".concat(targetWidth, \"px\")\n            });\n          } else {\n            if (placement === 'top') {\n              panelPlacement = 'top';\n              panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n            } else if (!placement) {\n              // 如果下面不够放，则向上\n              if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                // 如果上面不够放，则向下（优先）\n                if (boundingTop - targetHeight - panelHeight > marginSize) {\n                  panelPlacement = 'top';\n                  panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                }\n              }\n            }\n          }\n\n          _this6.panelStyle = panelStyle;\n          _this6.panelPlacement = panelPlacement;\n          return _this6.$nextTick();\n        }\n      });\n    },\n    focus: function focus() {\n      this.$el.focus();\n      return this.$nextTick();\n    },\n    blur: function blur() {\n      this.$el.blur();\n      return this.$nextTick();\n    }\n  }\n};",null]}