{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\tools\\src\\resize.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\tools\\src\\resize.js","mtime":1635230121388},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/web.dom.iterable\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\n/**\r\n * 监听 resize 事件\r\n * 如果项目中已使用了 resize-observer-polyfill，那么只需要将方法定义全局，该组件就会自动使用\r\n */\n\nlet resizeTimeout;\nconst eventStore = [];\nconst defaultInterval = 500;\n\nfunction eventHandle() {\n  if (eventStore.length) {\n    eventStore.forEach(item => {\n      item.tarList.forEach(observer => {\n        const target = observer.target,\n              width = observer.width,\n              heighe = observer.heighe;\n        const clientWidth = target.clientWidth;\n        const clientHeight = target.clientHeight;\n        const rWidth = clientWidth && width !== clientWidth;\n        const rHeight = clientHeight && heighe !== clientHeight;\n\n        if (rWidth || rHeight) {\n          observer.width = clientWidth;\n          observer.heighe = clientHeight;\n          setTimeout(item.callback);\n        }\n      });\n    });\n    /* eslint-disable @typescript-eslint/no-use-before-define */\n\n    eventListener();\n  }\n}\n\nfunction eventListener() {\n  clearTimeout(resizeTimeout);\n  resizeTimeout = setTimeout(eventHandle, GlobalConfig.resizeInterval || defaultInterval);\n}\n\nclass ResizeObserverPolyfill {\n  constructor(callback) {\n    this.tarList = [];\n    this.callback = callback;\n  }\n\n  observe(target) {\n    if (target) {\n      if (!this.tarList.some(observer => observer.target === target)) {\n        this.tarList.push({\n          target,\n          width: target.clientWidth,\n          heighe: target.clientHeight\n        });\n      }\n\n      if (!eventStore.length) {\n        eventListener();\n      }\n\n      if (!eventStore.some(item => item === this)) {\n        eventStore.push(this);\n      }\n    }\n  }\n\n  unobserve(target) {\n    XEUtils.remove(eventStore, item => item.tarList.some(observer => observer.target === target));\n  }\n\n  disconnect() {\n    XEUtils.remove(eventStore, item => item === this);\n  }\n\n}\n\nexport function createResizeEvent(callback) {\n  if (window.ResizeObserver) {\n    return new window.ResizeObserver(callback);\n  }\n\n  return new ResizeObserverPolyfill(callback);\n}",null]}