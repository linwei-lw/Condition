{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\pulldown\\src\\pulldown.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\pulldown\\src\\pulldown.js","mtime":1635230121448},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport vSize from \"../../mixins/size\";\nimport { UtilTools, DomTools, GlobalEvent } from \"../../tools\";\nexport default {\n  name: 'VxePulldown',\n  mixins: [vSize],\n  props: {\n    disabled: Boolean,\n    placement: String,\n    size: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.size;\n      }\n    },\n    destroyOnClose: Boolean,\n    transfer: Boolean\n  },\n  data: function data() {\n    return {\n      inited: false,\n      panelIndex: 0,\n      panelStyle: null,\n      panelPlacement: null,\n      currentValue: null,\n      visiblePanel: false,\n      animatVisible: false,\n      isActivated: false\n    };\n  },\n  created: function created() {\n    GlobalEvent.on(this, 'mousewheel', this.handleGlobalMousewheelEvent);\n    GlobalEvent.on(this, 'mousedown', this.handleGlobalMousedownEvent);\n    GlobalEvent.on(this, 'blur', this.handleGlobalBlurEvent);\n  },\n  beforeDestroy: function beforeDestroy() {\n    var panelElem = this.$refs.panel;\n\n    if (panelElem && panelElem.parentNode) {\n      panelElem.parentNode.removeChild(panelElem);\n    }\n  },\n  destroyed: function destroyed() {\n    GlobalEvent.off(this, 'mousewheel');\n    GlobalEvent.off(this, 'mousedown');\n    GlobalEvent.off(this, 'blur');\n  },\n  render: function render(h) {\n    var _ref, _ref2;\n\n    var $scopedSlots = this.$scopedSlots,\n        inited = this.inited,\n        vSize = this.vSize,\n        destroyOnClose = this.destroyOnClose,\n        transfer = this.transfer,\n        isActivated = this.isActivated,\n        disabled = this.disabled,\n        animatVisible = this.animatVisible,\n        visiblePanel = this.visiblePanel,\n        panelStyle = this.panelStyle,\n        panelPlacement = this.panelPlacement;\n    var defaultSlot = $scopedSlots.default;\n    var downSlot = $scopedSlots.dropdown;\n    return h('div', {\n      class: ['vxe-pulldown', (_ref = {}, _defineProperty(_ref, \"size--\".concat(vSize), vSize), _defineProperty(_ref, 'is--visivle', visiblePanel), _defineProperty(_ref, 'is--disabled', disabled), _defineProperty(_ref, 'is--active', isActivated), _ref)]\n    }, [h('div', {\n      ref: 'content',\n      class: 'vxe-pulldown--content'\n    }, defaultSlot ? defaultSlot.call(this, {\n      $pulldown: this\n    }, h) : []), h('div', {\n      ref: 'panel',\n      class: ['vxe-table--ignore-clear vxe-pulldown--panel', (_ref2 = {}, _defineProperty(_ref2, \"size--\".concat(vSize), vSize), _defineProperty(_ref2, 'is--transfer', transfer), _defineProperty(_ref2, 'animat--leave', animatVisible), _defineProperty(_ref2, 'animat--enter', visiblePanel), _ref2)],\n      attrs: {\n        placement: panelPlacement\n      },\n      style: panelStyle\n    }, downSlot ? [h('div', {\n      class: 'vxe-pulldown--wrapper'\n    }, !inited || destroyOnClose && !visiblePanel && !animatVisible ? [] : downSlot.call(this, {\n      $pulldown: this\n    }, h))] : [])]);\n  },\n  methods: {\n    handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent(evnt) {\n      var $refs = this.$refs,\n          disabled = this.disabled,\n          visiblePanel = this.visiblePanel;\n\n      if (!disabled) {\n        if (visiblePanel) {\n          if (DomTools.getEventTargetNode(evnt, $refs.panel).flag) {\n            this.updatePlacement();\n          } else {\n            this.hidePanel();\n            this.$emit('hide-panel', {\n              $event: evnt\n            });\n          }\n        }\n      }\n    },\n    handleGlobalMousedownEvent: function handleGlobalMousedownEvent(evnt) {\n      var $refs = this.$refs,\n          $el = this.$el,\n          disabled = this.disabled,\n          visiblePanel = this.visiblePanel;\n\n      if (!disabled) {\n        this.isActivated = DomTools.getEventTargetNode(evnt, $el).flag || DomTools.getEventTargetNode(evnt, $refs.panel).flag;\n\n        if (visiblePanel && !this.isActivated) {\n          this.hidePanel();\n          this.$emit('hide-panel', {\n            $event: evnt\n          });\n        }\n      }\n    },\n    handleGlobalBlurEvent: function handleGlobalBlurEvent(evnt) {\n      if (this.visiblePanel) {\n        this.isActivated = false;\n        this.hidePanel();\n        this.$emit('hide-panel', {\n          $event: evnt\n        });\n      }\n    },\n    updateZindex: function updateZindex() {\n      if (this.panelIndex < UtilTools.getLastZIndex()) {\n        this.panelIndex = UtilTools.nextZIndex();\n      }\n    },\n    isPanelVisible: function isPanelVisible() {\n      return this.visiblePanel;\n    },\n\n    /**\r\n     * 切换下拉面板\r\n     */\n    togglePanel: function togglePanel() {\n      if (this.visiblePanel) {\n        return this.hidePanel();\n      }\n\n      return this.showPanel();\n    },\n\n    /**\r\n     * 显示下拉面板\r\n     */\n    showPanel: function showPanel() {\n      var _this = this;\n\n      if (!this.inited) {\n        this.inited = true;\n\n        if (this.transfer) {\n          document.body.appendChild(this.$refs.panel);\n        }\n      }\n\n      return new Promise(function (resolve) {\n        if (!_this.disabled) {\n          clearTimeout(_this.hidePanelTimeout);\n          _this.isActivated = true;\n          _this.animatVisible = true;\n          setTimeout(function () {\n            _this.visiblePanel = true;\n\n            _this.updatePlacement();\n\n            setTimeout(function () {\n              resolve(_this.updatePlacement());\n            }, 40);\n          }, 10);\n\n          _this.updateZindex();\n        } else {\n          resolve(_this.$nextTick());\n        }\n      });\n    },\n\n    /**\r\n     * 隐藏下拉面板\r\n     */\n    hidePanel: function hidePanel() {\n      var _this2 = this;\n\n      this.visiblePanel = false;\n      return new Promise(function (resolve) {\n        if (_this2.animatVisible) {\n          _this2.hidePanelTimeout = setTimeout(function () {\n            _this2.animatVisible = false;\n            resolve(_this2.$nextTick());\n          }, 350);\n        } else {\n          resolve(_this2.$nextTick());\n        }\n      });\n    },\n\n    /**\r\n     * 手动更新位置\r\n     */\n    updatePlacement: function updatePlacement() {\n      var _this3 = this;\n\n      return this.$nextTick().then(function () {\n        var $refs = _this3.$refs,\n            transfer = _this3.transfer,\n            placement = _this3.placement,\n            panelIndex = _this3.panelIndex,\n            visiblePanel = _this3.visiblePanel;\n\n        if (visiblePanel) {\n          var panelElem = $refs.panel;\n          var targetElem = $refs.content;\n\n          if (panelElem && targetElem) {\n            var targetHeight = targetElem.offsetHeight;\n            var targetWidth = targetElem.offsetWidth;\n            var panelHeight = panelElem.offsetHeight;\n            var panelWidth = panelElem.offsetWidth;\n            var marginSize = 5;\n            var panelStyle = {\n              zIndex: panelIndex\n            };\n\n            var _DomTools$getAbsolute = DomTools.getAbsolutePos(targetElem),\n                boundingTop = _DomTools$getAbsolute.boundingTop,\n                boundingLeft = _DomTools$getAbsolute.boundingLeft,\n                visibleHeight = _DomTools$getAbsolute.visibleHeight,\n                visibleWidth = _DomTools$getAbsolute.visibleWidth;\n\n            var panelPlacement = 'bottom';\n\n            if (transfer) {\n              var left = boundingLeft;\n              var top = boundingTop + targetHeight;\n\n              if (placement === 'top') {\n                panelPlacement = 'top';\n                top = boundingTop - panelHeight;\n              } else if (!placement) {\n                // 如果下面不够放，则向上\n                if (top + panelHeight + marginSize > visibleHeight) {\n                  panelPlacement = 'top';\n                  top = boundingTop - panelHeight;\n                } // 如果上面不够放，则向下（优先）\n\n\n                if (top < marginSize) {\n                  panelPlacement = 'bottom';\n                  top = boundingTop + targetHeight;\n                }\n              } // 如果溢出右边\n\n\n              if (left + panelWidth + marginSize > visibleWidth) {\n                left -= left + panelWidth + marginSize - visibleWidth;\n              } // 如果溢出左边\n\n\n              if (left < marginSize) {\n                left = marginSize;\n              }\n\n              Object.assign(panelStyle, {\n                left: \"\".concat(left, \"px\"),\n                top: \"\".concat(top, \"px\"),\n                minWidth: \"\".concat(targetWidth, \"px\")\n              });\n            } else {\n              if (placement === 'top') {\n                panelPlacement = 'top';\n                panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n              } else if (!placement) {\n                // 如果下面不够放，则向上\n                if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                  // 如果上面不够放，则向下（优先）\n                  if (boundingTop - targetHeight - panelHeight > marginSize) {\n                    panelPlacement = 'top';\n                    panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                  }\n                }\n              }\n            }\n\n            _this3.panelStyle = panelStyle;\n            _this3.panelPlacement = panelPlacement;\n          }\n        }\n\n        return _this3.$nextTick();\n      });\n    }\n  }\n};",null]}