{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\table\\src\\cell.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\table\\src\\cell.js","mtime":1638515720260},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport VXETable from '../../v-x-e-table';\nimport { UtilTools, DomTools } from '../../tools';\nimport { eqEmptyValue, isEnableConf } from '../../tools/src/utils';\n\nfunction renderHelpIcon(h, params) {\n  const $table = params.$table,\n        column = params.column;\n  const titleHelp = column.titleHelp;\n  return titleHelp ? [h('i', {\n    class: ['vxe-cell-help-icon', titleHelp.icon || GlobalConfig.icon.TABLE_HELP],\n    on: {\n      mouseenter(evnt) {\n        $table.triggerHeaderHelpEvent(evnt, params);\n      },\n\n      mouseleave(evnt) {\n        $table.handleTargetLeaveEvent(evnt);\n      }\n\n    }\n  })] : [];\n}\n\nfunction renderTitleContent(h, params, content) {\n  const $table = params.$table,\n        column = params.column;\n  const type = column.type,\n        showHeaderOverflow = column.showHeaderOverflow;\n  const allColumnHeaderOverflow = $table.showHeaderOverflow,\n        tooltipOpts = $table.tooltipOpts;\n  const showAllTip = tooltipOpts.showAll || tooltipOpts.enabled;\n  const headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n  const showTitle = headOverflow === 'title';\n  const showTooltip = headOverflow === true || headOverflow === 'tooltip';\n  const ons = {};\n\n  if (showTitle || showTooltip || showAllTip) {\n    ons.mouseenter = evnt => {\n      if ($table._isResize) {\n        return;\n      }\n\n      if (showTitle) {\n        DomTools.updateCellTitle(evnt.currentTarget, column);\n      } else if (showTooltip || showAllTip) {\n        $table.triggerHeaderTooltipEvent(evnt, params);\n      }\n    };\n  }\n\n  if (showTooltip || showAllTip) {\n    ons.mouseleave = evnt => {\n      if ($table._isResize) {\n        return;\n      }\n\n      if (showTooltip || showAllTip) {\n        $table.handleTargetLeaveEvent(evnt);\n      }\n    };\n  }\n\n  return [type === 'html' && XEUtils.isString(content) ? h('span', {\n    class: 'vxe-cell--title',\n    domProps: {\n      innerHTML: content\n    },\n    on: ons\n  }) : h('span', {\n    class: 'vxe-cell--title',\n    on: ons\n  }, content)];\n}\n\nfunction getFooterContent(h, params) {\n  const $table = params.$table,\n        column = params.column,\n        _columnIndex = params._columnIndex,\n        items = params.items;\n  const slots = column.slots,\n        editRender = column.editRender,\n        cellRender = column.cellRender;\n  const renderOpts = editRender || cellRender;\n\n  if (slots && slots.footer) {\n    return $table.callSlot(slots.footer, params, h);\n  }\n\n  if (renderOpts) {\n    const compConf = VXETable.renderer.get(renderOpts.name);\n\n    if (compConf && compConf.renderFooter) {\n      return compConf.renderFooter.call($table, h, renderOpts, params);\n    }\n  }\n\n  return [UtilTools.formatText(items[_columnIndex], 1)];\n}\n\nfunction getDefaultCellLabel(params) {\n  const $table = params.$table,\n        row = params.row,\n        column = params.column;\n  return UtilTools.formatText($table.getCellLabel(row, column), 1);\n}\n\nexport const Cell = {\n  createColumn($xetable, _vm) {\n    const type = _vm.type,\n          sortable = _vm.sortable,\n          remoteSort = _vm.remoteSort,\n          filters = _vm.filters,\n          editRender = _vm.editRender,\n          treeNode = _vm.treeNode;\n    const editConfig = $xetable.editConfig,\n          editOpts = $xetable.editOpts,\n          checkboxOpts = $xetable.checkboxOpts;\n    const renMaps = {\n      renderHeader: this.renderDefaultHeader,\n      renderCell: treeNode ? this.renderTreeCell : this.renderDefaultCell,\n      renderFooter: this.renderDefaultFooter\n    };\n\n    switch (type) {\n      case 'index':\n      case 'seq':\n        renMaps.renderHeader = this.renderIndexHeader;\n        renMaps.renderCell = treeNode ? this.renderTreeIndexCell : this.renderIndexCell;\n        break;\n\n      case 'radio':\n        renMaps.renderHeader = this.renderRadioHeader;\n        renMaps.renderCell = treeNode ? this.renderTreeRadioCell : this.renderRadioCell;\n        break;\n\n      case 'checkbox':\n        renMaps.renderHeader = this.renderSelectionHeader;\n        renMaps.renderCell = checkboxOpts.checkField ? treeNode ? this.renderTreeSelectionCellByProp : this.renderSelectionCellByProp : treeNode ? this.renderTreeSelectionCell : this.renderSelectionCell;\n        break;\n\n      case 'expand':\n        renMaps.renderCell = this.renderExpandCell;\n        renMaps.renderData = this.renderExpandData;\n        break;\n\n      case 'html':\n        renMaps.renderCell = treeNode ? this.renderTreeHTMLCell : this.renderHTMLCell;\n\n        if (filters && (sortable || remoteSort)) {\n          renMaps.renderHeader = this.renderSortAndFilterHeader;\n        } else if (sortable || remoteSort) {\n          renMaps.renderHeader = this.renderSortHeader;\n        } else if (filters) {\n          renMaps.renderHeader = this.renderFilterHeader;\n        }\n\n        break;\n\n      default:\n        if (editConfig && editRender) {\n          renMaps.renderHeader = this.renderEditHeader;\n          renMaps.renderCell = editOpts.mode === 'cell' ? treeNode ? this.renderTreeCellEdit : this.renderCellEdit : treeNode ? this.renderTreeRowEdit : this.renderRowEdit;\n        } else if (filters && (sortable || remoteSort)) {\n          renMaps.renderHeader = this.renderSortAndFilterHeader;\n        } else if (sortable || remoteSort) {\n          renMaps.renderHeader = this.renderSortHeader;\n        } else if (filters) {\n          renMaps.renderHeader = this.renderFilterHeader;\n        }\n\n    }\n\n    return UtilTools.getColumnConfig($xetable, _vm, renMaps);\n  },\n\n  /**\r\n   * 单元格\r\n   */\n  renderHeaderTitle(h, params) {\n    const $table = params.$table,\n          column = params.column;\n    const slots = column.slots,\n          editRender = column.editRender,\n          cellRender = column.cellRender;\n    const renderOpts = editRender || cellRender;\n\n    if (slots && slots.header) {\n      return renderTitleContent(h, params, $table.callSlot(slots.header, params, h));\n    }\n\n    if (renderOpts) {\n      const compConf = VXETable.renderer.get(renderOpts.name);\n\n      if (compConf && compConf.renderHeader) {\n        return renderTitleContent(h, params, compConf.renderHeader.call($table, h, renderOpts, params));\n      }\n    }\n\n    return renderTitleContent(h, params, UtilTools.formatText(column.getTitle(), 1));\n  },\n\n  renderDefaultHeader(h, params) {\n    return renderHelpIcon(h, params).concat(Cell.renderHeaderTitle(h, params));\n  },\n\n  renderDefaultCell(h, params) {\n    const $table = params.$table,\n          row = params.row,\n          column = params.column;\n    const slots = column.slots,\n          editRender = column.editRender,\n          cellRender = column.cellRender;\n    const renderOpts = editRender || cellRender;\n\n    if (slots && slots.default) {\n      return $table.callSlot(slots.default, params, h);\n    }\n\n    if (renderOpts) {\n      const funName = editRender ? 'renderCell' : 'renderDefault';\n      const compConf = VXETable.renderer.get(renderOpts.name);\n\n      if (compConf && compConf[funName]) {\n        return compConf[funName].call($table, h, renderOpts, Object.assign({\n          $type: editRender ? 'edit' : 'cell'\n        }, params));\n      }\n    }\n\n    const cellValue = $table.getCellLabel(row, column);\n    const cellPlaceholder = editRender ? editRender.placeholder : '';\n    return [h('span', {\n      class: 'vxe-cell--label'\n    }, editRender && eqEmptyValue(cellValue) ? [// 如果设置占位符\n    h('span', {\n      class: 'vxe-cell--placeholder'\n    }, UtilTools.formatText(UtilTools.getFuncText(cellPlaceholder), 1))] : UtilTools.formatText(cellValue, 1))];\n  },\n\n  renderTreeCell(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderDefaultCell.call(this, h, params));\n  },\n\n  renderDefaultFooter(h, params) {\n    return [h('span', {\n      class: 'vxe-cell--item'\n    }, getFooterContent(h, params))];\n  },\n\n  /**\r\n   * 树节点\r\n   */\n  renderTreeIcon(h, params, cellVNodes) {\n    const $table = params.$table,\n          isHidden = params.isHidden;\n    const treeOpts = $table.treeOpts,\n          treeExpandeds = $table.treeExpandeds,\n          treeLazyLoadeds = $table.treeLazyLoadeds;\n    const row = params.row,\n          column = params.column,\n          level = params.level;\n    const slots = column.slots;\n    const children = treeOpts.children,\n          hasChild = treeOpts.hasChild,\n          indent = treeOpts.indent,\n          lazy = treeOpts.lazy,\n          trigger = treeOpts.trigger,\n          iconLoaded = treeOpts.iconLoaded,\n          showIcon = treeOpts.showIcon,\n          iconOpen = treeOpts.iconOpen,\n          iconClose = treeOpts.iconClose;\n    const rowChilds = row[children];\n    let hasLazyChilds = false;\n    let isAceived = false;\n    let isLazyLoaded = false;\n    const on = {};\n\n    if (slots && slots.icon) {\n      return $table.callSlot(slots.icon, params, h, cellVNodes);\n    }\n\n    if (!isHidden) {\n      isAceived = treeExpandeds.indexOf(row) > -1;\n\n      if (lazy) {\n        isLazyLoaded = treeLazyLoadeds.indexOf(row) > -1;\n        hasLazyChilds = row[hasChild];\n      }\n    }\n\n    if (!trigger || trigger === 'default') {\n      on.click = evnt => $table.triggerTreeExpandEvent(evnt, params);\n    }\n\n    return [h('div', {\n      class: ['vxe-cell--tree-node', {\n        'is--active': isAceived\n      }],\n      style: {\n        paddingLeft: `${level * indent}px`\n      }\n    }, [showIcon && (rowChilds && rowChilds.length || hasLazyChilds) ? [h('div', {\n      class: 'vxe-tree--btn-wrapper',\n      on\n    }, [h('i', {\n      class: ['vxe-tree--node-btn', isLazyLoaded ? iconLoaded || GlobalConfig.icon.TABLE_TREE_LOADED : isAceived ? iconOpen || GlobalConfig.icon.TABLE_TREE_OPEN : iconClose || GlobalConfig.icon.TABLE_TREE_CLOSE]\n    })])] : null, h('div', {\n      class: 'vxe-tree-cell'\n    }, cellVNodes)])];\n  },\n\n  /**\r\n   * 索引\r\n   */\n  renderIndexHeader(h, params) {\n    const $table = params.$table,\n          column = params.column;\n    const slots = column.slots;\n    return renderTitleContent(h, params, slots && slots.header ? $table.callSlot(slots.header, params, h) : UtilTools.formatText(column.getTitle(), 1));\n  },\n\n  renderIndexCell(h, params) {\n    const $table = params.$table,\n          column = params.column;\n    const seqOpts = $table.seqOpts;\n    const slots = column.slots;\n\n    if (slots && slots.default) {\n      return $table.callSlot(slots.default, params, h);\n    }\n\n    const $seq = params.$seq,\n          seq = params.seq,\n          level = params.level;\n    const seqMethod = seqOpts.seqMethod;\n    return [UtilTools.formatText(seqMethod ? seqMethod(params) : level ? `${$seq}.${seq}` : seqOpts.startIndex + seq, 1)];\n  },\n\n  renderTreeIndexCell(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderIndexCell(h, params));\n  },\n\n  /**\r\n   * 单选\r\n   */\n  renderRadioHeader(h, params) {\n    const $table = params.$table,\n          column = params.column;\n    const slots = column.slots;\n    const headerSlot = slots ? slots.header : null;\n    const titleSlot = slots ? slots.title : null;\n    return renderTitleContent(h, params, headerSlot ? $table.callSlot(headerSlot, params, h) : [h('span', {\n      class: 'vxe-radio--label'\n    }, titleSlot ? $table.callSlot(titleSlot, params, h) : UtilTools.formatText(column.getTitle(), 1))]);\n  },\n\n  renderRadioCell(h, params) {\n    const $table = params.$table,\n          column = params.column,\n          isHidden = params.isHidden;\n    const radioOpts = $table.radioOpts,\n          selectRow = $table.selectRow;\n    const slots = column.slots;\n    const labelField = radioOpts.labelField,\n          checkMethod = radioOpts.checkMethod;\n    const row = params.row;\n    const defaultSlot = slots ? slots.default : null;\n    const radioSlot = slots ? slots.radio : null;\n    const isChecked = row === selectRow;\n    let isDisabled = !!checkMethod;\n    let on;\n\n    if (!isHidden) {\n      on = {\n        click(evnt) {\n          if (!isDisabled) {\n            $table.triggerRadioRowEvent(evnt, params);\n          }\n        }\n\n      };\n\n      if (checkMethod) {\n        isDisabled = !checkMethod({\n          row\n        });\n      }\n    }\n\n    const radioParams = _objectSpread(_objectSpread({}, params), {}, {\n      checked: isChecked,\n      disabled: isDisabled\n    });\n\n    return radioSlot ? $table.callSlot(radioSlot, radioParams, h) : [h('span', {\n      class: ['vxe-cell--radio', {\n        'is--checked': isChecked,\n        'is--disabled': isDisabled\n      }],\n      on\n    }, [h('span', {\n      class: 'vxe-radio--icon vxe-radio--checked-icon'\n    }), h('span', {\n      class: 'vxe-radio--icon vxe-radio--unchecked-icon'\n    })].concat(defaultSlot || labelField ? [h('span', {\n      class: 'vxe-radio--label'\n    }, defaultSlot ? $table.callSlot(defaultSlot, radioParams, h) : XEUtils.get(row, labelField))] : []))];\n  },\n\n  renderTreeRadioCell(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderRadioCell(h, params));\n  },\n\n  /**\r\n   * 多选\r\n   */\n  renderSelectionHeader(h, params) {\n    const $table = params.$table,\n          column = params.column,\n          isHidden = params.isHidden;\n    const isAllCheckboxIndeterminate = $table.isIndeterminate,\n          isAllCheckboxDisabled = $table.isAllCheckboxDisabled;\n    const slots = column.slots;\n    const headerSlot = slots ? slots.header : null;\n    const titleSlot = slots ? slots.title : null;\n    const checkboxOpts = $table.checkboxOpts;\n    const headerTitle = column.getTitle();\n    let isChecked = false;\n    let on;\n\n    if (!isHidden) {\n      isChecked = isAllCheckboxDisabled ? false : $table.isAllSelected;\n      on = {\n        click(evnt) {\n          if (!isAllCheckboxDisabled) {\n            $table.triggerCheckAllEvent(evnt, !isChecked);\n          }\n        }\n\n      };\n    }\n\n    const checkboxParams = _objectSpread(_objectSpread({}, params), {}, {\n      checked: isChecked,\n      disabled: isAllCheckboxDisabled,\n      indeterminate: isAllCheckboxIndeterminate\n    });\n\n    if (headerSlot) {\n      return renderTitleContent(h, checkboxParams, $table.callSlot(headerSlot, checkboxParams, h));\n    }\n\n    if (checkboxOpts.checkStrictly ? !checkboxOpts.showHeader : checkboxOpts.showHeader === false) {\n      return renderTitleContent(h, checkboxParams, [h('span', {\n        class: 'vxe-checkbox--label'\n      }, titleSlot ? $table.callSlot(titleSlot, checkboxParams, h) : headerTitle)]);\n    }\n\n    return renderTitleContent(h, checkboxParams, [h('span', {\n      class: ['vxe-cell--checkbox', {\n        'is--checked': isChecked,\n        'is--disabled': isAllCheckboxDisabled,\n        'is--indeterminate': isAllCheckboxIndeterminate\n      }],\n      attrs: {\n        title: GlobalConfig.i18n('vxe.table.allTitle')\n      },\n      on\n    }, [h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--checked-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    })].concat(titleSlot || headerTitle ? [h('span', {\n      class: 'vxe-checkbox--label'\n    }, titleSlot ? $table.callSlot(titleSlot, checkboxParams, h) : headerTitle)] : []))]);\n  },\n\n  renderSelectionCell(h, params) {\n    const $table = params.$table,\n          row = params.row,\n          column = params.column,\n          isHidden = params.isHidden;\n    const treeConfig = $table.treeConfig,\n          treeIndeterminates = $table.treeIndeterminates;\n    const _$table$checkboxOpts = $table.checkboxOpts,\n          labelField = _$table$checkboxOpts.labelField,\n          checkMethod = _$table$checkboxOpts.checkMethod;\n    const slots = column.slots;\n    const defaultSlot = slots ? slots.default : null;\n    const checkboxSlot = slots ? slots.checkbox : null;\n    let indeterminate = false;\n    let isChecked = false;\n    let isDisabled = !!checkMethod;\n    let on;\n\n    if (!isHidden) {\n      isChecked = $table.selection.indexOf(row) > -1;\n      on = {\n        click(evnt) {\n          if (!isDisabled) {\n            $table.triggerCheckRowEvent(evnt, params, !isChecked);\n          }\n        }\n\n      };\n\n      if (checkMethod) {\n        isDisabled = !checkMethod({\n          row\n        });\n      }\n\n      if (treeConfig) {\n        indeterminate = treeIndeterminates.indexOf(row) > -1;\n      }\n    }\n\n    const checkboxParams = _objectSpread(_objectSpread({}, params), {}, {\n      checked: isChecked,\n      disabled: isDisabled,\n      indeterminate\n    });\n\n    return checkboxSlot ? $table.callSlot(checkboxSlot, checkboxParams, h) : [h('span', {\n      class: ['vxe-cell--checkbox', {\n        'is--checked': isChecked,\n        'is--disabled': isDisabled,\n        'is--indeterminate': indeterminate\n      }],\n      on\n    }, [h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--checked-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    })].concat(defaultSlot || labelField ? [h('span', {\n      class: 'vxe-checkbox--label'\n    }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams, h) : XEUtils.get(row, labelField))] : []))];\n  },\n\n  renderTreeSelectionCell(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderSelectionCell(h, params));\n  },\n\n  renderSelectionCellByProp(h, params) {\n    const $table = params.$table,\n          row = params.row,\n          column = params.column,\n          isHidden = params.isHidden;\n    const treeConfig = $table.treeConfig,\n          treeIndeterminates = $table.treeIndeterminates;\n    const _$table$checkboxOpts2 = $table.checkboxOpts,\n          labelField = _$table$checkboxOpts2.labelField,\n          property = _$table$checkboxOpts2.checkField,\n          halfField = _$table$checkboxOpts2.halfField,\n          checkMethod = _$table$checkboxOpts2.checkMethod;\n    const slots = column.slots;\n    const defaultSlot = slots ? slots.default : null;\n    const checkboxSlot = slots ? slots.checkbox : null;\n    let indeterminate = false;\n    let isChecked = false;\n    let isDisabled = !!checkMethod;\n    let on;\n\n    if (!isHidden) {\n      isChecked = XEUtils.get(row, property);\n      on = {\n        click(evnt) {\n          if (!isDisabled) {\n            $table.triggerCheckRowEvent(evnt, params, !isChecked);\n          }\n        }\n\n      };\n\n      if (checkMethod) {\n        isDisabled = !checkMethod({\n          row\n        });\n      }\n\n      if (treeConfig) {\n        indeterminate = treeIndeterminates.indexOf(row) > -1;\n      }\n    }\n\n    const checkboxParams = _objectSpread(_objectSpread({}, params), {}, {\n      checked: isChecked,\n      disabled: isDisabled,\n      indeterminate\n    });\n\n    return checkboxSlot ? $table.callSlot(checkboxSlot, checkboxParams, h) : [h('span', {\n      class: ['vxe-cell--checkbox', {\n        'is--checked': isChecked,\n        'is--disabled': isDisabled,\n        'is--indeterminate': halfField && !isChecked ? row[halfField] : indeterminate\n      }],\n      on\n    }, [h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--checked-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    })].concat(defaultSlot || labelField ? [h('span', {\n      class: 'vxe-checkbox--label'\n    }, defaultSlot ? $table.callSlot(defaultSlot, checkboxParams, h) : XEUtils.get(row, labelField))] : []))];\n  },\n\n  renderTreeSelectionCellByProp(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderSelectionCellByProp(h, params));\n  },\n\n  /**\r\n   * 展开行\r\n   */\n  renderExpandCell(h, params) {\n    const $table = params.$table,\n          isHidden = params.isHidden,\n          row = params.row,\n          column = params.column;\n    const expandOpts = $table.expandOpts,\n          rowExpandeds = $table.rowExpandeds,\n          expandLazyLoadeds = $table.expandLazyLoadeds;\n    const lazy = expandOpts.lazy,\n          labelField = expandOpts.labelField,\n          iconLoaded = expandOpts.iconLoaded,\n          showIcon = expandOpts.showIcon,\n          iconOpen = expandOpts.iconOpen,\n          iconClose = expandOpts.iconClose,\n          visibleMethod = expandOpts.visibleMethod;\n    const slots = column.slots;\n    const defaultSlot = slots ? slots.default : null;\n    let isAceived = false;\n    let isLazyLoaded = false;\n\n    if (slots && slots.icon) {\n      return $table.callSlot(slots.icon, params, h);\n    }\n\n    if (!isHidden) {\n      isAceived = rowExpandeds.indexOf(params.row) > -1;\n\n      if (lazy) {\n        isLazyLoaded = expandLazyLoadeds.indexOf(row) > -1;\n      }\n    }\n\n    return [showIcon && (!visibleMethod || visibleMethod(params)) ? h('span', {\n      class: ['vxe-table--expanded', {\n        'is--active': isAceived\n      }],\n      on: {\n        click(evnt) {\n          $table.triggerRowExpandEvent(evnt, params);\n        }\n\n      }\n    }, [h('i', {\n      class: ['vxe-table--expand-btn', isLazyLoaded ? iconLoaded || GlobalConfig.icon.TABLE_EXPAND_LOADED : isAceived ? iconOpen || GlobalConfig.icon.TABLE_EXPAND_OPEN : iconClose || GlobalConfig.icon.TABLE_EXPAND_CLOSE]\n    })]) : null, defaultSlot || labelField ? h('span', {\n      class: 'vxe-table--expand-label'\n    }, defaultSlot ? $table.callSlot(defaultSlot, params, h) : XEUtils.get(row, labelField)) : null];\n  },\n\n  renderExpandData(h, params) {\n    const $table = params.$table,\n          column = params.column;\n    const slots = column.slots,\n          contentRender = column.contentRender;\n\n    if (slots && slots.content) {\n      return $table.callSlot(slots.content, params, h);\n    }\n\n    if (contentRender) {\n      const compConf = VXETable.renderer.get(contentRender.name);\n\n      if (compConf && compConf.renderExpand) {\n        return compConf.renderExpand.call($table, h, contentRender, params);\n      }\n    }\n\n    return [];\n  },\n\n  /**\r\n   * HTML 标签\r\n   */\n  renderHTMLCell(h, params) {\n    const $table = params.$table,\n          column = params.column;\n    const slots = column.slots;\n\n    if (slots && slots.default) {\n      return $table.callSlot(slots.default, params, h);\n    }\n\n    return [h('span', {\n      class: 'vxe-cell--html',\n      domProps: {\n        innerHTML: getDefaultCellLabel(params)\n      }\n    })];\n  },\n\n  renderTreeHTMLCell(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderHTMLCell(h, params));\n  },\n\n  /**\r\n   * 排序和筛选\r\n   */\n  renderSortAndFilterHeader(h, params) {\n    return Cell.renderDefaultHeader(h, params).concat(Cell.renderSortIcon(h, params)).concat(Cell.renderFilterIcon(h, params));\n  },\n\n  /**\r\n   * 排序\r\n   */\n  renderSortHeader(h, params) {\n    return Cell.renderDefaultHeader(h, params).concat(Cell.renderSortIcon(h, params));\n  },\n\n  renderSortIcon(h, params) {\n    const $table = params.$table,\n          column = params.column;\n    const _$table$sortOpts = $table.sortOpts,\n          showIcon = _$table$sortOpts.showIcon,\n          iconAsc = _$table$sortOpts.iconAsc,\n          iconDesc = _$table$sortOpts.iconDesc;\n    return showIcon ? [h('span', {\n      class: 'vxe-cell--sort',\n      style: {\n        visibility: column.order === 'asc' || column.order === 'desc' ? 'visible' : '' //加\n\n      }\n    }, [h('i', {\n      class: ['vxe-sort--asc-btn', iconAsc || GlobalConfig.icon.TABLE_SORT_ASC, {\n        'sort--active': column.order === 'asc'\n      }],\n      attrs: {\n        title: GlobalConfig.i18n('vxe.table.sortAsc')\n      },\n      on: {\n        click(evnt) {\n          $table.triggerSortEvent(evnt, column, 'asc');\n        }\n\n      }\n    }), h('i', {\n      class: ['vxe-sort--desc-btn', iconDesc || GlobalConfig.icon.TABLE_SORT_DESC, {\n        'sort--active': column.order === 'desc'\n      }],\n      attrs: {\n        title: GlobalConfig.i18n('vxe.table.sortDesc')\n      },\n      on: {\n        click(evnt) {\n          $table.triggerSortEvent(evnt, column, 'desc');\n        }\n\n      }\n    })])] : [];\n  },\n\n  /**\r\n   * 筛选\r\n   */\n  renderFilterHeader(h, params) {\n    return Cell.renderDefaultHeader(h, params).concat(Cell.renderFilterIcon(h, params));\n  },\n\n  renderFilterIcon(h, params) {\n    const $table = params.$table,\n          column = params.column,\n          hasFilter = params.hasFilter;\n    const filterStore = $table.filterStore,\n          filterOpts = $table.filterOpts;\n    const showIcon = filterOpts.showIcon,\n          iconNone = filterOpts.iconNone,\n          iconMatch = filterOpts.iconMatch;\n    return showIcon ? [h('span', {\n      class: ['vxe-cell--filter', {\n        'is--active': filterStore.visible && filterStore.column === column\n      }]\n    }, [h('i', {\n      class: ['vxe-filter--btn', hasFilter ? iconMatch || GlobalConfig.icon.TABLE_FILTER_MATCH : iconNone || GlobalConfig.icon.TABLE_FILTER_NONE],\n      attrs: {\n        title: GlobalConfig.i18n('vxe.table.filter')\n      },\n      on: {\n        click(evnt) {\n          $table.triggerFilterEvent(evnt, params.column, params);\n        }\n\n      }\n    })])] : [];\n  },\n\n  /**\r\n   * 可编辑\r\n   */\n  renderEditHeader(h, params) {\n    const $table = params.$table,\n          column = params.column;\n    const editRules = $table.editRules,\n          editOpts = $table.editOpts;\n    const sortable = column.sortable,\n          remoteSort = column.remoteSort,\n          filters = column.filters,\n          editRender = column.editRender;\n    let isRequired;\n\n    if (editRules) {\n      const columnRules = XEUtils.get(editRules, params.column.property);\n\n      if (columnRules) {\n        isRequired = columnRules.some(rule => rule.required);\n      }\n    }\n\n    return [isRequired && editOpts.showAsterisk ? h('i', {\n      class: 'vxe-cell--required-icon'\n    }) : null, isEnableConf(editRender) && editOpts.showIcon ? h('i', {\n      class: ['vxe-cell--edit-icon', editOpts.icon || GlobalConfig.icon.TABLE_EDIT]\n    }) : null].concat(Cell.renderDefaultHeader(h, params)).concat(sortable || remoteSort ? Cell.renderSortIcon(h, params) : []).concat(filters ? Cell.renderFilterIcon(h, params) : []);\n  },\n\n  // 行格编辑模式\n  renderRowEdit(h, params) {\n    const $table = params.$table,\n          column = params.column;\n    const editRender = column.editRender;\n    const actived = $table.editStore.actived;\n    return Cell.runRenderer(h, params, this, isEnableConf(editRender) && actived && actived.row === params.row);\n  },\n\n  renderTreeRowEdit(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderRowEdit(h, params));\n  },\n\n  // 单元格编辑模式\n  renderCellEdit(h, params) {\n    const $table = params.$table,\n          column = params.column;\n    const editRender = column.editRender;\n    const actived = $table.editStore.actived;\n    return Cell.runRenderer(h, params, this, isEnableConf(editRender) && actived && actived.row === params.row && actived.column === params.column);\n  },\n\n  renderTreeCellEdit(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderCellEdit(h, params));\n  },\n\n  runRenderer(h, params, _vm, isEdit) {\n    const $table = params.$table,\n          column = params.column;\n    const slots = column.slots,\n          editRender = column.editRender,\n          formatter = column.formatter;\n    const compConf = VXETable.renderer.get(editRender.name);\n\n    if (isEdit) {\n      if (slots && slots.edit) {\n        return $table.callSlot(slots.edit, params, h);\n      }\n\n      return compConf && compConf.renderEdit ? compConf.renderEdit.call($table, h, editRender, Object.assign({\n        $type: 'edit'\n      }, params)) : [];\n    }\n\n    if (slots && slots.default) {\n      return $table.callSlot(slots.default, params, h);\n    }\n\n    if (formatter) {\n      return [h('span', {\n        class: 'vxe-cell--label'\n      }, [getDefaultCellLabel(params)])];\n    }\n\n    return Cell.renderDefaultCell.call(_vm, h, params);\n  }\n\n};\nexport default Cell;",null]}