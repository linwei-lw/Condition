{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\common\\cache\\CacheTeamCar.js","dependencies":[{"path":"D:\\cdRule\\src\\common\\cache\\CacheTeamCar.js","mtime":1677637705683},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport { arrayToMap, arrayRemoveItem, arrayFindItem, compare } from '@/common/util/Arrays.js';\nimport { arrayToTree } from '@/common/util/Trees.js';\nimport { objIsEmpty, objCopyTo } from '@/common/util/Objects.js';\nimport Message from '@/common/Message.js';\nimport storage from \"./Storage.js\";\nimport { onTeamUpdate as video_onTeamUpdate, onCarAdd as video_onCarAdd, onCarUpdate as video_onCarUpdate, onCarDelete as video_onCarDelete, beforeRefresh as video_beforeRefresh, afterRefresh as video_afterRefresh } from \"./CacheVideo.js\";\nimport { onTmnCarRecycle, onTmnAddOrUpdate, getTmnById, getTmns } from \"./CacheTmn.js\";\nimport { getDrivers } from \"./CacheDriver.js\";\nimport { getBbAttrByCarId } from \"./CacheCarAttr.js\";\nimport { getCarTypeMap } from \"./CacheCmn.js\";\nvar TEAMS = {\n  list: null,\n  map: null,\n  tree: null,\n  root: null\n};\nvar CARS = {\n  list: null,\n  map: null,\n  tree: null,\n  root: null,\n  fav_root: null,\n  group_root: null\n};\nvar CRD_FIELDS = new Set(['onoffLineTime', 'prevDayTotalMile', 'totalAcc', 'prevDayTotalAcc', 'photoTime', 'driverSign', 'signTime', 'runStopTime', 'addr', 'alarmTypeIds', 'tmnPort', 'multTmnStates']);\nexport { CRD_FIELDS }; //车辆树显示的配置=======================================================================================================\n\nvar _carTreeCfg = null,\n    _default = {\n  sortField: 'plate',\n  filters: {\n    state: false,\n    color: null,\n    type: null\n  },\n  showTeamCount: {\n    line: true\n  },\n  showCarField: {\n    'g24': true\n  },\n  search: {\n    carFields: ['plate', 'carname', 'tmnKey', 'simCard'],\n    teamFields: ['teamname']\n  }\n};\nexport function getCarTreeCfg() {\n  var flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (!flag && !_carTreeCfg && $_cache.userCfg.CAR_TREE_SET) {\n    _carTreeCfg = JSON.parse($_cache.userCfg.CAR_TREE_SET);\n  }\n\n  _carTreeCfg = _carTreeCfg || storage.get('car_tree_cfgs', _default);\n  _carTreeCfg.showCarField && Array.isArray(_carTreeCfg.showCarField) && (_carTreeCfg.showCarField = _default.showCarField);\n  !_carTreeCfg.filters && (storage.remove('car_tree_cfgs'), _carTreeCfg = null);\n\n  if (_carTreeCfg && !_carTreeCfg.filterFun) {\n    setFilterFun();\n  }\n\n  return _carTreeCfg || getCarTreeCfg(true);\n}\nexport function saveCarTreeCfg() {\n  var ff = _carTreeCfg.filterFun;\n  delete _carTreeCfg.filterFun;\n  var cfg = JSON.stringify(_carTreeCfg);\n  window.$_main.http.post(\"/sys/user?updateUserCfgs\", {\n    CAR_TREE_SET: cfg\n  }).then(function (result) {\n    storage.remove('car_tree_cfgs');\n    $_cache.userCfg.CAR_TREE_SET = cfg;\n    ;\n  });\n  _carTreeCfg.filterFun = ff;\n}\nexport function setFilterFun() {\n  var filters = _carTreeCfg.filters;\n\n  if (!filters.state && !filters.color && !filters.type && (!filters.sshy || filters.sshy.length == 0) && (!filters.sspt || filters.sspt.length == 0)) {\n    _carTreeCfg.hasFilter = false;\n    return _carTreeCfg.filterFun = function () {\n      return false;\n    };\n  }\n\n  var isStateFun = null,\n      isColorFun = null,\n      isTypeFun = null,\n      isSshyFun = null,\n      isSsptFun = null;\n\n  if (filters.state) {\n    isStateFun = State['is' + filters.state.charAt(0).toUpperCase() + filters.state.substr(1)];\n  }\n\n  if (filters.color) {\n    isColorFun = function isColorFun(color) {\n      return color == filters.color;\n    };\n  }\n\n  if (filters.type) {\n    var types = new Set(),\n        type = getCarTypeMap()[filters.type];\n    types.add(type.id + '|' + type.name);\n    type.children && type.children.forEach(function (o) {\n      return types.add(o.id + '|' + o.name);\n    });\n\n    isTypeFun = function isTypeFun(carId) {\n      var attr = getBbAttrByCarId(carId);\n      return attr && attr.typeNo && types.has(attr.typeNo);\n    };\n  }\n\n  if (filters.sshy && filters.sshy.length > 0) {\n    isSshyFun = function isSshyFun(sshy) {\n      return filters.sshy.includes(sshy);\n    };\n  }\n\n  if (filters.sspt && filters.sspt.length > 0) {\n    isSsptFun = function isSsptFun(sspt) {\n      return filters.sspt.includes(sspt);\n    };\n  }\n\n  _carTreeCfg.hasFilter = true;\n\n  _carTreeCfg.filterFun = function (node) {\n    if (node.plate) {\n      if (!!(isStateFun && !isStateFun(node.state) || isColorFun && !isColorFun(node.plateColor) || isTypeFun && !isTypeFun(node.id))) return true;\n\n      if (isSshyFun || isSsptFun) {\n        var _bxts = node.bxts ? typeof node.bxts == 'string' ? JSON.parse(node.bxts) : node.bxts : null;\n\n        return !!(isSshyFun && !isSshyFun(_bxts && _bxts.sshy) || isSsptFun && !isSsptFun(_bxts && _bxts.sspt));\n      }\n\n      return false;\n    }\n\n    return node != CARS.root && node.f_carNum == 0;\n  };\n} //和车辆树变化相关=======================================================================================================\n\nvar ALL_CAR_TREES = {},\n    ALL_TEAM_TREES = {};\nexport function onCarTreeAdd(treeId, tree) {\n  objIsEmpty(ALL_CAR_TREES) && Message.addListener(Message.STATE, setCarStates);\n  ALL_CAR_TREES[treeId] = tree;\n}\nexport function onCarTreeRemove(treeId) {\n  delete ALL_CAR_TREES[treeId];\n  objIsEmpty(ALL_CAR_TREES) && Message.removeListener(Message.STATE, setCarStates);\n}\nexport function onTeamTreeAdd(treeId, tree) {\n  ALL_TEAM_TREES[treeId] = tree;\n}\nexport function onTeamTreeRemove(treeId) {\n  delete ALL_TEAM_TREES[treeId];\n}\nexport function updateCarStts(carId, stts) {\n  var isTreeIcon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var car = CARS.map[carId];\n  car.stts = stts;\n\n  if (isTreeIcon == true) {\n    for (var treeId in ALL_CAR_TREES) {\n      ALL_CAR_TREES[treeId]._tree.updateNodeIcon(car);\n    }\n  }\n}\nexport function setCarStates(result) {\n  if (!CARS.list) return;\n  var car,\n      state,\n      online,\n      move,\n      stop,\n      alarm,\n      invalid,\n      accon,\n      accoff,\n      counts = {},\n      count;\n\n  for (var carId in result) {\n    car = CARS.map[carId];\n    state = result[carId];\n    if (!car || car.state === state) continue;\n    online = 0;\n    move = 0;\n    stop = 0;\n    alarm = 0;\n    invalid = 0;\n    accon = 0;\n    accoff = 0;\n    State.isOnline(car.state) && online--;\n    State.isOnline(state) && online++;\n    State.isMove(car.state) && move--;\n    State.isMove(state) && move++;\n    State.isStop(car.state) && stop--;\n    State.isStop(state) && stop++;\n    State.isAlarm(car.state) && alarm--;\n    State.isAlarm(state) && alarm++;\n    State.isInvalid(car.state) && invalid--;\n    State.isInvalid(state) && invalid++;\n    State.isAccOn(car.state) && accon--;\n    State.isAccOn(state) && accon++;\n    State.isAccOff(car.state) && accoff--;\n    State.isAccOff(state) && accoff++;\n    count = counts[car.teamId];\n    !count && (count = counts[car.teamId] = {\n      online: 0,\n      move: 0,\n      stop: 0,\n      alarm: 0,\n      invalid: 0,\n      accon: 0,\n      accoff: 0,\n      team: car.parent\n    });\n    online && (count.online += online);\n    move && (count.move += move);\n    stop && (count.stop += stop);\n    alarm && (count.alarm += alarm);\n    invalid && (count.invalid += invalid);\n    accon && (count.accon += accon);\n    accoff && (count.accoff += accoff);\n    car.state = state;\n\n    for (var treeId in ALL_CAR_TREES) {\n      try {\n        ALL_CAR_TREES[treeId]._tree.updateNode(car);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  var teams = {},\n      team,\n      flag;\n\n  for (var teamId in counts) {\n    count = counts[teamId];\n    team = count.team;\n\n    while (team) {\n      flag = false;\n      count.online && (team.online += count.online, flag = true);\n      count.move && (team.move += count.move, flag = true);\n      count.stop && (team.stop += count.stop, flag = true);\n      count.alarm && (team.alarm += count.alarm), flag = true;\n      count.invalid && (team.invalid += count.invalid, flag = true);\n      count.accon && (team.accon += count.accon, flag = true);\n      count.accoff && (team.accoff += count.accoff, flag = true);\n      if (!flag) break;\n      teams[team.id] = team;\n      team = team.parent;\n    }\n  }\n\n  for (var _teamId in teams) {\n    team = teams[_teamId];\n\n    for (var _treeId in ALL_CAR_TREES) {\n      try {\n        ALL_CAR_TREES[_treeId]._tree.updateNodeName(team);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n\n  recountFilter();\n}\n\nfunction recountFilter() {\n  if (!_carTreeCfg.hasFilter || objIsEmpty(ALL_CAR_TREES)) return;\n  countFilter();\n  var state = !!_carTreeCfg.filters.state;\n\n  for (var treeId in ALL_CAR_TREES) {\n    updateOrHideFilterTree(state ? ALL_CAR_TREES[treeId]._tree.updateNodeHide : null, ALL_CAR_TREES[treeId]._tree.updateNodeName, treeId, [CARS.root]);\n  }\n}\n\nfunction updateOrHideFilterTree(updateNodeHide, updateNodeName, treeId, nodes) {\n  for (var i = 0, len = nodes.length, node; i < len; i++) {\n    node = nodes[i];\n    if (!node[treeId].dom) continue;\n    updateNodeHide && updateNodeHide(node);\n    if (node.plate) continue;\n    updateNodeName(node);\n\n    if (node.children && node.children.length > 0) {\n      updateOrHideFilterTree(updateNodeHide, updateNodeName, treeId, node.children);\n    }\n  }\n} //==================================================================================================================\n\n\nvar loading = false;\n/**\r\n * 获取整个车队\r\n * @param {Function} [callback] 回调函数 ({list, map, tree, root})\r\n */\n\nexport function getTeams(callback) {\n  if (TEAMS.list) {\n    return callback ? callback(TEAMS) : TEAMS;\n  }\n\n  return getCars(callback ? function () {\n    return callback(TEAMS);\n  } : null)[1];\n}\nexport function getTeamById(teamId) {\n  !TEAMS.list && getTeams();\n  return teamId == '0' ? TEAMS.root : TEAMS.map[teamId];\n}\n/**\r\n * 获取整个车辆\r\n * @param {Function} [callback] 回调函数 ({list, map, tree, root})\r\n */\n\nexport function getCars(callback) {\n  if (CARS.list) {\n    return callback ? callback(CARS, TEAMS) : [CARS, TEAMS];\n  }\n\n  if (callback && loading) {\n    //正在请求后台加载中，等1秒再试试\n    return setTimeout(function () {\n      return getCars(callback);\n    }, 1000);\n  }\n\n  loading = true;\n\n  var fun = function fun(result) {\n    loading = false;\n    initTeamCar(result[0], result[1], result[2]);\n    return callback ? callback(CARS, TEAMS) : [CARS, TEAMS];\n  };\n\n  var params = {\n    sortField: getCarTreeCfg().sortField\n  };\n  return callback ? window.$_main.http.get('h5/mgr/car?getTeamsAndCars', params).then(fun) : fun(window.$_main.http.syncGet('h5/mgr/car?getTeamsAndCars', params));\n}\n/**\r\n * 获取车辆欠费信息\r\n * @param callback\r\n */\n\nvar CHARGE = {\n  list: null,\n  map: null\n};\nexport function getCharge(callback) {\n  if (CHARGE.list) {\n    return callback ? callback(CHARGE) : CHARGE;\n  }\n\n  var fun = function fun(result) {\n    CHARGE.list = result || [];\n    CHARGE.map = arrayToMap(CHARGE.list, \"carId\");\n    return callback ? callback(CHARGE) : CHARGE;\n  };\n\n  var getcar = getCars()[0].list || [],\n      carIds = [];\n  getcar.forEach(function (el) {\n    carIds.push(el.id);\n  });\n  return callback ? window.$_main.http.post('h5/mgr/charge?getCharges', carIds).then(fun) : fun(window.$_main.http.syncPost('h5/mgr/charge?getCharges', carIds));\n}\nexport function getCarById(carId) {\n  !CARS.list && getCars();\n  return CARS.map[carId];\n}\nexport function carLoading() {\n  return loading;\n}\nexport function getFavRoot() {\n  var sort = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  if (CARS.fav_root) return sort ? sortFavChildren() : CARS.fav_root;\n  CARS.fav_root = {\n    id: '0',\n    name: CARS.root.name\n  };\n  return setFavChildren(sort);\n}\nexport function getFavCount() {\n  var count = 0;\n  getFavRoot(false).children.forEach(function (node) {\n    return count += node.plate ? 1 : node.carNum;\n  });\n  return count;\n}\nexport function setFavCount() {\n  var count = getFavCount();\n\n  for (var treeId in ALL_CAR_TREES) {\n    ALL_CAR_TREES[treeId].favCount = count;\n  }\n}\nexport function resetFavTree() {\n  if (!CARS.fav_root) return;\n  setFavChildren();\n\n  for (var treeId in ALL_CAR_TREES) {\n    var tree = ALL_CAR_TREES[treeId];\n    tree.model == 'fav' && tree.getTree().reset(CARS.fav_root);\n  }\n}\n\nfunction setFavChildren() {\n  var sort = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var children = [];\n  CARS.fav_root.children = children;\n  var ids = window.$_cache.userCfg.FAV_CAR;\n  ids && JSON.parse(ids).forEach(function (id) {\n    id = id.indexOf('t') == 0 ? TEAMS.map[id.substr(1)] : CARS.map[id];\n    id && children.push(id);\n  });\n  return sort ? sortFavChildren() : CARS.fav_root;\n}\n\nfunction sortFavChildren() {\n  var field = getCarTreeCfg().sortField;\n  CARS.fav_root.children.sort(function (a, b) {\n    if (a.plate && b.plate) {\n      var a1 = State.isOnline(a.state),\n          b1 = State.isOnline(b.state);\n      return a1 && b1 ? compare(a, b, field) : a1 ? -1 : 1;\n    }\n\n    return a.plate ? 1 : b.plate ? -1 : compare(a, b, 'name');\n  });\n  return CARS.fav_root;\n}\n\nexport function getGroupRoot() {\n  if (CARS.group_root) return CARS.group_root;\n  CARS.group_root = {\n    id: '0',\n    name: CARS.root.name\n  };\n  return setGroupChildren();\n}\nexport function resetGroupTree() {\n  if (!CARS.group_root) return;\n  setGroupChildren();\n\n  for (var treeId in ALL_CAR_TREES) {\n    var tree = ALL_CAR_TREES[treeId];\n    tree.model == 'group' && tree.getTree().reset(CARS.group_root);\n  }\n}\n\nfunction setGroupChildren() {\n  CARS.group_root.children = [];\n  var groups = window.$_cache.userCfg.GROUP_CAR; //[name|carId,carId...]\n\n  groups && (groups = JSON.parse(groups));\n\n  if (groups) {\n    var field = getCarTreeCfg().sortField,\n        i = 1;\n    groups.forEach(function (str) {\n      str = str.split('|');\n      var item = {\n        id: 'g' + i++,\n        name: str[0],\n        children: []\n      };\n      str = str[1].split(',');\n\n      for (var _i = 0, car; _i < str.length; _i++) {\n        car = CARS.map[str[_i]];\n        car && item.children.push(car);\n      }\n\n      item.children.sort(function (a, b) {\n        return compare(a, b, field);\n      });\n      CARS.group_root.children.push(item);\n    });\n    CARS.group_root.children.sort(function (a, b) {\n      return compare(a, b, 'name');\n    });\n  }\n\n  return CARS.group_root;\n} // ======================================================================================================================\n\n/**\r\n * 重新加载整个车队/车辆/终端/司机数据，刷新车队树、车辆树、视频树、收藏树\r\n * @param {Function} [fail] 失败回调函数\r\n */\n\n\nexport function refreshAll(fail) {\n  beforeRefresh();\n  window.$_main.http.get('/mgr/car?reloadTeamsAndCars', {\n    sortField: getCarTreeCfg().sortField\n  }).then(function (result) {\n    getTmns(function () {\n      getDrivers(function () {\n        initTeamCar(result[0], result[1], result[2]);\n        if (CARS.fav_root) setFavChildren();\n        if (CARS.group_root) setGroupChildren();\n        afterRefresh();\n      }, true);\n    }, true);\n  }).catch(function (e) {\n    refreshs = null;\n    fail && fail(e);\n  });\n}\nvar refreshs;\n\nfunction beforeRefresh() {\n  refreshs = {};\n  var states;\n\n  for (var treeId in ALL_CAR_TREES) {\n    refreshs[treeId] = states = {\n      cars: {},\n      teams: {},\n      groups: {}\n    };\n    get_refresh_state(treeId, CARS.root, CARS.list, states.cars);\n    CARS.group_root && get_refresh_state(treeId, CARS.group_root, CARS.group_root.children, states.groups);\n    get_refresh_state(treeId, TEAMS.root, TEAMS.list, states.teams);\n    states.selected = ALL_CAR_TREES[treeId]._tree.getSelectedNodes();\n  }\n\n  for (var _treeId2 in ALL_TEAM_TREES) {\n    refreshs[_treeId2] = states = {};\n    get_refresh_state(_treeId2, TEAMS.root, TEAMS.list, states);\n    states.selected = ALL_TEAM_TREES[_treeId2]._tree.getSelectedNodes();\n  }\n\n  video_beforeRefresh(refreshs);\n}\n\nfunction afterRefresh() {\n  var tree, states;\n\n  for (var treeId in ALL_CAR_TREES) {\n    states = refreshs[treeId];\n    set_refresh_state(treeId, CARS.root, CARS.list, states.cars);\n    set_refresh_state(treeId, TEAMS.root, TEAMS.list, states.teams);\n    CARS.group_root && set_refresh_state(treeId, CARS.group_root, CARS.group_root.children, states.groups);\n    tree = ALL_CAR_TREES[treeId];\n    var root = tree.model == 'fav' ? CARS.fav_root : tree.model == 'group' ? CARS.group_root : CARS.root;\n    root[treeId].open = true;\n\n    tree._tree.reset(root, true);\n\n    tree.afterRefresh(root, reset_refresh_select(tree, states.selected));\n  }\n\n  for (var _treeId3 in ALL_TEAM_TREES) {\n    states = refreshs[_treeId3];\n    set_refresh_state(_treeId3, TEAMS.root, TEAMS.list, states);\n    tree = ALL_TEAM_TREES[_treeId3];\n    TEAMS.root[_treeId3].open = true;\n\n    tree._tree.reset(TEAMS.root, true);\n\n    tree.afterRefresh(reset_refresh_select(tree, states.selected));\n  }\n\n  video_afterRefresh(refreshs);\n  refreshs = null;\n}\n\nfunction get_refresh_state(treeId, root, list, states) {\n  if (!(states[root.id] = root[treeId])) return;\n\n  for (var i = 0, len = list.length, node, setting; i < len; i++) {\n    node = list[i];\n    setting = node[treeId];\n    setting && (delete setting.dom, states[node.id] = setting);\n  }\n}\n\nfunction set_refresh_state(treeId, root, list, states) {\n  if (!(root[treeId] = states[root.id])) return;\n\n  for (var i = 0, len = list.length, node, setting; i < len; i++) {\n    node = list[i];\n    setting = states[node.id];\n    setting && (node[treeId] = setting);\n  }\n}\n\nfunction reset_refresh_select(tree, selected) {\n  if (selected.length == 0) return null;\n  selected = selected[0];\n\n  if (selected.plate) {\n    selected = CARS.map[selected.id];\n  } else if (selected != TEAMS.root && selected != CARS.fav_root && selected != CARS.group_root) {\n    selected = TEAMS.map[selected.id] || (CARS.group_root ? arrayFindItem(CARS.group_root.children, 'id', selected.id) : null);\n  }\n\n  selected && tree._tree.selectNode(selected);\n  return selected;\n} // ======================================================================================================================\n\n/**\r\n * 根据车队，获取车队下面的所有车辆\r\n * @param {Object} team 车队对象\r\n * @returns {Array} 车辆列表\r\n */\n\n\nexport function getCarsByTeam(team) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (team && team == CARS.root) return CARS.list;\n  result = result || [];\n  if (!team || !team.children) return result;\n\n  for (var i = 0, len = team.children.length, item; i < len; i++) {\n    item = team.children[i];\n    item.plate ? result.push(item) : getCarsByTeam(item, result);\n  }\n\n  return result;\n}\nexport function getTotalCount(callback) {\n  !CARS.root || objIsEmpty(ALL_CAR_TREES) ? window.$_main.http.get('h5/mnt/state?count', null, true).then(callback).catch(function (error) {\n    return callback();\n  }) : callback({\n    total: CARS.root.carNum,\n    online: CARS.root.online,\n    alarm: CARS.root.alarm\n  });\n}\nexport function initTeamCar(teams, cars, states) {\n  initTeams(teams);\n  initCars(cars, states);\n  initCarTree();\n  countRootNum();\n  countState();\n}\n\nfunction initTeams(teams) {\n  // 车队树中，孩子的属性是teams\n  TEAMS.list = teams || [];\n  TEAMS.map = arrayToMap(TEAMS.list, \"id\");\n  var name = $_cache.userCfg.TEAM_ROOT ? $_L.get($_cache.userCfg.TEAM_ROOT) : $_L.get('车辆监控中心');\n  if (TEAMS.root) for (var key in TEAMS.root) {\n    delete TEAMS.root[key];\n  }\n  TEAMS.root = Object.assign(TEAMS.root || {}, {\n    name: name,\n    id: '0',\n    carNum: 0,\n    banNum: 0,\n    delNum: 0,\n    videoNum: 0\n  });\n  TEAMS.tree = arrayToTree(TEAMS.list, \"id\", \"pid\", TEAMS.map, TEAMS.root, 'teams');\n}\n\nfunction initCars(cars, states) {\n  CARS.list = cars || [];\n  CARS.map = arrayToMap(CARS.list, \"id\");\n  CARS.root = TEAMS.root;\n  var car;\n\n  for (var carId in states) {\n    car = CARS.map[carId];\n    car && (car.state = states[carId]);\n  }\n}\n\nfunction initCarTree() {\n  // 车辆树中，孩子的属性是children\n  // 将teams字段，复制到children字段重建车队树\n  CARS.root.teams && (CARS.root.children = _toConsumableArray(CARS.root.teams));\n\n  for (var i = 0, len = TEAMS.list.length, team; i < len; i++) {\n    team = TEAMS.list[i];\n    team.teams && (team.children = _toConsumableArray(team.teams));\n  }\n\n  CARS.tree = arrayToTree(CARS.list, \"id\", \"teamId\", TEAMS.map, CARS.root, \"children\");\n}\n/**\r\n * 将车辆数统计到车队根结点\r\n */\n\n\nfunction countRootNum() {\n  CARS.tree.forEach(function (item) {\n    if (item.plate) {\n      CARS.root.carNum += 1;\n      item.videos && (CARS.root.videoNum += 1);\n    } else {\n      CARS.root.carNum += item.carNum;\n      CARS.root.banNum += item.banNum;\n      CARS.root.delNum += item.delNum;\n      CARS.root.videoNum += item.videoNum;\n    }\n  });\n}\n/**\r\n * 统计车辆状态数量\r\n */\n\n\nexport function countState() {\n  var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var teams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var cars = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null; // if (!getCarTreeCfg().showTeamCount) return;\n\n  root = root || CARS.root;\n  teams = teams || TEAMS.list;\n  cars = cars || CARS.list; //归零\n\n  root.online = root.move = root.stop = root.alarm = root.invalid = root.accon = root.accoff = 0;\n\n  for (var i = 0, len = teams.length, team; i < len; i++) {\n    team = teams[i];\n    team.online = team.move = team.stop = team.alarm = team.invalid = team.accon = team.accoff = 0;\n  } //计算车辆上级车队\n\n\n  var chgs = {},\n      o = {},\n      p,\n      t = false;\n\n  for (var _i2 = 0, _len = cars.length, car; _i2 < _len; _i2++) {\n    car = cars[_i2];\n    p = car.parent;\n\n    if (State.isOnline(car.state)) {\n      p.online++;\n      t = true;\n      State.isMove(car.state) && p.move++;\n      State.isStop(car.state) && p.stop++;\n      State.isInvalid(car.state) && p.invalid++;\n      State.isAccOn(car.state) && p.accon++;\n      State.isAccOff(car.state) && p.accoff++;\n    }\n\n    State.isAlarm(car.state) && (t = true) && p.alarm++;\n    t && (chgs[p.id] = p) && (t = false);\n  }\n\n  for (var tid in chgs) {\n    t = chgs[tid];\n    o[tid] = {\n      online: t.online,\n      move: t.move,\n      stop: t.stop,\n      alarm: t.alarm,\n      invalid: t.invalid,\n      accon: t.accon,\n      accoff: t.accoff\n    };\n  } //计算整个车队\n\n\n  for (var _tid in chgs) {\n    t = chgs[_tid];\n    p = t;\n    t = o[t.id];\n\n    while (p = p.parent) {\n      p.online += t.online;\n      p.move += t.move;\n      p.stop += t.stop;\n      p.alarm += t.alarm;\n      p.invalid += t.invalid;\n      p.accon += t.accon;\n      p.accoff += t.accoff;\n    }\n  }\n}\n/**\r\n * 统计车辆状态数量\r\n */\n\nexport function countFilter() {\n  var root = CARS.root,\n      teams = TEAMS.list,\n      cars = CARS.list;\n  if (!root) return; //归零\n\n  root.f_carNum = root.f_online = root.f_move = root.f_stop = root.f_alarm = root.f_invalid = root.f_accon = root.f_accoff = 0;\n\n  for (var i = 0, len = teams.length, team; i < len; i++) {\n    team = teams[i];\n    team.f_carNum = team.f_online = team.f_move = team.f_stop = team.f_alarm = team.f_invalid = team.f_accon = team.f_accoff = 0;\n  } //计算车辆上级车队\n\n\n  var chgs = {},\n      o = {},\n      p,\n      t = false;\n\n  for (var _i3 = 0, _len2 = cars.length, car; _i3 < _len2; _i3++) {\n    car = cars[_i3];\n    if (_carTreeCfg.filterFun(car)) continue;\n    p = car.parent;\n    p.f_carNum++;\n\n    if (State.isOnline(car.state)) {\n      p.f_online++;\n      State.isMove(car.state) && p.f_move++;\n      State.isStop(car.state) && p.f_stop++;\n      State.isInvalid(car.state) && p.f_invalid++;\n      State.isAccOn(car.state) && p.f_accon++;\n      State.isAccOff(car.state) && p.f_accoff++;\n    }\n\n    State.isAlarm(car.state) && p.f_alarm++;\n    chgs[p.id] = p;\n  }\n\n  for (var tid in chgs) {\n    t = chgs[tid];\n    o[tid] = {\n      f_carNum: t.f_carNum,\n      f_online: t.f_online,\n      f_move: t.f_move,\n      f_stop: t.f_stop,\n      f_alarm: t.f_alarm,\n      f_invalid: t.f_invalid,\n      f_accon: t.f_accon,\n      f_accoff: t.f_accoff\n    };\n  } //计算整个车队\n\n\n  for (var _tid2 in chgs) {\n    t = chgs[_tid2];\n    p = t;\n    t = o[t.id];\n\n    while (p = p.parent) {\n      p.f_carNum += t.f_carNum;\n      p.f_online += t.f_online;\n      p.f_move += t.f_move;\n      p.f_stop += t.f_stop;\n      p.f_alarm += t.f_alarm;\n      p.f_invalid += t.f_invalid;\n      p.f_accon += t.f_accon;\n      p.f_accoff += t.f_accoff;\n    }\n  }\n}\nexport function onTeamAddOrUpdate(team) {\n  var old = TEAMS.map[team.id],\n      newIndex = getTeamIndex(team);\n\n  if (!old) {\n    //新增\n    team.online = team.move = team.stop = team.alarm = team.invalid = team.accon = team.accoff = 0;\n    TEAMS.map[team.id] = team;\n    TEAMS.list.push(team);\n    addToTree(team, newIndex, true);\n  } else {\n    //修改\n    var nameChg = old.name != team.name,\n        pidChg = old.pid != team.pid,\n        idxChg = pidChg;\n\n    if (!pidChg && nameChg) {\n      idxChg = newIndex != old.parent.teams.indexOf(old);\n    }\n\n    objCopyTo(team, old);\n    team = old;\n\n    if (idxChg) {\n      removeFromTree(team, true);\n      addToTree(team, newIndex, true);\n    } else if (nameChg) {\n      updateTreeNodeName(ALL_CAR_TREES, team);\n      updateTreeNodeName(ALL_TEAM_TREES, team);\n    }\n\n    (nameChg || pidChg) && team.videoNum && video_onTeamUpdate(team, nameChg, pidChg);\n  }\n\n  return team;\n}\n\nfunction getTeamIndex(team) {\n  var parent = TEAMS.map[team.pid] || TEAMS.root,\n      brothers = parent.teams || [],\n      diff = 0;\n  if (brothers.length == 0) return 0;\n\n  for (var i = 0; i < brothers.length; i++) {\n    if (team.id == brothers[i].id) diff = -1;\n    if (team.seq < brothers[i].seq) return i - diff;\n  }\n\n  return brothers.length - diff;\n}\n\nexport function onTeamDelete(teamId) {\n  var team = TEAMS.map[teamId];\n  if (!team) return;\n  arrayRemoveItem(TEAMS.list, team);\n  delete TEAMS.map[teamId];\n  removeFromTree(team, true);\n}\nexport function onTeamSort(teamIds) {\n  var step = Math.pow(2, 1000);\n  var parent = TEAMS.map[teamIds[0]].parent;\n\n  for (var i = 0, len = teamIds.length, team; i < len; i++) {\n    team = TEAMS.map[teamIds[i]];\n    team.seq = step * (i + 1);\n    parent.teams[i] = parent.children[i] = team;\n  }\n\n  resetTreeNode(ALL_TEAM_TREES);\n  resetTreeNode(ALL_CAR_TREES);\n}\nexport function onCarAddOrUpdate(car) {\n  var old = CARS.map[car.id];\n\n  if (!old) {\n    //新增\n    CARS.map[car.id] = car;\n    CARS.list.push(car);\n    addToTree(car, -1, false, car.videos ? 1 : 0);\n    car.videos && video_onCarAdd(car);\n  } else {\n    //修改\n    var nameChg = old.name != car.name || old.plate != car.plate;\n    var teamIdChg = old.teamId != car.teamId;\n    var old_videos = old.videos,\n        videoChg = old.videos != car.videos;\n    objCopyTo(car, old);\n    car = old;\n\n    if (teamIdChg) {\n      removeFromTree(car, false, old_videos ? 1 : 0);\n      addToTree(car, -1, false, car.videos ? 1 : 0);\n    } else if (nameChg) {\n      updateTreeNodeName(ALL_CAR_TREES, car);\n      updateTreeNodeName(ALL_TEAM_TREES, car);\n    }\n\n    if (!teamIdChg && !old_videos != !car.videos) {\n      updateTeamNum(car.parent, 'videoNum', car.videos ? 1 : -1);\n    }\n\n    (nameChg || teamIdChg || videoChg) && video_onCarUpdate(car, nameChg, teamIdChg, videoChg);\n  }\n} //正常的车辆进行停用\n\nexport function onCarDisable(car) {\n  car = deleteCar(car.id) || car;\n  updateTeamNum(TEAMS.map[car.teamId], 'banNum', 1);\n} //停用的车辆进行启用\n\nexport function onCarEnable(car, tmns) {\n  onCarAddOrUpdate(car);\n  updateTeamNum(TEAMS.map[car.teamId], 'banNum', -1);\n  tmns && tmns.forEach(function (tmn) {\n    return onTmnAddOrUpdate(tmn);\n  });\n} //正常车辆进行回收\n\nexport function onCarRecycle(car) {\n  car = deleteCar(car.id) || car;\n  updateTeamNum(TEAMS.map[car.teamId], 'delNum', 1);\n  onTmnCarRecycle(car);\n} //回收的车辆进行还原\n\nexport function onCarRecover(car, tmns) {\n  onCarAddOrUpdate(car);\n  updateTeamNum(TEAMS.map[car.teamId], 'delNum', -1);\n  tmns && tmns.forEach(function (tmn) {\n    return onTmnAddOrUpdate(tmn);\n  });\n} //停用的车辆进行回收\n\nexport function onDisableCarRecycle(car) {\n  var team = TEAMS.map[car.teamId];\n  updateTeamNum(team, 'banNum', -1);\n  updateTeamNum(team, 'delNum', 1);\n  onTmnCarRecycle(car);\n} //回收的车辆进行删除\n\nexport function onRecycleCarDelete(car) {\n  var team = TEAMS.map[car.teamId];\n  updateTeamNum(team, 'delNum', -1);\n}\n\nfunction deleteCar(carId) {\n  var car = CARS.map[carId];\n  if (!car) return null;\n  arrayRemoveItem(CARS.list, car);\n  delete CARS.map[carId];\n  removeFromTree(car, false, car.videos ? 1 : 0);\n  car.videos && video_onCarDelete(carId);\n  return car;\n}\n\nfunction updateTeamNum(team, field, num) {\n  while (team) {\n    team[field] += num;\n    updateTreeNodeName(ALL_TEAM_TREES, team);\n    team = team.parent;\n  }\n}\n\nfunction removeFromTree(item, isteam) {\n  var videoNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var parent = item.parent;\n  arrayRemoveItem(parent.children, item);\n  if (parent.children == 0) delete parent.children;\n  removeTreeNode(ALL_CAR_TREES, item);\n\n  if (isteam) {\n    //删除的是车队\n    arrayRemoveItem(parent.teams, item);\n    if (parent.teams == 0) delete parent.teams;\n    removeTreeNode(ALL_TEAM_TREES, item);\n  }\n\n  countParent(parent, item, isteam, -1, videoNum);\n}\n\nfunction addToTree(item, index, isteam) {\n  var videoNum = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var parent = item.parent = TEAMS.map[isteam ? item.pid : item.teamId] || TEAMS.root;\n  parent.children = parent.children || [];\n\n  if (isteam) {\n    parent.teams = parent.teams || [];\n    var len = parent.teams.length;\n    index = index == -1 || index > len ? len : index;\n    parent.teams.splice(index, 0, item);\n    addTreeNode(ALL_TEAM_TREES, parent, index, item);\n  } else {\n    //车辆\n    var _len3 = parent.children.length;\n    index = index == -1 || index > _len3 ? _len3 : index;\n  }\n\n  parent.children.splice(index, 0, item);\n  addTreeNode(ALL_CAR_TREES, parent, index, item);\n  countParent(parent, item, isteam, 1, videoNum);\n}\n\nfunction countParent(parent, item, isteam, _1) {\n  var videoNum = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var carNum = 0,\n      banNum = 0,\n      delNum = 0,\n      online = 0,\n      move = 0,\n      stop = 0,\n      alarm = 0,\n      invalid = 0,\n      accon = 0,\n      accoff = 0;\n\n  if (isteam) {\n    //车队\n    carNum = item.carNum = item.carNum || 0;\n    banNum = item.banNum = item.banNum || 0;\n    delNum = item.delNum = item.delNum || 0;\n    videoNum = item.videoNum = item.videoNum || 0;\n    online = item.online = item.online || 0;\n    move = item.move = item.move || 0;\n    stop = item.stop = item.stop || 0;\n    alarm = item.alarm = item.alarm || 0;\n    invalid = item.invalid = item.invalid || 0;\n    accon = item.accon = item.accon || 0;\n    accoff = item.accoff = item.accoff || 0;\n  } else {\n    //车辆\n    carNum++; // item.videos && videoNum++;\n\n    if (State.isOnline(item.state)) {\n      online++;\n      State.isMove(item.state) && move++;\n      State.isStop(item.state) && stop++;\n      State.isInvalid(item.state) && invalid++;\n      State.isAccOn(item.state) && accon++;\n      State.isAccOff(item.state) && accoff++;\n    }\n\n    State.isAlarm(item.state) && alarm++;\n  }\n\n  if (carNum + banNum + delNum + videoNum + online + move + stop + alarm + invalid + accon + accoff > 0) {\n    while (parent) {\n      parent.carNum += _1 * carNum;\n      parent.banNum += _1 * banNum;\n      parent.delNum += _1 * delNum;\n      parent.videoNum += _1 * videoNum;\n      parent.online += _1 * online;\n      parent.move += _1 * move;\n      parent.stop += _1 * stop;\n      parent.alarm += _1 * alarm;\n      parent.invalid += _1 * invalid;\n      parent.accon += _1 * accon;\n      parent.accoff += _1 * accoff;\n      updateTreeNodeName(ALL_CAR_TREES, parent);\n      updateTreeNodeName(ALL_TEAM_TREES, parent);\n      parent = parent.parent;\n    }\n  }\n}\n\nexport function resetCarTree(method, resetCar, resetTeam) {\n  for (var treeId in ALL_CAR_TREES) {\n    var tree = ALL_CAR_TREES[treeId]._tree;\n\n    _resetCarTree(tree[method], resetCar, resetTeam, treeId, tree.getNodes());\n  }\n}\n\nfunction _resetCarTree(method, resetCar, resetTeam, treeId, nodes) {\n  for (var i = 0, Z, len = nodes.length, node; i < len; i++) {\n    node = nodes[i];\n    Z = node[treeId];\n    if (!Z || !Z.dom) continue;\n\n    if (node.plate) {\n      resetCar && method(node);\n      continue;\n    } else if (resetTeam) {\n      method(node);\n    }\n\n    if (node.children && node.children.length > 0) {\n      _resetCarTree(method, resetCar, resetTeam, treeId, node.children);\n    }\n  }\n}\n\nfunction removeTreeNode(TREES, node) {\n  for (var treeId in TREES) {\n    TREES[treeId]._tree.removeNode(node);\n  }\n}\n\nfunction addTreeNode(TREES, parent, index, node) {\n  for (var treeId in TREES) {\n    TREES[treeId]._tree.addNodes(parent, index, node);\n\n    TREES[treeId]._tree.refresh();\n  }\n}\n\nfunction updateTreeNodeName(TREES, node) {\n  for (var treeId in TREES) {\n    TREES[treeId]._tree.updateNodeName(node);\n  }\n}\n\nfunction resetTreeNode(TREES) {\n  for (var treeId in TREES) {\n    TREES[treeId]._tree.refresh([TEAMS.root]);\n  }\n}\n/**\r\n * 重新获取车辆树结点\r\n */\n\n\nexport function regetNodes(nodes) {\n  if (!nodes || nodes.length == 0) return nodes;\n  var result = [];\n\n  for (var i = 0, len = nodes.length, node; i < len; i++) {\n    node = nodes[i];\n\n    if (node.id == '0') {\n      result.push(TEAMS.root);\n      continue;\n    }\n\n    node = node.plate ? CARS.map[node.id] : TEAMS.map[node.id];\n    node && result.push(node);\n  }\n\n  return result;\n} // 1: 离线-从未报定位\n// 2: 离线-欠费\n// 3: 离线\n// 4: 离线-报警\n// 5: 在线-从未报定位\n// 6: 在线-欠费\n// 7: 在线-行驶\n// 8: 在线-行驶-报警\n// 9: 在线-停车-ACC关\n// 10:在线-停车-ACC开\n// 11:在线-停车-ACC关-报警\n// 12:在线-停车-ACC开-报警\n// 13:在线-无效定位\n\nvar State = {\n  isOnline: function isOnline(state) {\n    return state >= 5;\n  },\n  isOffline: function isOffline(state) {\n    return state < 5;\n  },\n  isMove: function isMove(state) {\n    return state == 7 || state == 8;\n  },\n  isStop: function isStop(state) {\n    return state >= 9 && state <= 12;\n  },\n  isAlarm: function isAlarm(state) {\n    return state == 4 || state == 8 || state == 11 || state == 12;\n  },\n  isAccOn: function isAccOn(state) {\n    return state == 7 || state == 8 || state == 10 || state == 12;\n  },\n  isAccOff: function isAccOff(state) {\n    return state == 9 || state == 11;\n  },\n  isInvalid: function isInvalid(state) {\n    return state == 13;\n  },\n  isArrear: function isArrear(state) {\n    return state == 2 || state == 6;\n  }\n};\nexport { State };\nvar Fields = {\n  plate: function plate(car, field) {\n    return car.plate;\n  },\n  carname: function carname(car, field) {\n    return car.name;\n  },\n  tmnKey: function tmnKey(car, field) {\n    return car.viceKeys ? (car.tmnKey ? car.tmnKey + ',' : '') + car.viceKeys.replace(/\\_va|\\_av|\\_v|\\_a/g, '') : car.tmnKey || '';\n  },\n  simCard: function simCard(car, field) {\n    car = car.tmnId ? getTmnById(car.tmnId) : null;\n    return car ? car.simCard : '';\n  },\n  teamname: function teamname(team, field) {\n    return team.name;\n  },\n  linkman: function linkman(team, field) {\n    return team.linkman;\n  },\n  phone: function phone(team, field) {\n    return team.phone;\n  },\n  bxts: function bxts(car, field) {\n    if (!car.bxts) return '';\n\n    if (typeof car.bxts == 'string') {\n      car.bxts = JSON.parse(car.bxts);\n    }\n\n    return car.bxts[field] || '';\n  },\n  exts: function exts(item, field) {\n    if (!item.exts) return '';\n\n    if (typeof item.exts == 'string') {\n      item.exts = JSON.parse(item.exts);\n    }\n\n    return item.exts[field] || '';\n  }\n};\nexport { Fields };",{"version":3,"sources":["D:\\cdRule\\src\\common\\cache\\CacheTeamCar.js"],"names":["onTeamUpdate","onCarAdd","onCarUpdate","onCarDelete","beforeRefresh","afterRefresh","TEAMS","list","map","tree","root","CARS","fav_root","group_root","CRD_FIELDS","_carTreeCfg","_default","sortField","filters","state","color","type","showTeamCount","line","showCarField","search","carFields","teamFields","flag","$_cache","JSON","storage","Array","setFilterFun","getCarTreeCfg","ff","cfg","window","CAR_TREE_SET","isStateFun","isColorFun","isTypeFun","isSshyFun","isSsptFun","State","types","getCarTypeMap","o","attr","getBbAttrByCarId","node","_bxts","ALL_CAR_TREES","ALL_TEAM_TREES","objIsEmpty","Message","isTreeIcon","car","counts","result","online","move","stop","alarm","invalid","accon","accoff","count","team","parent","console","teams","recountFilter","countFilter","updateOrHideFilterTree","i","len","nodes","updateNodeHide","updateNodeName","loading","callback","getCars","getTeams","teamId","setTimeout","fun","initTeamCar","params","CHARGE","arrayToMap","getcar","carIds","el","sort","sortFavChildren","id","name","setFavChildren","getFavRoot","getFavCount","children","ids","field","a","b","a1","b1","compare","setGroupChildren","groups","str","item","getTmns","getDrivers","refreshs","fail","states","cars","get_refresh_state","video_beforeRefresh","set_refresh_state","reset_refresh_select","video_afterRefresh","setting","selected","arrayFindItem","getCarsByTeam","total","initTeams","initCars","initCarTree","countRootNum","countState","$_L","carNum","banNum","delNum","videoNum","arrayToTree","chgs","t","p","f_carNum","f_online","f_move","f_stop","f_alarm","f_invalid","f_accon","f_accoff","old","newIndex","getTeamIndex","addToTree","nameChg","pidChg","idxChg","objCopyTo","removeFromTree","updateTreeNodeName","video_onTeamUpdate","brothers","diff","arrayRemoveItem","step","Math","teamIds","resetTreeNode","video_onCarAdd","teamIdChg","old_videos","videoChg","updateTeamNum","video_onCarUpdate","deleteCar","onCarAddOrUpdate","tmns","onTmnAddOrUpdate","onTmnCarRecycle","video_onCarDelete","removeTreeNode","countParent","isteam","index","addTreeNode","_1","_resetCarTree","Z","resetCar","method","TREES","isOnline","isOffline","isMove","isStop","isAlarm","isAccOn","isAccOff","isInvalid","isArrear","Fields","plate","carname","tmnKey","simCard","getTmnById","teamname","linkman","phone","bxts","exts"],"mappings":"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","sourcesContent":["import { arrayToMap, arrayRemoveItem, arrayFindItem, compare } from '@/common/util/Arrays.js';\r\nimport { arrayToTree } from '@/common/util/Trees.js';\r\nimport { objIsEmpty, objCopyTo } from '@/common/util/Objects.js';\r\nimport Message from '@/common/Message.js';\r\nimport storage from './Storage.js';\r\nimport { onTeamUpdate as video_onTeamUpdate, onCarAdd as video_onCarAdd, onCarUpdate as video_onCarUpdate, onCarDelete as video_onCarDelete, beforeRefresh as video_beforeRefresh, afterRefresh as video_afterRefresh } from './CacheVideo.js';\r\nimport { onTmnCarRecycle, onTmnAddOrUpdate, getTmnById, getTmns} from './CacheTmn.js';\r\nimport { getDrivers } from './CacheDriver.js';\r\nimport { getBbAttrByCarId } from './CacheCarAttr.js';\r\nimport { getCarTypeMap } from './CacheCmn.js';\r\n\r\n\r\nlet TEAMS = { list: null, map: null, tree: null, root: null };\r\nlet CARS = { list: null, map: null, tree: null, root: null, fav_root: null, group_root: null };\r\nlet CRD_FIELDS = new Set(['onoffLineTime', 'prevDayTotalMile', 'totalAcc', 'prevDayTotalAcc', 'photoTime', 'driverSign', 'signTime', 'runStopTime', 'addr', 'alarmTypeIds', 'tmnPort', 'multTmnStates']);\r\nexport { CRD_FIELDS };\r\n\r\n//车辆树显示的配置=======================================================================================================\r\nlet _carTreeCfg = null, _default = { sortField: 'plate', filters: { state: false, color: null, type: null }, showTeamCount: { line: true }, showCarField: { 'g24': true }, search: { carFields: ['plate', 'carname', 'tmnKey', 'simCard'], teamFields: ['teamname'] } };\r\nexport function getCarTreeCfg(flag=false) {\r\n  if (!flag && !_carTreeCfg && $_cache.userCfg.CAR_TREE_SET) {\r\n    _carTreeCfg = JSON.parse($_cache.userCfg.CAR_TREE_SET);\r\n  }\r\n  _carTreeCfg = _carTreeCfg || storage.get('car_tree_cfgs', _default);\r\n  _carTreeCfg.showCarField && Array.isArray(_carTreeCfg.showCarField) && (_carTreeCfg.showCarField = _default.showCarField);\r\n  !_carTreeCfg.filters && (storage.remove('car_tree_cfgs'), _carTreeCfg = null);\r\n  if (_carTreeCfg && !_carTreeCfg.filterFun) { setFilterFun() }\r\n  return _carTreeCfg || getCarTreeCfg(true);\r\n}\r\nexport function saveCarTreeCfg() {\r\n  let ff = _carTreeCfg.filterFun;\r\n  delete _carTreeCfg.filterFun;\r\n  let cfg = JSON.stringify(_carTreeCfg);\r\n  window.$_main.http.post(\"/sys/user?updateUserCfgs\", {CAR_TREE_SET:cfg}).then(result => {\r\n    storage.remove('car_tree_cfgs');\r\n    $_cache.userCfg.CAR_TREE_SET = cfg;;\r\n  });\r\n  _carTreeCfg.filterFun = ff;\r\n}\r\n\r\nexport function setFilterFun() {\r\n  let filters = _carTreeCfg.filters;\r\n  if (!filters.state && !filters.color && !filters.type && ((!filters.sshy || filters.sshy.length == 0) && (!filters.sspt || filters.sspt.length == 0))) {\r\n    _carTreeCfg.hasFilter = false;\r\n    return _carTreeCfg.filterFun = () => false;\r\n  }\r\n  let isStateFun = null, isColorFun = null, isTypeFun = null, isSshyFun = null, isSsptFun = null;\r\n  if (filters.state) {\r\n    isStateFun = State['is' + filters.state.charAt(0).toUpperCase() + filters.state.substr(1)];\r\n  }\r\n  if (filters.color) {\r\n    isColorFun = color => color == filters.color;\r\n  }\r\n  if (filters.type) {\r\n    let types = new Set(), type = getCarTypeMap()[filters.type];\r\n    types.add(type.id + '|' + type.name)\r\n    type.children && type.children.forEach(o => types.add(o.id + '|' + o.name));\r\n    isTypeFun = carId => {\r\n      let attr = getBbAttrByCarId(carId);\r\n      return attr && attr.typeNo && types.has(attr.typeNo);\r\n    };\r\n  }\r\n  if (filters.sshy && filters.sshy.length > 0) {\r\n    isSshyFun = sshy => filters.sshy.includes(sshy)\r\n  }\r\n  if (filters.sspt && filters.sspt.length > 0) {\r\n    isSsptFun = sspt => filters.sspt.includes(sspt)\r\n  }\r\n  _carTreeCfg.hasFilter = true;\r\n  _carTreeCfg.filterFun = node => {\r\n    if (node.plate) {\r\n      if (!!((isStateFun && !isStateFun(node.state)) || (isColorFun && !isColorFun(node.plateColor)) || (isTypeFun && !isTypeFun(node.id)))) return true;\r\n      if (isSshyFun || isSsptFun) {\r\n        let _bxts = node.bxts ? (typeof node.bxts == 'string' ? JSON.parse(node.bxts) : node.bxts) : null;\r\n        return !!((isSshyFun && !isSshyFun(_bxts && _bxts.sshy) || (isSsptFun && !isSsptFun(_bxts && _bxts.sspt))));\r\n      }\r\n      return false;\r\n    }\r\n    return node != CARS.root && node.f_carNum == 0;\r\n  };\r\n}\r\n\r\n//和车辆树变化相关=======================================================================================================\r\nlet ALL_CAR_TREES = {}, ALL_TEAM_TREES = {};\r\nexport function onCarTreeAdd(treeId, tree) {\r\n  objIsEmpty(ALL_CAR_TREES) && Message.addListener(Message.STATE, setCarStates);\r\n  ALL_CAR_TREES[treeId] = tree;\r\n}\r\nexport function onCarTreeRemove(treeId) {\r\n  delete ALL_CAR_TREES[treeId];\r\n  objIsEmpty(ALL_CAR_TREES) && Message.removeListener(Message.STATE, setCarStates);\r\n}\r\nexport function onTeamTreeAdd(treeId, tree) {\r\n  ALL_TEAM_TREES[treeId] = tree;\r\n}\r\nexport function onTeamTreeRemove(treeId) {\r\n  delete ALL_TEAM_TREES[treeId];\r\n}\r\nexport function updateCarStts(carId, stts, isTreeIcon = false) {\r\n  let car = CARS.map[carId];\r\n  car.stts = stts;\r\n  if (isTreeIcon == true) {\r\n    for (let treeId in ALL_CAR_TREES) {\r\n      ALL_CAR_TREES[treeId]._tree.updateNodeIcon(car);\r\n    }\r\n  }\r\n}\r\nexport function setCarStates(result) {\r\n  if (!CARS.list) return;\r\n  let car, state, online, move, stop, alarm, invalid, accon, accoff, counts = {}, count;\r\n  for (let carId in result) {\r\n    car = CARS.map[carId];\r\n    state = result[carId];\r\n    if (!car || car.state === state) continue;\r\n    online = 0; move = 0; stop = 0; alarm = 0; invalid = 0; accon = 0; accoff = 0;\r\n    State.isOnline(car.state) && online--; State.isOnline(state) && online++;\r\n    State.isMove(car.state) && move--; State.isMove(state) && move++;\r\n    State.isStop(car.state) && stop--; State.isStop(state) && stop++;\r\n    State.isAlarm(car.state) && alarm--; State.isAlarm(state) && alarm++;\r\n    State.isInvalid(car.state) && invalid--; State.isInvalid(state) && invalid++;\r\n    State.isAccOn(car.state) && accon--; State.isAccOn(state) && accon++;\r\n    State.isAccOff(car.state) && accoff--; State.isAccOff(state) && accoff++;\r\n\r\n    count = counts[car.teamId];\r\n    !count && (count = counts[car.teamId] = { online: 0, move: 0, stop: 0, alarm: 0, invalid: 0, accon: 0, accoff: 0, team: car.parent });\r\n    online && (count.online += online);\r\n    move && (count.move += move);\r\n    stop && (count.stop += stop);\r\n    alarm && (count.alarm += alarm);\r\n    invalid && (count.invalid += invalid);\r\n    accon && (count.accon += accon);\r\n    accoff && (count.accoff += accoff);\r\n\r\n    car.state = state;\r\n    for (let treeId in ALL_CAR_TREES) {\r\n      try { ALL_CAR_TREES[treeId]._tree.updateNode(car); } catch (e) { console.log(e) }\r\n    }\r\n  }\r\n  let teams = {}, team, flag;\r\n  for (let teamId in counts) {\r\n    count = counts[teamId];\r\n    team = count.team;\r\n    while (team) {\r\n      flag = false;\r\n      count.online && (team.online += count.online, flag = true);\r\n      count.move && (team.move += count.move, flag = true);\r\n      count.stop && (team.stop += count.stop, flag = true);\r\n      count.alarm && (team.alarm += count.alarm), flag = true;\r\n      count.invalid && (team.invalid += count.invalid, flag = true);\r\n      count.accon && (team.accon += count.accon, flag = true);\r\n      count.accoff && (team.accoff += count.accoff, flag = true);\r\n      if (!flag) break;\r\n      teams[team.id] = team;\r\n      team = team.parent;\r\n    }\r\n  }\r\n  for (let teamId in teams) {\r\n    team = teams[teamId];\r\n    for (let treeId in ALL_CAR_TREES) {\r\n      try { ALL_CAR_TREES[treeId]._tree.updateNodeName(team); } catch (e) { console.log(e) }\r\n    }\r\n  }\r\n  recountFilter();\r\n}\r\n\r\nfunction recountFilter() {\r\n  if (!_carTreeCfg.hasFilter || objIsEmpty(ALL_CAR_TREES)) return;\r\n  countFilter();\r\n  let state = !!_carTreeCfg.filters.state;\r\n  for (let treeId in ALL_CAR_TREES) {\r\n    updateOrHideFilterTree(state ? ALL_CAR_TREES[treeId]._tree.updateNodeHide : null, ALL_CAR_TREES[treeId]._tree.updateNodeName, treeId, [CARS.root]);\r\n  }\r\n}\r\nfunction updateOrHideFilterTree(updateNodeHide, updateNodeName, treeId, nodes) {\r\n  for (let i = 0, len = nodes.length, node; i < len; i++) {\r\n    node = nodes[i];\r\n    if (!node[treeId].dom) continue;\r\n    updateNodeHide && updateNodeHide(node);\r\n    if (node.plate) continue;\r\n    updateNodeName(node)\r\n    if (node.children && node.children.length > 0) {\r\n      updateOrHideFilterTree(updateNodeHide, updateNodeName, treeId, node.children);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n//==================================================================================================================\r\nlet loading = false;\r\n/**\r\n * 获取整个车队\r\n * @param {Function} [callback] 回调函数 ({list, map, tree, root})\r\n */\r\nexport function getTeams(callback) {\r\n  if (TEAMS.list) {\r\n    return callback ? callback(TEAMS) : TEAMS;\r\n  }\r\n  return getCars(callback ? (() => callback(TEAMS)) : null)[1];\r\n}\r\n\r\nexport function getTeamById(teamId) {\r\n  !TEAMS.list && getTeams();\r\n  return teamId == '0' ? TEAMS.root : TEAMS.map[teamId];\r\n}\r\n\r\n/**\r\n * 获取整个车辆\r\n * @param {Function} [callback] 回调函数 ({list, map, tree, root})\r\n */\r\nexport function getCars(callback) {\r\n  if (CARS.list) {\r\n    return callback ? callback(CARS, TEAMS) : [CARS, TEAMS];\r\n  }\r\n  if (callback && loading) {//正在请求后台加载中，等1秒再试试\r\n    return setTimeout(() => getCars(callback), 1000);\r\n  }\r\n\r\n  loading = true;\r\n  let fun = result => {\r\n    loading = false;\r\n    initTeamCar(result[0], result[1], result[2]);\r\n    return callback ? callback(CARS, TEAMS) : [CARS, TEAMS];\r\n  }\r\n  let params = { sortField: getCarTreeCfg().sortField };\r\n  return callback ? window.$_main.http.get('h5/mgr/car?getTeamsAndCars', params).then(fun) : fun(window.$_main.http.syncGet('h5/mgr/car?getTeamsAndCars', params));\r\n}\r\n\r\n/**\r\n * 获取车辆欠费信息\r\n * @param callback\r\n */\r\nlet CHARGE={ list: null, map: null};\r\nexport function getCharge(callback) {\r\n   if (CHARGE.list) {\r\n     return callback ? callback(CHARGE) : CHARGE;\r\n   }\r\n   let fun = result => {\r\n     CHARGE.list = result || [];\r\n     CHARGE.map = arrayToMap(CHARGE.list, \"carId\");\r\n     return callback ? callback(CHARGE) : CHARGE;\r\n   }\r\n   let getcar=getCars()[0].list||[],carIds=[];\r\n   getcar.forEach(el=>{carIds.push(el.id)});\r\n   return callback ? window.$_main.http.post('h5/mgr/charge?getCharges',carIds).then(fun) : fun(window.$_main.http.syncPost('h5/mgr/charge?getCharges',carIds));\r\n}\r\n\r\nexport function getCarById(carId) {\r\n  !CARS.list && getCars();\r\n  return CARS.map[carId];\r\n}\r\n\r\nexport function carLoading() {\r\n  return loading;\r\n}\r\n\r\nexport function getFavRoot(sort = true) {\r\n  if (CARS.fav_root) return sort ? sortFavChildren() : CARS.fav_root;\r\n  CARS.fav_root = { id: '0', name: CARS.root.name };\r\n  return setFavChildren(sort);\r\n}\r\n\r\nexport function getFavCount() {\r\n  let count = 0;\r\n  getFavRoot(false).children.forEach(node => count += node.plate ? 1 : node.carNum);\r\n  return count;\r\n}\r\n\r\nexport function setFavCount() {\r\n  let count = getFavCount();\r\n  for (let treeId in ALL_CAR_TREES) {\r\n    ALL_CAR_TREES[treeId].favCount = count;\r\n  }\r\n}\r\n\r\nexport function resetFavTree() {\r\n  if (!CARS.fav_root) return;\r\n  setFavChildren();\r\n  for (let treeId in ALL_CAR_TREES) {\r\n    let tree = ALL_CAR_TREES[treeId];\r\n    tree.model == 'fav' && tree.getTree().reset(CARS.fav_root);\r\n  }\r\n}\r\n\r\nfunction setFavChildren(sort = true) {\r\n  let children = [];\r\n  CARS.fav_root.children = children;\r\n  let ids = window.$_cache.userCfg.FAV_CAR;\r\n  ids && JSON.parse(ids).forEach(id => {\r\n    id = id.indexOf('t') == 0 ? TEAMS.map[id.substr(1)] : CARS.map[id];\r\n    id && children.push(id);\r\n  });\r\n  return sort ? sortFavChildren() : CARS.fav_root;\r\n}\r\n\r\nfunction sortFavChildren() {\r\n  let field = getCarTreeCfg().sortField;\r\n  CARS.fav_root.children.sort((a, b) => {\r\n    if (a.plate && b.plate) {\r\n      let a1 = State.isOnline(a.state), b1 = State.isOnline(b.state);\r\n      return a1 && b1 ? compare(a, b, field) : a1 ? -1 : 1;\r\n    }\r\n    return a.plate ? 1 : (b.plate ? -1 : compare(a, b, 'name'));\r\n  });\r\n  return CARS.fav_root;\r\n}\r\n\r\n\r\nexport function getGroupRoot() {\r\n  if (CARS.group_root) return CARS.group_root;\r\n  CARS.group_root = { id: '0', name: CARS.root.name };\r\n  return setGroupChildren();\r\n}\r\n\r\nexport function resetGroupTree() {\r\n  if (!CARS.group_root) return;\r\n  setGroupChildren();\r\n  for (let treeId in ALL_CAR_TREES) {\r\n    let tree = ALL_CAR_TREES[treeId];\r\n    tree.model == 'group' && tree.getTree().reset(CARS.group_root);\r\n  }\r\n}\r\n\r\nfunction setGroupChildren() {\r\n  CARS.group_root.children = [];\r\n  let groups = window.$_cache.userCfg.GROUP_CAR;//[name|carId,carId...]\r\n  groups && (groups = JSON.parse(groups));\r\n  if (groups) {\r\n    let field = getCarTreeCfg().sortField, i=1;\r\n    groups.forEach(str => {\r\n      str = str.split('|');\r\n      let item = { id:'g'+(i++), name: str[0], children: [] };\r\n      str = str[1].split(',');\r\n      for (let i = 0, car; i < str.length; i++) {\r\n        car = CARS.map[str[i]];\r\n        car && item.children.push(car);\r\n      }\r\n      item.children.sort((a, b) => compare(a, b, field));\r\n      CARS.group_root.children.push(item);\r\n    });\r\n    CARS.group_root.children.sort((a, b) => compare(a, b, 'name'));\r\n  }\r\n  return CARS.group_root;\r\n}\r\n\r\n\r\n// ======================================================================================================================\r\n/**\r\n * 重新加载整个车队/车辆/终端/司机数据，刷新车队树、车辆树、视频树、收藏树\r\n * @param {Function} [fail] 失败回调函数\r\n */\r\nexport function refreshAll(fail) {\r\n  beforeRefresh();\r\n  window.$_main.http.get('/mgr/car?reloadTeamsAndCars', { sortField: getCarTreeCfg().sortField }).then(result => {\r\n    getTmns(() => {\r\n      getDrivers(() => {\r\n        initTeamCar(result[0], result[1], result[2]);\r\n        if (CARS.fav_root) setFavChildren();\r\n        if (CARS.group_root) setGroupChildren();\r\n        afterRefresh();\r\n      }, true);\r\n    }, true);\r\n  }).catch(e => {refreshs = null; fail && fail(e)});\r\n}\r\n\r\nlet refreshs;\r\nfunction beforeRefresh() {\r\n  refreshs = {};\r\n  let states;\r\n  for (let treeId in ALL_CAR_TREES) {\r\n    refreshs[treeId] = states = {cars:{}, teams:{}, groups:{}};\r\n    get_refresh_state(treeId, CARS.root, CARS.list, states.cars);\r\n    CARS.group_root && get_refresh_state(treeId, CARS.group_root, CARS.group_root.children, states.groups);\r\n    get_refresh_state(treeId, TEAMS.root, TEAMS.list, states.teams);\r\n    states.selected = ALL_CAR_TREES[treeId]._tree.getSelectedNodes();\r\n  }\r\n  for (let treeId in ALL_TEAM_TREES) {\r\n    refreshs[treeId] = states = {};\r\n    get_refresh_state(treeId, TEAMS.root, TEAMS.list, states);\r\n    states.selected = ALL_TEAM_TREES[treeId]._tree.getSelectedNodes();\r\n  }\r\n  video_beforeRefresh(refreshs);\r\n}\r\n\r\nfunction afterRefresh() {\r\n  let tree, states;\r\n  for (let treeId in ALL_CAR_TREES) {\r\n    states = refreshs[treeId];\r\n    set_refresh_state(treeId, CARS.root, CARS.list, states.cars);\r\n    set_refresh_state(treeId, TEAMS.root, TEAMS.list, states.teams);\r\n    CARS.group_root && set_refresh_state(treeId, CARS.group_root, CARS.group_root.children, states.groups);\r\n    tree = ALL_CAR_TREES[treeId];\r\n    let root = tree.model == 'fav' ? CARS.fav_root : tree.model == 'group' ? CARS.group_root : CARS.root;\r\n    root[treeId].open = true;\r\n    tree._tree.reset(root, true);\r\n    tree.afterRefresh(root, reset_refresh_select(tree, states.selected));\r\n  }\r\n  for (let treeId in ALL_TEAM_TREES) {\r\n    states = refreshs[treeId];\r\n    set_refresh_state(treeId, TEAMS.root, TEAMS.list, states);\r\n    tree = ALL_TEAM_TREES[treeId];\r\n    TEAMS.root[treeId].open = true;\r\n    tree._tree.reset(TEAMS.root, true);\r\n    tree.afterRefresh(reset_refresh_select(tree, states.selected));\r\n  }\r\n  video_afterRefresh(refreshs);\r\n  refreshs = null;\r\n}\r\n\r\nfunction get_refresh_state(treeId, root, list, states) {\r\n  if (!(states[root.id] = root[treeId])) return;\r\n  for (let i=0, len=list.length, node, setting; i<len; i++) {\r\n    node = list[i];\r\n    setting = node[treeId];\r\n    setting && (delete setting.dom, states[node.id] = setting);\r\n  }\r\n}\r\nfunction set_refresh_state(treeId, root, list, states) {\r\n  if (!(root[treeId] = states[root.id])) return;\r\n  for (let i=0, len=list.length, node, setting; i<len; i++) {\r\n    node = list[i];\r\n    setting = states[node.id];\r\n    setting && (node[treeId] = setting);\r\n  }\r\n}\r\nfunction reset_refresh_select(tree, selected) {\r\n  if (selected.length == 0) return null;\r\n  selected = selected[0];\r\n  if (selected.plate) {\r\n    selected = CARS.map[selected.id];\r\n  } else if (selected != TEAMS.root && selected != CARS.fav_root && selected != CARS.group_root) {\r\n    selected = TEAMS.map[selected.id] || (CARS.group_root ? arrayFindItem(CARS.group_root.children, 'id', selected.id) : null);\r\n  }\r\n  selected && tree._tree.selectNode(selected);\r\n  return selected;\r\n}\r\n\r\n// ======================================================================================================================\r\n/**\r\n * 根据车队，获取车队下面的所有车辆\r\n * @param {Object} team 车队对象\r\n * @returns {Array} 车辆列表\r\n */\r\nexport function getCarsByTeam(team, result = null) {\r\n  if (team && team == CARS.root) return CARS.list;\r\n  result = result || [];\r\n  if (!team || !team.children) return result;\r\n  for (let i = 0, len = team.children.length, item; i < len; i++) {\r\n    item = team.children[i];\r\n    item.plate ? result.push(item) : getCarsByTeam(item, result);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function getTotalCount(callback) {\r\n  !CARS.root || objIsEmpty(ALL_CAR_TREES) ? window.$_main.http.get('h5/mnt/state?count', null, true).then(callback).catch(error => callback()) : callback({ total: CARS.root.carNum, online: CARS.root.online, alarm: CARS.root.alarm });\r\n}\r\n\r\nexport function initTeamCar(teams, cars, states) {\r\n  initTeams(teams);\r\n  initCars(cars, states);\r\n  initCarTree();\r\n  countRootNum();\r\n  countState();\r\n}\r\n\r\nfunction initTeams(teams) {// 车队树中，孩子的属性是teams\r\n  TEAMS.list = teams || [];\r\n  TEAMS.map = arrayToMap(TEAMS.list, \"id\");\r\n  let name = $_cache.userCfg.TEAM_ROOT ? $_L.get($_cache.userCfg.TEAM_ROOT) : $_L.get('车辆监控中心');\r\n  if (TEAMS.root) for (let key in TEAMS.root) delete TEAMS.root[key];\r\n  TEAMS.root = Object.assign(TEAMS.root || {}, { name: name, id: '0', carNum: 0, banNum: 0, delNum: 0, videoNum: 0 });\r\n  TEAMS.tree = arrayToTree(TEAMS.list, \"id\", \"pid\", TEAMS.map, TEAMS.root, 'teams');\r\n}\r\n\r\nfunction initCars(cars, states) {\r\n  CARS.list = cars || [];\r\n  CARS.map = arrayToMap(CARS.list, \"id\");\r\n  CARS.root = TEAMS.root;\r\n  let car;\r\n  for (let carId in states) {\r\n    car = CARS.map[carId];\r\n    car && (car.state = states[carId]);\r\n  }\r\n}\r\n\r\nfunction initCarTree() {// 车辆树中，孩子的属性是children\r\n  // 将teams字段，复制到children字段重建车队树\r\n  CARS.root.teams && (CARS.root.children = [...CARS.root.teams]);\r\n  for (let i = 0, len = TEAMS.list.length, team; i < len; i++) {\r\n    team = TEAMS.list[i];\r\n    team.teams && (team.children = [...team.teams]);\r\n  }\r\n  CARS.tree = arrayToTree(CARS.list, \"id\", \"teamId\", TEAMS.map, CARS.root, \"children\");\r\n}\r\n\r\n/**\r\n * 将车辆数统计到车队根结点\r\n */\r\nfunction countRootNum() {\r\n  CARS.tree.forEach(item => {\r\n    if (item.plate) {\r\n      CARS.root.carNum += 1;\r\n      item.videos && (CARS.root.videoNum += 1);\r\n    } else {\r\n      CARS.root.carNum += item.carNum;\r\n      CARS.root.banNum += item.banNum;\r\n      CARS.root.delNum += item.delNum;\r\n      CARS.root.videoNum += item.videoNum;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 统计车辆状态数量\r\n */\r\nexport function countState(root = null, teams = null, cars = null) {\r\n  // if (!getCarTreeCfg().showTeamCount) return;\r\n  root = root || CARS.root; teams = teams || TEAMS.list; cars = cars || CARS.list;\r\n\r\n  //归零\r\n  root.online = root.move = root.stop = root.alarm = root.invalid = root.accon = root.accoff = 0;\r\n  for (let i = 0, len = teams.length, team; i < len; i++) {\r\n    team = teams[i];\r\n    team.online = team.move = team.stop = team.alarm = team.invalid = team.accon = team.accoff = 0;\r\n  }\r\n\r\n  //计算车辆上级车队\r\n  let chgs = {}, o = {}, p, t = false;\r\n  for (let i = 0, len = cars.length, car; i < len; i++) {\r\n    car = cars[i]; p = car.parent;\r\n    if (State.isOnline(car.state)) {\r\n      p.online++; t = true;\r\n      State.isMove(car.state) && p.move++;\r\n      State.isStop(car.state) && p.stop++;\r\n      State.isInvalid(car.state) && p.invalid++;\r\n      State.isAccOn(car.state) && p.accon++;\r\n      State.isAccOff(car.state) && p.accoff++;\r\n    }\r\n    State.isAlarm(car.state) && (t = true) && p.alarm++;\r\n    t && (chgs[p.id] = p) && (t = false);\r\n  }\r\n  for (let tid in chgs) {\r\n    t = chgs[tid];\r\n    o[tid] = { online: t.online, move: t.move, stop: t.stop, alarm: t.alarm, invalid: t.invalid, accon: t.accon, accoff: t.accoff };\r\n  }\r\n\r\n  //计算整个车队\r\n  for (let tid in chgs) {\r\n    t = chgs[tid]; p = t; t = o[t.id];\r\n    while (p = p.parent) {\r\n      p.online += t.online;\r\n      p.move += t.move;\r\n      p.stop += t.stop;\r\n      p.alarm += t.alarm;\r\n      p.invalid += t.invalid;\r\n      p.accon += t.accon;\r\n      p.accoff += t.accoff;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 统计车辆状态数量\r\n */\r\nexport function countFilter() {\r\n  let root = CARS.root, teams = TEAMS.list, cars = CARS.list;\r\n  if (!root) return\r\n  //归零\r\n  root.f_carNum = root.f_online = root.f_move = root.f_stop = root.f_alarm = root.f_invalid = root.f_accon = root.f_accoff = 0;\r\n  for (let i = 0, len = teams.length, team; i < len; i++) {\r\n    team = teams[i];\r\n    team.f_carNum = team.f_online = team.f_move = team.f_stop = team.f_alarm = team.f_invalid = team.f_accon = team.f_accoff = 0;\r\n  }\r\n\r\n  //计算车辆上级车队\r\n  let chgs = {}, o = {}, p, t = false;\r\n  for (let i = 0, len = cars.length, car; i < len; i++) {\r\n    car = cars[i];\r\n    if (_carTreeCfg.filterFun(car)) continue;\r\n    p = car.parent;\r\n    p.f_carNum++;\r\n    if (State.isOnline(car.state)) {\r\n      p.f_online++;\r\n      State.isMove(car.state) && p.f_move++;\r\n      State.isStop(car.state) && p.f_stop++;\r\n      State.isInvalid(car.state) && p.f_invalid++;\r\n      State.isAccOn(car.state) && p.f_accon++;\r\n      State.isAccOff(car.state) && p.f_accoff++;\r\n    }\r\n    State.isAlarm(car.state) && p.f_alarm++;\r\n    chgs[p.id] = p;\r\n  }\r\n  for (let tid in chgs) {\r\n    t = chgs[tid];\r\n    o[tid] = { f_carNum: t.f_carNum, f_online: t.f_online, f_move: t.f_move, f_stop: t.f_stop, f_alarm: t.f_alarm, f_invalid: t.f_invalid, f_accon: t.f_accon, f_accoff: t.f_accoff };\r\n  }\r\n\r\n  //计算整个车队\r\n  for (let tid in chgs) {\r\n    t = chgs[tid]; p = t; t = o[t.id];\r\n    while (p = p.parent) {\r\n      p.f_carNum += t.f_carNum; p.f_online += t.f_online; p.f_move += t.f_move; p.f_stop += t.f_stop; p.f_alarm += t.f_alarm; p.f_invalid += t.f_invalid; p.f_accon += t.f_accon; p.f_accoff += t.f_accoff;\r\n    }\r\n  }\r\n}\r\n\r\nexport function onTeamAddOrUpdate(team) {\r\n  let old = TEAMS.map[team.id], newIndex = getTeamIndex(team);\r\n  if (!old) {//新增\r\n    team.online = team.move = team.stop = team.alarm = team.invalid = team.accon = team.accoff = 0;\r\n    TEAMS.map[team.id] = team;\r\n    TEAMS.list.push(team);\r\n    addToTree(team, newIndex, true);\r\n  } else {//修改\r\n    let nameChg = old.name != team.name, pidChg = old.pid != team.pid, idxChg = pidChg;\r\n    if (!pidChg && nameChg) {\r\n      idxChg = newIndex != old.parent.teams.indexOf(old);\r\n    }\r\n    objCopyTo(team, old);\r\n    team = old;\r\n    if (idxChg) {\r\n      removeFromTree(team, true);\r\n      addToTree(team, newIndex, true);\r\n    } else if (nameChg) {\r\n      updateTreeNodeName(ALL_CAR_TREES, team);\r\n      updateTreeNodeName(ALL_TEAM_TREES, team);\r\n    }\r\n    (nameChg || pidChg) && team.videoNum && video_onTeamUpdate(team, nameChg, pidChg);\r\n  }\r\n  return team;\r\n}\r\nfunction getTeamIndex(team) {\r\n  let parent = TEAMS.map[team.pid] || TEAMS.root, brothers = parent.teams || [], diff = 0;\r\n  if (brothers.length == 0) return 0;\r\n  for (let i=0; i<brothers.length; i++) {\r\n    if (team.id == brothers[i].id) diff= -1;\r\n    if (team.seq < brothers[i].seq) return i - diff;\r\n  }\r\n  return brothers.length - diff;\r\n}\r\nexport function onTeamDelete(teamId) {\r\n  let team = TEAMS.map[teamId];\r\n  if (!team) return;\r\n  arrayRemoveItem(TEAMS.list, team);\r\n  delete TEAMS.map[teamId];\r\n  removeFromTree(team, true);\r\n}\r\nexport function onTeamSort(teamIds) {\r\n  let step = Math.pow(2, 1000);\r\n  let parent = TEAMS.map[teamIds[0]].parent;\r\n  for (let i = 0, len = teamIds.length, team; i < len; i++) {\r\n    team = TEAMS.map[teamIds[i]];\r\n    team.seq = step * (i + 1);\r\n    parent.teams[i] = parent.children[i] = team;\r\n  }\r\n  resetTreeNode(ALL_TEAM_TREES);\r\n  resetTreeNode(ALL_CAR_TREES);\r\n}\r\n\r\nexport function onCarAddOrUpdate(car) {\r\n  let old = CARS.map[car.id];\r\n  if (!old) {//新增\r\n    CARS.map[car.id] = car;\r\n    CARS.list.push(car);\r\n    addToTree(car, -1, false, car.videos ? 1 : 0);\r\n    car.videos && video_onCarAdd(car);\r\n  } else {//修改\r\n    let nameChg = (old.name != car.name) || (old.plate != car.plate);\r\n    let teamIdChg = old.teamId != car.teamId;\r\n    let old_videos = old.videos, videoChg = old.videos != car.videos;\r\n    objCopyTo(car, old);\r\n    car = old;\r\n    if (teamIdChg) {\r\n      removeFromTree(car, false, old_videos ? 1 : 0);\r\n      addToTree(car, -1, false, car.videos ? 1 : 0);\r\n    } else if (nameChg) {\r\n      updateTreeNodeName(ALL_CAR_TREES, car);\r\n      updateTreeNodeName(ALL_TEAM_TREES, car);\r\n    }\r\n    if (!teamIdChg && !old_videos != !car.videos) {\r\n      updateTeamNum(car.parent, 'videoNum', car.videos ? 1 : -1);\r\n    }\r\n    (nameChg || teamIdChg || videoChg) && video_onCarUpdate(car, nameChg, teamIdChg, videoChg);\r\n  }\r\n}\r\n\r\n//正常的车辆进行停用\r\nexport function onCarDisable(car) {\r\n  car = deleteCar(car.id) || car;\r\n  updateTeamNum(TEAMS.map[car.teamId], 'banNum', 1);\r\n}\r\n//停用的车辆进行启用\r\nexport function onCarEnable(car, tmns) {\r\n  onCarAddOrUpdate(car);\r\n  updateTeamNum(TEAMS.map[car.teamId], 'banNum', -1);\r\n  tmns && tmns.forEach(tmn => onTmnAddOrUpdate(tmn));\r\n}\r\n//正常车辆进行回收\r\nexport function onCarRecycle(car) {\r\n  car = deleteCar(car.id) || car;\r\n  updateTeamNum(TEAMS.map[car.teamId], 'delNum', 1);\r\n  onTmnCarRecycle(car);\r\n}\r\n//回收的车辆进行还原\r\nexport function onCarRecover(car, tmns) {\r\n  onCarAddOrUpdate(car);\r\n  updateTeamNum(TEAMS.map[car.teamId], 'delNum', -1);\r\n  tmns && tmns.forEach(tmn => onTmnAddOrUpdate(tmn));\r\n}\r\n//停用的车辆进行回收\r\nexport function onDisableCarRecycle(car) {\r\n  let team = TEAMS.map[car.teamId];\r\n  updateTeamNum(team, 'banNum', -1);\r\n  updateTeamNum(team, 'delNum', 1);\r\n  onTmnCarRecycle(car);\r\n}\r\n//回收的车辆进行删除\r\nexport function onRecycleCarDelete(car) {\r\n  let team = TEAMS.map[car.teamId];\r\n  updateTeamNum(team, 'delNum', -1);\r\n}\r\n\r\nfunction deleteCar(carId) {\r\n  let car = CARS.map[carId];\r\n  if (!car) return null;\r\n  arrayRemoveItem(CARS.list, car);\r\n  delete CARS.map[carId];\r\n  removeFromTree(car, false, car.videos ? 1 : 0);\r\n  car.videos && video_onCarDelete(carId);\r\n  return car;\r\n}\r\n\r\nfunction updateTeamNum(team, field, num) {\r\n  while (team) {\r\n    team[field] += num;\r\n    updateTreeNodeName(ALL_TEAM_TREES, team);\r\n    team = team.parent;\r\n  }\r\n}\r\n\r\nfunction removeFromTree(item, isteam, videoNum = 0) {\r\n  let parent = item.parent;\r\n  arrayRemoveItem(parent.children, item);\r\n  if (parent.children == 0) delete parent.children;\r\n  removeTreeNode(ALL_CAR_TREES, item);\r\n  if (isteam) {//删除的是车队\r\n    arrayRemoveItem(parent.teams, item);\r\n    if (parent.teams == 0) delete parent.teams;\r\n    removeTreeNode(ALL_TEAM_TREES, item);\r\n  }\r\n  countParent(parent, item, isteam, -1, videoNum);\r\n}\r\nfunction addToTree(item, index, isteam, videoNum = 0) {\r\n  let parent = item.parent = TEAMS.map[isteam ? item.pid : item.teamId] || TEAMS.root;\r\n  parent.children = parent.children || [];\r\n  if (isteam) {\r\n    parent.teams = parent.teams || [];\r\n    let len = parent.teams.length;\r\n    index = (index == -1 || index > len) ? len : index;\r\n    parent.teams.splice(index, 0, item);\r\n    addTreeNode(ALL_TEAM_TREES, parent, index, item);\r\n  } else {//车辆\r\n    let len = parent.children.length;\r\n    index = (index == -1 || index > len) ? len : index;\r\n  }\r\n  parent.children.splice(index, 0, item);\r\n  addTreeNode(ALL_CAR_TREES, parent, index, item);\r\n  countParent(parent, item, isteam, 1, videoNum);\r\n}\r\nfunction countParent(parent, item, isteam, _1, videoNum = 0) {\r\n  let carNum = 0, banNum = 0, delNum = 0, online = 0, move = 0, stop = 0, alarm = 0, invalid = 0, accon = 0, accoff = 0;\r\n  if (isteam) {//车队\r\n    carNum = item.carNum = item.carNum || 0;\r\n    banNum = item.banNum = item.banNum || 0;\r\n    delNum = item.delNum = item.delNum || 0;\r\n    videoNum = item.videoNum = item.videoNum || 0;\r\n    online = item.online = item.online || 0;\r\n    move = item.move = item.move || 0;\r\n    stop = item.stop = item.stop || 0;\r\n    alarm = item.alarm = item.alarm || 0;\r\n    invalid = item.invalid = item.invalid || 0;\r\n    accon = item.accon = item.accon || 0;\r\n    accoff = item.accoff = item.accoff || 0;\r\n  } else {//车辆\r\n    carNum++;\r\n    // item.videos && videoNum++;\r\n    if (State.isOnline(item.state)) {\r\n      online++;\r\n      State.isMove(item.state) && move++;\r\n      State.isStop(item.state) && stop++;\r\n      State.isInvalid(item.state) && invalid++;\r\n      State.isAccOn(item.state) && accon++;\r\n      State.isAccOff(item.state) && accoff++;\r\n    }\r\n    State.isAlarm(item.state) && alarm++;\r\n  }\r\n  if (carNum + banNum + delNum + videoNum + online + move + stop + alarm + invalid + accon + accoff > 0) {\r\n    while (parent) {\r\n      parent.carNum += _1 * carNum; parent.banNum += _1 * banNum; parent.delNum += _1 * delNum; parent.videoNum += _1 * videoNum; parent.online += _1 * online; parent.move += _1 * move; parent.stop += _1 * stop; parent.alarm += _1 * alarm; parent.invalid += _1 * invalid; parent.accon += _1 * accon; parent.accoff += _1 * accoff;\r\n      updateTreeNodeName(ALL_CAR_TREES, parent);\r\n      updateTreeNodeName(ALL_TEAM_TREES, parent);\r\n      parent = parent.parent;\r\n    }\r\n  }\r\n}\r\n\r\nexport function resetCarTree(method, resetCar, resetTeam) {\r\n  for (let treeId in ALL_CAR_TREES) {\r\n    let tree = ALL_CAR_TREES[treeId]._tree;\r\n    _resetCarTree(tree[method], resetCar, resetTeam, treeId, tree.getNodes());\r\n  }\r\n}\r\n\r\nfunction _resetCarTree(method, resetCar, resetTeam, treeId, nodes) {\r\n  for (let i = 0, Z, len = nodes.length, node; i < len; i++) {\r\n    node = nodes[i];\r\n    Z = node[treeId];\r\n    if (!Z || !Z.dom) continue;\r\n    if (node.plate) {\r\n      resetCar && method(node);\r\n      continue;\r\n    } else if (resetTeam) {\r\n      method(node);\r\n    }\r\n    if (node.children && node.children.length > 0) {\r\n      _resetCarTree(method, resetCar, resetTeam, treeId, node.children);\r\n    }\r\n  }\r\n}\r\n\r\nfunction removeTreeNode(TREES, node) {\r\n  for (let treeId in TREES) {\r\n    TREES[treeId]._tree.removeNode(node);\r\n  }\r\n}\r\nfunction addTreeNode(TREES, parent, index, node) {\r\n  for (let treeId in TREES) {\r\n    TREES[treeId]._tree.addNodes(parent, index, node);\r\n    TREES[treeId]._tree.refresh();\r\n\r\n  }\r\n}\r\nfunction updateTreeNodeName(TREES, node) {\r\n  for (let treeId in TREES) {\r\n    TREES[treeId]._tree.updateNodeName(node);\r\n  }\r\n}\r\nfunction resetTreeNode(TREES) {\r\n  for (let treeId in TREES) {\r\n    TREES[treeId]._tree.refresh([TEAMS.root]);\r\n  }\r\n}\r\n\r\n/**\r\n * 重新获取车辆树结点\r\n */\r\nexport function regetNodes(nodes) {\r\n  if (!nodes || nodes.length == 0) return nodes;\r\n  let result = [];\r\n  for (let i = 0, len = nodes.length, node; i < len; i++) {\r\n    node = nodes[i];\r\n    if (node.id == '0') {\r\n      result.push(TEAMS.root);\r\n      continue;\r\n    }\r\n    node = node.plate ? CARS.map[node.id] : TEAMS.map[node.id];\r\n    node && result.push(node);\r\n  }\r\n  return result;\r\n}\r\n\r\n// 1: 离线-从未报定位\r\n// 2: 离线-欠费\r\n// 3: 离线\r\n// 4: 离线-报警\r\n// 5: 在线-从未报定位\r\n// 6: 在线-欠费\r\n// 7: 在线-行驶\r\n// 8: 在线-行驶-报警\r\n// 9: 在线-停车-ACC关\r\n// 10:在线-停车-ACC开\r\n// 11:在线-停车-ACC关-报警\r\n// 12:在线-停车-ACC开-报警\r\n// 13:在线-无效定位\r\nlet State = {\r\n  isOnline: state => state >= 5,\r\n  isOffline: state => state < 5,\r\n  isMove: state => state == 7 || state == 8,\r\n  isStop: state => state >= 9 && state <= 12,\r\n  isAlarm: state => state == 4 || state == 8 || state == 11 || state == 12,\r\n  isAccOn: state => state == 7 || state == 8 || state == 10 || state == 12,\r\n  isAccOff: state => state == 9 || state == 11,\r\n  isInvalid: state => state == 13,\r\n  isArrear: state => state == 2 || state == 6,\r\n};\r\nexport { State };\r\n\r\nlet Fields = {\r\n  plate: (car, field) => car.plate,\r\n  carname: (car, field) => car.name,\r\n  tmnKey: (car, field) => car.viceKeys ? ((car.tmnKey ? (car.tmnKey + ',') : '') + car.viceKeys.replace(/\\_va|\\_av|\\_v|\\_a/g, '')) : (car.tmnKey || ''),\r\n  simCard: (car, field) => { car = car.tmnId ? getTmnById(car.tmnId) : null; return car ? car.simCard : '' },\r\n  teamname: (team, field) => team.name,\r\n  linkman: (team, field) => team.linkman,\r\n  phone: (team, field) => team.phone,\r\n  bxts: (car, field) => {\r\n    if (!car.bxts) return '';\r\n    if (typeof (car.bxts) == 'string') {\r\n      car.bxts = JSON.parse(car.bxts);\r\n    }\r\n    return car.bxts[field] || '';\r\n  },\r\n  exts: (item, field) => {\r\n    if (!item.exts) return '';\r\n    if (typeof (item.exts) == 'string') {\r\n      item.exts = JSON.parse(item.exts);\r\n    }\r\n    return item.exts[field] || '';\r\n  }\r\n};\r\nexport { Fields };\r\n"]}]}