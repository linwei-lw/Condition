{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\checkbox\\src\\checkbox.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\checkbox\\src\\checkbox.js","mtime":1638513605603},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\nimport { UtilTools } from \"../../tools\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport vSize from \"../../mixins/size\";\nexport default {\n  name: 'VxeCheckbox',\n  mixins: [vSize],\n  props: {\n    value: Boolean,\n    label: [String, Number],\n    indeterminate: Boolean,\n    title: [String, Number],\n    content: [String, Number],\n    disabled: Boolean,\n    size: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.checkbox.size || GlobalConfig.size;\n      }\n    }\n  },\n  inject: {\n    $xecheckboxgroup: {\n      default: null\n    }\n  },\n  computed: {\n    isGroup: function isGroup() {\n      return this.$xecheckboxgroup;\n    },\n    isDisabled: function isDisabled() {\n      return this.disabled || this.isGroup && this.$xecheckboxgroup.disabled;\n    }\n  },\n  render: function render(h) {\n    var _ref;\n\n    var $scopedSlots = this.$scopedSlots,\n        $xecheckboxgroup = this.$xecheckboxgroup,\n        isGroup = this.isGroup,\n        isDisabled = this.isDisabled,\n        title = this.title,\n        vSize = this.vSize,\n        indeterminate = this.indeterminate,\n        value = this.value,\n        label = this.label,\n        content = this.content;\n    var attrs = {};\n\n    if (title) {\n      attrs.title = title;\n    }\n\n    return h('label', {\n      class: ['vxe-checkbox', (_ref = {}, _defineProperty(_ref, \"size--\".concat(vSize), vSize), _defineProperty(_ref, 'is--indeterminate', indeterminate), _defineProperty(_ref, 'is--disabled', isDisabled), _ref)],\n      attrs: attrs\n    }, [h('input', {\n      class: 'vxe-checkbox--input',\n      attrs: {\n        type: 'checkbox',\n        disabled: isDisabled\n      },\n      domProps: {\n        checked: isGroup ? XEUtils.includes($xecheckboxgroup.value, label) : value\n      },\n      on: {\n        change: this.changeEvent\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--icon'\n    }), h('span', {\n      class: 'vxe-checkbox--label'\n    }, $scopedSlots.default ? $scopedSlots.default.call(this, {}) : [UtilTools.getFuncText(content)])]);\n  },\n  methods: {\n    changeEvent: function changeEvent(evnt) {\n      var $xecheckboxgroup = this.$xecheckboxgroup,\n          isGroup = this.isGroup,\n          isDisabled = this.isDisabled,\n          label = this.label;\n\n      if (!isDisabled) {\n        var checked = evnt.target.checked;\n        var params = {\n          checked: checked,\n          label: label,\n          $event: evnt\n        };\n\n        if (isGroup) {\n          $xecheckboxgroup.handleChecked(params);\n        } else {\n          this.$emit('input', checked);\n          this.$emit('change', params);\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\checkbox\\src\\checkbox.js"],"names":["name","mixins","props","value","label","indeterminate","title","content","disabled","size","type","default","GlobalConfig","inject","$xecheckboxgroup","computed","isGroup","isDisabled","render","$scopedSlots","vSize","attrs","h","class","domProps","checked","XEUtils","on","change","changeEvent","UtilTools","methods","evnt","params","$event"],"mappings":"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","sourcesContent":["import { UtilTools } from '../../tools'\r\nimport XEUtils from 'xe-utils'\r\nimport GlobalConfig from '../../v-x-e-table/src/conf'\r\nimport vSize from '../../mixins/size'\r\n\r\nexport default {\r\n  name: 'VxeCheckbox',\r\n  mixins: [vSize],\r\n  props: {\r\n    value: Boolean,\r\n    label: [String, Number],\r\n    indeterminate: Boolean,\r\n    title: [String, Number],\r\n    content: [String, Number],\r\n    disabled: Boolean,\r\n    size: { type: String, default: () => GlobalConfig.checkbox.size || GlobalConfig.size }\r\n  },\r\n  inject: {\r\n    $xecheckboxgroup: {\r\n      default: null\r\n    }\r\n  },\r\n  computed: {\r\n    isGroup () {\r\n      return this.$xecheckboxgroup\r\n    },\r\n    isDisabled () {\r\n      return this.disabled || (this.isGroup && this.$xecheckboxgroup.disabled)\r\n    }\r\n  },\r\n  render (h) {\r\n    const { $scopedSlots, $xecheckboxgroup, isGroup, isDisabled, title, vSize, indeterminate, value, label, content } = this\r\n    const attrs = {}\r\n    if (title) {\r\n      attrs.title = title\r\n    }\r\n    return h('label', {\r\n      class: ['vxe-checkbox', {\r\n        [`size--${vSize}`]: vSize,\r\n        'is--indeterminate': indeterminate,\r\n        'is--disabled': isDisabled\r\n      }],\r\n      attrs\r\n    }, [\r\n      h('input', {\r\n        class: 'vxe-checkbox--input',\r\n        attrs: {\r\n          type: 'checkbox',\r\n          disabled: isDisabled\r\n        },\r\n        domProps: {\r\n          checked: isGroup ? XEUtils.includes($xecheckboxgroup.value, label) : value\r\n        },\r\n        on: {\r\n          change: this.changeEvent\r\n        }\r\n      }),\r\n      h('span', {\r\n        class: 'vxe-checkbox--icon'\r\n      }),\r\n      h('span', {\r\n        class: 'vxe-checkbox--label'\r\n      }, $scopedSlots.default ? $scopedSlots.default.call(this, {}) : [UtilTools.getFuncText(content)])\r\n    ])\r\n  },\r\n  methods: {\r\n    changeEvent (evnt) {\r\n      const { $xecheckboxgroup, isGroup, isDisabled, label } = this\r\n      if (!isDisabled) {\r\n        const checked = evnt.target.checked\r\n        const params = { checked, label, $event: evnt }\r\n        if (isGroup) {\r\n          $xecheckboxgroup.handleChecked(params)\r\n        } else {\r\n          this.$emit('input', checked)\r\n          this.$emit('change', params)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}]}