{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\toolbar\\src\\toolbar.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\toolbar\\src\\toolbar.js","mtime":1638515725805},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport VXETable from \"../../v-x-e-table\";\nimport vSize from \"../../mixins/size\";\nimport { UtilTools, DomTools, GlobalEvent } from \"../../tools\";\n\nvar renderDropdowns = function renderDropdowns(h, _vm, item, isBtn) {\n  var _e = _vm._e;\n  var dropdowns = item.dropdowns;\n\n  if (dropdowns) {\n    return dropdowns.map(function (child) {\n      return child.visible === false ? _e() : h('vxe-button', {\n        on: {\n          click: function click(evnt) {\n            return isBtn ? _vm.btnEvent(evnt, child) : _vm.tolEvent(evnt, child);\n          }\n        },\n        props: {\n          disabled: child.disabled,\n          loading: child.loading,\n          type: child.type,\n          icon: child.icon,\n          circle: child.circle,\n          round: child.round,\n          status: child.status,\n          content: child.name\n        }\n      });\n    });\n  }\n\n  return [];\n};\n/**\r\n * 渲染按钮\r\n */\n\n\nfunction renderBtns(h, _vm) {\n  var _e = _vm._e,\n      $scopedSlots = _vm.$scopedSlots,\n      $xegrid = _vm.$xegrid,\n      $xetable = _vm.$xetable,\n      _vm$buttons = _vm.buttons,\n      buttons = _vm$buttons === void 0 ? [] : _vm$buttons;\n  var buttonsSlot = $scopedSlots.buttons;\n\n  if (buttonsSlot) {\n    return buttonsSlot.call(_vm, {\n      $grid: $xegrid,\n      $table: $xetable\n    }, h);\n  }\n\n  return buttons.map(function (item) {\n    var dropdowns = item.dropdowns,\n        buttonRender = item.buttonRender;\n    var compConf = buttonRender ? VXETable.renderer.get(buttonRender.name) : null;\n\n    if (item.visible === false) {\n      return _e();\n    }\n\n    if (compConf) {\n      var renderToolbarButton = compConf.renderToolbarButton || compConf.renderButton;\n\n      if (renderToolbarButton) {\n        return h('span', {\n          class: 'vxe-button--item'\n        }, renderToolbarButton.call(_vm, h, buttonRender, {\n          $grid: $xegrid,\n          $table: $xetable,\n          button: item\n        }));\n      }\n    }\n\n    return h('vxe-button', {\n      on: {\n        click: function click(evnt) {\n          return _vm.btnEvent(evnt, item);\n        }\n      },\n      props: {\n        disabled: item.disabled,\n        loading: item.loading,\n        type: item.type,\n        icon: item.icon,\n        circle: item.circle,\n        round: item.round,\n        status: item.status,\n        content: item.name,\n        destroyOnClose: item.destroyOnClose,\n        placement: item.placement,\n        transfer: item.transfer\n      },\n      scopedSlots: dropdowns && dropdowns.length ? {\n        dropdowns: function dropdowns() {\n          return renderDropdowns(h, _vm, item, true);\n        }\n      } : null\n    });\n  });\n}\n/**\r\n * 渲染右侧工具\r\n */\n\n\nfunction renderRightTools(h, _vm) {\n  var _e = _vm._e,\n      $scopedSlots = _vm.$scopedSlots,\n      $xegrid = _vm.$xegrid,\n      $xetable = _vm.$xetable,\n      _vm$tools = _vm.tools,\n      tools = _vm$tools === void 0 ? [] : _vm$tools;\n  var toolsSlot = $scopedSlots.tools;\n\n  if (toolsSlot) {\n    return toolsSlot.call(_vm, {\n      $grid: $xegrid,\n      $table: $xetable\n    }, h);\n  }\n\n  return tools.map(function (item) {\n    var dropdowns = item.dropdowns,\n        toolRender = item.toolRender;\n    var compConf = toolRender ? VXETable.renderer.get(toolRender.name) : null;\n\n    if (item.visible === false) {\n      return _e();\n    }\n\n    if (compConf) {\n      var renderToolbarTool = compConf.renderToolbarTool;\n\n      if (renderToolbarTool) {\n        return h('span', {\n          class: 'vxe-tool--item'\n        }, renderToolbarTool.call(_vm, h, toolRender, {\n          $grid: $xegrid,\n          $table: $xetable,\n          tool: item\n        }));\n      }\n    }\n\n    return h('vxe-button', {\n      on: {\n        click: function click(evnt) {\n          return _vm.tolEvent(evnt, item);\n        }\n      },\n      props: {\n        disabled: item.disabled,\n        loading: item.loading,\n        type: item.type,\n        icon: item.icon,\n        circle: item.circle,\n        round: item.round,\n        status: item.status,\n        content: item.name,\n        destroyOnClose: item.destroyOnClose,\n        placement: item.placement,\n        transfer: item.transfer\n      },\n      scopedSlots: dropdowns && dropdowns.length ? {\n        dropdowns: function dropdowns() {\n          return renderDropdowns(h, _vm, item, false);\n        }\n      } : null\n    });\n  });\n}\n\nfunction renderCustoms(h, _vm) {\n  var $xetable = _vm.$xetable,\n      customStore = _vm.customStore,\n      customOpts = _vm.customOpts,\n      columns = _vm.columns;\n  var cols = [];\n  var customBtnOns = {};\n  var customWrapperOns = {};\n  var checkMethod = $xetable ? $xetable.customOpts.checkMethod : null;\n\n  if (customOpts.trigger === 'manual') {// 手动触发\n  } else if (customOpts.trigger === 'hover') {\n    // hover 触发\n    customBtnOns.mouseenter = _vm.handleMouseenterSettingEvent;\n    customBtnOns.mouseleave = _vm.handleMouseleaveSettingEvent;\n    customWrapperOns.mouseenter = _vm.handleWrapperMouseenterEvent;\n    customWrapperOns.mouseleave = _vm.handleWrapperMouseleaveEvent;\n  } else {\n    // 点击触发\n    customBtnOns.click = _vm.handleClickSettingEvent;\n  }\n\n  XEUtils.eachTree(columns, function (column) {\n    var colTitle = UtilTools.formatText(column.getTitle(), 1);\n    var colKey = column.getKey();\n    var isColGroup = column.children && column.children.length;\n    var isDisabled = checkMethod ? !checkMethod({\n      column: column\n    }) : false;\n\n    if (isColGroup || colKey) {\n      cols.push(h('li', {\n        class: ['vxe-custom--option', \"level--\".concat(column.level), {\n          'is--group': isColGroup,\n          'is--checked': column.visible,\n          'is--indeterminate': column.halfVisible,\n          'is--disabled': isDisabled\n        }],\n        attrs: {\n          title: colTitle\n        },\n        on: {\n          click: function click() {\n            if (!isDisabled) {\n              _vm.changeCustomOption(column);\n            }\n          }\n        }\n      }, [h('span', {\n        class: 'vxe-checkbox--icon vxe-checkbox--checked-icon',\n        style: {\n          '--checkedColor': $_theme.color\n        }\n      }), h('span', {\n        class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon',\n        style: {\n          '--checkedColor': $_theme.color\n        }\n      }), h('span', {\n        class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon',\n        style: {\n          '--checkedColor': $_theme.color\n        }\n      }), h('span', {\n        class: 'vxe-checkbox--label'\n      }, colTitle)]));\n    }\n  });\n  return h('div', {\n    class: ['vxe-custom--wrapper', {\n      'is--active': customStore.visible\n    }],\n    ref: 'customWrapper'\n  }, [h('vxe-button', {\n    props: {\n      circle: true,\n      icon: customOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_CUSTOM\n    },\n    attrs: {\n      title: GlobalConfig.i18n('vxe.toolbar.custom')\n    },\n    on: customBtnOns\n  }), h('div', {\n    class: 'vxe-custom--option-wrapper'\n  }, [h('ul', {\n    class: 'vxe-custom--header'\n  }, [h('li', {\n    class: ['vxe-custom--option', {\n      'is--checked': customStore.isAll,\n      'is--indeterminate': customStore.isIndeterminate\n    }],\n    attrs: {\n      title: GlobalConfig.i18n('vxe.table.allTitle')\n    },\n    on: {\n      click: _vm.allCustomEvent\n    }\n  }, [h('span', {\n    class: 'vxe-checkbox--icon vxe-checkbox--checked-icon',\n    style: {\n      '--checkedColor': $_theme.color\n    }\n  }), h('span', {\n    class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon',\n    style: {\n      '--checkedColor': $_theme.color\n    }\n  }), h('span', {\n    class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon',\n    style: {\n      '--checkedColor': $_theme.color\n    }\n  }), h('span', {\n    class: 'vxe-checkbox--label'\n  }, GlobalConfig.i18n('vxe.toolbar.customAll'))])]), h('ul', {\n    class: 'vxe-custom--body',\n    on: customWrapperOns\n  }, cols), customOpts.isFooter === false ? null : h('div', {\n    class: 'vxe-custom--footer'\n  }, [h('button', {\n    class: 'btn--confirm',\n    on: {\n      click: _vm.confirmCustomEvent\n    }\n  }, GlobalConfig.i18n('vxe.toolbar.customConfirm')), h('button', {\n    class: 'btn--reset',\n    on: {\n      click: _vm.resetCustomEvent\n    }\n  }, GlobalConfig.i18n('vxe.toolbar.customRestore'))])])]);\n}\n\nexport default {\n  name: 'VxeToolbar',\n  mixins: [vSize],\n  props: {\n    loading: Boolean,\n    refresh: [Boolean, Object],\n    import: [Boolean, Object],\n    export: [Boolean, Object],\n    print: [Boolean, Object],\n    zoom: [Boolean, Object],\n    custom: [Boolean, Object],\n    buttons: {\n      type: Array,\n      default: function _default() {\n        return GlobalConfig.toolbar.buttons;\n      }\n    },\n    tools: {\n      type: Array,\n      default: function _default() {\n        return GlobalConfig.toolbar.tools;\n      }\n    },\n    perfect: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.toolbar.perfect;\n      }\n    },\n    size: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.toolbar.size || GlobalConfig.size;\n      }\n    },\n    className: [String, Function]\n  },\n  inject: {\n    $xegrid: {\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      $xetable: null,\n      isRefresh: false,\n      columns: [],\n      customStore: {\n        isAll: false,\n        isIndeterminate: false,\n        visible: false\n      }\n    };\n  },\n  computed: {\n    refreshOpts: function refreshOpts() {\n      return Object.assign({}, GlobalConfig.toolbar.refresh, this.refresh);\n    },\n    importOpts: function importOpts() {\n      return Object.assign({}, GlobalConfig.toolbar.import, this.import);\n    },\n    exportOpts: function exportOpts() {\n      return Object.assign({}, GlobalConfig.toolbar.export, this.export);\n    },\n    printOpts: function printOpts() {\n      return Object.assign({}, GlobalConfig.toolbar.print, this.print);\n    },\n    zoomOpts: function zoomOpts() {\n      return Object.assign({}, GlobalConfig.toolbar.zoom, this.zoom);\n    },\n    customOpts: function customOpts() {\n      return Object.assign({}, GlobalConfig.toolbar.custom, this.custom);\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    var refresh = this.refresh,\n        refreshOpts = this.refreshOpts;\n    this.$nextTick(function () {\n      var $xetable = _this.fintTable();\n\n      if (refresh && !_this.$xegrid && !refreshOpts.query) {\n        UtilTools.warn('vxe.error.notFunc', ['query']);\n      }\n\n      if ($xetable) {\n        $xetable.connect(_this);\n      }\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (_this.buttons) {\n          _this.buttons.forEach(function (item) {\n            var buttonRender = item.buttonRender;\n            var compConf = buttonRender ? VXETable.renderer.get(buttonRender.name) : null;\n\n            if (compConf && compConf.renderButton) {\n              UtilTools.warn('vxe.error.delFunc', ['renderButton', 'renderToolbarButton']);\n            }\n          });\n        }\n      }\n    });\n    GlobalEvent.on(this, 'mousedown', this.handleGlobalMousedownEvent);\n    GlobalEvent.on(this, 'blur', this.handleGlobalBlurEvent);\n  },\n  destroyed: function destroyed() {\n    GlobalEvent.off(this, 'mousedown');\n    GlobalEvent.off(this, 'blur');\n  },\n  render: function render(h) {\n    var _ref;\n\n    var _e = this._e,\n        $xegrid = this.$xegrid,\n        perfect = this.perfect,\n        loading = this.loading,\n        importOpts = this.importOpts,\n        exportOpts = this.exportOpts,\n        refresh = this.refresh,\n        refreshOpts = this.refreshOpts,\n        zoom = this.zoom,\n        zoomOpts = this.zoomOpts,\n        custom = this.custom,\n        vSize = this.vSize,\n        className = this.className;\n    return h('div', {\n      class: ['vxe-toolbar', className ? XEUtils.isFunction(className) ? className({\n        $toolbar: this\n      }) : className : '', (_ref = {}, _defineProperty(_ref, \"size--\".concat(vSize), vSize), _defineProperty(_ref, 'is--perfect', perfect), _defineProperty(_ref, 'is--loading', loading), _ref)]\n    }, [h('div', {\n      class: 'vxe-buttons--wrapper'\n    }, renderBtns(h, this)), h('div', {\n      class: 'vxe-tools--wrapper'\n    }, renderRightTools(h, this)), h('div', {\n      class: 'vxe-tools--operate'\n    }, [this.import ? h('vxe-button', {\n      props: {\n        circle: true,\n        icon: importOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_IMPORT\n      },\n      attrs: {\n        title: GlobalConfig.i18n('vxe.toolbar.import')\n      },\n      on: {\n        click: this.importEvent\n      }\n    }) : _e(), this.export ? h('vxe-button', {\n      props: {\n        circle: true,\n        icon: exportOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_EXPORT\n      },\n      attrs: {\n        title: GlobalConfig.i18n('vxe.toolbar.export')\n      },\n      on: {\n        click: this.exportEvent\n      }\n    }) : _e(), this.print ? h('vxe-button', {\n      props: {\n        circle: true,\n        icon: this.printOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_PRINT\n      },\n      attrs: {\n        title: GlobalConfig.i18n('vxe.toolbar.print')\n      },\n      on: {\n        click: this.printEvent\n      }\n    }) : _e(), refresh ? h('vxe-button', {\n      props: {\n        circle: true,\n        icon: this.isRefresh ? refreshOpts.iconLoading || GlobalConfig.icon.TOOLBAR_TOOLS_REFRESH_LOADING : refreshOpts.icon || GlobalConfig.icon.TOOLBAR_TOOLS_REFRESH\n      },\n      attrs: {\n        title: GlobalConfig.i18n('vxe.toolbar.refresh')\n      },\n      on: {\n        click: this.refreshEvent\n      }\n    }) : _e(), zoom && $xegrid ? h('vxe-button', {\n      props: {\n        circle: true,\n        icon: $xegrid.isMaximized() ? zoomOpts.iconOut || GlobalConfig.icon.TOOLBAR_TOOLS_ZOOM_OUT : zoomOpts.iconIn || GlobalConfig.icon.TOOLBAR_TOOLS_ZOOM_IN\n      },\n      attrs: {\n        title: GlobalConfig.i18n(\"vxe.toolbar.zoom\".concat($xegrid.isMaximized() ? 'Out' : 'In'))\n      },\n      on: {\n        click: $xegrid.triggerZoomEvent\n      }\n    }) : _e(), custom ? renderCustoms(h, this) : _e()])]);\n  },\n  methods: {\n    syncUpdate: function syncUpdate(params) {\n      var collectColumn = params.collectColumn,\n          $table = params.$table;\n      this.$xetable = $table;\n      this.columns = collectColumn;\n    },\n    fintTable: function fintTable() {\n      var $children = this.$parent.$children;\n      var selfIndex = $children.indexOf(this);\n      return XEUtils.find($children, function (comp, index) {\n        return comp && comp.loadData && index > selfIndex && comp.$vnode.componentOptions.tag === 'vxe-table';\n      });\n    },\n    checkTable: function checkTable() {\n      if (this.$xetable) {\n        return true;\n      }\n\n      UtilTools.error('vxe.error.barUnableLink');\n    },\n    showCustom: function showCustom() {\n      this.customStore.visible = true;\n      this.checkCustomStatus();\n    },\n    closeCustom: function closeCustom() {\n      var custom = this.custom,\n          customStore = this.customStore;\n\n      if (customStore.visible) {\n        customStore.visible = false;\n\n        if (custom && !customStore.immediate) {\n          this.handleTableCustom();\n        }\n      }\n    },\n    confirmCustomEvent: function confirmCustomEvent(evnt) {\n      this.closeCustom();\n      this.emitCustomEvent('confirm', evnt);\n    },\n    customOpenEvent: function customOpenEvent(evnt) {\n      var customStore = this.customStore;\n\n      if (this.checkTable()) {\n        if (!customStore.visible) {\n          this.showCustom();\n          this.emitCustomEvent('open', evnt);\n        }\n      }\n    },\n    customColseEvent: function customColseEvent(evnt) {\n      var customStore = this.customStore;\n\n      if (customStore.visible) {\n        this.closeCustom();\n        this.emitCustomEvent('close', evnt);\n      }\n    },\n    resetCustomEvent: function resetCustomEvent(evnt) {\n      var $xetable = this.$xetable,\n          columns = this.columns;\n      var checkMethod = $xetable.customOpts.checkMethod;\n      XEUtils.eachTree(columns, function (column) {\n        if (!checkMethod || checkMethod({\n          column: column\n        })) {\n          column.visible = column.defaultVisible;\n          column.halfVisible = false;\n        }\n\n        column.resizeWidth = 0;\n      });\n      $xetable.saveCustomResizable(true);\n      this.closeCustom();\n      this.emitCustomEvent('reset', evnt);\n    },\n    emitCustomEvent: function emitCustomEvent(type, evnt) {\n      var $xetable = this.$xetable,\n          $xegrid = this.$xegrid;\n      var comp = $xegrid || $xetable;\n      comp.$emit('custom', {\n        type: type,\n        $table: $xetable,\n        $grid: $xegrid,\n        $event: evnt\n      });\n    },\n    changeCustomOption: function changeCustomOption(column) {\n      var isChecked = !column.visible;\n      XEUtils.eachTree([column], function (item) {\n        item.visible = isChecked;\n        item.halfVisible = false;\n      });\n      this.handleOptionCheck(column);\n\n      if (this.custom && this.customOpts.immediate) {\n        this.handleTableCustom();\n      }\n\n      this.checkCustomStatus();\n    },\n    handleOptionCheck: function handleOptionCheck(column) {\n      var matchObj = XEUtils.findTree(this.columns, function (item) {\n        return item === column;\n      });\n\n      if (matchObj && matchObj.parent) {\n        var parent = matchObj.parent;\n\n        if (parent.children && parent.children.length) {\n          parent.visible = parent.children.every(function (column) {\n            return column.visible;\n          });\n          parent.halfVisible = !parent.visible && parent.children.some(function (column) {\n            return column.visible || column.halfVisible;\n          });\n          this.handleOptionCheck(parent);\n        }\n      }\n    },\n    handleTableCustom: function handleTableCustom() {\n      var $xetable = this.$xetable;\n      $xetable.handleCustom();\n    },\n    checkCustomStatus: function checkCustomStatus() {\n      var $xetable = this.$xetable,\n          columns = this.columns;\n      var checkMethod = $xetable.customOpts.checkMethod;\n      this.customStore.isAll = columns.every(function (column) {\n        return (checkMethod ? !checkMethod({\n          column: column\n        }) : false) || column.visible;\n      });\n      this.customStore.isIndeterminate = !this.customStore.isAll && columns.some(function (column) {\n        return (!checkMethod || checkMethod({\n          column: column\n        })) && (column.visible || column.halfVisible);\n      });\n    },\n    allCustomEvent: function allCustomEvent() {\n      var $xetable = this.$xetable,\n          columns = this.columns,\n          customStore = this.customStore;\n      var checkMethod = $xetable.customOpts.checkMethod;\n      var isAll = !customStore.isAll;\n      XEUtils.eachTree(columns, function (column) {\n        if (!checkMethod || checkMethod({\n          column: column\n        })) {\n          column.visible = isAll;\n          column.halfVisible = false;\n        }\n      });\n      customStore.isAll = isAll;\n      this.checkCustomStatus();\n    },\n    handleGlobalMousedownEvent: function handleGlobalMousedownEvent(evnt) {\n      if (!DomTools.getEventTargetNode(evnt, this.$refs.customWrapper).flag) {\n        this.customColseEvent(evnt);\n      }\n    },\n    handleGlobalBlurEvent: function handleGlobalBlurEvent(evnt) {\n      this.customColseEvent(evnt);\n    },\n    handleClickSettingEvent: function handleClickSettingEvent(evnt) {\n      if (this.customStore.visible) {\n        this.customColseEvent(evnt);\n      } else {\n        this.customOpenEvent(evnt);\n      }\n    },\n    handleMouseenterSettingEvent: function handleMouseenterSettingEvent(evnt) {\n      this.customStore.activeBtn = true;\n      this.customOpenEvent(evnt);\n    },\n    handleMouseleaveSettingEvent: function handleMouseleaveSettingEvent(evnt) {\n      var _this2 = this;\n\n      var customStore = this.customStore;\n      customStore.activeBtn = false;\n      setTimeout(function () {\n        if (!customStore.activeBtn && !customStore.activeWrapper) {\n          _this2.customColseEvent(evnt);\n        }\n      }, 300);\n    },\n    handleWrapperMouseenterEvent: function handleWrapperMouseenterEvent(evnt) {\n      this.customStore.activeWrapper = true;\n      this.customOpenEvent(evnt);\n    },\n    handleWrapperMouseleaveEvent: function handleWrapperMouseleaveEvent(evnt) {\n      var _this3 = this;\n\n      var customStore = this.customStore;\n      customStore.activeWrapper = false;\n      setTimeout(function () {\n        if (!customStore.activeBtn && !customStore.activeWrapper) {\n          _this3.customColseEvent(evnt);\n        }\n      }, 300);\n    },\n    refreshEvent: function refreshEvent() {\n      var _this4 = this;\n\n      var $xegrid = this.$xegrid,\n          refreshOpts = this.refreshOpts,\n          isRefresh = this.isRefresh;\n\n      if (!isRefresh) {\n        if (refreshOpts.query) {\n          this.isRefresh = true;\n\n          try {\n            Promise.resolve(refreshOpts.query()).catch(function (e) {\n              return e;\n            }).then(function () {\n              _this4.isRefresh = false;\n            });\n          } catch (e) {\n            this.isRefresh = false;\n          }\n        } else if ($xegrid) {\n          this.isRefresh = true;\n          $xegrid.commitProxy('reload').catch(function (e) {\n            return e;\n          }).then(function () {\n            _this4.isRefresh = false;\n          });\n        }\n      }\n    },\n    btnEvent: function btnEvent(evnt, item) {\n      var $xegrid = this.$xegrid,\n          $xetable = this.$xetable;\n      var code = item.code;\n\n      if (code) {\n        if ($xegrid) {\n          $xegrid.triggerToolbarBtnEvent(item, evnt);\n        } else {\n          var commandMethod = VXETable.commands.get(code);\n          var params = {\n            code: code,\n            button: item,\n            $xegrid: $xegrid,\n            $table: $xetable,\n            $event: evnt\n          };\n\n          if (commandMethod) {\n            commandMethod.call(this, params, evnt);\n          }\n\n          this.$emit('button-click', params);\n        }\n      }\n    },\n    tolEvent: function tolEvent(evnt, item) {\n      var $xegrid = this.$xegrid,\n          $xetable = this.$xetable;\n      var code = item.code;\n\n      if (code) {\n        if ($xegrid) {\n          $xegrid.triggerToolbarTolEvent(item, evnt);\n        } else {\n          var commandMethod = VXETable.commands.get(code);\n          var params = {\n            code: code,\n            tool: item,\n            $xegrid: $xegrid,\n            $table: $xetable,\n            $event: evnt\n          };\n\n          if (commandMethod) {\n            commandMethod.call(this, params, evnt);\n          }\n\n          this.$emit('tool-click', params);\n        }\n      }\n    },\n    importEvent: function importEvent() {\n      if (this.checkTable()) {\n        this.$xetable.openImport(this.importOpts);\n      }\n    },\n    exportEvent: function exportEvent() {\n      if (this.checkTable()) {\n        this.$xetable.openExport(this.exportOpts);\n      }\n    },\n    printEvent: function printEvent() {\n      if (this.checkTable()) {\n        this.$xetable.openPrint(this.printOpts);\n      }\n    }\n  }\n};",null]}