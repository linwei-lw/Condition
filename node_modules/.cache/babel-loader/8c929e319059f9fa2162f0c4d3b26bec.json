{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\export\\src\\mixin.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\export\\src\\mixin.js","mtime":1635230120954},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.string.repeat\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.string.repeat\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport VXETable from \"../../v-x-e-table\";\nimport { UtilTools } from \"../../tools\";\nimport { mergeBodyMethod } from \"../../table/src/util\";\nimport { browse } from \"../../tools/src/dom\";\nvar formatText = UtilTools.formatText; // 默认导出或打印的 HTML 样式\n\nvar defaultHtmlStyle = 'body{margin:0;color:#333333;font-size:14px;font-family:\"Microsoft YaHei\",微软雅黑,\"MicrosoftJhengHei\",华文细黑,STHeiti,MingLiu}body *{-webkit-box-sizing:border-box;box-sizing:border-box}.vxe-table{border-collapse:collapse;text-align:left;border-spacing:0}.vxe-table:not(.is--print){table-layout:fixed}.vxe-table,.vxe-table th,.vxe-table td,.vxe-table td{border-color:#D0D0D0;border-style:solid;border-width:0}.vxe-table.is--print{width:100%}.border--default,.border--full,.border--outer{border-top-width:1px}.border--default,.border--full,.border--outer{border-left-width:1px}.border--outer,.border--default th,.border--default td,.border--full th,.border--full td,.border--outer th,.border--inner th,.border--inner td{border-bottom-width:1px}.border--default,.border--outer,.border--full th,.border--full td{border-right-width:1px}.border--default th,.border--full th,.border--outer th{background-color:#f8f8f9}.vxe-table td>div,.vxe-table th>div{padding:.5em .4em}.col--center{text-align:center}.col--right{text-align:right}.vxe-table:not(.is--print) .col--ellipsis>div{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-break:break-all}.vxe-table--tree-node{text-align:left}.vxe-table--tree-node-wrapper{position:relative}.vxe-table--tree-icon-wrapper{position:absolute;top:50%;width:1em;height:1em;text-align:center;-webkit-transform:translateY(-50%);transform:translateY(-50%);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.vxe-table--tree-unfold-icon,.vxe-table--tree-fold-icon{position:absolute;width:0;height:0;border-style:solid;border-width:.5em;border-right-color:transparent;border-bottom-color:transparent}.vxe-table--tree-unfold-icon{left:.3em;top:0;border-left-color:#939599;border-top-color:transparent}.vxe-table--tree-fold-icon{left:0;top:.3em;border-left-color:transparent;border-top-color:#939599}.vxe-table--tree-cell{display:block;padding-left:1.5em}.vxe-table input[type=\"checkbox\"]{margin:0}.vxe-table input[type=\"checkbox\"],.vxe-table input[type=\"radio\"],.vxe-table input[type=\"checkbox\"]+span,.vxe-table input[type=\"radio\"]+span{vertical-align:middle;padding-left:0.4em}';\nvar htmlCellElem; // 导入\n\nvar fileForm;\nvar fileInput; // 打印\n\nvar printFrame;\nvar csvBOM = \"\\uFEFF\";\nvar enterSymbol = '\\r\\n';\n\nfunction createFrame() {\n  var frame = document.createElement('iframe');\n  frame.className = 'vxe-table--print-frame';\n  return frame;\n}\n\nfunction getExportBlobByContent(content, options) {\n  if (window.Blob) {\n    return new Blob([content], {\n      type: \"text/\".concat(options.type)\n    });\n  }\n\n  return null;\n}\n\nfunction hasTreeChildren($xetable, row) {\n  var treeOpts = $xetable.treeOpts;\n  return row[treeOpts.children] && row[treeOpts.children].length > 0;\n}\n\nfunction getSeq($xetable, row, rowIndex, column, columnIndex) {\n  var seqOpts = $xetable.seqOpts;\n  var seqMethod = seqOpts.seqMethod || column.seqMethod;\n  return seqMethod ? seqMethod({\n    row: row,\n    rowIndex: rowIndex,\n    column: column,\n    columnIndex: columnIndex\n  }) : seqOpts.startIndex + rowIndex + 1;\n}\n\nfunction defaultFilterExportColumn(column) {\n  return column.property || ['seq', 'index', 'checkbox', 'radio'].indexOf(column.type) > -1;\n}\n\nfunction toTableBorder(border) {\n  if (border === true) {\n    return 'full';\n  }\n\n  if (border) {\n    return border;\n  }\n\n  return 'default';\n}\n\nfunction toBooleanValue(cellValue) {\n  return XEUtils.isBoolean(cellValue) ? cellValue ? 'TRUE' : 'FALSE' : cellValue;\n}\n\nfunction getLabelData($xetable, opts, columns, datas) {\n  var isAllExpand = opts.isAllExpand;\n  var treeConfig = $xetable.treeConfig,\n      treeOpts = $xetable.treeOpts,\n      radioOpts = $xetable.radioOpts,\n      checkboxOpts = $xetable.checkboxOpts;\n\n  if (!htmlCellElem) {\n    htmlCellElem = document.createElement('div');\n  }\n\n  if (treeConfig) {\n    // 如果是树表格只允许导出数据源\n    var rest = [];\n    XEUtils.eachTree(datas, function (item, rowIndex, items, path, parent, nodes) {\n      var row = item._row || item;\n      var parentRow = parent && parent._row ? parent._row : parent;\n\n      if (isAllExpand || !parentRow || $xetable.isTreeExpandByRow(parentRow)) {\n        var hasRowChild = hasTreeChildren($xetable, row);\n        var _item = {\n          _row: row,\n          _level: nodes.length - 1,\n          _hasChild: hasRowChild,\n          _expand: hasRowChild && $xetable.isTreeExpandByRow(row)\n        };\n        columns.forEach(function (column, columnIndex) {\n          var cellValue = '';\n          var renderOpts = column.editRender || column.cellRender;\n          var exportLabelMethod = column.exportMethod;\n\n          if (!exportLabelMethod && renderOpts && renderOpts.name) {\n            var compConf = VXETable.renderer.get(renderOpts.name);\n\n            if (compConf) {\n              exportLabelMethod = compConf.exportMethod || compConf.cellExportMethod;\n            }\n          }\n\n          if (exportLabelMethod) {\n            cellValue = exportLabelMethod({\n              $table: $xetable,\n              row: row,\n              column: column,\n              options: opts\n            });\n          } else {\n            switch (column.type) {\n              case 'index':\n              case 'seq':\n                cellValue = getSeq($xetable, row, rowIndex, column, columnIndex);\n                break;\n\n              case 'checkbox':\n                cellValue = toBooleanValue($xetable.isCheckedByCheckboxRow(row));\n                _item._checkboxLabel = checkboxOpts.labelField ? XEUtils.get(row, checkboxOpts.labelField) : '';\n                _item._checkboxDisabled = checkboxOpts.checkMethod && !checkboxOpts.checkMethod({\n                  row: row\n                });\n                break;\n\n              case 'radio':\n                cellValue = toBooleanValue($xetable.isCheckedByRadioRow(row));\n                _item._radioLabel = radioOpts.labelField ? XEUtils.get(row, radioOpts.labelField) : '';\n                _item._radioDisabled = radioOpts.checkMethod && !radioOpts.checkMethod({\n                  row: row\n                });\n                break;\n\n              default:\n                if (opts.original) {\n                  cellValue = UtilTools.getCellValue(row, column);\n                } else {\n                  cellValue = $xetable.getCellLabel(row, column);\n\n                  if (column.type === 'html') {\n                    htmlCellElem.innerHTML = cellValue;\n                    cellValue = htmlCellElem.innerText.trim();\n                  } else {\n                    var cell = $xetable.getCell(row, column);\n\n                    if (cell) {\n                      cellValue = cell.innerText.trim();\n                    }\n                  }\n                }\n\n            }\n          }\n\n          _item[column.id] = XEUtils.toString(cellValue);\n        });\n        rest.push(Object.assign(_item, row));\n      }\n    }, treeOpts);\n    return rest;\n  }\n\n  return datas.map(function (row, rowIndex) {\n    var item = {\n      _row: row\n    };\n    columns.forEach(function (column, columnIndex) {\n      var cellValue = '';\n      var renderOpts = column.editRender || column.cellRender;\n      var exportLabelMethod = column.exportMethod;\n\n      if (!exportLabelMethod && renderOpts && renderOpts.name) {\n        var compConf = VXETable.renderer.get(renderOpts.name);\n\n        if (compConf) {\n          exportLabelMethod = compConf.exportMethod || compConf.cellExportMethod;\n        }\n      }\n\n      if (exportLabelMethod) {\n        cellValue = exportLabelMethod({\n          $table: $xetable,\n          row: row,\n          column: column,\n          options: opts\n        });\n      } else {\n        switch (column.type) {\n          case 'index':\n          case 'seq':\n            cellValue = getSeq($xetable, row, rowIndex, column, columnIndex);\n            break;\n\n          case 'checkbox':\n            cellValue = toBooleanValue($xetable.isCheckedByCheckboxRow(row));\n            item._checkboxLabel = checkboxOpts.labelField ? XEUtils.get(row, checkboxOpts.labelField) : '';\n            item._checkboxDisabled = checkboxOpts.checkMethod && !checkboxOpts.checkMethod({\n              row: row\n            });\n            break;\n\n          case 'radio':\n            cellValue = toBooleanValue($xetable.isCheckedByRadioRow(row));\n            item._radioLabel = radioOpts.labelField ? XEUtils.get(row, radioOpts.labelField) : '';\n            item._radioDisabled = radioOpts.checkMethod && !radioOpts.checkMethod({\n              row: row\n            });\n            break;\n\n          default:\n            if (opts.original) {\n              cellValue = UtilTools.getCellValue(row, column);\n            } else {\n              cellValue = $xetable.getCellLabel(row, column);\n\n              if (column.type === 'html') {\n                htmlCellElem.innerHTML = cellValue;\n                cellValue = htmlCellElem.innerText.trim();\n              } else {\n                var cell = $xetable.getCell(row, column);\n\n                if (cell) {\n                  cellValue = cell.innerText.trim();\n                }\n              }\n            }\n\n        }\n      }\n\n      item[column.id] = XEUtils.toString(cellValue);\n    });\n    return item;\n  });\n}\n\nfunction getExportData($xetable, opts) {\n  var columns = opts.columns,\n      dataFilterMethod = opts.dataFilterMethod;\n  var datas = opts.data;\n\n  if (dataFilterMethod) {\n    datas = datas.filter(function (row, index) {\n      return dataFilterMethod({\n        row: row,\n        $rowIndex: index\n      });\n    });\n  }\n\n  return getLabelData($xetable, opts, columns, datas);\n}\n\nfunction getBooleanValue(cellValue) {\n  return cellValue === 'TRUE' || cellValue === 'true' || cellValue === true;\n}\n\nfunction getHeaderTitle(opts, column) {\n  return (opts.original ? column.property : column.getTitle()) || '';\n}\n\nfunction getFooterCellValue($xetable, opts, items, column) {\n  var renderOpts = column.editRender || column.cellRender;\n  var exportLabelMethod = column.footerExportMethod;\n\n  if (!exportLabelMethod && renderOpts && renderOpts.name) {\n    var compConf = VXETable.renderer.get(renderOpts.name);\n\n    if (compConf) {\n      exportLabelMethod = compConf.footerExportMethod || compConf.footerCellExportMethod;\n    }\n  }\n\n  var _columnIndex = $xetable.getVTColumnIndex(column);\n\n  var cellValue = exportLabelMethod ? exportLabelMethod({\n    $table: $xetable,\n    items: items,\n    itemIndex: _columnIndex,\n    _columnIndex: _columnIndex,\n    column: column,\n    options: opts\n  }) : XEUtils.toString(items[_columnIndex]);\n  return cellValue;\n}\n\nfunction getFooterData(opts, footerTableData) {\n  var footerFilterMethod = opts.footerFilterMethod;\n  return footerFilterMethod ? footerTableData.filter(function (items, index) {\n    return footerFilterMethod({\n      items: items,\n      $rowIndex: index\n    });\n  }) : footerTableData;\n}\n\nfunction getCsvCellTypeLabel(column, cellValue) {\n  if (cellValue) {\n    switch (column.cellType) {\n      case 'string':\n        if (!isNaN(cellValue)) {\n          return \"\\t\".concat(cellValue);\n        }\n\n        break;\n\n      case 'number':\n        break;\n\n      default:\n        if (cellValue.length >= 12 && !isNaN(cellValue)) {\n          return \"\\t\".concat(cellValue);\n        }\n\n        break;\n    }\n  }\n\n  return cellValue;\n}\n\nfunction toTxtCellLabel(val) {\n  if (/[\",\\s\\n]/.test(val)) {\n    return \"\\\"\".concat(val.replace(/\"/g, '\"\"'), \"\\\"\");\n  }\n\n  return val;\n}\n\nfunction toCsv($xetable, opts, columns, datas) {\n  var content = csvBOM;\n\n  if (opts.isHeader) {\n    content += columns.map(function (column) {\n      return toTxtCellLabel(getHeaderTitle(opts, column));\n    }).join(',') + enterSymbol;\n  }\n\n  datas.forEach(function (row) {\n    content += columns.map(function (column) {\n      return toTxtCellLabel(getCsvCellTypeLabel(column, row[column.id]));\n    }).join(',') + enterSymbol;\n  });\n\n  if (opts.isFooter) {\n    var footerTableData = $xetable.footerTableData;\n    var footers = getFooterData(opts, footerTableData);\n    footers.forEach(function (rows) {\n      content += columns.map(function (column) {\n        return toTxtCellLabel(getFooterCellValue($xetable, opts, rows, column));\n      }).join(',') + enterSymbol;\n    });\n  }\n\n  return content;\n}\n\nfunction toTxt($xetable, opts, columns, datas) {\n  var content = '';\n\n  if (opts.isHeader) {\n    content += columns.map(function (column) {\n      return toTxtCellLabel(getHeaderTitle(opts, column));\n    }).join('\\t') + enterSymbol;\n  }\n\n  datas.forEach(function (row) {\n    content += columns.map(function (column) {\n      return toTxtCellLabel(row[column.id]);\n    }).join('\\t') + enterSymbol;\n  });\n\n  if (opts.isFooter) {\n    var footerTableData = $xetable.footerTableData;\n    var footers = getFooterData(opts, footerTableData);\n    footers.forEach(function (rows) {\n      content += columns.map(function (column) {\n        return toTxtCellLabel(getFooterCellValue($xetable, opts, rows, column));\n      }).join(',') + enterSymbol;\n    });\n  }\n\n  return content;\n}\n\nfunction hasEllipsis($xetable, column, property, allColumnOverflow) {\n  var columnOverflow = column[property];\n  var headOverflow = XEUtils.isUndefined(columnOverflow) || XEUtils.isNull(columnOverflow) ? allColumnOverflow : columnOverflow;\n  var showEllipsis = headOverflow === 'ellipsis';\n  var showTitle = headOverflow === 'title';\n  var showTooltip = headOverflow === true || headOverflow === 'tooltip';\n  var isEllipsis = showTitle || showTooltip || showEllipsis; // 虚拟滚动不支持动态高度\n\n  if (($xetable.scrollXLoad || $xetable.scrollYLoad) && !isEllipsis) {\n    isEllipsis = true;\n  }\n\n  return isEllipsis;\n}\n\nfunction createHtmlPage(opts, content) {\n  var style = opts.style;\n  return ['<!DOCTYPE html><html>', '<head>', '<meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui\">', \"<title>\".concat(opts.sheetName, \"</title>\"), \"<style>\".concat(defaultHtmlStyle, \"</style>\"), style ? \"<style>\".concat(style, \"</style>\") : '', '</head>', \"<body>\".concat(content, \"</body>\"), '</html>'].join('');\n}\n\nfunction toHtml($xetable, opts, columns, datas) {\n  var id = $xetable.id,\n      border = $xetable.border,\n      treeConfig = $xetable.treeConfig,\n      treeOpts = $xetable.treeOpts,\n      isAllSelected = $xetable.isAllSelected,\n      isIndeterminate = $xetable.isIndeterminate,\n      allHeaderAlign = $xetable.headerAlign,\n      allAlign = $xetable.align,\n      allFooterAlign = $xetable.footerAlign,\n      allColumnOverflow = $xetable.showOverflow,\n      allColumnHeaderOverflow = $xetable.showHeaderOverflow,\n      mergeList = $xetable.mergeList;\n  var isPrint = opts.print,\n      isHeader = opts.isHeader,\n      isFooter = opts.isFooter,\n      isColgroup = opts.isColgroup,\n      isMerge = opts.isMerge,\n      colgroups = opts.colgroups,\n      original = opts.original;\n  var allCls = 'check-all';\n  var clss = ['vxe-table', \"border--\".concat(toTableBorder(border)), isPrint ? 'is--print' : '', isHeader ? 'is--header' : ''].filter(function (cls) {\n    return cls;\n  });\n  var tables = [\"<table class=\\\"\".concat(clss.join(' '), \"\\\" border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"0\\\">\"), \"<colgroup>\".concat(columns.map(function (column) {\n    return \"<col style=\\\"width:\".concat(column.renderWidth, \"px\\\">\");\n  }).join(''), \"</colgroup>\")];\n\n  if (isHeader) {\n    tables.push('<thead>');\n\n    if (isColgroup && !original) {\n      colgroups.forEach(function (cols) {\n        tables.push(\"<tr>\".concat(cols.map(function (column) {\n          var headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign;\n          var classNames = hasEllipsis($xetable, column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : [];\n          var cellTitle = getHeaderTitle(opts, column);\n          var childWidth = 0;\n          var countChild = 0;\n          XEUtils.eachTree([column], function (item) {\n            if (!item.childNodes || !column.childNodes.length) {\n              countChild++;\n            }\n\n            childWidth += item.renderWidth;\n          }, {\n            children: 'childNodes'\n          });\n          var cellWidth = childWidth - countChild;\n\n          if (headAlign) {\n            classNames.push(\"col--\".concat(headAlign));\n          }\n\n          if (column.type === 'checkbox') {\n            return \"<th class=\\\"\".concat(classNames.join(' '), \"\\\" colspan=\\\"\").concat(column._colSpan, \"\\\" rowspan=\\\"\").concat(column._rowSpan, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(cellWidth, \"px\\\"\"), \"><input type=\\\"checkbox\\\" class=\\\"\").concat(allCls, \"\\\" \").concat(isAllSelected ? 'checked' : '', \"><span>\").concat(cellTitle, \"</span></div></th>\");\n          }\n\n          return \"<th class=\\\"\".concat(classNames.join(' '), \"\\\" colspan=\\\"\").concat(column._colSpan, \"\\\" rowspan=\\\"\").concat(column._rowSpan, \"\\\" title=\\\"\").concat(cellTitle, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(cellWidth, \"px\\\"\"), \"><span>\").concat(formatText(cellTitle, true), \"</span></div></th>\");\n        }).join(''), \"</tr>\"));\n      });\n    } else {\n      tables.push(\"<tr>\".concat(columns.map(function (column) {\n        var headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign;\n        var classNames = hasEllipsis($xetable, column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : [];\n        var cellTitle = getHeaderTitle(opts, column);\n\n        if (headAlign) {\n          classNames.push(\"col--\".concat(headAlign));\n        }\n\n        if (column.type === 'checkbox') {\n          return \"<th class=\\\"\".concat(classNames.join(' '), \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><input type=\\\"checkbox\\\" class=\\\"\").concat(allCls, \"\\\" \").concat(isAllSelected ? 'checked' : '', \"><span>\").concat(cellTitle, \"</span></div></th>\");\n        }\n\n        return \"<th class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellTitle, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><span>\").concat(formatText(cellTitle, true), \"</span></div></th>\");\n      }).join(''), \"</tr>\"));\n    }\n\n    tables.push('</thead>');\n  }\n\n  if (datas.length) {\n    tables.push('<tbody>');\n\n    if (treeConfig) {\n      datas.forEach(function (item) {\n        tables.push('<tr>' + columns.map(function (column) {\n          var cellAlign = column.align || allAlign;\n          var classNames = hasEllipsis($xetable, column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n          var cellValue = item[column.id];\n\n          if (cellAlign) {\n            classNames.push(\"col--\".concat(cellAlign));\n          }\n\n          if (column.treeNode) {\n            var treeIcon = '';\n\n            if (item._hasChild) {\n              treeIcon = \"<i class=\\\"\".concat(item._expand ? 'vxe-table--tree-fold-icon' : 'vxe-table--tree-unfold-icon', \"\\\"></i>\");\n            }\n\n            classNames.push('vxe-table--tree-node');\n\n            if (column.type === 'radio') {\n              return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><div class=\\\"vxe-table--tree-node-wrapper\\\" style=\\\"padding-left: \").concat(item._level * treeOpts.indent, \"px\\\"><div class=\\\"vxe-table--tree-icon-wrapper\\\">\").concat(treeIcon, \"</div><div class=\\\"vxe-table--tree-cell\\\"><input type=\\\"radio\\\" name=\\\"radio_\").concat(id, \"\\\" \").concat(item._radioDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._radioLabel, \"</span></div></div></div></td>\");\n            } else if (column.type === 'checkbox') {\n              return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><div class=\\\"vxe-table--tree-node-wrapper\\\" style=\\\"padding-left: \").concat(item._level * treeOpts.indent, \"px\\\"><div class=\\\"vxe-table--tree-icon-wrapper\\\">\").concat(treeIcon, \"</div><div class=\\\"vxe-table--tree-cell\\\"><input type=\\\"checkbox\\\" \").concat(item._checkboxDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._checkboxLabel, \"</span></div></div></div></td>\");\n            }\n\n            return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><div class=\\\"vxe-table--tree-node-wrapper\\\" style=\\\"padding-left: \").concat(item._level * treeOpts.indent, \"px\\\"><div class=\\\"vxe-table--tree-icon-wrapper\\\">\").concat(treeIcon, \"</div><div class=\\\"vxe-table--tree-cell\\\">\").concat(cellValue, \"</div></div></div></td>\");\n          }\n\n          if (column.type === 'radio') {\n            return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><input type=\\\"radio\\\" name=\\\"radio_\").concat(id, \"\\\" \").concat(item._radioDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._radioLabel, \"</span></div></td>\");\n          } else if (column.type === 'checkbox') {\n            return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><input type=\\\"checkbox\\\" \").concat(item._checkboxDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._checkboxLabel, \"</span></div></td>\");\n          }\n\n          return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \">\").concat(formatText(cellValue, true), \"</div></td>\");\n        }).join('') + '</tr>');\n      });\n    } else {\n      datas.forEach(function (item) {\n        tables.push('<tr>' + columns.map(function (column) {\n          var cellAlign = column.align || allAlign;\n          var classNames = hasEllipsis($xetable, column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n          var cellValue = item[column.id];\n          var rowSpan = 1;\n          var colSpan = 1;\n\n          if (isMerge && mergeList.length) {\n            var _rowIndex = $xetable.getVTRowIndex(item._row);\n\n            var _columnIndex = $xetable.getVTColumnIndex(column);\n\n            var spanRest = mergeBodyMethod(mergeList, _rowIndex, _columnIndex);\n\n            if (spanRest) {\n              var rowspan = spanRest.rowspan,\n                  colspan = spanRest.colspan;\n\n              if (!rowspan || !colspan) {\n                return '';\n              }\n\n              if (rowspan > 1) {\n                rowSpan = rowspan;\n              }\n\n              if (colspan > 1) {\n                colSpan = colspan;\n              }\n            }\n          }\n\n          if (cellAlign) {\n            classNames.push(\"col--\".concat(cellAlign));\n          }\n\n          if (column.type === 'radio') {\n            return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" rowspan=\\\"\").concat(rowSpan, \"\\\" colspan=\\\"\").concat(colSpan, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><input type=\\\"radio\\\" name=\\\"radio_\").concat(id, \"\\\" \").concat(item._radioDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._radioLabel, \"</span></div></td>\");\n          } else if (column.type === 'checkbox') {\n            return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" rowspan=\\\"\").concat(rowSpan, \"\\\" colspan=\\\"\").concat(colSpan, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><input type=\\\"checkbox\\\" \").concat(item._checkboxDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._checkboxLabel, \"</span></div></td>\");\n          }\n\n          return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" rowspan=\\\"\").concat(rowSpan, \"\\\" colspan=\\\"\").concat(colSpan, \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \">\").concat(formatText(cellValue, true), \"</div></td>\");\n        }).join('') + '</tr>');\n      });\n    }\n\n    tables.push('</tbody>');\n  }\n\n  if (isFooter) {\n    var footerTableData = $xetable.footerTableData;\n    var footers = getFooterData(opts, footerTableData);\n\n    if (footers.length) {\n      tables.push('<tfoot>');\n      footers.forEach(function (rows) {\n        tables.push(\"<tr>\".concat(columns.map(function (column) {\n          var footAlign = column.footerAlign || column.align || allFooterAlign || allAlign;\n          var classNames = hasEllipsis($xetable, column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n          var cellValue = getFooterCellValue($xetable, opts, rows, column);\n\n          if (footAlign) {\n            classNames.push(\"col--\".concat(footAlign));\n          }\n\n          return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \">\").concat(formatText(cellValue, true), \"</div></td>\");\n        }).join(''), \"</tr>\"));\n      });\n      tables.push('</tfoot>');\n    }\n  } // 是否半选状态\n\n\n  var script = !isAllSelected && isIndeterminate ? \"<script>(function(){var a=document.querySelector(\\\".\".concat(allCls, \"\\\");if(a){a.indeterminate=true}})()</script>\") : '';\n  tables.push('</table>', script);\n  return isPrint ? tables.join('') : createHtmlPage(opts, tables.join(''));\n}\n\nfunction toXML($xetable, opts, columns, datas) {\n  var xml = ['<?xml version=\"1.0\"?>', '<?mso-application progid=\"Excel.Sheet\"?>', '<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:html=\"http://www.w3.org/TR/REC-html40\">', '<DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">', '<Version>16.00</Version>', '</DocumentProperties>', '<ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\">', '<WindowHeight>7920</WindowHeight>', '<WindowWidth>21570</WindowWidth>', '<WindowTopX>32767</WindowTopX>', '<WindowTopY>32767</WindowTopY>', '<ProtectStructure>False</ProtectStructure>', '<ProtectWindows>False</ProtectWindows>', '</ExcelWorkbook>', \"<Worksheet ss:Name=\\\"\".concat(opts.sheetName, \"\\\">\"), '<Table>', columns.map(function (column) {\n    return \"<Column ss:Width=\\\"\".concat(column.renderWidth, \"\\\"/>\");\n  }).join('')].join('');\n\n  if (opts.isHeader) {\n    xml += \"<Row>\".concat(columns.map(function (column) {\n      return \"<Cell><Data ss:Type=\\\"String\\\">\".concat(getHeaderTitle(opts, column), \"</Data></Cell>\");\n    }).join(''), \"</Row>\");\n  }\n\n  datas.forEach(function (row) {\n    xml += '<Row>' + columns.map(function (column) {\n      return \"<Cell><Data ss:Type=\\\"String\\\">\".concat(row[column.id], \"</Data></Cell>\");\n    }).join('') + '</Row>';\n  });\n\n  if (opts.isFooter) {\n    var footerTableData = $xetable.footerTableData;\n    var footers = getFooterData(opts, footerTableData);\n    footers.forEach(function (rows) {\n      xml += \"<Row>\".concat(columns.map(function (column) {\n        return \"<Cell><Data ss:Type=\\\"String\\\">\".concat(getFooterCellValue($xetable, opts, rows, column), \"</Data></Cell>\");\n      }).join(''), \"</Row>\");\n    });\n  }\n\n  return \"\".concat(xml, \"</Table></Worksheet></Workbook>\");\n}\n\nfunction getContent($xetable, opts, columns, datas) {\n  if (columns.length) {\n    switch (opts.type) {\n      case 'csv':\n        return toCsv($xetable, opts, columns, datas);\n\n      case 'txt':\n        return toTxt($xetable, opts, columns, datas);\n\n      case 'html':\n        return toHtml($xetable, opts, columns, datas);\n\n      case 'xml':\n        return toXML($xetable, opts, columns, datas);\n    }\n  }\n\n  return '';\n}\n/**\r\n * 保存文件到本地\r\n * @param {*} options 参数\r\n */\n\n\nexport function saveLocalFile(options) {\n  var filename = options.filename,\n      type = options.type,\n      content = options.content;\n  var name = \"\".concat(filename, \".\").concat(type);\n\n  if (window.Blob) {\n    var blob = content instanceof Blob ? content : getExportBlobByContent(XEUtils.toString(content), options);\n\n    if (navigator.msSaveBlob) {\n      navigator.msSaveBlob(blob, name);\n    } else {\n      var linkElem = document.createElement('a');\n      linkElem.target = '_blank';\n      linkElem.download = name;\n      linkElem.href = URL.createObjectURL(blob);\n      document.body.appendChild(linkElem);\n      linkElem.click();\n      document.body.removeChild(linkElem);\n    }\n\n    return Promise.resolve();\n  }\n\n  return Promise.reject(new Error(UtilTools.getLog('vxe.error.notExp')));\n}\n\nfunction downloadFile($xetable, opts, content) {\n  var filename = opts.filename,\n      type = opts.type,\n      download = opts.download;\n\n  if (!download) {\n    var blob = getExportBlobByContent(content, opts);\n    return Promise.resolve({\n      type: type,\n      content: content,\n      blob: blob\n    });\n  }\n\n  saveLocalFile({\n    filename: filename,\n    type: type,\n    content: content\n  }).then(function () {\n    if (opts.message !== false) {\n      VXETable.modal.message({\n        content: GlobalConfig.i18n('vxe.table.expSuccess'),\n        status: 'success'\n      });\n    }\n  });\n}\n\nfunction clearColumnConvert(columns) {\n  XEUtils.eachTree(columns, function (column) {\n    delete column._level;\n    delete column._colSpan;\n    delete column._rowSpan;\n    delete column._children;\n    delete column.childNodes;\n  }, {\n    children: 'children'\n  });\n}\n\nfunction handleExport($xetable, opts) {\n  var remote = opts.remote,\n      columns = opts.columns,\n      colgroups = opts.colgroups,\n      exportMethod = opts.exportMethod,\n      afterExportMethod = opts.afterExportMethod;\n  return new Promise(function (resolve) {\n    if (remote) {\n      var params = {\n        options: opts,\n        $table: $xetable,\n        $grid: $xetable.$xegrid\n      };\n      resolve(exportMethod ? exportMethod(params) : params);\n    } else {\n      var datas = getExportData($xetable, opts);\n      resolve($xetable.preventEvent(null, 'event.export', {\n        options: opts,\n        columns: columns,\n        colgroups: colgroups,\n        datas: datas\n      }, function () {\n        return downloadFile($xetable, opts, getContent($xetable, opts, columns, datas));\n      }));\n    }\n  }).then(function (params) {\n    clearColumnConvert(columns);\n\n    if (!opts.print) {\n      if (afterExportMethod) {\n        afterExportMethod({\n          status: true,\n          options: opts,\n          $table: $xetable,\n          $grid: $xetable.$xegrid\n        });\n      }\n    }\n\n    return Object.assign({\n      status: true\n    }, params);\n  }).catch(function () {\n    clearColumnConvert(columns);\n\n    if (!opts.print) {\n      if (afterExportMethod) {\n        afterExportMethod({\n          status: false,\n          options: opts,\n          $table: $xetable,\n          $grid: $xetable.$xegrid\n        });\n      }\n    }\n\n    var params = {\n      status: false\n    };\n    return Promise.reject(params);\n  });\n}\n\nfunction getElementsByTagName(elem, qualifiedName) {\n  return elem.getElementsByTagName(qualifiedName);\n}\n\nfunction getTxtCellKey(now) {\n  return \"#\".concat(now, \"@\").concat(XEUtils.uniqueId());\n}\n\nfunction replaceTxtCell(cell, vMaps) {\n  return cell.replace(/#\\d+@\\d+/g, function (key) {\n    return XEUtils.hasOwnProp(vMaps, key) ? vMaps[key] : key;\n  });\n}\n\nfunction getTxtCellValue(val, vMaps) {\n  var rest = replaceTxtCell(val, vMaps);\n  return rest.replace(/^\"+$/g, function (qVal) {\n    return '\"'.repeat(Math.ceil(qVal.length / 2));\n  });\n}\n\nfunction parseCsvAndTxt(columns, content, cellSeparator) {\n  var list = content.split(enterSymbol);\n  var rows = [];\n  var fields = [];\n\n  if (list.length) {\n    var vMaps = {};\n    var now = Date.now();\n    list.forEach(function (rVal) {\n      if (rVal) {\n        var item = {};\n        rVal = rVal.replace(/(\"\")|(\\n)/g, function (text, dVal) {\n          var key = getTxtCellKey(now);\n          vMaps[key] = dVal ? '\"' : '\\n';\n          return key;\n        }).replace(/\"(.*?)\"/g, function (text, cVal) {\n          var key = getTxtCellKey(now);\n          vMaps[key] = replaceTxtCell(cVal, vMaps);\n          return key;\n        });\n        var cells = rVal.split(cellSeparator);\n\n        if (!fields.length) {\n          fields = cells.map(function (val) {\n            return getTxtCellValue(val.trim(), vMaps);\n          });\n        } else {\n          cells.forEach(function (val, colIndex) {\n            if (colIndex < fields.length) {\n              item[fields[colIndex]] = getTxtCellValue(val, vMaps);\n            }\n          });\n          rows.push(item);\n        }\n      }\n    });\n  }\n\n  return {\n    fields: fields,\n    rows: rows\n  };\n}\n\nfunction parseCsv(columns, content) {\n  return parseCsvAndTxt(columns, content, ',');\n}\n\nfunction parseTxt(columns, content) {\n  return parseCsvAndTxt(columns, content, '\\t');\n}\n\nfunction parseHTML(columns, content) {\n  var domParser = new DOMParser();\n  var xmlDoc = domParser.parseFromString(content, 'text/html');\n  var bodyNodes = getElementsByTagName(xmlDoc, 'body');\n  var rows = [];\n  var fields = [];\n\n  if (bodyNodes.length) {\n    var tableNodes = getElementsByTagName(bodyNodes[0], 'table');\n\n    if (tableNodes.length) {\n      var theadNodes = getElementsByTagName(tableNodes[0], 'thead');\n\n      if (theadNodes.length) {\n        XEUtils.arrayEach(getElementsByTagName(theadNodes[0], 'tr'), function (rowNode) {\n          XEUtils.arrayEach(getElementsByTagName(rowNode, 'th'), function (cellNode) {\n            fields.push(cellNode.textContent);\n          });\n        });\n        var tbodyNodes = getElementsByTagName(tableNodes[0], 'tbody');\n\n        if (tbodyNodes.length) {\n          XEUtils.arrayEach(getElementsByTagName(tbodyNodes[0], 'tr'), function (rowNode) {\n            var item = {};\n            XEUtils.arrayEach(getElementsByTagName(rowNode, 'td'), function (cellNode, colIndex) {\n              if (fields[colIndex]) {\n                item[fields[colIndex]] = cellNode.textContent || '';\n              }\n            });\n            rows.push(item);\n          });\n        }\n      }\n    }\n  }\n\n  return {\n    fields: fields,\n    rows: rows\n  };\n}\n\nfunction parseXML(columns, content) {\n  var domParser = new DOMParser();\n  var xmlDoc = domParser.parseFromString(content, 'application/xml');\n  var sheetNodes = getElementsByTagName(xmlDoc, 'Worksheet');\n  var rows = [];\n  var fields = [];\n\n  if (sheetNodes.length) {\n    var tableNodes = getElementsByTagName(sheetNodes[0], 'Table');\n\n    if (tableNodes.length) {\n      var rowNodes = getElementsByTagName(tableNodes[0], 'Row');\n\n      if (rowNodes.length) {\n        XEUtils.arrayEach(getElementsByTagName(rowNodes[0], 'Cell'), function (cellNode) {\n          fields.push(cellNode.textContent);\n        });\n        XEUtils.arrayEach(rowNodes, function (rowNode, index) {\n          if (index) {\n            var item = {};\n            var cellNodes = getElementsByTagName(rowNode, 'Cell');\n            XEUtils.arrayEach(cellNodes, function (cellNode, colIndex) {\n              if (fields[colIndex]) {\n                item[fields[colIndex]] = cellNode.textContent;\n              }\n            });\n            rows.push(item);\n          }\n        });\n      }\n    }\n  }\n\n  return {\n    fields: fields,\n    rows: rows\n  };\n}\n/**\r\n * 检查导入的列是否完整\r\n * @param {Array} fields 字段名列表\r\n * @param {Array} rows 数据列表\r\n */\n\n\nfunction checkImportData(columns, fields) {\n  var tableFields = [];\n  columns.forEach(function (column) {\n    var field = column.property;\n\n    if (field) {\n      tableFields.push(field);\n    }\n  });\n  return fields.some(function (field) {\n    return tableFields.indexOf(field) > -1;\n  });\n}\n\nfunction handleImport($xetable, content, opts) {\n  var tableFullColumn = $xetable.tableFullColumn,\n      _importResolve = $xetable._importResolve,\n      _importReject = $xetable._importReject;\n  var rest = {\n    fields: [],\n    rows: []\n  };\n\n  switch (opts.type) {\n    case 'csv':\n      rest = parseCsv(tableFullColumn, content);\n      break;\n\n    case 'txt':\n      rest = parseTxt(tableFullColumn, content);\n      break;\n\n    case 'html':\n      rest = parseHTML(tableFullColumn, content);\n      break;\n\n    case 'xml':\n      rest = parseXML(tableFullColumn, content);\n      break;\n  }\n\n  var _rest = rest,\n      fields = _rest.fields,\n      rows = _rest.rows;\n  var status = checkImportData(tableFullColumn, fields);\n\n  if (status) {\n    $xetable.createData(rows).then(function (data) {\n      var loadRest;\n\n      if (opts.mode === 'insert') {\n        loadRest = $xetable.insert(data);\n      } else {\n        loadRest = $xetable.reloadData(data);\n      }\n\n      if (opts.message !== false) {\n        VXETable.modal.message({\n          content: GlobalConfig.i18n('vxe.table.impSuccess', [rows.length]),\n          status: 'success'\n        });\n      }\n\n      return loadRest.then(function () {\n        if (_importResolve) {\n          _importResolve({\n            status: true\n          });\n        }\n      });\n    });\n  } else if (opts.message !== false) {\n    VXETable.modal.message({\n      content: GlobalConfig.i18n('vxe.error.impFields'),\n      status: 'error'\n    });\n\n    if (_importReject) {\n      _importReject({\n        status: false\n      });\n    }\n  }\n}\n\nfunction handleFileImport($xetable, file, opts) {\n  var importMethod = opts.importMethod,\n      afterImportMethod = opts.afterImportMethod;\n\n  var _UtilTools$parseFile = UtilTools.parseFile(file),\n      type = _UtilTools$parseFile.type,\n      filename = _UtilTools$parseFile.filename; // 检查类型，如果为自定义导出，则不需要校验类型\n\n\n  if (!importMethod && !XEUtils.includes(VXETable.config.importTypes, type)) {\n    if (opts.message !== false) {\n      VXETable.modal.message({\n        content: GlobalConfig.i18n('vxe.error.notType', [type]),\n        status: 'error'\n      });\n    }\n\n    var params = {\n      status: false\n    };\n    return Promise.reject(params);\n  }\n\n  var rest = new Promise(function (resolve, reject) {\n    var _importResolve = function _importResolve(params) {\n      resolve(params);\n      $xetable._importResolve = null;\n      $xetable._importReject = null;\n    };\n\n    var _importReject = function _importReject(params) {\n      reject(params);\n      $xetable._importResolve = null;\n      $xetable._importReject = null;\n    };\n\n    $xetable._importResolve = _importResolve;\n    $xetable._importReject = _importReject;\n\n    if (window.FileReader) {\n      var options = Object.assign({\n        mode: 'insert'\n      }, opts, {\n        type: type,\n        filename: filename\n      });\n\n      if (options.remote) {\n        if (importMethod) {\n          Promise.resolve(importMethod({\n            file: file,\n            options: options,\n            $table: $xetable\n          })).then(function () {\n            _importResolve({\n              status: true\n            });\n          }).catch(function () {\n            _importResolve({\n              status: true\n            });\n          });\n        } else {\n          _importResolve({\n            status: true\n          });\n        }\n      } else {\n        $xetable.preventEvent(null, 'event.import', {\n          file: file,\n          options: options,\n          columns: $xetable.tableFullColumn\n        }, function () {\n          var reader = new FileReader();\n\n          reader.onerror = function () {\n            UtilTools.error('vxe.error.notType', [type]);\n\n            _importReject({\n              status: false\n            });\n          };\n\n          reader.onload = function (e) {\n            handleImport($xetable, e.target.result, options);\n          };\n\n          reader.readAsText(file, 'UTF-8');\n        });\n      }\n    } else {\n      // 不支持的浏览器\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        UtilTools.error('vxe.error.notExp');\n      }\n\n      _importResolve({\n        status: true\n      });\n    }\n  });\n  return rest.then(function () {\n    if (afterImportMethod) {\n      afterImportMethod({\n        status: true,\n        options: opts,\n        $table: $xetable\n      });\n    }\n  }).catch(function (e) {\n    if (afterImportMethod) {\n      afterImportMethod({\n        status: false,\n        options: opts,\n        $table: $xetable\n      });\n    }\n\n    return Promise.reject(e);\n  });\n}\n/**\r\n * 读取本地文件\r\n * @param {*} options 参数\r\n */\n\n\nexport function readLocalFile() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!fileForm) {\n    fileForm = document.createElement('form');\n    fileInput = document.createElement('input');\n    fileForm.className = 'vxe-table--file-form';\n    fileInput.name = 'file';\n    fileInput.type = 'file';\n    fileForm.appendChild(fileInput);\n    document.body.appendChild(fileForm);\n  }\n\n  return new Promise(function (resolve, reject) {\n    var types = options.types || [];\n    var isAllType = !types.length || types.some(function (type) {\n      return type === '*';\n    });\n    fileInput.multiple = !!options.multiple;\n    fileInput.accept = isAllType ? '' : \".\".concat(types.join(', .'));\n\n    fileInput.onchange = function (evnt) {\n      var files = evnt.target.files;\n      var file = files[0];\n      var errType; // 校验类型\n\n      if (!isAllType) {\n        for (var fIndex = 0; fIndex < files.length; fIndex++) {\n          var _UtilTools$parseFile2 = UtilTools.parseFile(files[fIndex]),\n              type = _UtilTools$parseFile2.type;\n\n          if (!XEUtils.includes(types, type)) {\n            errType = type;\n            break;\n          }\n        }\n      }\n\n      if (!errType) {\n        resolve({\n          status: true,\n          files: files,\n          file: file\n        });\n      } else {\n        if (options.message !== false) {\n          VXETable.modal.message({\n            content: GlobalConfig.i18n('vxe.error.notType', [errType]),\n            status: 'error'\n          });\n        }\n\n        var params = {\n          status: false,\n          files: files,\n          file: file\n        };\n        reject(params);\n      }\n    };\n\n    fileForm.reset();\n    fileInput.click();\n  });\n}\n\nfunction removePrintFrame() {\n  if (printFrame) {\n    if (printFrame.parentNode) {\n      try {\n        printFrame.contentDocument.write('');\n        printFrame.contentDocument.clear();\n      } catch (e) {}\n\n      printFrame.parentNode.removeChild(printFrame);\n    }\n\n    printFrame = null;\n  }\n}\n\nfunction appendPrintFrame() {\n  if (!printFrame.parentNode) {\n    document.body.appendChild(printFrame);\n  }\n}\n\nfunction afterPrintEvent() {\n  removePrintFrame();\n}\n\nexport function handlePrint($xetable, opts, content) {\n  var beforePrintMethod = opts.beforePrintMethod;\n\n  if (beforePrintMethod) {\n    content = beforePrintMethod({\n      content: content,\n      options: opts,\n      $table: $xetable\n    }) || '';\n  }\n\n  content = createHtmlPage(opts, content);\n  var blob = getExportBlobByContent(content, opts);\n\n  if (browse.msie) {\n    removePrintFrame();\n    printFrame = createFrame();\n    appendPrintFrame();\n    printFrame.contentDocument.write(content);\n    printFrame.contentDocument.execCommand('print');\n  } else {\n    if (!printFrame) {\n      printFrame = createFrame();\n\n      printFrame.onload = function (evnt) {\n        if (evnt.target.src) {\n          evnt.target.contentWindow.onafterprint = afterPrintEvent;\n          evnt.target.contentWindow.print();\n        }\n      };\n    }\n\n    appendPrintFrame();\n    printFrame.src = URL.createObjectURL(blob);\n  }\n}\n\nfunction handleExportAndPrint($xetable, options, isPrint) {\n  var initStore = $xetable.initStore,\n      customOpts = $xetable.customOpts,\n      collectColumn = $xetable.collectColumn,\n      footerTableData = $xetable.footerTableData,\n      treeConfig = $xetable.treeConfig,\n      mergeList = $xetable.mergeList,\n      isGroup = $xetable.isGroup,\n      exportParams = $xetable.exportParams;\n  var selectRecords = $xetable.getCheckboxRecords();\n  var hasFooter = !!footerTableData.length;\n  var hasTree = treeConfig;\n  var hasMerge = !hasTree && mergeList.length;\n  var defOpts = Object.assign({\n    message: true,\n    isHeader: true\n  }, options);\n  var types = defOpts.types || VXETable.config.exportTypes;\n  var modes = defOpts.modes;\n  var checkMethod = customOpts.checkMethod;\n  var exportColumns = collectColumn.slice(0);\n  var columns = defOpts.columns; // 处理类型\n\n  var typeList = types.map(function (value) {\n    return {\n      value: value,\n      label: \"vxe.export.types.\".concat(value)\n    };\n  });\n  var modeList = modes.map(function (value) {\n    return {\n      value: value,\n      label: \"vxe.export.modes.\".concat(value)\n    };\n  }); // 默认选中\n\n  XEUtils.eachTree(exportColumns, function (column, index, items, path, parent) {\n    var isColGroup = column.children && column.children.length;\n\n    if (isColGroup || defaultFilterExportColumn(column)) {\n      column.checked = columns ? columns.some(function (item) {\n        if (UtilTools.isColumn(item)) {\n          return column === item;\n        } else if (XEUtils.isString(item)) {\n          return column.field === item;\n        } else {\n          var colid = item.id || item.colId;\n          var type = item.type;\n          var field = item.property || item.field;\n\n          if (colid) {\n            return column.id === colid;\n          } else if (field && type) {\n            return column.property === field && column.type === type;\n          } else if (field) {\n            return column.property === field;\n          } else if (type) {\n            return column.type === type;\n          }\n        }\n      }) : column.visible;\n      column.halfChecked = false;\n      column.disabled = parent && parent.disabled || (checkMethod ? !checkMethod({\n        column: column\n      }) : false);\n    }\n  }); // 更新条件\n\n  Object.assign($xetable.exportStore, {\n    columns: exportColumns,\n    typeList: typeList,\n    modeList: modeList,\n    hasFooter: hasFooter,\n    hasMerge: hasMerge,\n    hasTree: hasTree,\n    isPrint: isPrint,\n    hasColgroup: isGroup,\n    visible: true\n  }); // 默认参数\n\n  if (!initStore.export) {\n    Object.assign(exportParams, {\n      mode: selectRecords.length ? 'selected' : 'current'\n    }, defOpts);\n  }\n\n  if (modes.indexOf(exportParams.mode) === -1) {\n    exportParams.mode = modes[0];\n  }\n\n  if (types.indexOf(exportParams.type) === -1) {\n    exportParams.type = types[0];\n  }\n\n  initStore.export = true;\n  return $xetable.$nextTick();\n}\n\nvar getConvertColumns = function getConvertColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.childNodes && column.childNodes.length) {\n      result.push(column);\n      result.push.apply(result, _toConsumableArray(getConvertColumns(column.childNodes)));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\n\nvar convertToRows = function convertToRows(originColumns) {\n  var maxLevel = 1;\n\n  var traverse = function traverse(column, parent) {\n    if (parent) {\n      column._level = parent._level + 1;\n\n      if (maxLevel < column._level) {\n        maxLevel = column._level;\n      }\n    }\n\n    if (column.childNodes && column.childNodes.length) {\n      var colSpan = 0;\n      column.childNodes.forEach(function (subColumn) {\n        traverse(subColumn, column);\n        colSpan += subColumn._colSpan;\n      });\n      column._colSpan = colSpan;\n    } else {\n      column._colSpan = 1;\n    }\n  };\n\n  originColumns.forEach(function (column) {\n    column._level = 1;\n    traverse(column);\n  });\n  var rows = [];\n\n  for (var i = 0; i < maxLevel; i++) {\n    rows.push([]);\n  }\n\n  var allColumns = getConvertColumns(originColumns);\n  allColumns.forEach(function (column) {\n    if (column.childNodes && column.childNodes.length) {\n      column._rowSpan = 1;\n    } else {\n      column._rowSpan = maxLevel - column._level + 1;\n    }\n\n    rows[column._level - 1].push(column);\n  });\n  return rows;\n};\n\nexport default {\n  methods: {\n    /**\r\n     * 导出文件，支持 csv/html/xml/txt\r\n     * 如果是树表格，则默认是导出所有节点\r\n     * 如果是启用了虚拟滚动，则只能导出数据源，可以配合 dataFilterMethod 函数自行转换数据\r\n     * @param {Object} options 参数\r\n     */\n    _exportData: function _exportData(options) {\n      var _this = this;\n\n      var $xegrid = this.$xegrid,\n          isGroup = this.isGroup,\n          tableGroupColumn = this.tableGroupColumn,\n          tableFullColumn = this.tableFullColumn,\n          afterFullData = this.afterFullData,\n          treeConfig = this.treeConfig,\n          treeOpts = this.treeOpts,\n          exportOpts = this.exportOpts;\n      var opts = Object.assign({\n        // filename: '',\n        // sheetName: '',\n        // original: false,\n        // message: false,\n        isHeader: true,\n        isFooter: true,\n        isColgroup: true,\n        isMerge: false,\n        isAllExpand: false,\n        download: true,\n        type: 'csv',\n        mode: 'current' // data: null,\n        // remote: false,\n        // dataFilterMethod: null,\n        // footerFilterMethod: null,\n        // exportMethod: null,\n        // columnFilterMethod: null,\n        // beforeExportMethod: null,\n        // afterExportMethod: null\n\n      }, exportOpts, {\n        print: false\n      }, options);\n      var type = opts.type,\n          mode = opts.mode,\n          columns = opts.columns,\n          original = opts.original,\n          beforeExportMethod = opts.beforeExportMethod;\n      var groups = [];\n      var customCols = columns && columns.length ? columns : null; // 如果设置源数据，则默认导出设置了字段的列\n\n      var columnFilterMethod = opts.columnFilterMethod;\n\n      if (!customCols && !columnFilterMethod) {\n        columnFilterMethod = original ? function (_ref) {\n          var column = _ref.column;\n          return column.property;\n        } : function (_ref2) {\n          var column = _ref2.column;\n          return defaultFilterExportColumn(column);\n        };\n      }\n\n      if (customCols) {\n        groups = XEUtils.searchTree(XEUtils.mapTree(customCols, function (item) {\n          var targetColumn;\n\n          if (item) {\n            if (UtilTools.isColumn(item)) {\n              targetColumn = item;\n            } else if (XEUtils.isString(item)) {\n              targetColumn = _this.getColumnByField(item);\n            } else {\n              var colid = item.id || item.colId;\n              var _type = item.type;\n              var field = item.property || item.field;\n\n              if (colid) {\n                targetColumn = _this.getColumnById(colid);\n              } else if (field && _type) {\n                targetColumn = tableFullColumn.find(function (column) {\n                  return column.property === field && column.type === _type;\n                });\n              } else if (field) {\n                targetColumn = _this.getColumnByField(field);\n              } else if (_type) {\n                targetColumn = tableFullColumn.find(function (column) {\n                  return column.type === _type;\n                });\n              }\n            }\n\n            return targetColumn || {};\n          }\n        }, {\n          children: 'childNodes',\n          mapChildren: '_children'\n        }), function (column, index) {\n          return UtilTools.isColumn(column) && (!columnFilterMethod || columnFilterMethod({\n            column: column,\n            $columnIndex: index\n          }));\n        }, {\n          children: '_children',\n          mapChildren: 'childNodes',\n          original: true\n        });\n      } else {\n        groups = XEUtils.searchTree(isGroup ? tableGroupColumn : tableFullColumn, function (column, index) {\n          return column.visible && (!columnFilterMethod || columnFilterMethod({\n            column: column,\n            $columnIndex: index\n          }));\n        }, {\n          children: 'children',\n          mapChildren: 'childNodes',\n          original: true\n        });\n      } // 获取所有列\n\n\n      var cols = [];\n      XEUtils.eachTree(groups, function (column) {\n        var isColGroup = column.children && column.children.length;\n\n        if (!isColGroup) {\n          cols.push(column);\n        }\n      }, {\n        children: 'childNodes'\n      }); // 构建分组层级\n\n      opts.columns = cols;\n      opts.colgroups = convertToRows(groups);\n\n      if (!opts.filename) {\n        opts.filename = GlobalConfig.i18n(opts.original ? 'vxe.table.expOriginFilename' : 'vxe.table.expFilename', [XEUtils.toDateString(Date.now(), 'yyyyMMddHHmmss')]);\n      }\n\n      if (!opts.sheetName) {\n        opts.sheetName = document.title;\n      } // 检查类型，如果为自定义导出，则不需要校验类型\n\n\n      if (!opts.exportMethod && !XEUtils.includes(VXETable.config.exportTypes, type)) {\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          UtilTools.error('vxe.error.notType', [type]);\n        }\n\n        var params = {\n          status: false\n        };\n        return Promise.reject(params);\n      }\n\n      if (!opts.print) {\n        if (beforeExportMethod) {\n          beforeExportMethod({\n            options: opts,\n            $table: this,\n            $grid: $xegrid\n          });\n        }\n      }\n\n      if (!opts.data) {\n        opts.data = afterFullData;\n\n        if (mode === 'selected') {\n          var selectRecords = this.getCheckboxRecords();\n\n          if (['html', 'pdf'].indexOf(type) > -1 && treeConfig) {\n            opts.data = XEUtils.searchTree(this.getTableData().fullData, function (item) {\n              return selectRecords.indexOf(item) > -1;\n            }, Object.assign({}, treeOpts, {\n              data: '_row'\n            }));\n          } else {\n            opts.data = selectRecords;\n          }\n        } else if (mode === 'all') {\n          if ($xegrid && !opts.remote) {\n            var _$xegrid$proxyOpts = $xegrid.proxyOpts,\n                beforeQueryAll = _$xegrid$proxyOpts.beforeQueryAll,\n                afterQueryAll = _$xegrid$proxyOpts.afterQueryAll,\n                _$xegrid$proxyOpts$aj = _$xegrid$proxyOpts.ajax,\n                ajax = _$xegrid$proxyOpts$aj === void 0 ? {} : _$xegrid$proxyOpts$aj,\n                _$xegrid$proxyOpts$pr = _$xegrid$proxyOpts.props,\n                props = _$xegrid$proxyOpts$pr === void 0 ? {} : _$xegrid$proxyOpts$pr;\n            var ajaxMethods = ajax.queryAll;\n\n            if (ajaxMethods) {\n              var _params = {\n                $table: this,\n                $grid: $xegrid,\n                sort: $xegrid.sortData,\n                filters: $xegrid.filterData,\n                form: $xegrid.formData,\n                target: ajaxMethods,\n                options: opts\n              };\n              return Promise.resolve((beforeQueryAll || ajaxMethods)(_params)).catch(function (e) {\n                return e;\n              }).then(function (rest) {\n                opts.data = (props.list ? XEUtils.get(rest, props.list) : rest) || [];\n\n                if (afterQueryAll) {\n                  afterQueryAll(_params);\n                }\n\n                return handleExport(_this, opts);\n              });\n            }\n          }\n        }\n      }\n\n      return handleExport(this, opts);\n    },\n    _importByFile: function _importByFile(file, options) {\n      var opts = Object.assign({}, options);\n      var beforeImportMethod = opts.beforeImportMethod;\n\n      if (beforeImportMethod) {\n        beforeImportMethod({\n          options: opts,\n          $table: this\n        });\n      }\n\n      return handleFileImport(this, file, opts);\n    },\n    _importData: function _importData(options) {\n      var _this2 = this;\n\n      var opts = Object.assign({\n        types: VXETable.config.importTypes // beforeImportMethod: null,\n        // afterImportMethod: null\n\n      }, this.importOpts, options);\n      var beforeImportMethod = opts.beforeImportMethod,\n          afterImportMethod = opts.afterImportMethod;\n\n      if (beforeImportMethod) {\n        beforeImportMethod({\n          options: opts,\n          $table: this\n        });\n      }\n\n      return readLocalFile(opts).catch(function (e) {\n        if (afterImportMethod) {\n          afterImportMethod({\n            status: false,\n            options: opts,\n            $table: _this2\n          });\n        }\n\n        return Promise.reject(e);\n      }).then(function (params) {\n        var file = params.file;\n        return handleFileImport(_this2, file, opts);\n      });\n    },\n    _saveFile: function _saveFile(options) {\n      return saveLocalFile(options);\n    },\n    _readFile: function _readFile(options) {\n      return readLocalFile(options);\n    },\n    _print: function _print(options) {\n      var _this3 = this;\n\n      var opts = Object.assign({\n        original: false // beforePrintMethod\n\n      }, this.printOpts, options, {\n        type: 'html',\n        download: false,\n        remote: false,\n        print: true\n      });\n\n      if (!opts.sheetName) {\n        opts.sheetName = document.title;\n      }\n\n      return new Promise(function (resolve) {\n        if (opts.content) {\n          resolve(handlePrint(_this3, opts, opts.content));\n        } else {\n          resolve(_this3.exportData(opts).then(function (_ref3) {\n            var content = _ref3.content;\n            return handlePrint(_this3, opts, content);\n          }));\n        }\n      });\n    },\n    _openImport: function _openImport(options) {\n      var defOpts = Object.assign({\n        mode: 'insert',\n        message: true,\n        types: VXETable.config.importTypes\n      }, options, this.importOpts);\n      var types = defOpts.types;\n      var isTree = !!this.getTreeStatus();\n\n      if (isTree) {\n        if (defOpts.message) {\n          VXETable.modal.message({\n            content: GlobalConfig.i18n('vxe.error.treeNotImp'),\n            status: 'error'\n          });\n        }\n\n        return;\n      }\n\n      if (!this.importConfig) {\n        UtilTools.error('vxe.error.reqProp', ['import-config']);\n      } // 处理类型\n\n\n      var typeList = types.map(function (value) {\n        return {\n          value: value,\n          label: \"vxe.export.types.\".concat(value)\n        };\n      });\n      var modeList = defOpts.modes.map(function (value) {\n        return {\n          value: value,\n          label: \"vxe.import.modes.\".concat(value)\n        };\n      });\n      Object.assign(this.importStore, {\n        file: null,\n        type: '',\n        filename: '',\n        modeList: modeList,\n        typeList: typeList,\n        visible: true\n      });\n      Object.assign(this.importParams, defOpts);\n      this.initStore.import = true;\n    },\n    _openExport: function _openExport(options) {\n      var exportOpts = this.exportOpts;\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (!this.exportConfig) {\n          UtilTools.error('vxe.error.reqProp', ['export-config']);\n        }\n      }\n\n      return handleExportAndPrint(this, Object.assign({}, exportOpts, options));\n    },\n    _openPrint: function _openPrint(options) {\n      var printOpts = this.printOpts;\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (!this.printConfig) {\n          UtilTools.error('vxe.error.reqProp', ['print-config']);\n        }\n      }\n\n      return handleExportAndPrint(this, Object.assign({}, printOpts, options), true);\n    }\n  }\n};",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\export\\src\\mixin.js"],"names":["formatText","UtilTools","defaultHtmlStyle","csvBOM","enterSymbol","frame","document","window","type","options","treeOpts","$xetable","row","seqOpts","seqMethod","column","rowIndex","columnIndex","border","XEUtils","cellValue","isAllExpand","opts","treeConfig","radioOpts","checkboxOpts","htmlCellElem","rest","item","parentRow","parent","hasRowChild","hasTreeChildren","_row","_level","nodes","_hasChild","_expand","columns","renderOpts","exportLabelMethod","compConf","VXETable","$table","getSeq","toBooleanValue","cell","Object","dataFilterMethod","datas","$rowIndex","index","getLabelData","_columnIndex","items","itemIndex","footerFilterMethod","isNaN","val","content","toTxtCellLabel","getHeaderTitle","getCsvCellTypeLabel","footerTableData","footers","getFooterData","getFooterCellValue","columnOverflow","headOverflow","showEllipsis","showTitle","showTooltip","isEllipsis","style","id","isAllSelected","isIndeterminate","allHeaderAlign","allAlign","allFooterAlign","allColumnOverflow","allColumnHeaderOverflow","mergeList","isPrint","isHeader","isFooter","isColgroup","isMerge","colgroups","original","allCls","clss","toTableBorder","tables","headAlign","classNames","hasEllipsis","cellTitle","childWidth","countChild","children","cellWidth","cellAlign","treeIcon","getBooleanValue","rowSpan","colSpan","_rowIndex","spanRest","mergeBodyMethod","rowspan","colspan","footAlign","script","createHtmlPage","xml","toCsv","toTxt","toHtml","toXML","filename","name","blob","getExportBlobByContent","navigator","linkElem","URL","Promise","download","saveLocalFile","GlobalConfig","status","remote","exportMethod","afterExportMethod","params","$grid","$xegrid","resolve","getExportData","downloadFile","getContent","clearColumnConvert","elem","vMaps","replaceTxtCell","Math","qVal","list","rows","fields","now","Date","rVal","key","getTxtCellKey","dVal","cells","getTxtCellValue","colIndex","parseCsvAndTxt","domParser","xmlDoc","bodyNodes","getElementsByTagName","tableNodes","theadNodes","cellNode","tbodyNodes","sheetNodes","rowNodes","cellNodes","tableFields","field","tableFullColumn","_importResolve","_importReject","parseCsv","parseTxt","parseHTML","parseXML","checkImportData","loadRest","importMethod","afterImportMethod","reject","mode","file","reader","handleImport","e","process","fileForm","fileInput","types","isAllType","files","evnt","fIndex","errType","printFrame","removePrintFrame","beforePrintMethod","browse","createFrame","appendPrintFrame","initStore","customOpts","collectColumn","isGroup","exportParams","selectRecords","hasFooter","hasTree","hasMerge","defOpts","message","modes","checkMethod","exportColumns","typeList","value","label","modeList","isColGroup","defaultFilterExportColumn","colid","hasColgroup","visible","getConvertColumns","result","convertToRows","maxLevel","traverse","subColumn","originColumns","i","allColumns","methods","_exportData","tableGroupColumn","afterFullData","exportOpts","print","beforeExportMethod","groups","customCols","columnFilterMethod","targetColumn","mapChildren","$columnIndex","cols","data","beforeQueryAll","afterQueryAll","ajax","props","ajaxMethods","sort","filters","form","target","handleExport","_importByFile","beforeImportMethod","handleFileImport","_importData","_saveFile","_readFile","readLocalFile","_print","handlePrint","_openImport","importTypes","isTree","_openExport","handleExportAndPrint","_openPrint","printOpts"],"mappings":"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","sourcesContent":["import XEUtils from 'xe-utils'\r\nimport GlobalConfig from '../../v-x-e-table/src/conf'\r\nimport VXETable from '../../v-x-e-table'\r\nimport { UtilTools } from '../../tools'\r\nimport { mergeBodyMethod } from '../../table/src/util'\r\nimport { browse } from '../../tools/src/dom'\r\n\r\nconst { formatText } = UtilTools\r\n\r\n// 默认导出或打印的 HTML 样式\r\nconst defaultHtmlStyle = 'body{margin:0;color:#333333;font-size:14px;font-family:\"Microsoft YaHei\",微软雅黑,\"MicrosoftJhengHei\",华文细黑,STHeiti,MingLiu}body *{-webkit-box-sizing:border-box;box-sizing:border-box}.vxe-table{border-collapse:collapse;text-align:left;border-spacing:0}.vxe-table:not(.is--print){table-layout:fixed}.vxe-table,.vxe-table th,.vxe-table td,.vxe-table td{border-color:#D0D0D0;border-style:solid;border-width:0}.vxe-table.is--print{width:100%}.border--default,.border--full,.border--outer{border-top-width:1px}.border--default,.border--full,.border--outer{border-left-width:1px}.border--outer,.border--default th,.border--default td,.border--full th,.border--full td,.border--outer th,.border--inner th,.border--inner td{border-bottom-width:1px}.border--default,.border--outer,.border--full th,.border--full td{border-right-width:1px}.border--default th,.border--full th,.border--outer th{background-color:#f8f8f9}.vxe-table td>div,.vxe-table th>div{padding:.5em .4em}.col--center{text-align:center}.col--right{text-align:right}.vxe-table:not(.is--print) .col--ellipsis>div{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-break:break-all}.vxe-table--tree-node{text-align:left}.vxe-table--tree-node-wrapper{position:relative}.vxe-table--tree-icon-wrapper{position:absolute;top:50%;width:1em;height:1em;text-align:center;-webkit-transform:translateY(-50%);transform:translateY(-50%);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.vxe-table--tree-unfold-icon,.vxe-table--tree-fold-icon{position:absolute;width:0;height:0;border-style:solid;border-width:.5em;border-right-color:transparent;border-bottom-color:transparent}.vxe-table--tree-unfold-icon{left:.3em;top:0;border-left-color:#939599;border-top-color:transparent}.vxe-table--tree-fold-icon{left:0;top:.3em;border-left-color:transparent;border-top-color:#939599}.vxe-table--tree-cell{display:block;padding-left:1.5em}.vxe-table input[type=\"checkbox\"]{margin:0}.vxe-table input[type=\"checkbox\"],.vxe-table input[type=\"radio\"],.vxe-table input[type=\"checkbox\"]+span,.vxe-table input[type=\"radio\"]+span{vertical-align:middle;padding-left:0.4em}'\r\n\r\nlet htmlCellElem\r\n\r\n// 导入\r\nlet fileForm\r\nlet fileInput\r\n\r\n// 打印\r\nlet printFrame\r\n\r\nconst csvBOM = '\\ufeff'\r\nconst enterSymbol = '\\r\\n'\r\n\r\nfunction createFrame () {\r\n  const frame = document.createElement('iframe')\r\n  frame.className = 'vxe-table--print-frame'\r\n  return frame\r\n}\r\n\r\nfunction getExportBlobByContent (content, options) {\r\n  if (window.Blob) {\r\n    return new Blob([content], { type: `text/${options.type}` })\r\n  }\r\n  return null\r\n}\r\n\r\nfunction hasTreeChildren ($xetable, row) {\r\n  const treeOpts = $xetable.treeOpts\r\n  return row[treeOpts.children] && row[treeOpts.children].length > 0\r\n}\r\n\r\nfunction getSeq ($xetable, row, rowIndex, column, columnIndex) {\r\n  const seqOpts = $xetable.seqOpts\r\n  const seqMethod = seqOpts.seqMethod || column.seqMethod\r\n  return seqMethod ? seqMethod({ row, rowIndex, column, columnIndex }) : (seqOpts.startIndex + rowIndex + 1)\r\n}\r\n\r\nfunction defaultFilterExportColumn (column) {\r\n  return column.property || ['seq', 'index', 'checkbox', 'radio'].indexOf(column.type) > -1\r\n}\r\n\r\nfunction toTableBorder (border) {\r\n  if (border === true) {\r\n    return 'full'\r\n  }\r\n  if (border) {\r\n    return border\r\n  }\r\n  return 'default'\r\n}\r\n\r\nfunction toBooleanValue (cellValue) {\r\n  return XEUtils.isBoolean(cellValue) ? (cellValue ? 'TRUE' : 'FALSE') : cellValue\r\n}\r\n\r\nfunction getLabelData ($xetable, opts, columns, datas) {\r\n  const { isAllExpand } = opts\r\n  const { treeConfig, treeOpts, radioOpts, checkboxOpts } = $xetable\r\n  if (!htmlCellElem) {\r\n    htmlCellElem = document.createElement('div')\r\n  }\r\n  if (treeConfig) {\r\n    // 如果是树表格只允许导出数据源\r\n    const rest = []\r\n    XEUtils.eachTree(datas, (item, rowIndex, items, path, parent, nodes) => {\r\n      const row = item._row || item\r\n      const parentRow = parent && parent._row ? parent._row : parent\r\n      if ((isAllExpand || !parentRow || $xetable.isTreeExpandByRow(parentRow))) {\r\n        const hasRowChild = hasTreeChildren($xetable, row)\r\n        const item = {\r\n          _row: row,\r\n          _level: nodes.length - 1,\r\n          _hasChild: hasRowChild,\r\n          _expand: hasRowChild && $xetable.isTreeExpandByRow(row)\r\n        }\r\n        columns.forEach((column, columnIndex) => {\r\n          let cellValue = ''\r\n          const renderOpts = column.editRender || column.cellRender\r\n          let exportLabelMethod = column.exportMethod\r\n          if (!exportLabelMethod && renderOpts && renderOpts.name) {\r\n            const compConf = VXETable.renderer.get(renderOpts.name)\r\n            if (compConf) {\r\n              exportLabelMethod = compConf.exportMethod || compConf.cellExportMethod\r\n            }\r\n          }\r\n          if (exportLabelMethod) {\r\n            cellValue = exportLabelMethod({ $table: $xetable, row, column, options: opts })\r\n          } else {\r\n            switch (column.type) {\r\n              case 'index':\r\n              case 'seq':\r\n                cellValue = getSeq($xetable, row, rowIndex, column, columnIndex)\r\n                break\r\n              case 'checkbox':\r\n                cellValue = toBooleanValue($xetable.isCheckedByCheckboxRow(row))\r\n                item._checkboxLabel = checkboxOpts.labelField ? XEUtils.get(row, checkboxOpts.labelField) : ''\r\n                item._checkboxDisabled = checkboxOpts.checkMethod && !checkboxOpts.checkMethod({ row })\r\n                break\r\n              case 'radio':\r\n                cellValue = toBooleanValue($xetable.isCheckedByRadioRow(row))\r\n                item._radioLabel = radioOpts.labelField ? XEUtils.get(row, radioOpts.labelField) : ''\r\n                item._radioDisabled = radioOpts.checkMethod && !radioOpts.checkMethod({ row })\r\n                break\r\n              default:\r\n                if (opts.original) {\r\n                  cellValue = UtilTools.getCellValue(row, column)\r\n                } else {\r\n                  cellValue = $xetable.getCellLabel(row, column)\r\n                  if (column.type === 'html') {\r\n                    htmlCellElem.innerHTML = cellValue\r\n                    cellValue = htmlCellElem.innerText.trim()\r\n                  } else {\r\n                    const cell = $xetable.getCell(row, column)\r\n                    if (cell) {\r\n                      cellValue = cell.innerText.trim()\r\n                    }\r\n                  }\r\n                }\r\n            }\r\n          }\r\n          item[column.id] = XEUtils.toString(cellValue)\r\n        })\r\n        rest.push(Object.assign(item, row))\r\n      }\r\n    }, treeOpts)\r\n    return rest\r\n  }\r\n  return datas.map((row, rowIndex) => {\r\n    const item = {\r\n      _row: row\r\n    }\r\n    columns.forEach((column, columnIndex) => {\r\n      let cellValue = ''\r\n      const renderOpts = column.editRender || column.cellRender\r\n      let exportLabelMethod = column.exportMethod\r\n      if (!exportLabelMethod && renderOpts && renderOpts.name) {\r\n        const compConf = VXETable.renderer.get(renderOpts.name)\r\n        if (compConf) {\r\n          exportLabelMethod = compConf.exportMethod || compConf.cellExportMethod\r\n        }\r\n      }\r\n      if (exportLabelMethod) {\r\n        cellValue = exportLabelMethod({ $table: $xetable, row, column, options: opts })\r\n      } else {\r\n        switch (column.type) {\r\n          case 'index':\r\n          case 'seq':\r\n            cellValue = getSeq($xetable, row, rowIndex, column, columnIndex)\r\n            break\r\n          case 'checkbox':\r\n            cellValue = toBooleanValue($xetable.isCheckedByCheckboxRow(row))\r\n            item._checkboxLabel = checkboxOpts.labelField ? XEUtils.get(row, checkboxOpts.labelField) : ''\r\n            item._checkboxDisabled = checkboxOpts.checkMethod && !checkboxOpts.checkMethod({ row })\r\n            break\r\n          case 'radio':\r\n            cellValue = toBooleanValue($xetable.isCheckedByRadioRow(row))\r\n            item._radioLabel = radioOpts.labelField ? XEUtils.get(row, radioOpts.labelField) : ''\r\n            item._radioDisabled = radioOpts.checkMethod && !radioOpts.checkMethod({ row })\r\n            break\r\n          default:\r\n            if (opts.original) {\r\n              cellValue = UtilTools.getCellValue(row, column)\r\n            } else {\r\n              cellValue = $xetable.getCellLabel(row, column)\r\n              if (column.type === 'html') {\r\n                htmlCellElem.innerHTML = cellValue\r\n                cellValue = htmlCellElem.innerText.trim()\r\n              } else {\r\n                const cell = $xetable.getCell(row, column)\r\n                if (cell) {\r\n                  cellValue = cell.innerText.trim()\r\n                }\r\n              }\r\n            }\r\n        }\r\n      }\r\n      item[column.id] = XEUtils.toString(cellValue)\r\n    })\r\n    return item\r\n  })\r\n}\r\n\r\nfunction getExportData ($xetable, opts) {\r\n  const { columns, dataFilterMethod } = opts\r\n  let datas = opts.data\r\n  if (dataFilterMethod) {\r\n    datas = datas.filter((row, index) => dataFilterMethod({ row, $rowIndex: index }))\r\n  }\r\n  return getLabelData($xetable, opts, columns, datas)\r\n}\r\n\r\nfunction getBooleanValue (cellValue) {\r\n  return cellValue === 'TRUE' || cellValue === 'true' || cellValue === true\r\n}\r\n\r\nfunction getHeaderTitle (opts, column) {\r\n  return (opts.original ? column.property : column.getTitle()) || ''\r\n}\r\n\r\nfunction getFooterCellValue ($xetable, opts, items, column) {\r\n  const renderOpts = column.editRender || column.cellRender\r\n  let exportLabelMethod = column.footerExportMethod\r\n  if (!exportLabelMethod && renderOpts && renderOpts.name) {\r\n    const compConf = VXETable.renderer.get(renderOpts.name)\r\n    if (compConf) {\r\n      exportLabelMethod = compConf.footerExportMethod || compConf.footerCellExportMethod\r\n    }\r\n  }\r\n  const _columnIndex = $xetable.getVTColumnIndex(column)\r\n  const cellValue = exportLabelMethod ? exportLabelMethod({ $table: $xetable, items, itemIndex: _columnIndex, _columnIndex, column, options: opts }) : XEUtils.toString(items[_columnIndex])\r\n  return cellValue\r\n}\r\n\r\nfunction getFooterData (opts, footerTableData) {\r\n  const { footerFilterMethod } = opts\r\n  return footerFilterMethod ? footerTableData.filter((items, index) => footerFilterMethod({ items, $rowIndex: index })) : footerTableData\r\n}\r\n\r\nfunction getCsvCellTypeLabel (column, cellValue) {\r\n  if (cellValue) {\r\n    switch (column.cellType) {\r\n      case 'string':\r\n        if (!isNaN(cellValue)) {\r\n          return `\\t${cellValue}`\r\n        }\r\n        break\r\n      case 'number':\r\n        break\r\n      default:\r\n        if (cellValue.length >= 12 && !isNaN(cellValue)) {\r\n          return `\\t${cellValue}`\r\n        }\r\n        break\r\n    }\r\n  }\r\n  return cellValue\r\n}\r\n\r\nfunction toTxtCellLabel (val) {\r\n  if (/[\",\\s\\n]/.test(val)) {\r\n    return `\"${val.replace(/\"/g, '\"\"')}\"`\r\n  }\r\n  return val\r\n}\r\n\r\nfunction toCsv ($xetable, opts, columns, datas) {\r\n  let content = csvBOM\r\n  if (opts.isHeader) {\r\n    content += columns.map(column => toTxtCellLabel(getHeaderTitle(opts, column))).join(',') + enterSymbol\r\n  }\r\n  datas.forEach(row => {\r\n    content += columns.map(column => toTxtCellLabel(getCsvCellTypeLabel(column, row[column.id]))).join(',') + enterSymbol\r\n  })\r\n  if (opts.isFooter) {\r\n    const footerTableData = $xetable.footerTableData\r\n    const footers = getFooterData(opts, footerTableData)\r\n    footers.forEach(rows => {\r\n      content += columns.map(column => toTxtCellLabel(getFooterCellValue($xetable, opts, rows, column))).join(',') + enterSymbol\r\n    })\r\n  }\r\n  return content\r\n}\r\n\r\nfunction toTxt ($xetable, opts, columns, datas) {\r\n  let content = ''\r\n  if (opts.isHeader) {\r\n    content += columns.map(column => toTxtCellLabel(getHeaderTitle(opts, column))).join('\\t') + enterSymbol\r\n  }\r\n  datas.forEach(row => {\r\n    content += columns.map(column => toTxtCellLabel(row[column.id])).join('\\t') + enterSymbol\r\n  })\r\n  if (opts.isFooter) {\r\n    const footerTableData = $xetable.footerTableData\r\n    const footers = getFooterData(opts, footerTableData)\r\n    footers.forEach(rows => {\r\n      content += columns.map(column => toTxtCellLabel(getFooterCellValue($xetable, opts, rows, column))).join(',') + enterSymbol\r\n    })\r\n  }\r\n  return content\r\n}\r\n\r\nfunction hasEllipsis ($xetable, column, property, allColumnOverflow) {\r\n  const columnOverflow = column[property]\r\n  const headOverflow = XEUtils.isUndefined(columnOverflow) || XEUtils.isNull(columnOverflow) ? allColumnOverflow : columnOverflow\r\n  const showEllipsis = headOverflow === 'ellipsis'\r\n  const showTitle = headOverflow === 'title'\r\n  const showTooltip = headOverflow === true || headOverflow === 'tooltip'\r\n  let isEllipsis = showTitle || showTooltip || showEllipsis\r\n  // 虚拟滚动不支持动态高度\r\n  if (($xetable.scrollXLoad || $xetable.scrollYLoad) && !isEllipsis) {\r\n    isEllipsis = true\r\n  }\r\n  return isEllipsis\r\n}\r\n\r\nfunction createHtmlPage (opts, content) {\r\n  const { style } = opts\r\n  return [\r\n    '<!DOCTYPE html><html>',\r\n    '<head>',\r\n    '<meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui\">',\r\n    `<title>${opts.sheetName}</title>`,\r\n    `<style>${defaultHtmlStyle}</style>`,\r\n    style ? `<style>${style}</style>` : '',\r\n    '</head>',\r\n    `<body>${content}</body>`,\r\n    '</html>'\r\n  ].join('')\r\n}\r\n\r\nfunction toHtml ($xetable, opts, columns, datas) {\r\n  const { id, border, treeConfig, treeOpts, isAllSelected, isIndeterminate, headerAlign: allHeaderAlign, align: allAlign, footerAlign: allFooterAlign, showOverflow: allColumnOverflow, showHeaderOverflow: allColumnHeaderOverflow, mergeList } = $xetable\r\n  const { print: isPrint, isHeader, isFooter, isColgroup, isMerge, colgroups, original } = opts\r\n  const allCls = 'check-all'\r\n  const clss = [\r\n    'vxe-table',\r\n    `border--${toTableBorder(border)}`,\r\n    isPrint ? 'is--print' : '',\r\n    isHeader ? 'is--header' : ''\r\n  ].filter(cls => cls)\r\n  const tables = [\r\n    `<table class=\"${clss.join(' ')}\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">`,\r\n    `<colgroup>${columns.map(column => `<col style=\"width:${column.renderWidth}px\">`).join('')}</colgroup>`\r\n  ]\r\n  if (isHeader) {\r\n    tables.push('<thead>')\r\n    if (isColgroup && !original) {\r\n      colgroups.forEach(cols => {\r\n        tables.push(\r\n          `<tr>${cols.map(column => {\r\n            const headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign\r\n            const classNames = hasEllipsis($xetable, column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : []\r\n            const cellTitle = getHeaderTitle(opts, column)\r\n            let childWidth = 0\r\n            let countChild = 0\r\n            XEUtils.eachTree([column], item => {\r\n              if (!item.childNodes || !column.childNodes.length) {\r\n                countChild++\r\n              }\r\n              childWidth += item.renderWidth\r\n            }, { children: 'childNodes' })\r\n            const cellWidth = childWidth - countChild\r\n            if (headAlign) {\r\n              classNames.push(`col--${headAlign}`)\r\n            }\r\n            if (column.type === 'checkbox') {\r\n              return `<th class=\"${classNames.join(' ')}\" colspan=\"${column._colSpan}\" rowspan=\"${column._rowSpan}\"><div ${isPrint ? '' : `style=\"width: ${cellWidth}px\"`}><input type=\"checkbox\" class=\"${allCls}\" ${isAllSelected ? 'checked' : ''}><span>${cellTitle}</span></div></th>`\r\n            }\r\n            return `<th class=\"${classNames.join(' ')}\" colspan=\"${column._colSpan}\" rowspan=\"${column._rowSpan}\" title=\"${cellTitle}\"><div ${isPrint ? '' : `style=\"width: ${cellWidth}px\"`}><span>${formatText(cellTitle, true)}</span></div></th>`\r\n          }).join('')}</tr>`\r\n        )\r\n      })\r\n    } else {\r\n      tables.push(\r\n        `<tr>${columns.map(column => {\r\n          const headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign\r\n          const classNames = hasEllipsis($xetable, column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : []\r\n          const cellTitle = getHeaderTitle(opts, column)\r\n          if (headAlign) {\r\n            classNames.push(`col--${headAlign}`)\r\n          }\r\n          if (column.type === 'checkbox') {\r\n            return `<th class=\"${classNames.join(' ')}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"checkbox\" class=\"${allCls}\" ${isAllSelected ? 'checked' : ''}><span>${cellTitle}</span></div></th>`\r\n          }\r\n          return `<th class=\"${classNames.join(' ')}\" title=\"${cellTitle}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><span>${formatText(cellTitle, true)}</span></div></th>`\r\n        }).join('')}</tr>`\r\n      )\r\n    }\r\n    tables.push('</thead>')\r\n  }\r\n  if (datas.length) {\r\n    tables.push('<tbody>')\r\n    if (treeConfig) {\r\n      datas.forEach(item => {\r\n        tables.push(\r\n          '<tr>' + columns.map(column => {\r\n            const cellAlign = column.align || allAlign\r\n            const classNames = hasEllipsis($xetable, column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : []\r\n            const cellValue = item[column.id]\r\n            if (cellAlign) {\r\n              classNames.push(`col--${cellAlign}`)\r\n            }\r\n            if (column.treeNode) {\r\n              let treeIcon = ''\r\n              if (item._hasChild) {\r\n                treeIcon = `<i class=\"${item._expand ? 'vxe-table--tree-fold-icon' : 'vxe-table--tree-unfold-icon'}\"></i>`\r\n              }\r\n              classNames.push('vxe-table--tree-node')\r\n              if (column.type === 'radio') {\r\n                return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><div class=\"vxe-table--tree-node-wrapper\" style=\"padding-left: ${item._level * treeOpts.indent}px\"><div class=\"vxe-table--tree-icon-wrapper\">${treeIcon}</div><div class=\"vxe-table--tree-cell\"><input type=\"radio\" name=\"radio_${id}\" ${item._radioDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._radioLabel}</span></div></div></div></td>`\r\n              } else if (column.type === 'checkbox') {\r\n                return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><div class=\"vxe-table--tree-node-wrapper\" style=\"padding-left: ${item._level * treeOpts.indent}px\"><div class=\"vxe-table--tree-icon-wrapper\">${treeIcon}</div><div class=\"vxe-table--tree-cell\"><input type=\"checkbox\" ${item._checkboxDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._checkboxLabel}</span></div></div></div></td>`\r\n              }\r\n              return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><div class=\"vxe-table--tree-node-wrapper\" style=\"padding-left: ${item._level * treeOpts.indent}px\"><div class=\"vxe-table--tree-icon-wrapper\">${treeIcon}</div><div class=\"vxe-table--tree-cell\">${cellValue}</div></div></div></td>`\r\n            }\r\n            if (column.type === 'radio') {\r\n              return `<td class=\"${classNames.join(' ')}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"radio\" name=\"radio_${id}\" ${item._radioDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._radioLabel}</span></div></td>`\r\n            } else if (column.type === 'checkbox') {\r\n              return `<td class=\"${classNames.join(' ')}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"checkbox\" ${item._checkboxDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._checkboxLabel}</span></div></td>`\r\n            }\r\n            return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}>${formatText(cellValue, true)}</div></td>`\r\n          }).join('') + '</tr>'\r\n        )\r\n      })\r\n    } else {\r\n      datas.forEach(item => {\r\n        tables.push(\r\n          '<tr>' + columns.map(column => {\r\n            const cellAlign = column.align || allAlign\r\n            const classNames = hasEllipsis($xetable, column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : []\r\n            const cellValue = item[column.id]\r\n            let rowSpan = 1\r\n            let colSpan = 1\r\n            if (isMerge && mergeList.length) {\r\n              const _rowIndex = $xetable.getVTRowIndex(item._row)\r\n              const _columnIndex = $xetable.getVTColumnIndex(column)\r\n              const spanRest = mergeBodyMethod(mergeList, _rowIndex, _columnIndex)\r\n              if (spanRest) {\r\n                const { rowspan, colspan } = spanRest\r\n                if (!rowspan || !colspan) {\r\n                  return ''\r\n                }\r\n                if (rowspan > 1) {\r\n                  rowSpan = rowspan\r\n                }\r\n                if (colspan > 1) {\r\n                  colSpan = colspan\r\n                }\r\n              }\r\n            }\r\n            if (cellAlign) {\r\n              classNames.push(`col--${cellAlign}`)\r\n            }\r\n            if (column.type === 'radio') {\r\n              return `<td class=\"${classNames.join(' ')}\" rowspan=\"${rowSpan}\" colspan=\"${colSpan}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"radio\" name=\"radio_${id}\" ${item._radioDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._radioLabel}</span></div></td>`\r\n            } else if (column.type === 'checkbox') {\r\n              return `<td class=\"${classNames.join(' ')}\" rowspan=\"${rowSpan}\" colspan=\"${colSpan}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"checkbox\" ${item._checkboxDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._checkboxLabel}</span></div></td>`\r\n            }\r\n            return `<td class=\"${classNames.join(' ')}\" rowspan=\"${rowSpan}\" colspan=\"${colSpan}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}>${formatText(cellValue, true)}</div></td>`\r\n          }).join('') + '</tr>'\r\n        )\r\n      })\r\n    }\r\n    tables.push('</tbody>')\r\n  }\r\n  if (isFooter) {\r\n    const footerTableData = $xetable.footerTableData\r\n    const footers = getFooterData(opts, footerTableData)\r\n    if (footers.length) {\r\n      tables.push('<tfoot>')\r\n      footers.forEach(rows => {\r\n        tables.push(\r\n          `<tr>${columns.map(column => {\r\n            const footAlign = column.footerAlign || column.align || allFooterAlign || allAlign\r\n            const classNames = hasEllipsis($xetable, column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : []\r\n            const cellValue = getFooterCellValue($xetable, opts, rows, column)\r\n            if (footAlign) {\r\n              classNames.push(`col--${footAlign}`)\r\n            }\r\n            return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}>${formatText(cellValue, true)}</div></td>`\r\n          }).join('')}</tr>`\r\n        )\r\n      })\r\n      tables.push('</tfoot>')\r\n    }\r\n  }\r\n  // 是否半选状态\r\n  const script = !isAllSelected && isIndeterminate ? `<script>(function(){var a=document.querySelector(\".${allCls}\");if(a){a.indeterminate=true}})()</script>` : ''\r\n  tables.push('</table>', script)\r\n  return isPrint ? tables.join('') : createHtmlPage(opts, tables.join(''))\r\n}\r\n\r\nfunction toXML ($xetable, opts, columns, datas) {\r\n  let xml = [\r\n    '<?xml version=\"1.0\"?>',\r\n    '<?mso-application progid=\"Excel.Sheet\"?>',\r\n    '<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:html=\"http://www.w3.org/TR/REC-html40\">',\r\n    '<DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">',\r\n    '<Version>16.00</Version>',\r\n    '</DocumentProperties>',\r\n    '<ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\">',\r\n    '<WindowHeight>7920</WindowHeight>',\r\n    '<WindowWidth>21570</WindowWidth>',\r\n    '<WindowTopX>32767</WindowTopX>',\r\n    '<WindowTopY>32767</WindowTopY>',\r\n    '<ProtectStructure>False</ProtectStructure>',\r\n    '<ProtectWindows>False</ProtectWindows>',\r\n    '</ExcelWorkbook>',\r\n    `<Worksheet ss:Name=\"${opts.sheetName}\">`,\r\n    '<Table>',\r\n    columns.map(column => `<Column ss:Width=\"${column.renderWidth}\"/>`).join('')\r\n  ].join('')\r\n  if (opts.isHeader) {\r\n    xml += `<Row>${columns.map(column => `<Cell><Data ss:Type=\"String\">${getHeaderTitle(opts, column)}</Data></Cell>`).join('')}</Row>`\r\n  }\r\n  datas.forEach(row => {\r\n    xml += '<Row>' + columns.map(column => `<Cell><Data ss:Type=\"String\">${row[column.id]}</Data></Cell>`).join('') + '</Row>'\r\n  })\r\n  if (opts.isFooter) {\r\n    const footerTableData = $xetable.footerTableData\r\n    const footers = getFooterData(opts, footerTableData)\r\n    footers.forEach(rows => {\r\n      xml += `<Row>${columns.map(column => `<Cell><Data ss:Type=\"String\">${getFooterCellValue($xetable, opts, rows, column)}</Data></Cell>`).join('')}</Row>`\r\n    })\r\n  }\r\n  return `${xml}</Table></Worksheet></Workbook>`\r\n}\r\n\r\nfunction getContent ($xetable, opts, columns, datas) {\r\n  if (columns.length) {\r\n    switch (opts.type) {\r\n      case 'csv':\r\n        return toCsv($xetable, opts, columns, datas)\r\n      case 'txt':\r\n        return toTxt($xetable, opts, columns, datas)\r\n      case 'html':\r\n        return toHtml($xetable, opts, columns, datas)\r\n      case 'xml':\r\n        return toXML($xetable, opts, columns, datas)\r\n    }\r\n  }\r\n  return ''\r\n}\r\n\r\n/**\r\n * 保存文件到本地\r\n * @param {*} options 参数\r\n */\r\nexport function saveLocalFile (options) {\r\n  const { filename, type, content } = options\r\n  const name = `${filename}.${type}`\r\n  if (window.Blob) {\r\n    const blob = content instanceof Blob ? content : getExportBlobByContent(XEUtils.toString(content), options)\r\n    if (navigator.msSaveBlob) {\r\n      navigator.msSaveBlob(blob, name)\r\n    } else {\r\n      const linkElem = document.createElement('a')\r\n      linkElem.target = '_blank'\r\n      linkElem.download = name\r\n      linkElem.href = URL.createObjectURL(blob)\r\n      document.body.appendChild(linkElem)\r\n      linkElem.click()\r\n      document.body.removeChild(linkElem)\r\n    }\r\n    return Promise.resolve()\r\n  }\r\n  return Promise.reject(new Error(UtilTools.getLog('vxe.error.notExp')))\r\n}\r\n\r\nfunction downloadFile ($xetable, opts, content) {\r\n  const { filename, type, download } = opts\r\n  if (!download) {\r\n    const blob = getExportBlobByContent(content, opts)\r\n    return Promise.resolve({ type, content, blob })\r\n  }\r\n  saveLocalFile({ filename, type, content }).then(() => {\r\n    if (opts.message !== false) {\r\n      VXETable.modal.message({ content: GlobalConfig.i18n('vxe.table.expSuccess'), status: 'success' })\r\n    }\r\n  })\r\n}\r\n\r\nfunction clearColumnConvert (columns) {\r\n  XEUtils.eachTree(columns, column => {\r\n    delete column._level\r\n    delete column._colSpan\r\n    delete column._rowSpan\r\n    delete column._children\r\n    delete column.childNodes\r\n  }, { children: 'children' })\r\n}\r\n\r\nfunction handleExport ($xetable, opts) {\r\n  const { remote, columns, colgroups, exportMethod, afterExportMethod } = opts\r\n  return new Promise(resolve => {\r\n    if (remote) {\r\n      const params = { options: opts, $table: $xetable, $grid: $xetable.$xegrid }\r\n      resolve(exportMethod ? exportMethod(params) : params)\r\n    } else {\r\n      const datas = getExportData($xetable, opts)\r\n      resolve(\r\n        $xetable.preventEvent(null, 'event.export', { options: opts, columns, colgroups, datas }, () => {\r\n          return downloadFile($xetable, opts, getContent($xetable, opts, columns, datas))\r\n        })\r\n      )\r\n    }\r\n  }).then((params) => {\r\n    clearColumnConvert(columns)\r\n    if (!opts.print) {\r\n      if (afterExportMethod) {\r\n        afterExportMethod({ status: true, options: opts, $table: $xetable, $grid: $xetable.$xegrid })\r\n      }\r\n    }\r\n    return Object.assign({ status: true }, params)\r\n  }).catch(() => {\r\n    clearColumnConvert(columns)\r\n    if (!opts.print) {\r\n      if (afterExportMethod) {\r\n        afterExportMethod({ status: false, options: opts, $table: $xetable, $grid: $xetable.$xegrid })\r\n      }\r\n    }\r\n    const params = { status: false }\r\n    return Promise.reject(params)\r\n  })\r\n}\r\n\r\nfunction getElementsByTagName (elem, qualifiedName) {\r\n  return elem.getElementsByTagName(qualifiedName)\r\n}\r\n\r\nfunction getTxtCellKey (now) {\r\n  return `#${now}@${XEUtils.uniqueId()}`\r\n}\r\n\r\nfunction replaceTxtCell (cell, vMaps) {\r\n  return cell.replace(/#\\d+@\\d+/g, (key) => XEUtils.hasOwnProp(vMaps, key) ? vMaps[key] : key)\r\n}\r\n\r\nfunction getTxtCellValue (val, vMaps) {\r\n  const rest = replaceTxtCell(val, vMaps)\r\n  return rest.replace(/^\"+$/g, (qVal) => '\"'.repeat(Math.ceil(qVal.length / 2)))\r\n}\r\n\r\nfunction parseCsvAndTxt (columns, content, cellSeparator) {\r\n  const list = content.split(enterSymbol)\r\n  const rows = []\r\n  let fields = []\r\n  if (list.length) {\r\n    const vMaps = {}\r\n    const now = Date.now()\r\n    list.forEach((rVal) => {\r\n      if (rVal) {\r\n        const item = {}\r\n        rVal = rVal.replace(/(\"\")|(\\n)/g, (text, dVal) => {\r\n          const key = getTxtCellKey(now)\r\n          vMaps[key] = dVal ? '\"' : '\\n'\r\n          return key\r\n        }).replace(/\"(.*?)\"/g, (text, cVal) => {\r\n          const key = getTxtCellKey(now)\r\n          vMaps[key] = replaceTxtCell(cVal, vMaps)\r\n          return key\r\n        })\r\n        const cells = rVal.split(cellSeparator)\r\n        if (!fields.length) {\r\n          fields = cells.map((val) => getTxtCellValue(val.trim(), vMaps))\r\n        } else {\r\n          cells.forEach((val, colIndex) => {\r\n            if (colIndex < fields.length) {\r\n              item[fields[colIndex]] = getTxtCellValue(val, vMaps)\r\n            }\r\n          })\r\n          rows.push(item)\r\n        }\r\n      }\r\n    })\r\n  }\r\n  return { fields, rows }\r\n}\r\n\r\nfunction parseCsv (columns, content) {\r\n  return parseCsvAndTxt(columns, content, ',')\r\n}\r\n\r\nfunction parseTxt (columns, content) {\r\n  return parseCsvAndTxt(columns, content, '\\t')\r\n}\r\n\r\nfunction parseHTML (columns, content) {\r\n  const domParser = new DOMParser()\r\n  const xmlDoc = domParser.parseFromString(content, 'text/html')\r\n  const bodyNodes = getElementsByTagName(xmlDoc, 'body')\r\n  const rows = []\r\n  const fields = []\r\n  if (bodyNodes.length) {\r\n    const tableNodes = getElementsByTagName(bodyNodes[0], 'table')\r\n    if (tableNodes.length) {\r\n      const theadNodes = getElementsByTagName(tableNodes[0], 'thead')\r\n      if (theadNodes.length) {\r\n        XEUtils.arrayEach(getElementsByTagName(theadNodes[0], 'tr'), rowNode => {\r\n          XEUtils.arrayEach(getElementsByTagName(rowNode, 'th'), cellNode => {\r\n            fields.push(cellNode.textContent)\r\n          })\r\n        })\r\n        const tbodyNodes = getElementsByTagName(tableNodes[0], 'tbody')\r\n        if (tbodyNodes.length) {\r\n          XEUtils.arrayEach(getElementsByTagName(tbodyNodes[0], 'tr'), rowNode => {\r\n            const item = {}\r\n            XEUtils.arrayEach(getElementsByTagName(rowNode, 'td'), (cellNode, colIndex) => {\r\n              if (fields[colIndex]) {\r\n                item[fields[colIndex]] = cellNode.textContent || ''\r\n              }\r\n            })\r\n            rows.push(item)\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return { fields, rows }\r\n}\r\n\r\nfunction parseXML (columns, content) {\r\n  const domParser = new DOMParser()\r\n  const xmlDoc = domParser.parseFromString(content, 'application/xml')\r\n  const sheetNodes = getElementsByTagName(xmlDoc, 'Worksheet')\r\n  const rows = []\r\n  const fields = []\r\n  if (sheetNodes.length) {\r\n    const tableNodes = getElementsByTagName(sheetNodes[0], 'Table')\r\n    if (tableNodes.length) {\r\n      const rowNodes = getElementsByTagName(tableNodes[0], 'Row')\r\n      if (rowNodes.length) {\r\n        XEUtils.arrayEach(getElementsByTagName(rowNodes[0], 'Cell'), cellNode => {\r\n          fields.push(cellNode.textContent)\r\n        })\r\n        XEUtils.arrayEach(rowNodes, (rowNode, index) => {\r\n          if (index) {\r\n            const item = {}\r\n            const cellNodes = getElementsByTagName(rowNode, 'Cell')\r\n            XEUtils.arrayEach(cellNodes, (cellNode, colIndex) => {\r\n              if (fields[colIndex]) {\r\n                item[fields[colIndex]] = cellNode.textContent\r\n              }\r\n            })\r\n            rows.push(item)\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n  return { fields, rows }\r\n}\r\n\r\n/**\r\n * 检查导入的列是否完整\r\n * @param {Array} fields 字段名列表\r\n * @param {Array} rows 数据列表\r\n */\r\nfunction checkImportData (columns, fields) {\r\n  const tableFields = []\r\n  columns.forEach((column) => {\r\n    const field = column.property\r\n    if (field) {\r\n      tableFields.push(field)\r\n    }\r\n  })\r\n  return fields.some(field => tableFields.indexOf(field) > -1)\r\n}\r\n\r\nfunction handleImport ($xetable, content, opts) {\r\n  const { tableFullColumn, _importResolve, _importReject } = $xetable\r\n  let rest = { fields: [], rows: [] }\r\n  switch (opts.type) {\r\n    case 'csv':\r\n      rest = parseCsv(tableFullColumn, content)\r\n      break\r\n    case 'txt':\r\n      rest = parseTxt(tableFullColumn, content)\r\n      break\r\n    case 'html':\r\n      rest = parseHTML(tableFullColumn, content)\r\n      break\r\n    case 'xml':\r\n      rest = parseXML(tableFullColumn, content)\r\n      break\r\n  }\r\n  const { fields, rows } = rest\r\n  const status = checkImportData(tableFullColumn, fields)\r\n  if (status) {\r\n    $xetable.createData(rows)\r\n      .then((data) => {\r\n        let loadRest\r\n        if (opts.mode === 'insert') {\r\n          loadRest = $xetable.insert(data)\r\n        } else {\r\n          loadRest = $xetable.reloadData(data)\r\n        }\r\n        if (opts.message !== false) {\r\n          VXETable.modal.message({ content: GlobalConfig.i18n('vxe.table.impSuccess', [rows.length]), status: 'success' })\r\n        }\r\n        return loadRest.then(() => {\r\n          if (_importResolve) {\r\n            _importResolve({ status: true })\r\n          }\r\n        })\r\n      })\r\n  } else if (opts.message !== false) {\r\n    VXETable.modal.message({ content: GlobalConfig.i18n('vxe.error.impFields'), status: 'error' })\r\n    if (_importReject) {\r\n      _importReject({ status: false })\r\n    }\r\n  }\r\n}\r\n\r\nfunction handleFileImport ($xetable, file, opts) {\r\n  const { importMethod, afterImportMethod } = opts\r\n  const { type, filename } = UtilTools.parseFile(file)\r\n\r\n  // 检查类型，如果为自定义导出，则不需要校验类型\r\n  if (!importMethod && !XEUtils.includes(VXETable.config.importTypes, type)) {\r\n    if (opts.message !== false) {\r\n      VXETable.modal.message({ content: GlobalConfig.i18n('vxe.error.notType', [type]), status: 'error' })\r\n    }\r\n    const params = { status: false }\r\n    return Promise.reject(params)\r\n  }\r\n\r\n  const rest = new Promise((resolve, reject) => {\r\n    const _importResolve = (params) => {\r\n      resolve(params)\r\n      $xetable._importResolve = null\r\n      $xetable._importReject = null\r\n    }\r\n    const _importReject = (params) => {\r\n      reject(params)\r\n      $xetable._importResolve = null\r\n      $xetable._importReject = null\r\n    }\r\n    $xetable._importResolve = _importResolve\r\n    $xetable._importReject = _importReject\r\n    if (window.FileReader) {\r\n      const options = Object.assign({ mode: 'insert' }, opts, { type, filename })\r\n      if (options.remote) {\r\n        if (importMethod) {\r\n          Promise.resolve(importMethod({ file, options, $table: $xetable })).then(() => {\r\n            _importResolve({ status: true })\r\n          }).catch(() => {\r\n            _importResolve({ status: true })\r\n          })\r\n        } else {\r\n          _importResolve({ status: true })\r\n        }\r\n      } else {\r\n        $xetable.preventEvent(null, 'event.import', { file, options, columns: $xetable.tableFullColumn }, () => {\r\n          const reader = new FileReader()\r\n          reader.onerror = () => {\r\n            UtilTools.error('vxe.error.notType', [type])\r\n            _importReject({ status: false })\r\n          }\r\n          reader.onload = (e) => {\r\n            handleImport($xetable, e.target.result, options)\r\n          }\r\n          reader.readAsText(file, 'UTF-8')\r\n        })\r\n      }\r\n    } else {\r\n      // 不支持的浏览器\r\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n        UtilTools.error('vxe.error.notExp')\r\n      }\r\n      _importResolve({ status: true })\r\n    }\r\n  })\r\n\r\n  return rest.then(() => {\r\n    if (afterImportMethod) {\r\n      afterImportMethod({ status: true, options: opts, $table: $xetable })\r\n    }\r\n  }).catch((e) => {\r\n    if (afterImportMethod) {\r\n      afterImportMethod({ status: false, options: opts, $table: $xetable })\r\n    }\r\n    return Promise.reject(e)\r\n  })\r\n}\r\n\r\n/**\r\n * 读取本地文件\r\n * @param {*} options 参数\r\n */\r\nexport function readLocalFile (options = {}) {\r\n  if (!fileForm) {\r\n    fileForm = document.createElement('form')\r\n    fileInput = document.createElement('input')\r\n    fileForm.className = 'vxe-table--file-form'\r\n    fileInput.name = 'file'\r\n    fileInput.type = 'file'\r\n    fileForm.appendChild(fileInput)\r\n    document.body.appendChild(fileForm)\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    const types = options.types || []\r\n    const isAllType = !types.length || types.some((type) => type === '*')\r\n    fileInput.multiple = !!options.multiple\r\n    fileInput.accept = isAllType ? '' : `.${types.join(', .')}`\r\n    fileInput.onchange = (evnt) => {\r\n      const { files } = evnt.target\r\n      const file = files[0]\r\n      let errType\r\n      // 校验类型\r\n      if (!isAllType) {\r\n        for (let fIndex = 0; fIndex < files.length; fIndex++) {\r\n          const { type } = UtilTools.parseFile(files[fIndex])\r\n          if (!XEUtils.includes(types, type)) {\r\n            errType = type\r\n            break\r\n          }\r\n        }\r\n      }\r\n      if (!errType) {\r\n        resolve({ status: true, files, file })\r\n      } else {\r\n        if (options.message !== false) {\r\n          VXETable.modal.message({ content: GlobalConfig.i18n('vxe.error.notType', [errType]), status: 'error' })\r\n        }\r\n        const params = { status: false, files, file }\r\n        reject(params)\r\n      }\r\n    }\r\n    fileForm.reset()\r\n    fileInput.click()\r\n  })\r\n}\r\n\r\nfunction removePrintFrame () {\r\n  if (printFrame) {\r\n    if (printFrame.parentNode) {\r\n      try {\r\n        printFrame.contentDocument.write('')\r\n        printFrame.contentDocument.clear()\r\n      } catch (e) { }\r\n      printFrame.parentNode.removeChild(printFrame)\r\n    }\r\n    printFrame = null\r\n  }\r\n}\r\n\r\nfunction appendPrintFrame () {\r\n  if (!printFrame.parentNode) {\r\n    document.body.appendChild(printFrame)\r\n  }\r\n}\r\n\r\nfunction afterPrintEvent () {\r\n  removePrintFrame()\r\n}\r\n\r\nexport function handlePrint ($xetable, opts, content) {\r\n  const { beforePrintMethod } = opts\r\n  if (beforePrintMethod) {\r\n    content = beforePrintMethod({ content, options: opts, $table: $xetable }) || ''\r\n  }\r\n  content = createHtmlPage(opts, content)\r\n  const blob = getExportBlobByContent(content, opts)\r\n  if (browse.msie) {\r\n    removePrintFrame()\r\n    printFrame = createFrame()\r\n    appendPrintFrame()\r\n    printFrame.contentDocument.write(content)\r\n    printFrame.contentDocument.execCommand('print')\r\n  } else {\r\n    if (!printFrame) {\r\n      printFrame = createFrame()\r\n      printFrame.onload = (evnt) => {\r\n        if (evnt.target.src) {\r\n          evnt.target.contentWindow.onafterprint = afterPrintEvent\r\n          evnt.target.contentWindow.print()\r\n        }\r\n      }\r\n    }\r\n    appendPrintFrame()\r\n    printFrame.src = URL.createObjectURL(blob)\r\n  }\r\n}\r\n\r\nfunction handleExportAndPrint ($xetable, options, isPrint) {\r\n  const { initStore, customOpts, collectColumn, footerTableData, treeConfig, mergeList, isGroup, exportParams } = $xetable\r\n  const selectRecords = $xetable.getCheckboxRecords()\r\n  const hasFooter = !!footerTableData.length\r\n  const hasTree = treeConfig\r\n  const hasMerge = !hasTree && mergeList.length\r\n  const defOpts = Object.assign({ message: true, isHeader: true }, options)\r\n  const types = defOpts.types || VXETable.config.exportTypes\r\n  const modes = defOpts.modes\r\n  const checkMethod = customOpts.checkMethod\r\n  const exportColumns = collectColumn.slice(0)\r\n  const { columns } = defOpts\r\n  // 处理类型\r\n  const typeList = types.map(value => {\r\n    return {\r\n      value,\r\n      label: `vxe.export.types.${value}`\r\n    }\r\n  })\r\n  const modeList = modes.map(value => {\r\n    return {\r\n      value,\r\n      label: `vxe.export.modes.${value}`\r\n    }\r\n  })\r\n  // 默认选中\r\n  XEUtils.eachTree(exportColumns, (column, index, items, path, parent) => {\r\n    const isColGroup = column.children && column.children.length\r\n    if (isColGroup || defaultFilterExportColumn(column)) {\r\n      column.checked = columns ? columns.some((item) => {\r\n        if (UtilTools.isColumn(item)) {\r\n          return column === item\r\n        } else if (XEUtils.isString(item)) {\r\n          return column.field === item\r\n        } else {\r\n          const colid = item.id || item.colId\r\n          const type = item.type\r\n          const field = item.property || item.field\r\n          if (colid) {\r\n            return column.id === colid\r\n          } else if (field && type) {\r\n            return column.property === field && column.type === type\r\n          } else if (field) {\r\n            return column.property === field\r\n          } else if (type) {\r\n            return column.type === type\r\n          }\r\n        }\r\n      }) : column.visible\r\n      column.halfChecked = false\r\n      column.disabled = (parent && parent.disabled) || (checkMethod ? !checkMethod({ column }) : false)\r\n    }\r\n  })\r\n  // 更新条件\r\n  Object.assign($xetable.exportStore, {\r\n    columns: exportColumns,\r\n    typeList,\r\n    modeList,\r\n    hasFooter,\r\n    hasMerge,\r\n    hasTree,\r\n    isPrint,\r\n    hasColgroup: isGroup,\r\n    visible: true\r\n  })\r\n  // 默认参数\r\n  if (!initStore.export) {\r\n    Object.assign(exportParams, {\r\n      mode: selectRecords.length ? 'selected' : 'current'\r\n    }, defOpts)\r\n  }\r\n  if (modes.indexOf(exportParams.mode) === -1) {\r\n    exportParams.mode = modes[0]\r\n  }\r\n  if (types.indexOf(exportParams.type) === -1) {\r\n    exportParams.type = types[0]\r\n  }\r\n  initStore.export = true\r\n  return $xetable.$nextTick()\r\n}\r\n\r\nconst getConvertColumns = (columns) => {\r\n  const result = []\r\n  columns.forEach((column) => {\r\n    if (column.childNodes && column.childNodes.length) {\r\n      result.push(column)\r\n      result.push(...getConvertColumns(column.childNodes))\r\n    } else {\r\n      result.push(column)\r\n    }\r\n  })\r\n  return result\r\n}\r\n\r\nconst convertToRows = (originColumns) => {\r\n  let maxLevel = 1\r\n  const traverse = (column, parent) => {\r\n    if (parent) {\r\n      column._level = parent._level + 1\r\n      if (maxLevel < column._level) {\r\n        maxLevel = column._level\r\n      }\r\n    }\r\n    if (column.childNodes && column.childNodes.length) {\r\n      let colSpan = 0\r\n      column.childNodes.forEach((subColumn) => {\r\n        traverse(subColumn, column)\r\n        colSpan += subColumn._colSpan\r\n      })\r\n      column._colSpan = colSpan\r\n    } else {\r\n      column._colSpan = 1\r\n    }\r\n  }\r\n\r\n  originColumns.forEach((column) => {\r\n    column._level = 1\r\n    traverse(column)\r\n  })\r\n\r\n  const rows = []\r\n  for (let i = 0; i < maxLevel; i++) {\r\n    rows.push([])\r\n  }\r\n\r\n  const allColumns = getConvertColumns(originColumns)\r\n\r\n  allColumns.forEach((column) => {\r\n    if (column.childNodes && column.childNodes.length) {\r\n      column._rowSpan = 1\r\n    } else {\r\n      column._rowSpan = maxLevel - column._level + 1\r\n    }\r\n    rows[column._level - 1].push(column)\r\n  })\r\n\r\n  return rows\r\n}\r\n\r\nexport default {\r\n  methods: {\r\n    /**\r\n     * 导出文件，支持 csv/html/xml/txt\r\n     * 如果是树表格，则默认是导出所有节点\r\n     * 如果是启用了虚拟滚动，则只能导出数据源，可以配合 dataFilterMethod 函数自行转换数据\r\n     * @param {Object} options 参数\r\n     */\r\n    _exportData (options) {\r\n      const { $xegrid, isGroup, tableGroupColumn, tableFullColumn, afterFullData, treeConfig, treeOpts, exportOpts } = this\r\n      const opts = Object.assign({\r\n        // filename: '',\r\n        // sheetName: '',\r\n        // original: false,\r\n        // message: false,\r\n        isHeader: true,\r\n        isFooter: true,\r\n        isColgroup: true,\r\n        isMerge: false,\r\n        isAllExpand: false,\r\n        download: true,\r\n        type: 'csv',\r\n        mode: 'current'\r\n        // data: null,\r\n        // remote: false,\r\n        // dataFilterMethod: null,\r\n        // footerFilterMethod: null,\r\n        // exportMethod: null,\r\n        // columnFilterMethod: null,\r\n        // beforeExportMethod: null,\r\n        // afterExportMethod: null\r\n      }, exportOpts, {\r\n        print: false\r\n      }, options)\r\n      const { type, mode, columns, original, beforeExportMethod } = opts\r\n      let groups = []\r\n      const customCols = columns && columns.length ? columns : null\r\n      // 如果设置源数据，则默认导出设置了字段的列\r\n      let columnFilterMethod = opts.columnFilterMethod\r\n      if (!customCols && !columnFilterMethod) {\r\n        columnFilterMethod = original ? ({ column }) => column.property : ({ column }) => defaultFilterExportColumn(column)\r\n      }\r\n      if (customCols) {\r\n        groups = XEUtils.searchTree(\r\n          XEUtils.mapTree(customCols, item => {\r\n            let targetColumn\r\n            if (item) {\r\n              if (UtilTools.isColumn(item)) {\r\n                targetColumn = item\r\n              } else if (XEUtils.isString(item)) {\r\n                targetColumn = this.getColumnByField(item)\r\n              } else {\r\n                const colid = item.id || item.colId\r\n                const type = item.type\r\n                const field = item.property || item.field\r\n                if (colid) {\r\n                  targetColumn = this.getColumnById(colid)\r\n                } else if (field && type) {\r\n                  targetColumn = tableFullColumn.find((column) => column.property === field && column.type === type)\r\n                } else if (field) {\r\n                  targetColumn = this.getColumnByField(field)\r\n                } else if (type) {\r\n                  targetColumn = tableFullColumn.find((column) => column.type === type)\r\n                }\r\n              }\r\n              return targetColumn || {}\r\n            }\r\n          }, {\r\n            children: 'childNodes',\r\n            mapChildren: '_children'\r\n          }),\r\n          (column, index) => UtilTools.isColumn(column) && (!columnFilterMethod || columnFilterMethod({ column, $columnIndex: index })),\r\n          {\r\n            children: '_children',\r\n            mapChildren: 'childNodes',\r\n            original: true\r\n          }\r\n        )\r\n      } else {\r\n        groups = XEUtils.searchTree(isGroup ? tableGroupColumn : tableFullColumn, (column, index) => column.visible && (!columnFilterMethod || columnFilterMethod({ column, $columnIndex: index })), { children: 'children', mapChildren: 'childNodes', original: true })\r\n      }\r\n      // 获取所有列\r\n      const cols = []\r\n      XEUtils.eachTree(groups, column => {\r\n        const isColGroup = column.children && column.children.length\r\n        if (!isColGroup) {\r\n          cols.push(column)\r\n        }\r\n      }, { children: 'childNodes' })\r\n      // 构建分组层级\r\n      opts.columns = cols\r\n      opts.colgroups = convertToRows(groups)\r\n      if (!opts.filename) {\r\n        opts.filename = GlobalConfig.i18n(opts.original ? 'vxe.table.expOriginFilename' : 'vxe.table.expFilename', [XEUtils.toDateString(Date.now(), 'yyyyMMddHHmmss')])\r\n      }\r\n      if (!opts.sheetName) {\r\n        opts.sheetName = document.title\r\n      }\r\n\r\n      // 检查类型，如果为自定义导出，则不需要校验类型\r\n      if (!opts.exportMethod && !XEUtils.includes(VXETable.config.exportTypes, type)) {\r\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n          UtilTools.error('vxe.error.notType', [type])\r\n        }\r\n        const params = { status: false }\r\n        return Promise.reject(params)\r\n      }\r\n\r\n      if (!opts.print) {\r\n        if (beforeExportMethod) {\r\n          beforeExportMethod({ options: opts, $table: this, $grid: $xegrid })\r\n        }\r\n      }\r\n\r\n      if (!opts.data) {\r\n        opts.data = afterFullData\r\n        if (mode === 'selected') {\r\n          const selectRecords = this.getCheckboxRecords()\r\n          if (['html', 'pdf'].indexOf(type) > -1 && treeConfig) {\r\n            opts.data = XEUtils.searchTree(this.getTableData().fullData, (item) => selectRecords.indexOf(item) > -1, Object.assign({}, treeOpts, { data: '_row' }))\r\n          } else {\r\n            opts.data = selectRecords\r\n          }\r\n        } else if (mode === 'all') {\r\n          if ($xegrid && !opts.remote) {\r\n            const { beforeQueryAll, afterQueryAll, ajax = {}, props = {} } = $xegrid.proxyOpts\r\n            const ajaxMethods = ajax.queryAll\r\n            if (ajaxMethods) {\r\n              const params = {\r\n                $table: this,\r\n                $grid: $xegrid,\r\n                sort: $xegrid.sortData,\r\n                filters: $xegrid.filterData,\r\n                form: $xegrid.formData,\r\n                target: ajaxMethods,\r\n                options: opts\r\n              }\r\n              return Promise.resolve((beforeQueryAll || ajaxMethods)(params))\r\n                .catch(e => e)\r\n                .then(rest => {\r\n                  opts.data = (props.list ? XEUtils.get(rest, props.list) : rest) || []\r\n                  if (afterQueryAll) {\r\n                    afterQueryAll(params)\r\n                  }\r\n                  return handleExport(this, opts)\r\n                })\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return handleExport(this, opts)\r\n    },\r\n    _importByFile (file, options) {\r\n      const opts = Object.assign({}, options)\r\n      const { beforeImportMethod } = opts\r\n      if (beforeImportMethod) {\r\n        beforeImportMethod({ options: opts, $table: this })\r\n      }\r\n      return handleFileImport(this, file, opts)\r\n    },\r\n    _importData (options) {\r\n      const opts = Object.assign({\r\n        types: VXETable.config.importTypes\r\n        // beforeImportMethod: null,\r\n        // afterImportMethod: null\r\n      }, this.importOpts, options)\r\n      const { beforeImportMethod, afterImportMethod } = opts\r\n      if (beforeImportMethod) {\r\n        beforeImportMethod({ options: opts, $table: this })\r\n      }\r\n      return readLocalFile(opts).catch(e => {\r\n        if (afterImportMethod) {\r\n          afterImportMethod({ status: false, options: opts, $table: this })\r\n        }\r\n        return Promise.reject(e)\r\n      }).then((params) => {\r\n        const { file } = params\r\n        return handleFileImport(this, file, opts)\r\n      })\r\n    },\r\n    _saveFile (options) {\r\n      return saveLocalFile(options)\r\n    },\r\n    _readFile (options) {\r\n      return readLocalFile(options)\r\n    },\r\n    _print (options) {\r\n      const opts = Object.assign({\r\n        original: false\r\n        // beforePrintMethod\r\n      }, this.printOpts, options, {\r\n        type: 'html',\r\n        download: false,\r\n        remote: false,\r\n        print: true\r\n      })\r\n      if (!opts.sheetName) {\r\n        opts.sheetName = document.title\r\n      }\r\n      return new Promise(resolve => {\r\n        if (opts.content) {\r\n          resolve(handlePrint(this, opts, opts.content))\r\n        } else {\r\n          resolve(\r\n            this.exportData(opts).then(({ content }) => {\r\n              return handlePrint(this, opts, content)\r\n            })\r\n          )\r\n        }\r\n      })\r\n    },\r\n    _openImport (options) {\r\n      const defOpts = Object.assign({ mode: 'insert', message: true, types: VXETable.config.importTypes }, options, this.importOpts)\r\n      const { types } = defOpts\r\n      const isTree = !!this.getTreeStatus()\r\n      if (isTree) {\r\n        if (defOpts.message) {\r\n          VXETable.modal.message({ content: GlobalConfig.i18n('vxe.error.treeNotImp'), status: 'error' })\r\n        }\r\n        return\r\n      }\r\n      if (!this.importConfig) {\r\n        UtilTools.error('vxe.error.reqProp', ['import-config'])\r\n      }\r\n      // 处理类型\r\n      const typeList = types.map(value => {\r\n        return {\r\n          value,\r\n          label: `vxe.export.types.${value}`\r\n        }\r\n      })\r\n      const modeList = defOpts.modes.map(value => {\r\n        return {\r\n          value,\r\n          label: `vxe.import.modes.${value}`\r\n        }\r\n      })\r\n      Object.assign(this.importStore, {\r\n        file: null,\r\n        type: '',\r\n        filename: '',\r\n        modeList,\r\n        typeList,\r\n        visible: true\r\n      })\r\n      Object.assign(this.importParams, defOpts)\r\n      this.initStore.import = true\r\n    },\r\n    _openExport (options) {\r\n      const { exportOpts } = this\r\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n        if (!this.exportConfig) {\r\n          UtilTools.error('vxe.error.reqProp', ['export-config'])\r\n        }\r\n      }\r\n      return handleExportAndPrint(this, Object.assign({}, exportOpts, options))\r\n    },\r\n    _openPrint (options) {\r\n      const { printOpts } = this\r\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n        if (!this.printConfig) {\r\n          UtilTools.error('vxe.error.reqProp', ['print-config'])\r\n        }\r\n      }\r\n      return handleExportAndPrint(this, Object.assign({}, printOpts, options), true)\r\n    }\r\n  }\r\n}\r\n"]}]}