{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Button.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Button.vue","mtime":1612227987676},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 使用例子\n* <Button type=\"primary\" icon=\"el-icon-setting\" :height=\"40\" :border=\"false\" :disabled=\"false\" @click=\"onClick\"\">点我呀笨</Button>\n*  \n*  methods: {\n*    onClick(event) {\n*      alert('窝草，还真点了！');\n*    }\n*  }\n*/\nexport default {\n  name: \"Button\",\n  props: {\n    type: {\n      type: String,\n      default: 'plain'\n    },\n    // 风格样式 plain:朴素(用于关闭，取消等) primary:主要(用于确认，提交等) light:浅色(用于紧挨输入框边的按钮) transparent:透明样式 custom:自定义(用于窗口右上角关闭等按钮)\n    customs: {\n      type: Array,\n      default: null\n    },\n    // 自定义设置 [正常状态[背景色，边框色，文字色]，hover状态[背景色，边框色，文字色]，按下状态[背景色，边框色，文字色]]\n    border: {\n      type: Boolean,\n      default: true\n    },\n    // 是否有边框\n    borderColor: {\n      type: String,\n      default: null\n    },\n    // 边框颜色\n    height: {\n      type: Number,\n      default: $_theme.inputHeight\n    },\n    // 高度数值，单位是px\n    padding: String,\n    radius: {\n      type: String,\n      default: '0px'\n    },\n    // 边框圆角\n    disabled: Boolean,\n    // 是否禁用\n    icon: String,\n    // 图标样式\n    iconStyle: {\n      default: null\n    },\n    slotStyle: {\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      hover: false,\n      down: false,\n      disabled_: this.disabled,\n      icon_: this.icon\n    };\n  },\n  watch: {\n    disabled: function disabled(v) {\n      this.disabled_ = v;\n      v && (this.hover = false);\n    },\n    icon: function icon(v) {\n      this.icon_ = v;\n    }\n  },\n  methods: {\n    handleClick: function handleClick(event) {\n      this.$emit('click', event);\n    },\n    setIcon: function setIcon(icon) {\n      this.icon_ = icon;\n    },\n    setDisabled: function setDisabled(v) {\n      this.disabled_ = v;\n    }\n  },\n  computed: {\n    istyle: function istyle() {\n      return this.$slots.default ? {\n        marginRight: '5px',\n        verticalAlign: 'middle'\n      } : null;\n    },\n    buttonStyle: function buttonStyle() {\n      return {\n        height: this.height + 'px',\n        padding: this.padding || '0 ' + Math.max(this.height / 2 - 6, 0) + 'px',\n        borderWidth: this.border ? '1px' : '0',\n        cursor: this.disabled ? 'not-allowed' : 'pointer'\n      };\n    },\n    buttonColor: function buttonColor() {\n      return this[this.type][this.down ? 'down' : this.hover ? 'hover' : 'normal'];\n    },\n    plain: function plain() {\n      return {\n        down: {\n          backgroundColor: this.theme.bg_color,\n          borderColor: this.borderColor || this.theme.color,\n          color: this.theme.color\n        },\n        hover: {\n          backgroundColor: '#fff',\n          borderColor: this.borderColor || this.theme.border_color_dark,\n          color: this.theme.color\n        },\n        normal: {\n          backgroundColor: '#fff',\n          borderColor: this.borderColor || this.theme.border_color_dark,\n          color: this.disabled ? '#707070' : null\n        }\n      };\n    },\n    primary: function primary() {\n      return {\n        down: {\n          color: '#fff',\n          borderColor: this.theme.color,\n          backgroundColor: this.theme.color\n        },\n        hover: {\n          color: '#fff',\n          borderColor: this.theme.rgba(this.theme.color, 0.1),\n          backgroundColor: this.theme.rgba(this.theme.color, 0.8)\n        },\n        normal: {\n          color: '#fff',\n          borderColor: this.theme.color,\n          backgroundColor: this.theme.color\n        }\n      };\n    },\n    light: function light() {\n      return {\n        down: {\n          borderColor: this.borderColor || this.theme.border_color_light,\n          color: this.theme.color,\n          backgroundColor: this.theme.selected_color\n        },\n        hover: {\n          borderColor: this.borderColor || this.theme.border_color_light,\n          color: this.theme.color,\n          backgroundColor: '#fff'\n        },\n        normal: {\n          borderColor: this.borderColor || this.theme.border_color_light,\n          backgroundColor: this.theme.bg_color\n        }\n      };\n    },\n    custom: function custom() {\n      return this.customs ? {\n        down: {\n          backgroundColor: this.customs[2][0],\n          borderColor: this.customs[2][1],\n          color: this.customs[2][2]\n        },\n        hover: {\n          backgroundColor: this.customs[1][0],\n          borderColor: this.customs[1][1],\n          color: this.customs[1][2]\n        },\n        normal: {\n          backgroundColor: this.customs[0][0],\n          borderColor: this.customs[0][1],\n          color: this.customs[0][2]\n        }\n      } : {};\n    }\n  }\n};",null]}