{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Window.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Window.vue","mtime":1612227987644},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 使用例子 MyWindow.vue\n*\n* <Window title=\"我是标题\" :width=\"100\" @closed=\"onWindowClosed\">\n*   <div v-slot:default>\n*     我是内容\n*   </div>\n*   <template v-slot:footer>\n*     <Button style=\"margin:5px;\"> 取消 </Button>\n*     <Button style=\"margin:5px;\" type=\"primary\"> 保存 </Button>\n*   </template>\n* </Window>\n* \n* let w = $_popup.open(MyWindow, {data});//打开MyWindow窗口\n* w.close();//关闭MyWindow窗口\n*/\nimport { labelWidthFit } from '@/components/util/LabelWidth.js';\nvar divX, divY;\nexport default {\n  name: \"Window\",\n  props: {\n    title: String,\n    // 头部标题文字\n    titleHeight: {\n      type: Number,\n      default: 35\n    },\n    // 标题高度\n    titleColor: {\n      type: String,\n      default: null\n    },\n    // 标题颜色\n    width: {\n      type: Number,\n      default: 0\n    },\n    // 窗体宽度数值，单位px\n    fitLabel: {\n      type: Boolean,\n      default: true\n    },\n    // 是否对齐标题宽度\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    // 是否模态\n    waiting: Boolean,\n    // 是否等待中\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示关闭按钮,\n    showHead: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示标题栏,\n    movable: {\n      type: Boolean,\n      default: true\n    },\n    // 是否可移动\n    showFullScreen: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示关闭按钮,\n    beforeClose: Function,\n    afterFullScreen: Function,\n    afterRestoreScreen: Function,\n    contentStyle: {\n      default: null\n    }\n  },\n  _modalDom: null,\n  // 模态层dom对象\n  data: function data() {\n    return {\n      left: 0,\n      // 窗体x坐标(移动窗口用的)\n      top: 0,\n      // 窗体y坐标(移动窗口用的)\n      isFullScreen: false //是否全屏\n\n    };\n  },\n  beforeMount: function beforeMount() {\n    if (this.modal) {\n      this._modalDom = document.createElement(\"div\");\n      this._modalDom.className = this.$style.modal;\n      this._modalDom.style['z-index'] = $_theme.zindex();\n      document.body.appendChild(this._modalDom);\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // 将dom对象加到document文档流中\n    //判断是否超高\n    this.$nextTick(function () {\n      _this.left = parseInt(_this.$el.style.left.replace('px', ''));\n      _this.top = parseInt(_this.$el.style.top.replace('px', ''));\n      var maxHeight;\n\n      if (_this.contentStyle && _this.contentStyle.maxHeight) {\n        _this._oldMaxHeight = maxHeight = parseInt(_this.contentStyle.maxHeight.replace('px', ''));\n      } else {\n        _this._oldMaxHeight = maxHeight = document.documentElement.clientHeight - _this.titleHeight - (_this.$slots.footer ? _this.$refs.footer.clientHeight : 0) - _this.top;\n        _this.$refs.content.style['max-height'] = maxHeight + 'px';\n      }\n\n      if (_this.$refs.content.clientHeight > maxHeight) {\n        _this.width += 16;\n        _this.left -= 8;\n      }\n\n      _this.fitLabel && labelWidthFit(_this.$refs.content);\n    });\n  },\n  methods: {\n    close: function close() {\n      // 关闭窗体\n      if (this.beforeClose && this.beforeClose() === false) return;\n      document.body.removeChild(this.$el);\n\n      if (this._modalDom != null) {\n        document.body.removeChild(this._modalDom);\n        this._modalDom = null;\n      }\n\n      this.$emit('closed');\n      this.$parent.$destroy();\n    },\n    fullScreen: function fullScreen() {\n      this._oldLeft = this.left;\n      this._oldTop = this.top;\n      this.left = 0;\n      this.top = 0;\n      this.isFullScreen = true;\n      var maxHeight = document.documentElement.clientHeight - this.titleHeight - (this.$slots.footer ? this.$refs.footer.clientHeight : 0);\n      this.$refs.content.style['max-height'] = maxHeight + 'px';\n      this.afterFullScreen && this.$nextTick(this.afterFullScreen);\n    },\n    restoreScreen: function restoreScreen() {\n      this.left = this._oldLeft;\n      this.top = this._oldTop;\n      this.isFullScreen = false;\n      this.$refs.content.style['max-height'] = this._oldMaxHeight + 'px';\n      this.afterRestoreScreen && this.$nextTick(this.afterRestoreScreen);\n    },\n    onDragStart: function onDragStart(e) {\n      // 窗体开始拖动前\n      divX = e.clientX - this.$el.offsetLeft;\n      divY = e.clientY - this.$el.offsetTop;\n      document.addEventListener('mousemove', this.onDraging);\n      document.addEventListener('mouseup', this.onDragEnd);\n    },\n    onDraging: function onDraging(e) {\n      // 窗体正在拖动\n      this.left = e.clientX - divX;\n      this.top = e.clientY - divY;\n    },\n    onDragEnd: function onDragEnd() {\n      // 窗体结束拖动\n      document.removeEventListener('mousemove', this.onDraging);\n      document.removeEventListener('mouseup', this.onDragEnd);\n      this.left = Math.max(this.left, 0);\n      this.top = Math.max(this.top, 0);\n\n      if (this.left + 100 > document.documentElement.clientWidth) {\n        this.left = document.documentElement.clientWidth - this.$el.clientWidth;\n      }\n\n      if (this.top + 30 > document.documentElement.clientHeight) {\n        this.top = document.documentElement.clientHeight - this.$el.clientHeight;\n      }\n    }\n  }\n};",null]}