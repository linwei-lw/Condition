{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Tree\\jquery.ztree.excheck.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Tree\\jquery.ztree.excheck.js","mtime":1673402177015},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/*\n * JQuery zTree excheck v3.5.40\n * http://treejs.cn/\n *\n * Copyright (c) 2010 Hunter.z\n *\n * Licensed same as jquery - MIT License\n * http://www.opensource.org/licenses/mit-license.php\n *\n * email: hunter.z@263.net\n * Date: 2019-01-18\n */\n(function ($) {\n  var _consts = {\n    event: {\n      CHECK: \"ztree_check\"\n    },\n    id: {\n      CHECK: \"_check\"\n    },\n    checkbox: {\n      DEFAULT: \"chk\"\n    }\n  },\n      _setting = {\n    check: {\n      enable: false,\n      //是否是多选树\n      P: true,\n      //是否级联勾选父结点\n      PX: false,\n      //是否级联勾选父结点（只半勾选）\n      S: true,\n      //是否级联勾选子结点\n      hasChecked: true,\n      //是否需要勾选上搜索的结点\n      hasOwnField: null //是否只对具有该属性的结点才可勾选\n\n    },\n    callback: {\n      beforeCheck: null,\n      onCheck: null\n    }\n  },\n      _bindEvent = function _bindEvent(setting) {\n    var o = setting.treeObj,\n        c = consts.event;\n    o.bind(c.CHECK, function (event, node, chgs, value, srcEvent) {\n      event.srcEvent = srcEvent;\n      tools.apply(setting.callback.onCheck, [node, chgs, value, event]);\n    });\n  },\n      _unbindEvent = function _unbindEvent(setting) {\n    setting.treeObj.unbind(consts.event.CHECK);\n  },\n      _eventProxy = function _eventProxy(e) {\n    var target = e.target,\n        setting = data.getSetting(e.data.treeId),\n        node = null,\n        nodeEventType = \"\",\n        treeEventType = \"\",\n        nodeEventCallback = null,\n        treeEventCallback = null;\n\n    if (setting.check.enable && tools.eqs(e.type, \"click\")) {\n      if (tools.eqs(target.tagName, \"span\") && target.getAttribute(\"treeNode\" + consts.id.CHECK) !== null) {\n        var tId = tools.getNodeMainDom(target).id;\n        nodeEventType = \"checkNode\";\n        node = data.getNodeCache(setting, tId);\n        nodeEventCallback = _handler.onCheckNode;\n      }\n    }\n\n    var proxyResult = {\n      stop: false,\n      //nodeEventType === \"checkNode\",\n      node: node,\n      nodeEventType: nodeEventType,\n      nodeEventCallback: nodeEventCallback,\n      treeEventType: treeEventType,\n      treeEventCallback: treeEventCallback\n    };\n    return proxyResult;\n  },\n      // add dom for check\n  _beforeA = function _beforeA(setting, node, html) {\n    if (setting.check.enable) {\n      html.push(\"<span ID='\", node[setting.treeId].tId, consts.id.CHECK, \"' class='\", view.makeChkClass(setting, node), \"' treeNode\", consts.id.CHECK, \"></span>\");\n    }\n  },\n      // update zTreeObj, add method of check\n  _zTreeTools = function _zTreeTools(setting, zTreeTools) {\n    zTreeTools.checkNode = function (node, value, checkTypeFlag, callbackFlag) {\n      callbackFlag = !!callbackFlag;\n      value = !!value ? 1 : 0;\n      if (!node[this.setting.treeId]) return;\n\n      if ((node[this.setting.treeId].value || 0) === value) {\n        return;\n      } else if (callbackFlag && tools.apply(this.setting.callback.beforeCheck, [node], true) == false) {\n        return;\n      }\n\n      if (this.setting.check.enable) {\n        node[this.setting.treeId].value = value;\n        view.setChkClass(this.setting, node);\n        var hasOwnField = this.setting.check.hasOwnField;\n        var chgs = !hasOwnField || node.hasOwnProperty(hasOwnField) ? [node] : [];\n        if (checkTypeFlag) view.checkNodeRelation(this.setting, node, value, chgs);\n\n        if (callbackFlag) {\n          this.setting.treeObj.trigger(consts.event.CHECK, [node, chgs, value]);\n        }\n      }\n    };\n\n    zTreeTools.checkAllNodes = function (value) {\n      view.repairAllChk(this.setting, !!value ? 1 : 0);\n    };\n    /*\n    * @param onlyChecked 只取全勾选，半勾选不要\n    * @param onlyTop     只取顶级勾选结点，子孙勾选不要\n    * @param field       取指定字段，为空表示取整个勾选结点\n    * @param hasOwnField 指定拥有该属性的结点，为空表示所有结点\n    * @param children    从这些结点中查找\n    * @param ignoreFun   忽略回调，返回true则忽略该结点（子结点不忽略，继续递归)\n    */\n\n\n    zTreeTools.getCheckedNodes = function () {\n      let onlyChecked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      let onlyTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      let hasOwnField = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      let children = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      let ignoreFun = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n      let result = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n      result = result || [];\n      children = children || data.getRoot(this.setting)[this.setting.data.key.children];\n      if (!children || children.length == 0) return result;\n\n      for (var i = 0, len = children.length, node, added, ignore, nodes, Z; i < len; i++) {\n        added = ignore = false;\n        node = children[i];\n        ignoreFun && (ignore = ignoreFun(node));\n        Z = node[this.setting.treeId];\n\n        if (Z && this.setting.view.hideFunction) {\n          if (Z.hide === true || Z.hide == undefined && this.setting.view.hideFunction(node) === true) {\n            continue;\n          }\n        }\n\n        if (Z && !ignore && (!hasOwnField || node.hasOwnProperty(hasOwnField))) {\n          if (Z.value === 1 || !onlyChecked && Z.value === 2) {\n            result.push(field ? node[field] : node);\n            added = true;\n          }\n        }\n\n        if (Z && !ignore && Z.value === 1 && onlyTop) continue; //如果结点选中，但又是只取选中顶点，直接跳过子结点\n\n        if (added == false || onlyTop == false) {\n          nodes = node[this.setting.data.key.children];\n\n          if (nodes && nodes.length > 0) {\n            zTreeTools.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes, ignoreFun, result);\n          }\n        }\n      }\n\n      return result;\n    };\n\n    var _updateNode = zTreeTools.updateNode;\n\n    zTreeTools.updateNode = function (node, checkTypeFlag) {\n      if (_updateNode) _updateNode.apply(zTreeTools, arguments);\n      if (!node || !this.setting.check.enable) return;\n      var nObj = $$(node, this.setting);\n\n      if (nObj.get(0)) {\n        view.setChkClass(this.setting, node);\n        if (checkTypeFlag == true) view.checkNodeRelation(this.setting, node, node[this.setting.treeId].value);\n      }\n    };\n  },\n      _data = {},\n      _event = {},\n      _handler = {\n    onCheckNode: function onCheckNode(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n      if (tools.apply(setting.callback.beforeCheck, [node], true) == false) return true;\n      var value = node[setting.treeId].value;\n      value = value == 1 || value == 2 ? 0 : 1;\n      node[setting.treeId].value = value;\n      view.setChkClass(setting, node);\n      var hasOwnField = setting.check.hasOwnField;\n      var chgs = !hasOwnField || node.hasOwnProperty(hasOwnField) ? [node] : [];\n      view.checkNodeRelation(setting, node, value, chgs);\n      setting.treeObj.trigger(consts.event.CHECK, [node, chgs, value, event]);\n      return true;\n    }\n  },\n      _tools = {},\n      _view = {\n    checkNodeRelation: function checkNodeRelation(setting, node, value, chgs) {\n      if (setting.check.S && node[setting.data.key.children]) {\n        view.setSonNodeCheckBox(setting, node, node[setting.data.key.children], value, chgs);\n      }\n\n      if (setting.check.P) {\n        view.setParentNodeCheckBox(setting, node, value, chgs);\n      } else if (setting.check.PX) {\n        view.setParentNodeCheckBox2(setting, node, value);\n      }\n    },\n    setParentNodeCheckBox: function setParentNodeCheckBox(setting, node, value, chgs) {\n      var parent = node[setting.data.key.parent];\n      if (!parent) return;\n      var Z = node[setting.treeId],\n          allChecked = value === 1,\n          allUnchecked = value === 0;\n\n      if (value !== 2) {\n        var children = parent[setting.data.key.children];\n\n        for (var i = 0, l = children.length; i < l; i++) {\n          Z = children[i][setting.treeId];\n\n          if (Z && Z.value !== 1) {\n            allChecked = false;\n            if (!allUnchecked) break;\n          }\n\n          if (Z && (Z.value || 0) !== 0) {\n            allUnchecked = false;\n            if (!allChecked) break;\n          }\n        }\n      }\n\n      Z = parent[setting.treeId];\n      if (!Z) return;\n      var chg = false;\n\n      if (allChecked) {\n        chg = Z.value !== 1;\n        Z.value = 1;\n        if (chg && chgs && (!setting.check.hasOwnField || parent.hasOwnProperty(setting.check.hasOwnField))) chgs.push(parent);\n      } else if (allUnchecked) {\n        chg = (Z.value || 0) !== 0;\n        Z.value = 0;\n        if (chg && chgs && (!setting.check.hasOwnField || parent.hasOwnProperty(setting.check.hasOwnField))) chgs.push(parent);\n      } else if (Z.value !== 2) {\n        if (Z.value === 1 && chgs && (!setting.check.hasOwnField || parent.hasOwnProperty(setting.check.hasOwnField))) chgs.push(parent);\n        chg = true;\n        Z.value = 2;\n      }\n\n      if (chg) {\n        view.setChkClass(setting, parent);\n        view.setParentNodeCheckBox(setting, parent, Z.value, chgs);\n      }\n    },\n    setParentNodeCheckBox2: function setParentNodeCheckBox2(setting, node, value) {\n      var parent = node[setting.data.key.parent];\n      if (!parent) return;\n      var Z = node[setting.treeId],\n          allChecked = value === 1,\n          allUnchecked = value === 0;\n\n      if (value !== 2) {\n        var children = parent[setting.data.key.children];\n\n        for (var i = 0, l = children.length; i < l; i++) {\n          Z = children[i][setting.treeId];\n\n          if (Z.value !== 1) {\n            allChecked = false;\n            if (!allUnchecked) break;\n          }\n\n          if ((Z.value || 0) !== 0) {\n            allUnchecked = false;\n            if (!allChecked) break;\n          }\n        }\n      }\n\n      Z = parent[setting.treeId];\n      if (!Z) return;\n      var chg = true;\n\n      if (allUnchecked) {\n        chg = (Z.value || 0) !== 0;\n        Z.value = 0;\n      } else if (Z.value !== 2) {\n        chg = true;\n        Z.value = 2;\n      }\n\n      if (chg) {\n        view.setChkClass(setting, parent);\n        view.setParentNodeCheckBox2(setting, parent, Z.value);\n      }\n    },\n    setSonNodeCheckBox: function setSonNodeCheckBox(setting, parent, children, value, chgs) {\n      var hasOwnField = setting.check.hasOwnField,\n          p;\n\n      for (var i = 0, l = children.length, node, Z; i < l; i++) {\n        node = children[i];\n        Z = node[setting.treeId];\n\n        if (setting.view.hideFunction && value == 1) {\n          // value == 1, 是解决结点未隐藏时被勾上了，然后被隐藏了，上级去勾时要带上这个结点。\n          if (Z.hide === true || Z.hide == undefined && setting.view.hideFunction(node) === true) {\n            continue;\n          }\n        }\n\n        if ((Z.value || 0) !== value) {\n          if (chgs && (!hasOwnField || node.hasOwnProperty(hasOwnField))) {\n            chgs.push(node);\n          }\n\n          Z.value = value;\n          view.setChkClass(setting, node);\n          node[setting.data.key.children] && view.setSonNodeCheckBox(setting, node, node[setting.data.key.children], value, chgs);\n        }\n\n        p = node[setting.data.key.parent];\n        if (p && p != parent) view.setParentNodeCheckBox(setting, node, value, chgs);\n      }\n    },\n    repairAllChk: function repairAllChk(setting, value) {\n      if (setting.check.enable) {\n        var root = data.getRoot(setting),\n            children = root[setting.data.key.children],\n            node;\n\n        for (var i = 0, l = children.length; i < l; i++) {\n          node = children[i];\n          node[setting.treeId].value = value;\n          view.setChkClass(setting, node);\n          node[setting.data.key.children] && view.setSonNodeCheckBox(setting, node, node[setting.data.key.children], value);\n        }\n      }\n    },\n    setChkClass: function setChkClass(setting, node) {\n      var obj = $$(node, consts.id.CHECK, setting);\n      obj && obj.attr('class', view.makeChkClass(setting, node));\n    },\n    makeChkClass: function makeChkClass(setting, node) {\n      return consts.className.BUTTON + \" \" + consts.checkbox.DEFAULT + \" checkbox_\" + (node[setting.treeId].value || 0);\n    }\n  },\n      _z = {\n    tools: _tools,\n    view: _view,\n    event: _event,\n    data: _data\n  };\n\n  $.extend(true, $.fn.zTree.consts, _consts);\n  $.extend(true, $.fn.zTree._z, _z);\n  var zt = $.fn.zTree,\n      tools = zt._z.tools,\n      consts = zt.consts,\n      view = zt._z.view,\n      data = zt._z.data,\n      event = zt._z.event,\n      $$ = tools.$;\n  data.exSetting(_setting);\n  data.addInitBind(_bindEvent);\n  data.addInitUnBind(_unbindEvent);\n  data.addInitProxy(_eventProxy, true);\n  data.addInnerAfterIcon(_beforeA);\n  data.addZTreeTools(_zTreeTools);\n})(jQuery);",null]}