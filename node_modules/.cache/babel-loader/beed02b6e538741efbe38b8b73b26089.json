{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\footer\\src\\footer.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\footer\\src\\footer.js","mtime":1635230121168},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.string.fixed\";\nimport XEUtils from 'xe-utils';\nimport { UtilTools, DomTools } from '../../tools';\nconst cellType = 'footer';\n\nfunction mergeFooterMethod(mergeFooterList, _rowIndex, _columnIndex) {\n  for (let mIndex = 0; mIndex < mergeFooterList.length; mIndex++) {\n    const _mergeFooterList$mInd = mergeFooterList[mIndex],\n          mergeRowIndex = _mergeFooterList$mInd.row,\n          mergeColIndex = _mergeFooterList$mInd.col,\n          mergeRowspan = _mergeFooterList$mInd.rowspan,\n          mergeColspan = _mergeFooterList$mInd.colspan;\n\n    if (mergeColIndex > -1 && mergeRowIndex > -1 && mergeRowspan && mergeColspan) {\n      if (mergeRowIndex === _rowIndex && mergeColIndex === _columnIndex) {\n        return {\n          rowspan: mergeRowspan,\n          colspan: mergeColspan\n        };\n      }\n\n      if (_rowIndex >= mergeRowIndex && _rowIndex < mergeRowIndex + mergeRowspan && _columnIndex >= mergeColIndex && _columnIndex < mergeColIndex + mergeColspan) {\n        return {\n          rowspan: 0,\n          colspan: 0\n        };\n      }\n    }\n  }\n}\n\nexport default {\n  name: 'VxeTableFooter',\n  props: {\n    footerTableData: Array,\n    tableColumn: Array,\n    fixedColumn: Array,\n    fixedType: String,\n    size: String\n  },\n\n  mounted() {\n    const $xetable = this.$parent,\n          $el = this.$el,\n          $refs = this.$refs,\n          fixedType = this.fixedType;\n    const elemStore = $xetable.elemStore;\n    const prefix = `${fixedType || 'main'}-footer-`;\n    elemStore[`${prefix}wrapper`] = $el;\n    elemStore[`${prefix}table`] = $refs.table;\n    elemStore[`${prefix}colgroup`] = $refs.colgroup;\n    elemStore[`${prefix}list`] = $refs.tfoot;\n    elemStore[`${prefix}xSpace`] = $refs.xSpace;\n  },\n\n  render(h) {\n    let _e = this._e,\n        $xetable = this.$parent,\n        fixedType = this.fixedType,\n        fixedColumn = this.fixedColumn,\n        tableColumn = this.tableColumn,\n        footerTableData = this.footerTableData;\n    const tableListeners = $xetable.$listeners,\n          tId = $xetable.tId,\n          footerRowClassName = $xetable.footerRowClassName,\n          footerCellClassName = $xetable.footerCellClassName,\n          footerRowStyle = $xetable.footerRowStyle,\n          footerCellStyle = $xetable.footerCellStyle,\n          allFooterAlign = $xetable.footerAlign,\n          mergeFooterList = $xetable.mergeFooterList,\n          footerSpanMethod = $xetable.footerSpanMethod,\n          allAlign = $xetable.align,\n          scrollXLoad = $xetable.scrollXLoad,\n          columnKey = $xetable.columnKey,\n          allColumnFooterOverflow = $xetable.showFooterOverflow,\n          currentColumn = $xetable.currentColumn,\n          overflowX = $xetable.overflowX,\n          scrollbarWidth = $xetable.scrollbarWidth,\n          tooltipOpts = $xetable.tooltipOpts; // 如果是使用优化模式\n\n    if (fixedType) {\n      if ((!mergeFooterList.length || !footerSpanMethod) && (scrollXLoad || allColumnFooterOverflow)) {\n        tableColumn = fixedColumn;\n      }\n    }\n\n    return h('div', {\n      class: ['vxe-table--footer-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],\n      attrs: {\n        xid: tId\n      },\n      on: {\n        scroll: this.scrollEvent\n      }\n    }, [fixedType ? _e() : h('div', {\n      class: 'vxe-body--x-space',\n      ref: 'xSpace'\n    }), h('table', {\n      class: 'vxe-table--footer',\n      attrs: {\n        xid: tId,\n        cellspacing: 0,\n        cellpadding: 0,\n        border: 0\n      },\n      ref: 'table'\n    }, [\n    /**\r\n     * 列宽\r\n     */\n    h('colgroup', {\n      ref: 'colgroup'\n    }, tableColumn.map((column, $columnIndex) => {\n      return h('col', {\n        attrs: {\n          name: column.id\n        },\n        key: $columnIndex\n      });\n    }).concat(scrollbarWidth ? [h('col', {\n      attrs: {\n        name: 'col_gutter'\n      }\n    })] : [])),\n    /**\r\n     * 底部\r\n     */\n    h('tfoot', {\n      ref: 'tfoot'\n    }, footerTableData.map((list, _rowIndex) => {\n      const $rowIndex = _rowIndex;\n      return h('tr', {\n        class: ['vxe-footer--row', footerRowClassName ? XEUtils.isFunction(footerRowClassName) ? footerRowClassName({\n          $table: $xetable,\n          _rowIndex,\n          $rowIndex,\n          fixed: fixedType,\n          type: cellType\n        }) : footerRowClassName : ''],\n        style: footerRowStyle ? XEUtils.isFunction(footerRowStyle) ? footerRowStyle({\n          $table: $xetable,\n          _rowIndex,\n          $rowIndex,\n          fixed: fixedType,\n          type: cellType\n        }) : footerRowStyle : null\n      }, tableColumn.map((column, $columnIndex) => {\n        const type = column.type,\n              showFooterOverflow = column.showFooterOverflow,\n              footerAlign = column.footerAlign,\n              align = column.align,\n              footerClassName = column.footerClassName;\n        const showAllTip = tooltipOpts.showAll || tooltipOpts.enabled;\n        const isColGroup = column.children && column.children.length;\n        const fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX;\n        const footOverflow = XEUtils.isUndefined(showFooterOverflow) || XEUtils.isNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow;\n        const footAlign = footerAlign || align || allFooterAlign || allAlign;\n        let showEllipsis = footOverflow === 'ellipsis';\n        const showTitle = footOverflow === 'title';\n        const showTooltip = footOverflow === true || footOverflow === 'tooltip';\n        let hasEllipsis = showTitle || showTooltip || showEllipsis;\n        const attrs = {\n          colid: column.id\n        };\n        const tfOns = {};\n        const columnIndex = $xetable.getColumnIndex(column);\n\n        const _columnIndex = $xetable.getVTColumnIndex(column);\n\n        const itemIndex = _columnIndex;\n        const params = {\n          $table: $xetable,\n          _rowIndex,\n          $rowIndex,\n          column,\n          columnIndex,\n          $columnIndex,\n          _columnIndex,\n          itemIndex,\n          items: list,\n          fixed: fixedType,\n          type: cellType,\n          data: footerTableData // 虚拟滚动不支持动态高度\n\n        };\n\n        if (scrollXLoad && !hasEllipsis) {\n          showEllipsis = hasEllipsis = true;\n        }\n\n        if (showTitle || showTooltip || showAllTip) {\n          tfOns.mouseenter = evnt => {\n            if (showTitle) {\n              DomTools.updateCellTitle(evnt.currentTarget, column);\n            } else if (showTooltip || showAllTip) {\n              $xetable.triggerFooterTooltipEvent(evnt, params);\n            }\n          };\n        }\n\n        if (showTooltip || showAllTip) {\n          tfOns.mouseleave = evnt => {\n            if (showTooltip || showAllTip) {\n              $xetable.handleTargetLeaveEvent(evnt);\n            }\n          };\n        }\n\n        if (tableListeners['footer-cell-click']) {\n          tfOns.click = evnt => {\n            $xetable.emitEvent('footer-cell-click', Object.assign({\n              cell: evnt.currentTarget\n            }, params), evnt);\n          };\n        }\n\n        if (tableListeners['footer-cell-dblclick']) {\n          tfOns.dblclick = evnt => {\n            $xetable.emitEvent('footer-cell-dblclick', Object.assign({\n              cell: evnt.currentTarget\n            }, params), evnt);\n          };\n        } // 合并行或列\n\n\n        if (mergeFooterList.length) {\n          const spanRest = mergeFooterMethod(mergeFooterList, _rowIndex, _columnIndex);\n\n          if (spanRest) {\n            const rowspan = spanRest.rowspan,\n                  colspan = spanRest.colspan;\n\n            if (!rowspan || !colspan) {\n              return null;\n            }\n\n            if (rowspan > 1) {\n              attrs.rowspan = rowspan;\n            }\n\n            if (colspan > 1) {\n              attrs.colspan = colspan;\n            }\n          }\n        } else if (footerSpanMethod) {\n          // 自定义合并方法\n          const _ref = footerSpanMethod(params) || {},\n                _ref$rowspan = _ref.rowspan,\n                rowspan = _ref$rowspan === void 0 ? 1 : _ref$rowspan,\n                _ref$colspan = _ref.colspan,\n                colspan = _ref$colspan === void 0 ? 1 : _ref$colspan;\n\n          if (!rowspan || !colspan) {\n            return null;\n          }\n\n          if (rowspan > 1) {\n            attrs.rowspan = rowspan;\n          }\n\n          if (colspan > 1) {\n            attrs.colspan = colspan;\n          }\n        }\n\n        return h('td', {\n          class: ['vxe-footer--column', column.id, {\n            [`col--${footAlign}`]: footAlign,\n            [`col--${type}`]: type,\n            'col--last': $columnIndex === tableColumn.length - 1,\n            'fixed--hidden': fixedHiddenColumn,\n            'col--ellipsis': hasEllipsis,\n            'col--current': currentColumn === column\n          }, UtilTools.getClass(footerClassName, params), UtilTools.getClass(footerCellClassName, params)],\n          attrs,\n          style: footerCellStyle ? XEUtils.isFunction(footerCellStyle) ? footerCellStyle(params) : footerCellStyle : null,\n          on: tfOns,\n          key: columnKey ? column.id : $columnIndex\n        }, [h('div', {\n          class: ['vxe-cell', {\n            'c--title': showTitle,\n            'c--tooltip': showTooltip,\n            'c--ellipsis': showEllipsis\n          }]\n        }, column.renderFooter(h, params))]);\n      }).concat(scrollbarWidth ? [h('td', {\n        class: 'vxe-footer--gutter col--gutter'\n      })] : []));\n    }))])]);\n  },\n\n  methods: {\n    /**\r\n     * 滚动处理\r\n     * 如果存在列固定左侧，同步更新滚动状态\r\n     * 如果存在列固定右侧，同步更新滚动状态\r\n     */\n    scrollEvent(evnt) {\n      const $xetable = this.$parent,\n            fixedType = this.fixedType;\n      const $refs = $xetable.$refs,\n            scrollXLoad = $xetable.scrollXLoad,\n            triggerScrollXEvent = $xetable.triggerScrollXEvent,\n            lastScrollLeft = $xetable.lastScrollLeft;\n      const tableHeader = $refs.tableHeader,\n            tableBody = $refs.tableBody,\n            tableFooter = $refs.tableFooter,\n            validTip = $refs.validTip;\n      const headerElem = tableHeader ? tableHeader.$el : null;\n      const footerElem = tableFooter ? tableFooter.$el : null;\n      const bodyElem = tableBody.$el;\n      const scrollLeft = footerElem ? footerElem.scrollLeft : 0;\n      const isX = scrollLeft !== lastScrollLeft;\n      $xetable.lastScrollLeft = scrollLeft;\n      $xetable.lastScrollTime = Date.now();\n\n      if (headerElem) {\n        headerElem.scrollLeft = scrollLeft;\n      }\n\n      if (bodyElem) {\n        bodyElem.scrollLeft = scrollLeft;\n      }\n\n      if (scrollXLoad && isX) {\n        triggerScrollXEvent(evnt);\n      }\n\n      if (isX && validTip && validTip.visible) {\n        validTip.updatePlacement();\n      }\n\n      $xetable.emitEvent('scroll', {\n        type: cellType,\n        fixed: fixedType,\n        scrollTop: bodyElem.scrollTop,\n        scrollLeft,\n        isX,\n        isY: false\n      }, evnt);\n    }\n\n  }\n};",null]}