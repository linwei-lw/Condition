{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\filter\\src\\mixin.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\filter\\src\\mixin.js","mtime":1635230121593},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport XEUtils from 'xe-utils';\nimport { UtilTools, DomTools } from \"../../tools\";\nimport { handleFieldOrColumn } from \"../../table/src/util\";\nimport VXETable from \"../../v-x-e-table\";\nexport default {\n  methods: {\n    /**\r\n     * 修改筛选条件列表\r\n     * @param {ColumnInfo} fieldOrColumn 列\r\n     * @param {Array} options 选项\r\n     */\n    _setFilter: function _setFilter(fieldOrColumn, options) {\n      var column = handleFieldOrColumn(this, fieldOrColumn);\n\n      if (column && column.filters && options) {\n        column.filters = UtilTools.getFilters(options);\n      }\n\n      return this.$nextTick();\n    },\n    checkFilterOptions: function checkFilterOptions() {\n      var filterStore = this.filterStore;\n      filterStore.isAllSelected = filterStore.options.every(function (item) {\n        return item._checked;\n      });\n      filterStore.isIndeterminate = !filterStore.isAllSelected && filterStore.options.some(function (item) {\n        return item._checked;\n      });\n    },\n\n    /**\r\n     * 点击筛选事件\r\n     * 当筛选图标被点击时触发\r\n     * 更新选项是否全部状态\r\n     * 打开筛选面板\r\n     * @param {Event} evnt 事件\r\n     * @param {ColumnInfo} column 列配置\r\n     * @param {Object} params 参数\r\n     */\n    triggerFilterEvent: function triggerFilterEvent(evnt, column, params) {\n      var _this = this;\n\n      var filterStore = this.filterStore;\n\n      if (filterStore.column === column && filterStore.visible) {\n        filterStore.visible = false;\n      } else {\n        var targetElem = evnt.target,\n            pageX = evnt.pageX;\n        var filters = column.filters,\n            filterMultiple = column.filterMultiple,\n            filterRender = column.filterRender;\n        var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n        var filterRecoverMethod = column.filterRecoverMethod || (compConf ? compConf.filterRecoverMethod : null);\n\n        var _DomTools$getDomNode = DomTools.getDomNode(),\n            visibleWidth = _DomTools$getDomNode.visibleWidth;\n\n        Object.assign(filterStore, {\n          args: params,\n          multiple: filterMultiple,\n          options: filters,\n          column: column,\n          style: null,\n          visible: true\n        }); // 复原状态\n\n        filterStore.options.forEach(function (option) {\n          var _checked = option._checked,\n              checked = option.checked;\n          option._checked = checked;\n\n          if (!checked && _checked !== checked) {\n            if (filterRecoverMethod) {\n              filterRecoverMethod({\n                option: option,\n                column: column,\n                $table: _this\n              });\n            }\n          }\n        });\n        this.checkFilterOptions();\n        this.initStore.filter = true;\n        this.$nextTick(function () {\n          var $refs = _this.$refs;\n          var bodyElem = $refs.tableBody.$el;\n          var filterWrapperElem = $refs.filterWrapper.$el;\n          var filterWidth = 0;\n          var filterHeight = 0;\n          var filterHeadElem = null;\n          var filterFootElem = null;\n\n          if (filterWrapperElem) {\n            filterWidth = filterWrapperElem.offsetWidth;\n            filterHeight = filterWrapperElem.offsetHeight;\n            filterHeadElem = filterWrapperElem.querySelector('.vxe-table--filter-header');\n            filterFootElem = filterWrapperElem.querySelector('.vxe-table--filter-footer');\n          }\n\n          var centerWidth = filterWidth / 2;\n          var minMargin = 10;\n          var maxLeft = bodyElem.clientWidth - filterWidth - minMargin;\n          var left, right;\n          var style = {\n            top: \"\".concat(targetElem.offsetTop + targetElem.offsetParent.offsetTop + targetElem.offsetHeight + 8, \"px\") // 判断面板不能大于表格高度\n\n          };\n          var maxHeight = null;\n\n          if (filterHeight >= bodyElem.clientHeight) {\n            maxHeight = bodyElem.clientHeight - (filterFootElem ? filterFootElem.offsetHeight : 0) - (filterHeadElem ? filterHeadElem.offsetHeight : 0);\n          }\n\n          if (column.fixed === 'left') {\n            left = targetElem.offsetLeft + targetElem.offsetParent.offsetLeft - centerWidth;\n          } else if (column.fixed === 'right') {\n            right = targetElem.offsetParent.offsetWidth - targetElem.offsetLeft + (targetElem.offsetParent.offsetParent.offsetWidth - targetElem.offsetParent.offsetLeft) - column.renderWidth - centerWidth;\n          } else {\n            left = targetElem.offsetLeft + targetElem.offsetParent.offsetLeft - centerWidth - bodyElem.scrollLeft;\n          }\n\n          if (left) {\n            var overflowWidth = pageX + filterWidth - centerWidth + minMargin - visibleWidth;\n\n            if (overflowWidth > 0) {\n              left -= overflowWidth;\n            }\n\n            style.left = \"\".concat(Math.min(maxLeft, Math.max(minMargin, left)), \"px\");\n          } else if (right) {\n            var _overflowWidth = pageX + filterWidth - centerWidth + minMargin - visibleWidth;\n\n            if (_overflowWidth > 0) {\n              right += _overflowWidth;\n            }\n\n            style.right = \"\".concat(Math.max(minMargin, right), \"px\");\n          }\n\n          filterStore.style = style;\n          filterStore.maxHeight = maxHeight;\n        });\n      }\n    },\n    _getCheckedFilters: function _getCheckedFilters() {\n      var tableFullColumn = this.tableFullColumn;\n      var filterList = [];\n      tableFullColumn.filter(function (column) {\n        var property = column.property,\n            filters = column.filters;\n        var valueList = [];\n        var dataList = [];\n\n        if (filters && filters.length) {\n          filters.forEach(function (item) {\n            if (item.checked) {\n              valueList.push(item.value);\n              dataList.push(item.data);\n            }\n          });\n\n          if (valueList.length) {\n            filterList.push({\n              column: column,\n              property: property,\n              values: valueList,\n              datas: dataList\n            });\n          }\n        }\n      });\n      return filterList;\n    },\n\n    /**\r\n     * 确认筛选\r\n     * 当筛选面板中的确定按钮被按下时触发\r\n     * @param {Event} evnt 事件\r\n     */\n    confirmFilterEvent: function confirmFilterEvent(evnt) {\n      var _this2 = this;\n\n      var filterStore = this.filterStore,\n          filterOpts = this.filterOpts,\n          scrollXLoad = this.scrollXLoad,\n          scrollYLoad = this.scrollYLoad;\n      var column = filterStore.column;\n      var property = column.property;\n      var values = [];\n      var datas = [];\n      column.filters.forEach(function (item) {\n        if (item.checked) {\n          values.push(item.value);\n          datas.push(item.data);\n        }\n      });\n      filterStore.visible = false;\n      var filterList = this.getCheckedFilters(); // 如果是服务端筛选，则跳过本地筛选处理\n\n      if (!filterOpts.remote) {\n        this.handleTableData(true);\n        this.checkSelectionStatus();\n      }\n\n      this.emitEvent('filter-change', {\n        column: column,\n        property: property,\n        values: values,\n        datas: datas,\n        filters: filterList,\n        filterList: filterList\n      }, evnt);\n      this.updateFooter();\n\n      if (scrollXLoad || scrollYLoad) {\n        this.clearScroll();\n\n        if (scrollYLoad) {\n          this.updateScrollYSpace();\n        }\n      }\n\n      this.closeFilter();\n      this.$nextTick(function () {\n        _this2.recalculate();\n\n        _this2.updateCellAreas();\n      });\n    },\n    handleClearFilter: function handleClearFilter(column) {\n      if (column) {\n        var filters = column.filters,\n            filterRender = column.filterRender;\n\n        if (filters) {\n          var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n          var filterResetMethod = column.filterResetMethod || (compConf ? compConf.filterResetMethod : null);\n          filters.forEach(function (item) {\n            item._checked = false;\n            item.checked = false;\n\n            if (!filterResetMethod) {\n              item.data = XEUtils.clone(item.resetValue, true);\n            }\n          });\n\n          if (filterResetMethod) {\n            filterResetMethod({\n              options: filters,\n              column: column,\n              $table: this\n            });\n          }\n        }\n      }\n    },\n\n    /**\r\n     * 重置筛选\r\n     * 当筛选面板中的重置按钮被按下时触发\r\n     * @param {Event} evnt 事件\r\n     */\n    resetFilterEvent: function resetFilterEvent(evnt) {\n      this.handleClearFilter(this.filterStore.column);\n      this.confirmFilterEvent(evnt);\n    },\n\n    /**\r\n     * 清空指定列的筛选条件\r\n     * 如果为空则清空所有列的筛选条件\r\n     * @param {String} fieldOrColumn 列\r\n     */\n    _clearFilter: function _clearFilter(fieldOrColumn) {\n      var filterStore = this.filterStore;\n      var column;\n\n      if (fieldOrColumn) {\n        column = handleFieldOrColumn(this, fieldOrColumn);\n\n        if (column) {\n          this.handleClearFilter(column);\n        }\n      } else {\n        this.visibleColumn.forEach(this.handleClearFilter);\n      }\n\n      if (!fieldOrColumn || column !== filterStore.column) {\n        Object.assign(filterStore, {\n          isAllSelected: false,\n          isIndeterminate: false,\n          style: null,\n          options: [],\n          column: null,\n          multiple: false,\n          visible: false\n        });\n      }\n\n      return this.updateData();\n    }\n  }\n};",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\filter\\src\\mixin.js"],"names":["methods","_setFilter","column","handleFieldOrColumn","UtilTools","checkFilterOptions","filterStore","item","triggerFilterEvent","targetElem","pageX","evnt","filters","filterMultiple","filterRender","compConf","VXETable","filterRecoverMethod","visibleWidth","DomTools","Object","args","multiple","options","style","visible","_checked","checked","option","$table","$refs","bodyElem","filterWrapperElem","filterWidth","filterHeight","filterHeadElem","filterFootElem","centerWidth","minMargin","maxLeft","top","maxHeight","left","right","overflowWidth","Math","_getCheckedFilters","tableFullColumn","filterList","property","valueList","dataList","values","datas","confirmFilterEvent","filterOpts","scrollXLoad","scrollYLoad","handleClearFilter","filterResetMethod","XEUtils","resetFilterEvent","_clearFilter","isAllSelected","isIndeterminate"],"mappings":"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","sourcesContent":["import XEUtils from 'xe-utils'\r\nimport { UtilTools, DomTools } from '../../tools'\r\nimport { handleFieldOrColumn } from '../../table/src/util'\r\nimport VXETable from '../../v-x-e-table'\r\n\r\nexport default {\r\n  methods: {\r\n    /**\r\n     * 修改筛选条件列表\r\n     * @param {ColumnInfo} fieldOrColumn 列\r\n     * @param {Array} options 选项\r\n     */\r\n    _setFilter (fieldOrColumn, options) {\r\n      const column = handleFieldOrColumn(this, fieldOrColumn)\r\n      if (column && column.filters && options) {\r\n        column.filters = UtilTools.getFilters(options)\r\n      }\r\n      return this.$nextTick()\r\n    },\r\n    checkFilterOptions () {\r\n      const { filterStore } = this\r\n      filterStore.isAllSelected = filterStore.options.every(item => item._checked)\r\n      filterStore.isIndeterminate = !filterStore.isAllSelected && filterStore.options.some(item => item._checked)\r\n    },\r\n    /**\r\n     * 点击筛选事件\r\n     * 当筛选图标被点击时触发\r\n     * 更新选项是否全部状态\r\n     * 打开筛选面板\r\n     * @param {Event} evnt 事件\r\n     * @param {ColumnInfo} column 列配置\r\n     * @param {Object} params 参数\r\n     */\r\n    triggerFilterEvent (evnt, column, params) {\r\n      const { filterStore } = this\r\n      if (filterStore.column === column && filterStore.visible) {\r\n        filterStore.visible = false\r\n      } else {\r\n        const { target: targetElem, pageX } = evnt\r\n        const { filters, filterMultiple, filterRender } = column\r\n        const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null\r\n        const filterRecoverMethod = column.filterRecoverMethod || (compConf ? compConf.filterRecoverMethod : null)\r\n        const { visibleWidth } = DomTools.getDomNode()\r\n        Object.assign(filterStore, {\r\n          args: params,\r\n          multiple: filterMultiple,\r\n          options: filters,\r\n          column,\r\n          style: null,\r\n          visible: true\r\n        })\r\n        // 复原状态\r\n        filterStore.options.forEach(option => {\r\n          const { _checked, checked } = option\r\n          option._checked = checked\r\n          if (!checked && _checked !== checked) {\r\n            if (filterRecoverMethod) {\r\n              filterRecoverMethod({ option, column, $table: this })\r\n            }\r\n          }\r\n        })\r\n        this.checkFilterOptions()\r\n        this.initStore.filter = true\r\n        this.$nextTick(() => {\r\n          const { $refs } = this\r\n          const bodyElem = $refs.tableBody.$el\r\n          const filterWrapperElem = $refs.filterWrapper.$el\r\n          let filterWidth = 0\r\n          let filterHeight = 0\r\n          let filterHeadElem = null\r\n          let filterFootElem = null\r\n          if (filterWrapperElem) {\r\n            filterWidth = filterWrapperElem.offsetWidth\r\n            filterHeight = filterWrapperElem.offsetHeight\r\n            filterHeadElem = filterWrapperElem.querySelector('.vxe-table--filter-header')\r\n            filterFootElem = filterWrapperElem.querySelector('.vxe-table--filter-footer')\r\n          }\r\n          const centerWidth = filterWidth / 2\r\n          const minMargin = 10\r\n          const maxLeft = bodyElem.clientWidth - filterWidth - minMargin\r\n          let left, right\r\n          const style = {\r\n            top: `${targetElem.offsetTop + targetElem.offsetParent.offsetTop + targetElem.offsetHeight + 8}px`\r\n          }\r\n          // 判断面板不能大于表格高度\r\n          let maxHeight = null\r\n          if (filterHeight >= bodyElem.clientHeight) {\r\n            maxHeight = bodyElem.clientHeight - (filterFootElem ? filterFootElem.offsetHeight : 0) - (filterHeadElem ? filterHeadElem.offsetHeight : 0)\r\n          }\r\n          if (column.fixed === 'left') {\r\n            left = targetElem.offsetLeft + targetElem.offsetParent.offsetLeft - centerWidth\r\n          } else if (column.fixed === 'right') {\r\n            right = (targetElem.offsetParent.offsetWidth - targetElem.offsetLeft) + (targetElem.offsetParent.offsetParent.offsetWidth - targetElem.offsetParent.offsetLeft) - column.renderWidth - centerWidth\r\n          } else {\r\n            left = targetElem.offsetLeft + targetElem.offsetParent.offsetLeft - centerWidth - bodyElem.scrollLeft\r\n          }\r\n          if (left) {\r\n            const overflowWidth = (pageX + filterWidth - centerWidth + minMargin) - visibleWidth\r\n            if (overflowWidth > 0) {\r\n              left -= overflowWidth\r\n            }\r\n            style.left = `${Math.min(maxLeft, Math.max(minMargin, left))}px`\r\n          } else if (right) {\r\n            const overflowWidth = (pageX + filterWidth - centerWidth + minMargin) - visibleWidth\r\n            if (overflowWidth > 0) {\r\n              right += overflowWidth\r\n            }\r\n            style.right = `${Math.max(minMargin, right)}px`\r\n          }\r\n          filterStore.style = style\r\n          filterStore.maxHeight = maxHeight\r\n        })\r\n      }\r\n    },\r\n    _getCheckedFilters () {\r\n      const { tableFullColumn } = this\r\n      const filterList = []\r\n      tableFullColumn.filter(column => {\r\n        const { property, filters } = column\r\n        const valueList = []\r\n        const dataList = []\r\n        if (filters && filters.length) {\r\n          filters.forEach(item => {\r\n            if (item.checked) {\r\n              valueList.push(item.value)\r\n              dataList.push(item.data)\r\n            }\r\n          })\r\n          if (valueList.length) {\r\n            filterList.push({ column, property, values: valueList, datas: dataList })\r\n          }\r\n        }\r\n      })\r\n      return filterList\r\n    },\r\n    /**\r\n     * 确认筛选\r\n     * 当筛选面板中的确定按钮被按下时触发\r\n     * @param {Event} evnt 事件\r\n     */\r\n    confirmFilterEvent (evnt) {\r\n      const { filterStore, filterOpts, scrollXLoad, scrollYLoad } = this\r\n      const { column } = filterStore\r\n      const { property } = column\r\n      const values = []\r\n      const datas = []\r\n      column.filters.forEach(item => {\r\n        if (item.checked) {\r\n          values.push(item.value)\r\n          datas.push(item.data)\r\n        }\r\n      })\r\n      filterStore.visible = false\r\n      const filterList = this.getCheckedFilters()\r\n      // 如果是服务端筛选，则跳过本地筛选处理\r\n      if (!filterOpts.remote) {\r\n        this.handleTableData(true)\r\n        this.checkSelectionStatus()\r\n      }\r\n      this.emitEvent('filter-change', { column, property, values, datas, filters: filterList, filterList }, evnt)\r\n      this.updateFooter()\r\n      if (scrollXLoad || scrollYLoad) {\r\n        this.clearScroll()\r\n        if (scrollYLoad) {\r\n          this.updateScrollYSpace()\r\n        }\r\n      }\r\n      this.closeFilter()\r\n      this.$nextTick(() => {\r\n        this.recalculate()\r\n        this.updateCellAreas()\r\n      })\r\n    },\r\n    handleClearFilter (column) {\r\n      if (column) {\r\n        const { filters, filterRender } = column\r\n        if (filters) {\r\n          const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null\r\n          const filterResetMethod = column.filterResetMethod || (compConf ? compConf.filterResetMethod : null)\r\n          filters.forEach((item) => {\r\n            item._checked = false\r\n            item.checked = false\r\n            if (!filterResetMethod) {\r\n              item.data = XEUtils.clone(item.resetValue, true)\r\n            }\r\n          })\r\n          if (filterResetMethod) {\r\n            filterResetMethod({ options: filters, column, $table: this })\r\n          }\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * 重置筛选\r\n     * 当筛选面板中的重置按钮被按下时触发\r\n     * @param {Event} evnt 事件\r\n     */\r\n    resetFilterEvent (evnt) {\r\n      this.handleClearFilter(this.filterStore.column)\r\n      this.confirmFilterEvent(evnt)\r\n    },\r\n    /**\r\n     * 清空指定列的筛选条件\r\n     * 如果为空则清空所有列的筛选条件\r\n     * @param {String} fieldOrColumn 列\r\n     */\r\n    _clearFilter (fieldOrColumn) {\r\n      const { filterStore } = this\r\n      let column\r\n      if (fieldOrColumn) {\r\n        column = handleFieldOrColumn(this, fieldOrColumn)\r\n        if (column) {\r\n          this.handleClearFilter(column)\r\n        }\r\n      } else {\r\n        this.visibleColumn.forEach(this.handleClearFilter)\r\n      }\r\n      if (!fieldOrColumn || column !== filterStore.column) {\r\n        Object.assign(filterStore, {\r\n          isAllSelected: false,\r\n          isIndeterminate: false,\r\n          style: null,\r\n          options: [],\r\n          column: null,\r\n          multiple: false,\r\n          visible: false\r\n        })\r\n      }\r\n      return this.updateData()\r\n    }\r\n  }\r\n}\r\n"]}]}