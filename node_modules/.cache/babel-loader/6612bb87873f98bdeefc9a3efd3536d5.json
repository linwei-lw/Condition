{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\select\\src\\select.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\select\\src\\select.js","mtime":1657011267820},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find\";\nimport XEUtils from 'xe-utils';\nimport VxeInput from \"../../input/src/input\";\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport vSize from \"../../mixins/size\";\nimport { UtilTools, DomTools, GlobalEvent } from \"../../tools\";\n\nfunction isOptionVisible(option) {\n  return option.visible !== false;\n}\n\nfunction getOptUniqueId() {\n  return XEUtils.uniqueId('opt_');\n}\n\nfunction getOptkey(_vm) {\n  return _vm.optionId || '_XID';\n}\n\nfunction getOptid(_vm, option) {\n  var optid = option[getOptkey(_vm)];\n  return optid ? encodeURIComponent(optid) : '';\n}\n\nfunction findOffsetOption(_vm, optionValue, isUpArrow) {\n  var isGroup = _vm.isGroup,\n      visibleOptionList = _vm.visibleOptionList,\n      visibleGroupList = _vm.visibleGroupList,\n      valueField = _vm.valueField,\n      groupOptionsField = _vm.groupOptionsField;\n  var firstOption;\n  var prevOption;\n  var nextOption;\n  var currOption;\n\n  if (isGroup) {\n    for (var gIndex = 0; gIndex < visibleGroupList.length; gIndex++) {\n      var group = visibleGroupList[gIndex];\n      var groupOptionList = group[groupOptionsField];\n      var isGroupDisabled = group.disabled;\n\n      if (groupOptionList) {\n        for (var index = 0; index < groupOptionList.length; index++) {\n          var option = groupOptionList[index];\n          var isVisible = isOptionVisible(option);\n          var isDisabled = isGroupDisabled || option.disabled;\n\n          if (!firstOption && !isDisabled) {\n            firstOption = option;\n          }\n\n          if (currOption) {\n            if (isVisible && !isDisabled) {\n              nextOption = option;\n\n              if (!isUpArrow) {\n                return {\n                  offsetOption: nextOption\n                };\n              }\n            }\n          }\n\n          if (optionValue === option[valueField]) {\n            currOption = option;\n\n            if (isUpArrow) {\n              return {\n                offsetOption: prevOption\n              };\n            }\n          } else {\n            if (isVisible && !isDisabled) {\n              prevOption = option;\n            }\n          }\n        }\n      }\n    }\n  } else {\n    for (var _index = 0; _index < visibleOptionList.length; _index++) {\n      var _option = visibleOptionList[_index];\n      var _isDisabled = _option.disabled;\n\n      if (!firstOption && !_isDisabled) {\n        firstOption = _option;\n      }\n\n      if (currOption) {\n        if (!_isDisabled) {\n          nextOption = _option;\n\n          if (!isUpArrow) {\n            return {\n              offsetOption: nextOption\n            };\n          }\n        }\n      }\n\n      if (optionValue === _option[valueField]) {\n        currOption = _option;\n\n        if (isUpArrow) {\n          return {\n            offsetOption: prevOption\n          };\n        }\n      } else {\n        if (!_isDisabled) {\n          prevOption = _option;\n        }\n      }\n    }\n  }\n\n  return {\n    firstOption: firstOption\n  };\n}\n\nfunction findOption(_vm, optionValue) {\n  var isGroup = _vm.isGroup,\n      fullOptionList = _vm.fullOptionList,\n      fullGroupList = _vm.fullGroupList,\n      valueField = _vm.valueField;\n\n  if (isGroup) {\n    for (var gIndex = 0; gIndex < fullGroupList.length; gIndex++) {\n      var group = fullGroupList[gIndex];\n\n      if (group.options) {\n        for (var index = 0; index < group.options.length; index++) {\n          var option = group.options[index];\n\n          if (optionValue === option[valueField]) {\n            return option;\n          }\n        }\n      }\n    }\n  }\n\n  return fullOptionList.find(function (item) {\n    return optionValue === item[valueField];\n  });\n}\n\nfunction getSelectLabel(_vm, value) {\n  var item = findOption(_vm, value);\n  return XEUtils.toString(item ? item[_vm.labelField] : value);\n}\n\nexport function renderOption(h, _vm, list, group) {\n  var isGroup = _vm.isGroup,\n      labelField = _vm.labelField,\n      valueField = _vm.valueField,\n      optionKey = _vm.optionKey,\n      value = _vm.value,\n      multiple = _vm.multiple,\n      currentValue = _vm.currentValue;\n  return list.map(function (option, cIndex) {\n    var isVisible = !isGroup || isOptionVisible(option);\n    var isDisabled = group && group.disabled || option.disabled;\n    var optionValue = option[valueField];\n    var optid = getOptid(_vm, option);\n    return isVisible ? h('div', {\n      key: optionKey ? optid : cIndex,\n      class: ['vxe-select-option', option.className, {\n        'is--disabled': isDisabled,\n        'is--selected': multiple ? value && value.indexOf(optionValue) > -1 : value === optionValue,\n        'is--hover': currentValue === optionValue\n      }],\n      attrs: {\n        optid: optid\n      },\n      on: {\n        mousedown: _vm.mousedownOptionEvent,\n        click: function click(evnt) {\n          if (!isDisabled) {\n            _vm.changeOptionEvent(evnt, optionValue);\n          }\n        },\n        mouseenter: function mouseenter() {\n          if (!isDisabled) {\n            _vm.setCurrentOption(option);\n          }\n        }\n      }\n    }, UtilTools.formatText(UtilTools.getFuncText(option[labelField]))) : null;\n  });\n}\nexport function renderOptgroup(h, _vm) {\n  var optionKey = _vm.optionKey,\n      visibleGroupList = _vm.visibleGroupList,\n      groupLabelField = _vm.groupLabelField,\n      groupOptionsField = _vm.groupOptionsField;\n  return visibleGroupList.map(function (group, gIndex) {\n    var optid = getOptid(_vm, group);\n    var isGroupDisabled = group.disabled;\n    return h('div', {\n      key: optionKey ? optid : gIndex,\n      class: ['vxe-optgroup', group.className, {\n        'is--disabled': isGroupDisabled\n      }],\n      attrs: {\n        optid: optid\n      }\n    }, [h('div', {\n      class: 'vxe-optgroup--title'\n    }, UtilTools.getFuncText(group[groupLabelField])), h('div', {\n      class: 'vxe-optgroup--wrapper'\n    }, renderOption(h, _vm, group[groupOptionsField], group))]);\n  });\n}\n\nfunction renderOpts(h, _vm) {\n  var isGroup = _vm.isGroup,\n      visibleGroupList = _vm.visibleGroupList,\n      visibleOptionList = _vm.visibleOptionList;\n\n  if (isGroup) {\n    if (visibleGroupList.length) {\n      return renderOptgroup(h, _vm);\n    }\n  } else {\n    if (visibleOptionList.length) {\n      return renderOption(h, _vm, visibleOptionList);\n    }\n  }\n\n  return [h('div', {\n    class: 'vxe-select--empty-placeholder'\n  }, _vm.emptyText || GlobalConfig.i18n('vxe.select.emptyText'))];\n}\n\nexport default {\n  name: 'VxeSelect',\n  mixins: [vSize],\n  props: {\n    value: null,\n    clearable: Boolean,\n    placeholder: String,\n    loading: Boolean,\n    disabled: Boolean,\n    multiple: Boolean,\n    multiCharOverflow: {\n      type: [Number, String],\n      default: function _default() {\n        return GlobalConfig.select.multiCharOverflow;\n      }\n    },\n    prefixIcon: String,\n    placement: String,\n    options: Array,\n    optionProps: Object,\n    optionGroups: Array,\n    optionGroupProps: Object,\n    className: [String, Function],\n    size: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.select.size || GlobalConfig.size;\n      }\n    },\n    emptyText: String,\n    optionId: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.select.optionId;\n      }\n    },\n    optionKey: Boolean,\n    transfer: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.select.transfer;\n      }\n    }\n  },\n  components: {\n    VxeInput: VxeInput\n  },\n  provide: function provide() {\n    return {\n      $xeselect: this\n    };\n  },\n  data: function data() {\n    return {\n      inited: false,\n      collectOption: [],\n      fullGroupList: [],\n      fullOptionList: [],\n      visibleGroupList: [],\n      visibleOptionList: [],\n      panelIndex: 0,\n      panelStyle: null,\n      panelPlacement: null,\n      currentValue: null,\n      visiblePanel: false,\n      animatVisible: false,\n      isActivated: false\n    };\n  },\n  computed: {\n    propsOpts: function propsOpts() {\n      return this.optionProps || {};\n    },\n    groupPropsOpts: function groupPropsOpts() {\n      return this.optionGroupProps || {};\n    },\n    labelField: function labelField() {\n      return this.propsOpts.label || 'label';\n    },\n    valueField: function valueField() {\n      return this.propsOpts.value || 'value';\n    },\n    groupLabelField: function groupLabelField() {\n      return this.groupPropsOpts.label || 'label';\n    },\n    groupOptionsField: function groupOptionsField() {\n      return this.groupPropsOpts.options || 'options';\n    },\n    isGroup: function isGroup() {\n      return this.fullGroupList.some(function (item) {\n        return item.options && item.options.length;\n      });\n    },\n    multiMaxCharNum: function multiMaxCharNum() {\n      return XEUtils.toNumber(this.multiCharOverflow);\n    },\n    selectLabel: function selectLabel() {\n      var _this = this;\n\n      var value = this.value,\n          multiple = this.multiple,\n          multiMaxCharNum = this.multiMaxCharNum;\n\n      if (value && multiple) {\n        return value.map(function (val) {\n          var label = getSelectLabel(_this, val);\n\n          if (multiMaxCharNum > 0 && label.length > multiMaxCharNum) {\n            return \"\".concat(label.substring(0, multiMaxCharNum), \"...\");\n          }\n\n          return label;\n        }).join(', ');\n      }\n\n      return getSelectLabel(this, value);\n    }\n  },\n  watch: {\n    collectOption: function collectOption(value) {\n      if (value.some(function (item) {\n        return item.options && item.options.length;\n      })) {\n        this.fullOptionList = [];\n        this.fullGroupList = value;\n      } else {\n        this.fullGroupList = [];\n        this.fullOptionList = value;\n      }\n\n      this.updateCache();\n    },\n    options: function options(value) {\n      this.fullGroupList = [];\n      this.fullOptionList = value;\n      this.updateCache();\n    },\n    optionGroups: function optionGroups(value) {\n      this.fullOptionList = [];\n      this.fullGroupList = value;\n      this.updateCache();\n    }\n  },\n  created: function created() {\n    var options = this.options,\n        optionGroups = this.optionGroups;\n\n    if (optionGroups) {\n      this.fullGroupList = optionGroups;\n    } else if (options) {\n      this.fullOptionList = options;\n    }\n\n    this.updateCache();\n    GlobalEvent.on(this, 'mousewheel', this.handleGlobalMousewheelEvent);\n    GlobalEvent.on(this, 'mousedown', this.handleGlobalMousedownEvent);\n    GlobalEvent.on(this, 'keydown', this.handleGlobalKeydownEvent);\n    GlobalEvent.on(this, 'blur', this.handleGlobalBlurEvent);\n  },\n  beforeDestroy: function beforeDestroy() {\n    var panelElem = this.$refs.panel;\n\n    if (panelElem && panelElem.parentNode) {\n      panelElem.parentNode.removeChild(panelElem);\n    }\n  },\n  destroyed: function destroyed() {\n    GlobalEvent.off(this, 'mousewheel');\n    GlobalEvent.off(this, 'mousedown');\n    GlobalEvent.off(this, 'keydown');\n    GlobalEvent.off(this, 'blur');\n  },\n  render: function render(h) {\n    var _ref, _ref2;\n\n    var $scopedSlots = this.$scopedSlots,\n        vSize = this.vSize,\n        className = this.className,\n        inited = this.inited,\n        isActivated = this.isActivated,\n        loading = this.loading,\n        disabled = this.disabled,\n        visiblePanel = this.visiblePanel;\n    var prefixSlot = $scopedSlots.prefix;\n    return h('div', {\n      class: ['vxe-select', className ? XEUtils.isFunction(className) ? className({\n        $select: this\n      }) : className : '', (_ref = {}, _defineProperty(_ref, \"size--\".concat(vSize), vSize), _defineProperty(_ref, 'is--visivle', visiblePanel), _defineProperty(_ref, 'is--disabled', disabled), _defineProperty(_ref, 'is--active', isActivated), _ref)]\n    }, [h('div', {\n      class: 'vxe-select-slots',\n      ref: 'hideOption'\n    }, this.$slots.default), h('vxe-input', {\n      ref: 'input',\n      props: {\n        clearable: this.clearable,\n        placeholder: this.placeholder,\n        readonly: true,\n        disabled: disabled,\n        type: 'text',\n        prefixIcon: this.prefixIcon,\n        suffixIcon: loading ? GlobalConfig.icon.SELECT_LOADED : visiblePanel ? GlobalConfig.icon.SELECT_OPEN : GlobalConfig.icon.SELECT_CLOSE,\n        value: this.selectLabel\n      },\n      on: {\n        clear: this.clearEvent,\n        click: this.togglePanelEvent,\n        focus: this.focusEvent,\n        blur: this.blurEvent,\n        'suffix-click': this.togglePanelEvent\n      },\n      scopedSlots: prefixSlot ? {\n        prefix: function prefix() {\n          return prefixSlot({});\n        }\n      } : {}\n    }), h('div', {\n      ref: 'panel',\n      class: ['vxe-table--ignore-clear vxe-select--panel', (_ref2 = {}, _defineProperty(_ref2, \"size--\".concat(vSize), vSize), _defineProperty(_ref2, 'is--transfer', this.transfer), _defineProperty(_ref2, 'animat--leave', !loading && this.animatVisible), _defineProperty(_ref2, 'animat--enter', !loading && visiblePanel), _ref2)],\n      attrs: {\n        placement: this.panelPlacement\n      },\n      style: this.panelStyle\n    }, inited ? [h('div', {\n      ref: 'optWrapper',\n      class: 'vxe-select-option--wrapper'\n    }, renderOpts(h, this))] : null)]);\n  },\n  methods: {\n    updateCache: function updateCache() {\n      var _this2 = this;\n\n      var fullOptionList = this.fullOptionList,\n          fullGroupList = this.fullGroupList,\n          groupOptionsField = this.groupOptionsField;\n      var optkey = getOptkey(this);\n\n      var handleOptis = function handleOptis(item) {\n        if (!getOptid(_this2, item)) {\n          item[optkey] = getOptUniqueId();\n        }\n      };\n\n      if (fullGroupList.length) {\n        fullGroupList.forEach(function (group) {\n          handleOptis(group);\n\n          if (group[groupOptionsField]) {\n            group[groupOptionsField].forEach(handleOptis);\n          }\n        });\n      } else if (fullOptionList.length) {\n        fullOptionList.forEach(handleOptis);\n      }\n\n      this.refreshOption();\n    },\n\n    /**\r\n     * 刷新选项，当选项被动态显示/隐藏时可能会用到\r\n     */\n    refreshOption: function refreshOption() {\n      var isGroup = this.isGroup,\n          fullOptionList = this.fullOptionList,\n          fullGroupList = this.fullGroupList;\n\n      if (isGroup) {\n        this.visibleGroupList = fullGroupList.filter(isOptionVisible);\n      } else {\n        this.visibleOptionList = fullOptionList.filter(isOptionVisible);\n      }\n\n      return this.$nextTick();\n    },\n    setCurrentOption: function setCurrentOption(option) {\n      if (option) {\n        this.currentValue = option[this.valueField];\n      }\n    },\n    scrollToOption: function scrollToOption(option, isAlignBottom) {\n      var _this3 = this;\n\n      return this.$nextTick().then(function () {\n        if (option) {\n          var $refs = _this3.$refs;\n          var optWrapperElem = $refs.optWrapper;\n          var optElem = $refs.panel.querySelector(\"[optid='\".concat(getOptid(_this3, option), \"']\"));\n\n          if (optWrapperElem && optElem) {\n            var wrapperHeight = optWrapperElem.offsetHeight;\n            var offsetPadding = 5;\n\n            if (isAlignBottom) {\n              if (optElem.offsetTop + optElem.offsetHeight - optWrapperElem.scrollTop > wrapperHeight) {\n                optWrapperElem.scrollTop = optElem.offsetTop + optElem.offsetHeight - wrapperHeight;\n              }\n            } else {\n              if (optElem.offsetTop + offsetPadding < optWrapperElem.scrollTop || optElem.offsetTop + offsetPadding > optWrapperElem.scrollTop + optWrapperElem.clientHeight) {\n                optWrapperElem.scrollTop = optElem.offsetTop - offsetPadding;\n              }\n            }\n          }\n        }\n      });\n    },\n    clearEvent: function clearEvent(params, evnt) {\n      this.clearValueEvent(evnt, null);\n      this.hideOptionPanel();\n    },\n    clearValueEvent: function clearValueEvent(evnt, selectValue) {\n      this.changeEvent(evnt, selectValue);\n      this.$emit('clear', {\n        value: selectValue,\n        $event: evnt\n      });\n    },\n    changeEvent: function changeEvent(evnt, selectValue) {\n      if (selectValue !== this.value) {\n        this.$emit('input', selectValue);\n        this.$emit('change', {\n          value: selectValue,\n          $event: evnt\n        });\n      }\n    },\n    mousedownOptionEvent: function mousedownOptionEvent(evnt) {\n      var isLeftBtn = evnt.button === 0;\n\n      if (isLeftBtn) {\n        evnt.stopPropagation();\n      }\n    },\n    changeOptionEvent: function changeOptionEvent(evnt, selectValue) {\n      var value = this.value,\n          multiple = this.multiple;\n\n      if (multiple) {\n        var multipleValue;\n\n        if (value) {\n          if (value.indexOf(selectValue) === -1) {\n            multipleValue = value.concat([selectValue]);\n          } else {\n            multipleValue = value.filter(function (val) {\n              return val !== selectValue;\n            });\n          }\n        } else {\n          multipleValue = [selectValue];\n        }\n\n        this.changeEvent(evnt, multipleValue);\n      } else {\n        this.changeEvent(evnt, selectValue);\n        this.hideOptionPanel();\n      }\n    },\n    handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent(evnt) {\n      var $refs = this.$refs,\n          disabled = this.disabled,\n          visiblePanel = this.visiblePanel;\n\n      if (!disabled) {\n        if (visiblePanel) {\n          if (DomTools.getEventTargetNode(evnt, $refs.panel).flag) {\n            this.updatePlacement();\n          } else {\n            this.hideOptionPanel();\n          }\n        }\n      }\n    },\n    handleGlobalMousedownEvent: function handleGlobalMousedownEvent(evnt) {\n      var $refs = this.$refs,\n          $el = this.$el,\n          disabled = this.disabled,\n          visiblePanel = this.visiblePanel;\n\n      if (!disabled) {\n        this.isActivated = DomTools.getEventTargetNode(evnt, $el).flag || DomTools.getEventTargetNode(evnt, $refs.panel).flag;\n\n        if (visiblePanel && !this.isActivated) {\n          this.hideOptionPanel();\n        }\n      }\n    },\n    handleGlobalKeydownEvent: function handleGlobalKeydownEvent(evnt) {\n      var visiblePanel = this.visiblePanel,\n          currentValue = this.currentValue,\n          clearable = this.clearable,\n          disabled = this.disabled;\n\n      if (!disabled) {\n        var keyCode = evnt.keyCode;\n        var isTab = keyCode === 9;\n        var isEnter = keyCode === 13;\n        var isEsc = keyCode === 27;\n        var isUpArrow = keyCode === 38;\n        var isDwArrow = keyCode === 40;\n        var isDel = keyCode === 46;\n        var isSpacebar = keyCode === 32;\n\n        if (isTab) {\n          this.isActivated = false;\n        }\n\n        if (visiblePanel) {\n          if (isEsc || isTab) {\n            this.hideOptionPanel();\n          } else if (isEnter) {\n            evnt.preventDefault();\n            evnt.stopPropagation();\n            this.changeOptionEvent(evnt, currentValue);\n          } else if (isUpArrow || isDwArrow) {\n            evnt.preventDefault();\n\n            var _findOffsetOption = findOffsetOption(this, currentValue, isUpArrow),\n                firstOption = _findOffsetOption.firstOption,\n                offsetOption = _findOffsetOption.offsetOption;\n\n            if (!offsetOption && !findOption(this, currentValue)) {\n              offsetOption = firstOption;\n            }\n\n            this.setCurrentOption(offsetOption);\n            this.scrollToOption(offsetOption, isDwArrow);\n          } else if (isSpacebar) {\n            evnt.preventDefault();\n          }\n        } else if ((isUpArrow || isDwArrow || isEnter || isSpacebar) && this.isActivated) {\n          evnt.preventDefault();\n          this.showOptionPanel();\n        }\n\n        if (this.isActivated) {\n          if (isDel && clearable) {\n            this.clearValueEvent(evnt, null);\n          }\n        }\n      }\n    },\n    handleGlobalBlurEvent: function handleGlobalBlurEvent() {\n      this.hideOptionPanel();\n    },\n    updateZindex: function updateZindex() {\n      if (this.panelIndex < UtilTools.getLastZIndex()) {\n        this.panelIndex = UtilTools.nextZIndex();\n      }\n    },\n    focusEvent: function focusEvent() {\n      if (!this.disabled) {\n        this.isActivated = true;\n      }\n    },\n    blurEvent: function blurEvent() {\n      this.isActivated = false;\n    },\n    isPanelVisible: function isPanelVisible() {\n      return this.visiblePanel;\n    },\n    togglePanel: function togglePanel() {\n      if (this.visiblePanel) {\n        this.hideOptionPanel();\n      } else {\n        this.showOptionPanel();\n      }\n\n      this.$nextTick();\n    },\n    hidePanel: function hidePanel() {\n      if (this.visiblePanel) {\n        this.hideOptionPanel();\n      }\n\n      this.$nextTick();\n    },\n    showPanel: function showPanel() {\n      if (!this.visiblePanel) {\n        this.showOptionPanel();\n      }\n\n      this.$nextTick();\n    },\n    togglePanelEvent: function togglePanelEvent(params) {\n      var $event = params.$event;\n      $event.preventDefault();\n\n      if (this.visiblePanel) {\n        this.hideOptionPanel();\n      } else {\n        this.showOptionPanel();\n      }\n    },\n    showOptionPanel: function showOptionPanel() {\n      var _this4 = this;\n\n      var loading = this.loading,\n          disabled = this.disabled;\n\n      if (!loading && !disabled) {\n        clearTimeout(this.hidePanelTimeout);\n\n        if (!this.inited) {\n          this.inited = true;\n\n          if (this.transfer) {\n            document.body.appendChild(this.$refs.panel);\n          }\n        }\n\n        this.isActivated = true;\n        this.animatVisible = true;\n        setTimeout(function () {\n          var value = _this4.value,\n              multiple = _this4.multiple;\n          var currOption = findOption(_this4, multiple && value ? value[0] : value);\n          _this4.visiblePanel = true;\n\n          if (currOption) {\n            _this4.setCurrentOption(currOption);\n\n            _this4.scrollToOption(currOption);\n          }\n        }, 10);\n        this.updateZindex();\n        this.updatePlacement();\n      }\n    },\n    hideOptionPanel: function hideOptionPanel() {\n      var _this5 = this;\n\n      this.visiblePanel = false;\n      this.hidePanelTimeout = setTimeout(function () {\n        _this5.animatVisible = false;\n      }, 350);\n    },\n    updatePlacement: function updatePlacement() {\n      var _this6 = this;\n\n      return this.$nextTick().then(function () {\n        var $refs = _this6.$refs,\n            transfer = _this6.transfer,\n            placement = _this6.placement,\n            panelIndex = _this6.panelIndex;\n        var targetElem = $refs.input.$el;\n        var panelElem = $refs.panel;\n\n        if (panelElem && targetElem) {\n          var targetHeight = targetElem.offsetHeight;\n          var targetWidth = targetElem.offsetWidth;\n          var panelHeight = panelElem.offsetHeight;\n          var panelWidth = panelElem.offsetWidth;\n          var marginSize = 5;\n          var panelStyle = {\n            zIndex: panelIndex\n          };\n\n          var _DomTools$getAbsolute = DomTools.getAbsolutePos(targetElem),\n              boundingTop = _DomTools$getAbsolute.boundingTop,\n              boundingLeft = _DomTools$getAbsolute.boundingLeft,\n              visibleHeight = _DomTools$getAbsolute.visibleHeight,\n              visibleWidth = _DomTools$getAbsolute.visibleWidth;\n\n          var panelPlacement = 'bottom';\n\n          if (transfer) {\n            var left = boundingLeft;\n            var top = boundingTop + targetHeight;\n\n            if (placement === 'top') {\n              panelPlacement = 'top';\n              top = boundingTop - panelHeight;\n            } else if (!placement) {\n              // 如果下面不够放，则向上\n              if (top + panelHeight + marginSize > visibleHeight) {\n                panelPlacement = 'top';\n                top = boundingTop - panelHeight;\n              } // 如果上面不够放，则向下（优先）\n\n\n              if (top < marginSize) {\n                panelPlacement = 'bottom';\n                top = boundingTop + targetHeight;\n              }\n            } // 如果溢出右边\n\n\n            if (left + panelWidth + marginSize > visibleWidth) {\n              left -= left + panelWidth + marginSize - visibleWidth;\n            } // 如果溢出左边\n\n\n            if (left < marginSize) {\n              left = marginSize;\n            }\n\n            Object.assign(panelStyle, {\n              left: \"\".concat(left, \"px\"),\n              top: \"\".concat(top, \"px\"),\n              minWidth: \"\".concat(targetWidth, \"px\")\n            });\n          } else {\n            if (placement === 'top') {\n              panelPlacement = 'top';\n              panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n            } else if (!placement) {\n              // 如果下面不够放，则向上\n              if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                // 如果上面不够放，则向下（优先）\n                if (boundingTop - targetHeight - panelHeight > marginSize) {\n                  panelPlacement = 'top';\n                  panelStyle.bottom = \"\".concat(targetHeight, \"px\");\n                }\n              }\n            }\n          }\n\n          _this6.panelStyle = panelStyle;\n          _this6.panelPlacement = panelPlacement;\n          return _this6.$nextTick();\n        }\n      });\n    },\n    focus: function focus() {\n      this.isActivated = true;\n      this.$refs.input.focus();\n      return this.$nextTick();\n    },\n    blur: function blur() {\n      this.hideOptionPanel();\n      this.$refs.input.blur();\n      return this.$nextTick();\n    }\n  }\n};",null]}