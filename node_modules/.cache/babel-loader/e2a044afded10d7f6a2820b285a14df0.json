{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\util\\LabelWidth.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\util\\LabelWidth.js","mtime":1665472741173},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["let is_label = 'is-label';\nexport function labelWidthFit(dom) {\n  let maxWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  let labels = [],\n      _maxWidth = find_is_label_dom([dom], labels, 0);\n\n  maxWidth = maxWidth == 0 ? _maxWidth : Math.min(_maxWidth, maxWidth);\n\n  if (maxWidth > 0 && labels.length > 0) {\n    labels.forEach(dom => {\n      if (dom.scrollWidth > maxWidth) {\n        dom.style['text-overflow'] = 'ellipsis';\n        dom.style['overflow'] = 'hidden';\n        dom.title = dom.innerHTML;\n      }\n\n      dom.style.width = maxWidth + 'px';\n    });\n  }\n\n  return maxWidth;\n}\n\nfunction find_is_label_dom(doms, labels, maxWidth) {\n  for (let i = 0, len = doms.length, dom; i < len; i++) {\n    dom = doms[i];\n    if (dom.hasAttribute === undefined) continue;\n\n    if (dom.hasAttribute(is_label)) {\n      labels.push(dom);\n      maxWidth = Math.max(maxWidth, dom.scrollWidth);\n    } else if (dom.childNodes.length > 0) {\n      maxWidth = find_is_label_dom(dom.childNodes, labels, maxWidth);\n    }\n  }\n\n  return maxWidth;\n}",null]}