{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\table\\src\\table.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\table\\src\\table.js","mtime":1638408472466},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/web.dom.iterable\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport VXETable from '../../v-x-e-table';\nimport VxeTableBody from './body';\nimport vSize from '../../mixins/size';\nimport { UtilTools, GlobalEvent, createResizeEvent, isEnableConf } from '../../tools';\nimport methods from './methods';\n/**\r\n * 渲染浮固定列\r\n * 分别渲染左边固定列和右边固定列\r\n * 如果宽度足够情况下，则不需要渲染固定列\r\n * @param {Function} h 创建 VNode 函数\r\n * @param {Object} $xetable 表格实例\r\n * @param {String} fixedType 固定列类型\r\n */\n\nfunction renderFixed(h, $xetable, fixedType) {\n  const _e = $xetable._e,\n        tableData = $xetable.tableData,\n        tableColumn = $xetable.tableColumn,\n        tableGroupColumn = $xetable.tableGroupColumn,\n        vSize = $xetable.vSize,\n        showHeader = $xetable.showHeader,\n        showFooter = $xetable.showFooter,\n        columnStore = $xetable.columnStore,\n        footerTableData = $xetable.footerTableData;\n  const fixedColumn = columnStore[`${fixedType}List`];\n  return h('div', {\n    class: `vxe-table--fixed-${fixedType}-wrapper`,\n    ref: `${fixedType}Container`\n  }, [showHeader ? h('vxe-table-header', {\n    props: {\n      fixedType,\n      tableData,\n      tableColumn,\n      tableGroupColumn,\n      size: vSize,\n      fixedColumn\n    },\n    ref: `${fixedType}Header`\n  }) : _e(), h('vxe-table-body', {\n    props: {\n      fixedType,\n      tableData,\n      tableColumn,\n      fixedColumn,\n      size: vSize\n    },\n    ref: `${fixedType}Body`\n  }), showFooter ? h('vxe-table-footer', {\n    props: {\n      footerTableData,\n      tableColumn,\n      fixedColumn,\n      fixedType,\n      size: vSize\n    },\n    ref: `${fixedType}Footer`\n  }) : _e()]);\n}\n\nfunction renderEmptyContenet(h, _vm) {\n  const $scopedSlots = _vm.$scopedSlots,\n        emptyOpts = _vm.emptyOpts;\n  let emptyContent = '';\n  const params = {\n    $table: _vm\n  };\n\n  if ($scopedSlots.empty) {\n    emptyContent = $scopedSlots.empty.call(_vm, params, h);\n  } else {\n    const compConf = emptyOpts.name ? VXETable.renderer.get(emptyOpts.name) : null;\n    const renderEmpty = compConf ? compConf.renderEmpty : null;\n\n    if (renderEmpty) {\n      emptyContent = renderEmpty.call(_vm, h, emptyOpts, params);\n    } else {\n      emptyContent = UtilTools.getFuncText(_vm.emptyText) || GlobalConfig.i18n('vxe.table.emptyText');\n    }\n  }\n\n  return emptyContent;\n}\n\nfunction handleUupdateResize(_vm) {\n  const $el = _vm.$el;\n\n  if ($el && $el.clientWidth && $el.clientHeight) {\n    _vm.recalculate();\n  }\n}\n\nexport default {\n  name: 'VxeTable',\n  mixins: [vSize],\n  props: {\n    /** 基本属性 */\n    id: String,\n    // 数据\n    data: Array,\n    // 表格的高度\n    height: [Number, String],\n    // 表格的最大高度\n    maxHeight: [Number, String],\n    // 所有列是否允许拖动列宽调整大小\n    resizable: {\n      type: Boolean,\n      default: () => GlobalConfig.table.resizable\n    },\n    // 是否带有斑马纹\n    stripe: {\n      type: Boolean,\n      default: () => GlobalConfig.table.stripe\n    },\n    // 是否带有边框\n    border: {\n      type: [Boolean, String],\n      default: () => GlobalConfig.table.border\n    },\n    // 是否圆角边框\n    round: {\n      type: Boolean,\n      default: () => GlobalConfig.table.round\n    },\n    // 表格的尺寸\n    size: {\n      type: String,\n      default: () => GlobalConfig.table.size || GlobalConfig.size\n    },\n    // 列的宽度是否自撑开（可能会被废弃的参数，不要使用）\n    fit: {\n      type: Boolean,\n      default: () => GlobalConfig.table.fit\n    },\n    // 表格是否加载中\n    loading: Boolean,\n    // 所有的列对其方式\n    align: {\n      type: String,\n      default: () => GlobalConfig.table.align\n    },\n    // 所有的表头列的对齐方式\n    headerAlign: {\n      type: String,\n      default: () => GlobalConfig.table.headerAlign\n    },\n    // 所有的表尾列的对齐方式\n    footerAlign: {\n      type: String,\n      default: () => GlobalConfig.table.footerAlign\n    },\n    // 是否显示表头\n    showHeader: {\n      type: Boolean,\n      default: () => GlobalConfig.table.showHeader\n    },\n    // 是否要高亮当前选中行\n    highlightCurrentRow: {\n      type: Boolean,\n      default: () => GlobalConfig.table.highlightCurrentRow\n    },\n    // 鼠标移到行是否要高亮显示\n    highlightHoverRow: {\n      type: Boolean,\n      default: () => GlobalConfig.table.highlightHoverRow\n    },\n    // 是否要高亮当前选中列\n    highlightCurrentColumn: {\n      type: Boolean,\n      default: () => GlobalConfig.table.highlightCurrentColumn\n    },\n    // 鼠标移到列是否要高亮显示\n    highlightHoverColumn: {\n      type: Boolean,\n      default: () => GlobalConfig.table.highlightHoverColumn\n    },\n    // 激活单元格编辑时是否高亮显示\n    highlightCell: Boolean,\n    // 是否显示表尾合计\n    showFooter: Boolean,\n    // 表尾合计的计算方法\n    footerMethod: {\n      type: Function,\n      default: GlobalConfig.table.footerMethod\n    },\n    // 给行附加 className\n    rowClassName: [String, Function],\n    // 给单元格附加 className\n    cellClassName: [String, Function],\n    // 给表头的行附加 className\n    headerRowClassName: [String, Function],\n    // 给表头的单元格附加 className\n    headerCellClassName: [String, Function],\n    // 给表尾的行附加 className\n    footerRowClassName: [String, Function],\n    // 给表尾的单元格附加 className\n    footerCellClassName: [String, Function],\n    // 给单元格附加样式\n    cellStyle: [Object, Function],\n    // 给表头单元格附加样式\n    headerCellStyle: [Object, Function],\n    // 给表尾单元格附加样式\n    footerCellStyle: [Object, Function],\n    // 给行附加样式\n    rowStyle: [Object, Function],\n    // 给表头行附加样式\n    headerRowStyle: [Object, Function],\n    // 给表尾行附加样式\n    footerRowStyle: [Object, Function],\n    // 合并指定单元格\n    mergeCells: Array,\n    // 合并指定的表尾\n    mergeFooterItems: Array,\n    // 自定义合并行或列的方法\n    spanMethod: Function,\n    // 表尾合并行或列\n    footerSpanMethod: Function,\n    // 设置所有内容过长时显示为省略号\n    showOverflow: {\n      type: [Boolean, String],\n      default: () => GlobalConfig.table.showOverflow\n    },\n    // 设置表头所有内容过长时显示为省略号\n    showHeaderOverflow: {\n      type: [Boolean, String],\n      default: () => GlobalConfig.table.showHeaderOverflow\n    },\n    // 设置表尾所有内容过长时显示为省略号\n    showFooterOverflow: {\n      type: [Boolean, String],\n      default: () => GlobalConfig.table.showFooterOverflow\n    },\n\n    /** 高级属性 */\n    // 主键配置\n    columnKey: Boolean,\n    rowKey: Boolean,\n    rowId: {\n      type: String,\n      default: () => GlobalConfig.table.rowId\n    },\n    zIndex: Number,\n    emptyText: {\n      type: String,\n      default: () => GlobalConfig.table.emptyText\n    },\n    keepSource: {\n      type: Boolean,\n      default: () => GlobalConfig.table.keepSource\n    },\n    // 是否自动监听父容器变化去更新响应式表格宽高\n    autoResize: {\n      type: Boolean,\n      default: () => GlobalConfig.table.autoResize\n    },\n    // 是否自动根据状态属性去更新响应式表格宽高\n    syncResize: [Boolean, String, Number],\n    // 设置列的默认参数，仅对部分支持的属性有效\n    columnConfig: Object,\n    resizableConfig: Object,\n    // 序号配置项\n    seqConfig: Object,\n    // 排序配置项\n    sortConfig: Object,\n    // 筛选配置项\n    filterConfig: Object,\n    // 单选框配置\n    radioConfig: Object,\n    // 复选框配置项\n    checkboxConfig: Object,\n    // tooltip 配置项\n    tooltipConfig: Object,\n    // 导出配置项\n    exportConfig: [Boolean, Object],\n    // 导入配置项\n    importConfig: [Boolean, Object],\n    // 打印配置项\n    printConfig: Object,\n    // 展开行配置项\n    expandConfig: Object,\n    // 树形结构配置项\n    treeConfig: [Boolean, Object],\n    // 快捷菜单配置项\n    menuConfig: [Boolean, Object],\n    // 在 v4 中废弃 contextMenu\n    contextMenu: [Boolean, Object],\n    // 鼠标配置项\n    mouseConfig: Object,\n    // 区域配置项\n    areaConfig: Object,\n    // 按键配置项\n    keyboardConfig: Object,\n    // 复制/粘贴配置项\n    clipConfig: Object,\n    // 查找/替换配置项\n    fnrConfig: Object,\n    // 编辑配置项\n    editConfig: [Boolean, Object],\n    // 校验配置项\n    validConfig: Object,\n    // 校验规则配置项\n    editRules: Object,\n    // 空内容渲染配置项\n    emptyRender: [Boolean, Object],\n    // 自定义列配置项\n    customConfig: [Boolean, Object],\n    // 横向虚拟滚动配置项\n    scrollX: Object,\n    // 纵向虚拟滚动配置项\n    scrollY: Object,\n    // 优化相关\n    animat: {\n      type: Boolean,\n      default: () => GlobalConfig.table.animat\n    },\n    delayHover: {\n      type: Number,\n      default: () => GlobalConfig.table.delayHover\n    },\n    // 额外的参数\n    params: Object\n  },\n  components: {\n    VxeTableBody\n  },\n\n  provide() {\n    return {\n      $xetable: this,\n      xecolgroup: null\n    };\n  },\n\n  inject: {\n    $xegrid: {\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      tId: `${XEUtils.uniqueId()}`,\n      // 低性能的静态列\n      staticColumns: [],\n      // 渲染的列分组\n      tableGroupColumn: [],\n      // 可视区渲染的列\n      tableColumn: [],\n      // 渲染中的数据\n      tableData: [],\n      // 是否启用了横向 X 可视渲染方式加载\n      scrollXLoad: false,\n      // 是否启用了纵向 Y 可视渲染方式加载\n      scrollYLoad: false,\n      // 是否存在纵向滚动条\n      overflowY: true,\n      // 是否存在横向滚动条\n      overflowX: false,\n      // 纵向滚动条的宽度\n      scrollbarWidth: 0,\n      // 横向滚动条的高度\n      scrollbarHeight: 0,\n      // 行高\n      rowHeight: 0,\n      // 表格父容器的高度\n      parentHeight: 0,\n      // 是否使用分组表头\n      isGroup: false,\n      isAllOverflow: false,\n      // 复选框属性，是否全选\n      isAllSelected: false,\n      // 复选框属性，有选中且非全选状态\n      isIndeterminate: false,\n      // 复选框属性，已选中的行\n      selection: [],\n      // 当前行\n      currentRow: null,\n      // 单选框属性，选中列\n      currentColumn: null,\n      // 单选框属性，选中行\n      selectRow: null,\n      // 表尾合计数据\n      footerTableData: [],\n      // 展开列信息\n      expandColumn: null,\n      hasFixedColumn: false,\n      // 树节点列信息\n      treeNodeColumn: null,\n      // 已展开的行\n      rowExpandeds: [],\n      // 懒加载中的展开行的列表\n      expandLazyLoadeds: [],\n      // 已展开树节点\n      treeExpandeds: [],\n      // 懒加载中的树节点的列表\n      treeLazyLoadeds: [],\n      // 树节点不确定状态的列表\n      treeIndeterminates: [],\n      // 合并单元格的对象集\n      mergeList: [],\n      // 合并表尾数据的对象集\n      mergeFooterList: [],\n      // 初始化标识\n      initStore: {\n        filter: false,\n        import: false,\n        export: false\n      },\n      // 当前选中的筛选列\n      filterStore: {\n        isAllSelected: false,\n        isIndeterminate: false,\n        style: null,\n        options: [],\n        column: null,\n        multiple: false,\n        visible: false,\n        maxHeight: null\n      },\n      // 存放列相关的信息\n      columnStore: {\n        leftList: [],\n        centerList: [],\n        rightList: [],\n        resizeList: [],\n        pxList: [],\n        pxMinList: [],\n        scaleList: [],\n        scaleMinList: [],\n        autoList: []\n      },\n      // 存放快捷菜单的信息\n      ctxMenuStore: {\n        selected: null,\n        visible: false,\n        showChild: false,\n        selectChild: null,\n        list: [],\n        style: null\n      },\n      // 存放可编辑相关信息\n      editStore: {\n        indexs: {\n          columns: []\n        },\n        titles: {\n          columns: []\n        },\n        // 选中源\n        selected: {\n          row: null,\n          column: null\n        },\n        // 已复制源\n        copyed: {\n          cut: false,\n          rows: [],\n          columns: []\n        },\n        // 激活\n        actived: {\n          row: null,\n          column: null\n        },\n        insertList: [],\n        removeList: []\n      },\n      // 存放数据校验相关信息\n      validStore: {\n        visible: false,\n        row: null,\n        column: null,\n        content: '',\n        rule: null,\n        isArrow: false\n      },\n      // 导入相关信息\n      importStore: {\n        inited: false,\n        file: null,\n        type: '',\n        modeList: [],\n        typeList: [],\n        filename: '',\n        visible: false\n      },\n      importParams: {\n        mode: '',\n        types: null,\n        message: true\n      },\n      // 导出相关信息\n      exportStore: {\n        inited: false,\n        name: '',\n        modeList: [],\n        typeList: [],\n        columns: [],\n        isPrint: false,\n        hasFooter: false,\n        hasTree: false,\n        hasMerge: false,\n        hasColgroup: false,\n        visible: false\n      },\n      exportParams: {\n        filename: '',\n        sheetName: '',\n        mode: '',\n        type: '',\n        isColgroup: false,\n        isMerge: false,\n        isAllExpand: false,\n        useStyle: false,\n        original: false,\n        message: true,\n        isHeader: false,\n        isFooter: false\n      }\n    };\n  },\n\n  computed: {\n    validOpts() {\n      return Object.assign({\n        message: 'default'\n      }, GlobalConfig.table.validConfig, this.validConfig);\n    },\n\n    sXOpts() {\n      return Object.assign({}, GlobalConfig.table.scrollX, this.scrollX);\n    },\n\n    sYOpts() {\n      return Object.assign({}, GlobalConfig.table.scrollY, this.scrollY);\n    },\n\n    rowHeightMaps() {\n      return {\n        default: 48,\n        medium: 44,\n        small: 40,\n        mini: 36\n      };\n    },\n\n    columnOpts() {\n      return Object.assign({}, this.columnConfig);\n    },\n\n    resizableOpts() {\n      return Object.assign({}, GlobalConfig.table.resizableConfig, this.resizableConfig);\n    },\n\n    seqOpts() {\n      return Object.assign({\n        startIndex: 0\n      }, GlobalConfig.table.seqConfig, this.seqConfig);\n    },\n\n    radioOpts() {\n      return Object.assign({}, GlobalConfig.table.radioConfig, this.radioConfig);\n    },\n\n    checkboxOpts() {\n      return Object.assign({}, GlobalConfig.table.checkboxConfig, this.checkboxConfig);\n    },\n\n    tooltipOpts() {\n      const opts = Object.assign({\n        leaveDelay: 300\n      }, GlobalConfig.table.tooltipConfig, this.tooltipConfig);\n\n      if (opts.enterable) {\n        opts.leaveMethod = this.handleTooltipLeaveMethod;\n      }\n\n      return opts;\n    },\n\n    validTipOpts() {\n      return Object.assign({\n        isArrow: false\n      }, this.tooltipOpts);\n    },\n\n    editOpts() {\n      return Object.assign({}, GlobalConfig.table.editConfig, this.editConfig);\n    },\n\n    sortOpts() {\n      return Object.assign({\n        orders: ['asc', 'desc', null]\n      }, GlobalConfig.table.sortConfig, this.sortConfig);\n    },\n\n    filterOpts() {\n      return Object.assign({}, GlobalConfig.table.filterConfig, this.filterConfig);\n    },\n\n    mouseOpts() {\n      return Object.assign({}, GlobalConfig.table.mouseConfig, this.mouseConfig);\n    },\n\n    areaOpts() {\n      return Object.assign({}, GlobalConfig.table.areaConfig, this.areaConfig);\n    },\n\n    keyboardOpts() {\n      return Object.assign({}, GlobalConfig.table.keyboardConfig, this.keyboardConfig);\n    },\n\n    clipOpts() {\n      return Object.assign({}, GlobalConfig.table.clipConfig, this.clipConfig);\n    },\n\n    fnrOpts() {\n      return Object.assign({}, GlobalConfig.table.fnrConfig, this.fnrConfig);\n    },\n\n    hasTip() {\n      return VXETable._tooltip;\n    },\n\n    headerCtxMenu() {\n      const headerOpts = this.ctxMenuOpts.header;\n      return headerOpts && headerOpts.options ? headerOpts.options : [];\n    },\n\n    bodyCtxMenu() {\n      const bodyOpts = this.ctxMenuOpts.body;\n      return bodyOpts && bodyOpts.options ? bodyOpts.options : [];\n    },\n\n    footerCtxMenu() {\n      const footerOpts = this.ctxMenuOpts.footer;\n      return footerOpts && footerOpts.options ? footerOpts.options : [];\n    },\n\n    isCtxMenu() {\n      return !!((this.contextMenu || this.menuConfig) && isEnableConf(this.ctxMenuOpts) && (this.headerCtxMenu.length || this.bodyCtxMenu.length || this.footerCtxMenu.length));\n    },\n\n    ctxMenuOpts() {\n      return Object.assign({}, GlobalConfig.table.menuConfig, this.contextMenu, this.menuConfig);\n    },\n\n    ctxMenuList() {\n      const rest = [];\n      this.ctxMenuStore.list.forEach(list => {\n        list.forEach(item => {\n          rest.push(item);\n        });\n      });\n      return rest;\n    },\n\n    exportOpts() {\n      return Object.assign({}, GlobalConfig.table.exportConfig, this.exportConfig);\n    },\n\n    importOpts() {\n      return Object.assign({}, GlobalConfig.table.importConfig, this.importConfig);\n    },\n\n    printOpts() {\n      return Object.assign({}, GlobalConfig.table.printConfig, this.printConfig);\n    },\n\n    expandOpts() {\n      return Object.assign({}, GlobalConfig.table.expandConfig, this.expandConfig);\n    },\n\n    treeOpts() {\n      return Object.assign({}, GlobalConfig.table.treeConfig, this.treeConfig);\n    },\n\n    emptyOpts() {\n      return Object.assign({}, GlobalConfig.table.emptyRender, this.emptyRender);\n    },\n\n    cellOffsetWidth() {\n      return this.border ? Math.max(2, Math.ceil(this.scrollbarWidth / this.tableColumn.length)) : 1;\n    },\n\n    customOpts() {\n      return Object.assign({}, GlobalConfig.table.customConfig, this.customConfig);\n    },\n\n    tableBorder() {\n      const border = this.border;\n\n      if (border === true) {\n        return 'full';\n      }\n\n      if (border) {\n        return border;\n      }\n\n      return 'default';\n    },\n\n    /**\r\n     * 判断列全选的复选框是否禁用\r\n     */\n    isAllCheckboxDisabled() {\n      const tableFullData = this.tableFullData,\n            tableData = this.tableData,\n            treeConfig = this.treeConfig,\n            checkboxOpts = this.checkboxOpts;\n      const strict = checkboxOpts.strict,\n            checkMethod = checkboxOpts.checkMethod;\n\n      if (strict) {\n        if (tableData.length || tableFullData.length) {\n          if (checkMethod) {\n            if (treeConfig) {} // 暂时不支持树形结构\n            // 如果所有行都被禁用\n\n\n            return tableFullData.every(row => !checkMethod({\n              row\n            }));\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n  },\n  watch: {\n    data(value) {\n      const inited = this.inited,\n            initStatus = this.initStatus;\n      this.loadTableData(value).then(() => {\n        this.inited = true;\n        this.initStatus = true;\n\n        if (!initStatus) {\n          this.handleLoadDefaults();\n        }\n\n        if (!inited) {\n          this.handleInitDefaults();\n        }\n\n        if ((this.scrollXLoad || this.scrollYLoad) && this.expandColumn) {\n          UtilTools.warn('vxe.error.scrollErrProp', ['column.type=expand']);\n        }\n\n        this.recalculate();\n      });\n    },\n\n    staticColumns(value) {\n      this.handleColumn(value);\n    },\n\n    tableColumn() {\n      this.analyColumnWidth();\n    },\n\n    showHeader() {\n      this.$nextTick(() => {\n        this.recalculate(true).then(() => this.refreshScroll());\n      });\n    },\n\n    showFooter() {\n      this.$nextTick(() => {\n        this.recalculate(true).then(() => this.refreshScroll());\n      });\n    },\n\n    height() {\n      this.$nextTick(() => this.recalculate(true));\n    },\n\n    maxHeight() {\n      this.$nextTick(() => this.recalculate(true));\n    },\n\n    syncResize(value) {\n      if (value) {\n        handleUupdateResize(this);\n        this.$nextTick(() => {\n          handleUupdateResize(this);\n          setTimeout(() => handleUupdateResize(this));\n        });\n      }\n    },\n\n    mergeCells(value) {\n      this.clearMergeCells();\n      this.setMergeCells(value);\n    },\n\n    mergeFooterItems(value) {\n      this.clearMergeFooterItems();\n      this.setMergeFooterItems(value);\n    }\n\n  },\n\n  created() {\n    const _Object$assign = Object.assign(this, {\n      tZindex: 0,\n      elemStore: {},\n      // 存放横向 X 虚拟滚动相关的信息\n      scrollXStore: {},\n      // 存放纵向 Y 虚拟滚动相关信息\n      scrollYStore: {},\n      // 存放 tooltip 相关信息\n      tooltipStore: {},\n      // 表格宽度\n      tableWidth: 0,\n      // 表格高度\n      tableHeight: 0,\n      // 表头高度\n      headerHeight: 0,\n      // 表尾高度\n      footerHeight: 0,\n      // 当前 hover 行\n      // hoverRow: null,\n      // 最后滚动位置\n      lastScrollLeft: 0,\n      lastScrollTop: 0,\n      // 单选框属性，已选中保留的行\n      radioReserveRow: null,\n      // 复选框属性，已选中保留的行\n      checkboxReserveRowMap: {},\n      // 行数据，已展开保留的行\n      rowExpandedReserveRowMap: {},\n      // 树结构数据，已展开保留的行\n      treeExpandedReserveRowMap: {},\n      // 完整数据、条件处理后\n      tableFullData: [],\n      afterFullData: [],\n      // 收集的列配置（带分组）\n      collectColumn: [],\n      // 完整所有列（不带分组）\n      tableFullColumn: [],\n      // 渲染所有列\n      visibleColumn: [],\n      // 缓存数据集\n      fullAllDataRowMap: new Map(),\n      fullAllDataRowIdData: {},\n      fullDataRowMap: new Map(),\n      fullDataRowIdData: {},\n      fullColumnMap: new Map(),\n      fullColumnIdData: {},\n      fullColumnFieldData: {}\n    }),\n          scrollXStore = _Object$assign.scrollXStore,\n          sYOpts = _Object$assign.sYOpts,\n          scrollYStore = _Object$assign.scrollYStore,\n          data = _Object$assign.data,\n          editOpts = _Object$assign.editOpts,\n          treeOpts = _Object$assign.treeOpts,\n          treeConfig = _Object$assign.treeConfig,\n          showOverflow = _Object$assign.showOverflow;\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      if (!this.rowId && (this.checkboxOpts.reserve || this.checkboxOpts.checkRowKeys || this.radioOpts.reserve || this.radioOpts.checkRowKey || this.expandOpts.expandRowKeys || this.treeOpts.expandRowKeys)) {\n        UtilTools.warn('vxe.error.reqProp', ['row-id']);\n      }\n\n      if (this.editConfig && editOpts.showStatus && !this.keepSource) {\n        UtilTools.warn('vxe.error.reqProp', ['keep-source']);\n      }\n\n      if (treeConfig && treeOpts.line && (!this.rowKey || !showOverflow)) {\n        UtilTools.warn('vxe.error.reqProp', ['row-key | show-overflow']);\n      }\n\n      if (this.showFooter && !this.footerMethod) {\n        UtilTools.warn('vxe.error.reqProp', ['footer-method']);\n      }\n\n      if (treeConfig && this.stripe) {\n        UtilTools.warn('vxe.error.noTree', ['stripe']);\n      }\n\n      if (this.tooltipOpts.enabled) {\n        UtilTools.warn('vxe.error.delProp', ['tooltip-config.enabled', 'tooltip-config.showAll']);\n      } // 检查导入导出类型，如果自定义导入导出方法，则不校验类型\n\n\n      const exportConfig = this.exportConfig,\n            exportOpts = this.exportOpts,\n            importConfig = this.importConfig,\n            importOpts = this.importOpts;\n\n      if (importConfig && importOpts.types && !importOpts.importMethod && !XEUtils.includeArrays(VXETable.config.importTypes, importOpts.types)) {\n        UtilTools.warn('vxe.error.errProp', [`export-config.types=${importOpts.types.join(',')}`, importOpts.types.filter(type => XEUtils.includes(VXETable.config.importTypes, type)).join(',') || VXETable.config.importTypes.join(',')]);\n      }\n\n      if (exportConfig && exportOpts.types && !exportOpts.exportMethod && !XEUtils.includeArrays(VXETable.config.exportTypes, exportOpts.types)) {\n        UtilTools.warn('vxe.error.errProp', [`export-config.types=${exportOpts.types.join(',')}`, exportOpts.types.filter(type => XEUtils.includes(VXETable.config.exportTypes, type)).join(',') || VXETable.config.exportTypes.join(',')]);\n      }\n    }\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      const customOpts = this.customOpts;\n\n      if (!this.id && this.customConfig && (customOpts.storage === true || customOpts.storage && customOpts.storage.resizable || customOpts.storage && customOpts.storage.visible)) {\n        UtilTools.error('vxe.error.reqProp', ['id']);\n      }\n\n      if (this.treeConfig && this.checkboxOpts.range) {\n        UtilTools.error('vxe.error.noTree', ['checkbox-config.range']);\n      }\n\n      if (!this.handleUpdateCellAreas) {\n        if (this.clipConfig) {\n          UtilTools.warn('vxe.error.notProp', ['clip-config']);\n        }\n\n        if (this.fnrConfig) {\n          UtilTools.warn('vxe.error.notProp', ['fnr-config']);\n        }\n\n        if (this.mouseOpts.area) {\n          UtilTools.error('vxe.error.notProp', ['mouse-config.area']);\n          return;\n        }\n      }\n\n      if (this.mouseOpts.area && this.mouseOpts.selected) {\n        UtilTools.warn('vxe.error.errConflicts', ['mouse-config.area', 'mouse-config.selected']);\n      }\n\n      if (this.mouseOpts.area && this.checkboxOpts.range) {\n        UtilTools.warn('vxe.error.errConflicts', ['mouse-config.area', 'checkbox-config.range']);\n      }\n\n      if (this.treeConfig && this.mouseOpts.area) {\n        UtilTools.error('vxe.error.noTree', ['mouse-config.area']);\n      }\n    } // v4 中只支持对象类型\n\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      // 在 v3.0 中废弃 context-menu\n      if (this.contextMenu) {\n        UtilTools.warn('vxe.error.delProp', ['context-menu', 'menu-config']);\n\n        if (!XEUtils.isObject(this.contextMenu)) {\n          UtilTools.warn('vxe.error.errProp', [`table.context-menu=${this.contextMenu}`, 'table.context-menu={}']);\n        }\n      }\n\n      if (this.menuConfig && !XEUtils.isObject(this.menuConfig)) {\n        UtilTools.warn('vxe.error.errProp', [`table.menu-config=${this.menuConfig}`, 'table.menu-config={}']);\n      }\n\n      if (this.exportConfig && !XEUtils.isObject(this.exportConfig)) {\n        UtilTools.warn('vxe.error.errProp', [`table.export-config=${this.exportConfig}`, 'table.export-config={}']);\n      }\n\n      if (this.importConfig && !XEUtils.isObject(this.importConfig)) {\n        UtilTools.warn('vxe.error.errProp', [`table.import-config=${this.importConfig}`, 'table.import-config={}']);\n      }\n\n      if (this.printConfig && !XEUtils.isObject(this.printConfig)) {\n        UtilTools.warn('vxe.error.errProp', [`table.print-config=${this.printConfig}`, 'table.print-config={}']);\n      }\n\n      if (this.treeConfig && !XEUtils.isObject(this.treeConfig)) {\n        UtilTools.warn('vxe.error.errProp', [`table.tree-config=${this.treeConfig}`, 'table.tree-config={}']);\n      }\n\n      if (this.customConfig && !XEUtils.isObject(this.customConfig)) {\n        UtilTools.warn('vxe.error.errProp', [`table.custom-config=${this.customConfig}`, 'table.custom-config={}']);\n      }\n\n      if (this.editConfig && !XEUtils.isObject(this.editConfig)) {\n        UtilTools.warn('vxe.error.errProp', [`table.edit-config=${this.editConfig}`, 'table.edit-config={}']);\n      }\n\n      if (this.emptyRender && !XEUtils.isObject(this.emptyRender)) {\n        UtilTools.warn('vxe.error.errProp', [`table.empty-render=${this.emptyRender}`, 'table.empty-render={}']);\n      }\n    } // 检查是否有安装需要的模块\n\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      if (this.editConfig && !this._insert) {\n        UtilTools.error('vxe.error.reqModule', ['Edit']);\n      }\n\n      if (this.editRules && !this._validate) {\n        UtilTools.error('vxe.error.reqModule', ['Validator']);\n      }\n\n      if ((this.checkboxOpts.range || this.keyboardConfig || this.mouseConfig) && !this.triggerCellMousedownEvent) {\n        UtilTools.error('vxe.error.reqModule', ['Keyboard']);\n      }\n\n      if ((this.printConfig || this.importConfig || this.exportConfig) && !this._exportData) {\n        UtilTools.error('vxe.error.reqModule', ['Export']);\n      }\n    }\n\n    Object.assign(scrollYStore, {\n      startIndex: 0,\n      endIndex: 0,\n      visibleSize: 0,\n      adaptive: sYOpts.adaptive !== false\n    });\n    Object.assign(scrollXStore, {\n      startIndex: 0,\n      endIndex: 0,\n      visibleSize: 0\n    });\n    this.loadTableData(data).then(() => {\n      if (data && data.length) {\n        this.inited = true;\n        this.initStatus = true;\n        this.handleLoadDefaults();\n        this.handleInitDefaults();\n      }\n\n      this.updateStyle();\n    });\n    GlobalEvent.on(this, 'paste', this.handleGlobalPasteEvent);\n    GlobalEvent.on(this, 'copy', this.handleGlobalCopyEvent);\n    GlobalEvent.on(this, 'cut', this.handleGlobalCutEvent);\n    GlobalEvent.on(this, 'mousedown', this.handleGlobalMousedownEvent);\n    GlobalEvent.on(this, 'blur', this.handleGlobalBlurEvent);\n    GlobalEvent.on(this, 'mousewheel', this.handleGlobalMousewheelEvent);\n    GlobalEvent.on(this, 'keydown', this.handleGlobalKeydownEvent);\n    GlobalEvent.on(this, 'resize', this.handleGlobalResizeEvent);\n    GlobalEvent.on(this, 'contextmenu', this.handleGlobalContextmenuEvent);\n    this.preventEvent(null, 'created');\n  },\n\n  mounted() {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      const $listeners = this.$listeners;\n\n      if (!this.menuConfig && ($listeners['menu-click'] || $listeners['cell-menu'] || $listeners['header-cell-menu'] || $listeners['footer-cell-menu'])) {\n        UtilTools.warn('vxe.error.reqProp', ['menu-config']);\n      }\n\n      if (!this.tooltipConfig && ($listeners['cell-mouseenter'] || $listeners['cell-mouseleave'])) {\n        UtilTools.warn('vxe.error.reqProp', ['tooltip-config']);\n      }\n    }\n\n    if (this.autoResize) {\n      const resizeObserver = createResizeEvent(() => this.recalculate(true));\n      resizeObserver.observe(this.$el);\n      resizeObserver.observe(this.getParentElem());\n      this.$resize = resizeObserver;\n    }\n\n    this.preventEvent(null, 'mounted');\n  },\n\n  activated() {\n    this.recalculate().then(() => this.refreshScroll());\n    this.preventEvent(null, 'activated');\n  },\n\n  deactivated() {\n    this.preventEvent(null, 'deactivated');\n  },\n\n  beforeDestroy() {\n    if (this.$resize) {\n      this.$resize.disconnect();\n    }\n\n    this.closeFilter();\n    this.closeMenu();\n    this.preventEvent(null, 'beforeDestroy');\n  },\n\n  destroyed() {\n    GlobalEvent.off(this, 'paste');\n    GlobalEvent.off(this, 'copy');\n    GlobalEvent.off(this, 'cut');\n    GlobalEvent.off(this, 'mousedown');\n    GlobalEvent.off(this, 'blur');\n    GlobalEvent.off(this, 'mousewheel');\n    GlobalEvent.off(this, 'keydown');\n    GlobalEvent.off(this, 'resize');\n    GlobalEvent.off(this, 'contextmenu');\n    this.preventEvent(null, 'destroyed');\n  },\n\n  render(h) {\n    const _e = this._e,\n          tId = this.tId,\n          tableData = this.tableData,\n          tableColumn = this.tableColumn,\n          tableGroupColumn = this.tableGroupColumn,\n          isGroup = this.isGroup,\n          loading = this.loading,\n          stripe = this.stripe,\n          showHeader = this.showHeader,\n          height = this.height,\n          tableBorder = this.tableBorder,\n          treeOpts = this.treeOpts,\n          treeConfig = this.treeConfig,\n          mouseConfig = this.mouseConfig,\n          mouseOpts = this.mouseOpts,\n          vSize = this.vSize,\n          validOpts = this.validOpts,\n          showFooter = this.showFooter,\n          overflowX = this.overflowX,\n          overflowY = this.overflowY,\n          scrollXLoad = this.scrollXLoad,\n          scrollYLoad = this.scrollYLoad,\n          scrollbarHeight = this.scrollbarHeight,\n          highlightCell = this.highlightCell,\n          highlightHoverRow = this.highlightHoverRow,\n          highlightHoverColumn = this.highlightHoverColumn,\n          editConfig = this.editConfig,\n          validTipOpts = this.validTipOpts,\n          tooltipOpts = this.tooltipOpts,\n          initStore = this.initStore,\n          columnStore = this.columnStore,\n          filterStore = this.filterStore,\n          ctxMenuStore = this.ctxMenuStore,\n          ctxMenuOpts = this.ctxMenuOpts,\n          footerTableData = this.footerTableData,\n          hasTip = this.hasTip;\n    const leftList = columnStore.leftList,\n          rightList = columnStore.rightList;\n    return h('div', {\n      class: ['vxe-table', 'vxe-table--render-default', `tid_${tId}`, vSize ? `size--${vSize}` : '', `border--${tableBorder}`, {\n        'vxe-editable': !!editConfig,\n        'cell--highlight': highlightCell,\n        'cell--selected': mouseConfig && mouseOpts.selected,\n        'cell--area': mouseConfig && mouseOpts.area,\n        'row--highlight': highlightHoverRow,\n        'column--highlight': highlightHoverColumn,\n        'is--header': showHeader,\n        'is--footer': showFooter,\n        'is--group': isGroup,\n        'is--tree-line': treeConfig && treeOpts.line,\n        'is--fixed-left': leftList.length,\n        'is--fixed-right': rightList.length,\n        'is--animat': !!this.animat,\n        'is--round': this.round,\n        'is--stripe': !treeConfig && stripe,\n        'is--loading': loading,\n        'is--empty': !loading && !tableData.length,\n        'is--scroll-y': overflowY,\n        'is--scroll-x': overflowX,\n        'is--virtual-x': scrollXLoad,\n        'is--virtual-y': scrollYLoad\n      }],\n      on: {\n        keydown: this.keydownEvent\n      }\n    }, [\n    /**\r\n     * 隐藏列\r\n     */\n    h('div', {\n      class: 'vxe-table-slots',\n      ref: 'hideColumn'\n    }, this.$slots.default), h('div', {\n      class: 'vxe-table--render-wrapper'\n    }, [h('div', {\n      class: 'vxe-table--main-wrapper'\n    }, [\n    /**\r\n     * 表头\r\n     */\n    showHeader ? h('vxe-table-header', {\n      ref: 'tableHeader',\n      props: {\n        tableData,\n        tableColumn,\n        tableGroupColumn,\n        size: vSize\n      }\n    }) : _e(),\n    /**\r\n     * 表体\r\n     */\n    h('vxe-table-body', {\n      ref: 'tableBody',\n      props: {\n        tableData,\n        tableColumn,\n        size: vSize\n      }\n    }),\n    /**\r\n     * 表尾\r\n     */\n    showFooter ? h('vxe-table-footer', {\n      ref: 'tableFooter',\n      props: {\n        footerTableData,\n        tableColumn,\n        size: vSize\n      }\n    }) : _e()]), h('div', {\n      class: 'vxe-table--fixed-wrapper'\n    }, [\n    /**\r\n     * 左侧固定区域\r\n     */\n    leftList && leftList.length && overflowX ? renderFixed(h, this, 'left') : _e(),\n    /**\r\n     * 右侧固定区域\r\n     */\n    rightList && rightList.length && overflowX ? renderFixed(h, this, 'right') : _e()])]),\n    /**\r\n     * 空数据\r\n     */\n    h('div', {\n      ref: 'emptyPlaceholder',\n      class: 'vxe-table--empty-placeholder'\n    }, [h('div', {\n      class: 'vxe-table--empty-content'\n    }, renderEmptyContenet(h, this))]),\n    /**\r\n     * 边框线\r\n     */\n    h('div', {\n      class: 'vxe-table--border-line',\n      style: {\n        display: 'none' //加\n\n      }\n    }),\n    /**\r\n     * 列宽线\r\n     */\n    h('div', {\n      class: 'vxe-table--resizable-bar',\n      style: overflowX ? {\n        'padding-bottom': `${scrollbarHeight}px`\n      } : null,\n      ref: 'resizeBar'\n    }),\n    /**\r\n     * 加载中\r\n     */\n    h('div', {\n      class: ['vxe-table--loading vxe-loading', {\n        'is--visible': loading\n      }]\n    }, [h('div', {\n      class: 'vxe-loading--spinner'\n    })]),\n    /**\r\n     * 筛选\r\n     */\n    initStore.filter ? h('vxe-table-filter', {\n      ref: 'filterWrapper',\n      props: {\n        filterStore\n      }\n    }) : _e(),\n    /**\r\n     * 导入\r\n     */\n    initStore.import && this.importConfig ? h('vxe-import-panel', {\n      props: {\n        defaultOptions: this.importParams,\n        storeData: this.importStore\n      }\n    }) : _e(),\n    /**\r\n     * 导出/打印\r\n     */\n    initStore.export && (this.exportConfig || this.printConfig) ? h('vxe-export-panel', {\n      props: {\n        defaultOptions: this.exportParams,\n        storeData: this.exportStore\n      }\n    }) : _e(),\n    /**\r\n     * 快捷菜单\r\n     */\n    ctxMenuStore.visible && this.isCtxMenu ? h('vxe-table-context-menu', {\n      ref: 'ctxWrapper',\n      props: {\n        ctxMenuStore,\n        ctxMenuOpts\n      }\n    }) : _e(),\n    /**\r\n     * 通用提示\r\n     */\n    hasTip ? h('vxe-tooltip', {\n      ref: 'commTip',\n      props: {\n        isArrow: false,\n        enterable: false\n      }\n    }) : _e(),\n    /**\r\n     * 工具提示\r\n     */\n    hasTip ? h('vxe-tooltip', {\n      ref: 'tooltip',\n      props: tooltipOpts\n    }) : _e(),\n    /**\r\n     * 校验提示\r\n     */\n    hasTip && this.editRules && validOpts.showMessage && (validOpts.message === 'default' ? !height : validOpts.message === 'tooltip') ? h('vxe-tooltip', {\n      ref: 'validTip',\n      class: 'vxe-table--valid-error',\n      props: validOpts.message === 'tooltip' || tableData.length === 1 ? validTipOpts : null\n    }) : _e()]);\n  },\n\n  methods\n};",null]}