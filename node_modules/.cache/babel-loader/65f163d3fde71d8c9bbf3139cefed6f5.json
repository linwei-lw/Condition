{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\common\\cache\\CacheAlarm.js","dependencies":[{"path":"D:\\cdRule\\src\\common\\cache\\CacheAlarm.js","mtime":1672989806284},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport { arrayToMap } from '@/common/util/Arrays.js';\nimport { arrayToTree } from '@/common/util/Trees.js';\nimport { objClone } from '@/common/util/Objects.js';\nimport { arraySort, compare } from '@/common/util/Arrays.js'; //========================================================================================================\n\nvar NAMES, COUNTS;\nexport function initAlarm(names, counts) {\n  // console.log(names,counts);\n  NAMES = names;\n  setAlarmCount(counts);\n}\nexport function setAlarmCount(result) {\n  // console.log(result);\n  if (!result) return;\n  COUNTS = result; //result.carTotal = result['00'];\n  //result.total = result['0'];\n\n  FAVS.list && FAVS.list.forEach(function (type) {\n    return type.count = result[type.id];\n  });\n}\nexport function getAlarmCount() {\n  return COUNTS;\n}\nexport function getAlarmNames() {\n  // console.log(NAMES);\n  return NAMES;\n} //========================================================================================================\n\nvar TYPE = {\n  list: null,\n  map: null,\n  tree: null,\n  root: null\n};\n/**\r\n * 获取报警类型\r\n * @param {Function} callback 回调函数({list:x,map:x,tree:x})\r\n */\n\nexport function getAlarmType(callback) {\n  if (TYPE.list) {\n    return callback ? callback(TYPE) : TYPE;\n  }\n\n  var fun = function fun(result) {\n    // console.log(result);\n    TYPE.list = result || [];\n    TYPE.map = arrayToMap(TYPE.list, \"id\");\n    TYPE.root = {\n      name: $_L.get('报警类型'),\n      id: '0',\n      pid: ''\n    };\n    TYPE.tree = arrayToTree(TYPE.list, \"id\", \"pid\", TYPE.map, TYPE.root);\n    return callback ? callback(TYPE) : TYPE;\n  };\n\n  return callback ? window.$_main.http.get('h5/sys/auth?getAlarmList').then(fun) : fun(window.$_main.http.syncGet('h5/sys/auth?getAlarmList'));\n} //========================================================================================================\n\nvar FAVS = {\n  list: null,\n  map: null,\n  tree: null,\n  root: null\n};\n/**\r\n * 获取关注报警类型\r\n * @param {Function} callback 回调函数({list:x,map:x})\r\n */\n\nexport function getFavAlarmType(callback) {\n  if (FAVS.list) {\n    return callback ? callback(FAVS) : FAVS;\n  }\n\n  var fun = function fun(result) {\n    !TYPE.map && getAlarmType();\n    result = result || [];\n    var list = [];\n    result.forEach(function (id) {\n      return TYPE.map[id] && list.push(TYPE.map[id]);\n    });\n    FAVS.list = list;\n    FAVS.map = arrayToMap(FAVS.list, \"id\");\n    setFavRoot();\n    setAlarmCount(COUNTS);\n    return callback ? callback(FAVS) : FAVS;\n  };\n\n  return callback ? window.$_main.http.get('h5/mnt/alarm?getFavTypeIds').then(fun) : fun(window.$_main.http.syncGet('h5/mnt/alarm?getFavTypeIds'));\n}\nexport function setFavAlarmType(typeIds) {\n  !TYPE.map && getAlarmType();\n  var list = [];\n  typeIds.forEach(function (id) {\n    return TYPE.map[id] && list.push(TYPE.map[id]);\n  });\n  FAVS.root = {\n    name: $_L.get('关注报警'),\n    id: '0',\n    pid: ''\n  };\n  FAVS.list = setList(list, 'fav_parent', 'fav_children');\n  FAVS.map = arrayToMap(FAVS.list, \"id\");\n  setFavRoot();\n  setAlarmCount(COUNTS);\n\n  for (var treeId in ALL_TREES) {\n    var tree = ALL_TREES[treeId];\n    tree.model == 'fav' && tree.getTree().reset(FAVS.root);\n  }\n}\n\nfunction setList(list, excludeKeysOne, excludeKeysTwo) {\n  var array = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  list = list || [];\n  list.forEach(function (el) {\n    if (el) {\n      el[excludeKeysOne] && delete el[excludeKeysOne];\n      el[excludeKeysTwo] && delete el[excludeKeysTwo];\n\n      if (el.children) {\n        setList(el.children, excludeKeysOne, excludeKeysTwo, array);\n      }\n\n      if (el.parent) {\n        el.parent[excludeKeysOne] && delete el.parent[excludeKeysOne];\n        el.parent[excludeKeysTwo] && delete el.parent[excludeKeysTwo];\n      }\n\n      array.push(el);\n    }\n  });\n  return array;\n}\n\nfunction setFavRoot() {\n  !TYPE.map && getAlarmType();\n  FAVS.root = FAVS.root || {\n    name: $_L.get('关注报警'),\n    id: '0',\n    pid: ''\n  };\n\n  var list = _toConsumableArray(FAVS.list),\n      set = {};\n\n  FAVS.list.forEach(function (type) {\n    if (set[type.pid]) return;\n    set[type.pid] = true;\n    TYPE.map[type.pid] && list.push(TYPE.map[type.pid]);\n  });\n  list = _toConsumableArray(new Set(list));\n  arraySort(list, 'seq');\n  FAVS.tree = arrayToTree(list, \"id\", \"pid\", null, FAVS.root, 'fav_children', 'fav_parent');\n  FAVS.root.children = FAVS.root.fav_children;\n}\n\nexport function hasFavAlarmType(id) {\n  !FAVS.map && getFavAlarmType();\n  return !!FAVS.map[id];\n} //========================================================================================================\n\nvar GROUPS = {\n  root: null\n};\nexport function getGroupRoot() {\n  if (GROUPS.root) return GROUPS.root;\n  GROUPS.root = {\n    id: '0',\n    pid: '',\n    name: $_L.get('分组报警')\n  };\n  return setGroupChildren();\n}\nexport function resetGroupTree() {\n  if (!GROUPS.root) return;\n  setGroupChildren();\n\n  for (var treeId in ALL_TREES) {\n    var tree = ALL_TREES[treeId];\n    tree.model == 'group' && tree.getTree().reset(GROUPS.root);\n  }\n}\n\nfunction setGroupChildren() {\n  !TYPE.map && getAlarmType();\n  GROUPS.root.group_children = GROUPS.root.children = []; //   let groups = window.$_cache.userCfg.GROUP_ALARM;//[name|typeId,typeId...]\n\n  var groups;\n  groups && (groups = JSON.parse(groups));\n\n  if (groups) {\n    groups.forEach(function (str) {\n      str = str.split('|');\n      var group = {\n        name: str[0],\n        group_parent: GROUPS.root,\n        pid: '0'\n      };\n      group.group_children = group.children = [];\n      str = str[1].split(',');\n\n      for (var i = 0; i < str.length; i++) {\n        TYPE.map[str[i]] && group.group_children.push(TYPE.map[str[i]]);\n      }\n\n      group.group_children.forEach(function (o) {\n        return o.group_parent = group;\n      });\n      GROUPS.root.group_children.push(group);\n    });\n    GROUPS.root.group_children.sort(function (a, b) {\n      return compare(a, b, 'name');\n    });\n  }\n\n  return GROUPS.root;\n} //=======================================================================================================\n\n\nvar ALL_TREES = {};\nexport function onAlarmTreeAdd(treeId, tree) {\n  ALL_TREES[treeId] = tree;\n}\nexport function onAlarmTreeRemove(treeId) {\n  delete ALL_TREES[treeId];\n}",{"version":3,"sources":["D:\\cdRule\\src\\common\\cache\\CacheAlarm.js"],"names":["NAMES","setAlarmCount","COUNTS","FAVS","type","result","TYPE","list","map","tree","root","callback","fun","arrayToMap","name","$_L","id","pid","arrayToTree","window","getAlarmType","setFavRoot","typeIds","setList","ALL_TREES","array","el","set","arraySort","getFavAlarmType","GROUPS","setGroupChildren","groups","JSON","str","group","group_parent","i","o","compare"],"mappings":"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","sourcesContent":["import { arrayToMap } from '@/common/util/Arrays.js';\r\nimport { arrayToTree } from '@/common/util/Trees.js';\r\nimport { objClone } from '@/common/util/Objects.js';\r\nimport { arraySort, compare } from '@/common/util/Arrays.js';\r\n\r\n//========================================================================================================\r\n\r\nlet NAMES, COUNTS;\r\nexport function initAlarm(names, counts) {\r\n\t// console.log(names,counts);\r\n\tNAMES = names;\r\n\tsetAlarmCount(counts);\r\n}\r\n\r\nexport function setAlarmCount(result) {\r\n\t// console.log(result);\r\n\tif (!result) return;\r\n\tCOUNTS = result; \r\n\t//result.carTotal = result['00'];\r\n\t//result.total = result['0'];\r\n\tFAVS.list && FAVS.list.forEach(type => type.count = result[type.id]);\r\n}\r\n\r\nexport function getAlarmCount() {\r\n\treturn COUNTS;\r\n}\r\n\r\nexport function getAlarmNames() {\r\n\t// console.log(NAMES);\r\n\treturn NAMES;\r\n}\r\n\r\n//========================================================================================================\r\n\r\nlet TYPE = {list:null, map:null, tree:null, root:null};\r\n/**\r\n * 获取报警类型\r\n * @param {Function} callback 回调函数({list:x,map:x,tree:x})\r\n */\r\nexport function getAlarmType(callback) {\r\n\tif (TYPE.list) {\r\n\t\treturn callback ? callback(TYPE) : TYPE;\r\n\t}\r\n\tlet fun = result => {\r\n\t\t// console.log(result);\r\n\t\tTYPE.list = result || [];\r\n\t\tTYPE.map = arrayToMap(TYPE.list, \"id\");\r\n\t\tTYPE.root = {name: $_L.get('报警类型'), id: '0',pid:''};\r\n\t\tTYPE.tree = arrayToTree(TYPE.list, \"id\", \"pid\", TYPE.map, TYPE.root);\r\n\t\treturn callback ? callback(TYPE) : TYPE;\r\n\t}\r\n\treturn callback ?  window.$_main.http.get('h5/sys/auth?getAlarmList').then(fun) : fun( window.$_main.http.syncGet('h5/sys/auth?getAlarmList'));\r\n}\r\n\r\n//========================================================================================================\r\n\r\nlet FAVS = {list:null, map:null, tree:null, root:null};\r\n/**\r\n * 获取关注报警类型\r\n * @param {Function} callback 回调函数({list:x,map:x})\r\n */\r\nexport function getFavAlarmType(callback) {\r\n\tif (FAVS.list) {\r\n\t\treturn callback ? callback(FAVS) : FAVS;\r\n\t}\r\n\tlet fun = result => {\r\n\t\t!TYPE.map && getAlarmType();\r\n\t\tresult = result || [];\r\n\t\tlet list = [];\r\n\t\tresult.forEach(id => TYPE.map[id] && list.push(TYPE.map[id]));\r\n\t\tFAVS.list = list;\r\n\t\tFAVS.map = arrayToMap(FAVS.list, \"id\");\r\n\t\tsetFavRoot();\r\n\t\tsetAlarmCount(COUNTS);\r\n\t\treturn callback ? callback(FAVS) : FAVS;\r\n\t}\r\n\treturn callback ? window.$_main.http.get('h5/mnt/alarm?getFavTypeIds').then(fun) : fun(window.$_main.http.syncGet('h5/mnt/alarm?getFavTypeIds'));\r\n}\r\n\r\nexport function setFavAlarmType(typeIds) {\r\n\t!TYPE.map && getAlarmType();\r\n\tlet list = [];\r\n\ttypeIds.forEach(id=>TYPE.map[id] && list.push(TYPE.map[id]));\r\n\tFAVS.root = {name: $_L.get('关注报警'), id: '0', pid:''};\r\n\tFAVS.list = setList(list, 'fav_parent','fav_children');\r\n\tFAVS.map = arrayToMap(FAVS.list, \"id\");\r\n\tsetFavRoot();\r\n\tsetAlarmCount(COUNTS);\r\n\t\r\n\tfor (let treeId in ALL_TREES) {\r\n      let tree = ALL_TREES[treeId];\r\n      tree.model=='fav' && tree.getTree().reset(FAVS.root);\r\n    }\r\n}\r\n\r\nfunction setList(list,excludeKeysOne,excludeKeysTwo,array=[]){\r\n\tlist=list||[];\r\n\tlist.forEach(el=>{\r\n\t\tif(el){\r\n\t\t\tel[excludeKeysOne]&&delete el[excludeKeysOne];\r\n\t\t\tel[excludeKeysTwo]&&delete el[excludeKeysTwo];\r\n\t\t\tif(el.children){\r\n\t\t\t\tsetList(el.children,excludeKeysOne,excludeKeysTwo,array);\r\n\t\t\t}\r\n\t\t\tif(el.parent){\r\n\t\t\t\tel.parent[excludeKeysOne]&&delete el.parent[excludeKeysOne];\r\n\t\t\t\tel.parent[excludeKeysTwo]&&delete el.parent[excludeKeysTwo];\r\n\t\t\t}\r\n\t\t\tarray.push(el);\r\n\t\t}\r\n\t});\r\n\treturn array;\r\n}\r\n\r\nfunction setFavRoot() {\r\n\t!TYPE.map && getAlarmType();\r\n\tFAVS.root = FAVS.root || {name: $_L.get('关注报警'), id: '0', pid:''};\r\n\tlet list = [...FAVS.list], set = {};\r\n\tFAVS.list.forEach(type => {\r\n\t\tif (set[type.pid]) return;\r\n\t\tset[type.pid] = true;\r\n\t\tTYPE.map[type.pid] && list.push(TYPE.map[type.pid]);\r\n\t});\r\n\tlist = [...new Set(list)];\r\n\tarraySort(list, 'seq');\r\n\tFAVS.tree = arrayToTree(list, \"id\", \"pid\", null, FAVS.root, 'fav_children', 'fav_parent');\r\n\tFAVS.root.children = FAVS.root.fav_children;\r\n}\r\n\r\nexport function hasFavAlarmType(id) {\r\n\t!FAVS.map && getFavAlarmType();\r\n\treturn !!FAVS.map[id];\r\n}\r\n\r\n//========================================================================================================\r\n\r\nlet GROUPS = {root: null};\r\n\r\nexport function getGroupRoot() {\r\n\tif (GROUPS.root) return GROUPS.root;\r\n\tGROUPS.root = {id:'0', pid:'', name: $_L.get('分组报警')};\r\n\treturn setGroupChildren();\r\n}\r\n\r\nexport function resetGroupTree() {\r\n  if (!GROUPS.root) return;\r\n  setGroupChildren();\r\n  for (let treeId in ALL_TREES) {\r\n    let tree = ALL_TREES[treeId];\r\n    tree.model=='group' && tree.getTree().reset(GROUPS.root);\r\n  }\r\n}\r\n\r\nfunction setGroupChildren() {\r\n  !TYPE.map && getAlarmType();\r\n  GROUPS.root.group_children = GROUPS.root.children = [];\r\n//   let groups = window.$_cache.userCfg.GROUP_ALARM;//[name|typeId,typeId...]\r\n\tlet groups;\r\n  groups && (groups = JSON.parse(groups));\r\n  if (groups) {\r\n    groups.forEach(str => {\r\n      str = str.split('|');\r\n      let group = {name:str[0], group_parent:GROUPS.root, pid:'0'};\r\n      group.group_children = group.children = [];\r\n      str = str[1].split(',');\r\n      for (let i=0; i<str.length; i++) {\r\n        TYPE.map[str[i]] && group.group_children.push(TYPE.map[str[i]]);\r\n      }\r\n      group.group_children.forEach(o => o.group_parent=group);\r\n      GROUPS.root.group_children.push(group);\r\n    });\r\n    GROUPS.root.group_children.sort((a,b) => compare(a,b,'name'));\r\n  }\r\n  return GROUPS.root;\r\n}\r\n\r\n//=======================================================================================================\r\n\r\nlet ALL_TREES = {};\r\n\r\nexport function onAlarmTreeAdd(treeId, tree) {\r\n\tALL_TREES[treeId] = tree;\r\n}\r\n\r\nexport function onAlarmTreeRemove(treeId) {\r\n\tdelete ALL_TREES[treeId];\r\n}\r\n"]}]}