{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Tree\\jquery.ztree.core.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Tree\\jquery.ztree.core.js","mtime":1673402177014},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _typeof from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.function.name\";\n/*\n * JQuery zTree core v3.5.40\n * http://treejs.cn/\n *\n * Copyright (c) 2010 Hunter.z\n *\n * Licensed same as jquery - MIT License\n * http://www.opensource.org/licenses/mit-license.php\n *\n * email: hunter.z@263.net\n * Date: 2019-01-18\n */\n\n(function (_$) {\n  var settings = {},\n      roots = {},\n      caches = {},\n      _consts = {\n    className: {\n      BUTTON: \"button\",\n      LEVEL: \"level\",\n      ICO_LOADING: \"ico_loading\",\n      SWITCH: \"switch\",\n      NAME: 'node_name'\n    },\n    event: {\n      NODECREATED: \"ztree_nodeCreated\",\n      CLICK: \"ztree_click\",\n      EXPAND: \"ztree_expand\",\n      COLLAPSE: \"ztree_collapse\",\n      ASYNC_SUCCESS: \"ztree_async_success\",\n      ASYNC_ERROR: \"ztree_async_error\",\n      REMOVE: \"ztree_remove\",\n      SELECTED: \"ztree_selected\",\n      UNSELECTED: \"ztree_unselected\"\n    },\n    id: {\n      DIV: '_div',\n      A: \"_a\",\n      ICON: \"_ico\",\n      SPAN: \"_span\",\n      SWITCH: \"_switch\",\n      UL: \"_ul\"\n    },\n    line: {\n      ROOT: \"root\",\n      ROOTS: \"roots\",\n      CENTER: \"center\",\n      BOTTOM: \"bottom\",\n      NOLINE: \"noline\",\n      LINE: \"line\"\n    },\n    folder: {\n      OPEN: \"open\",\n      CLOSE: \"close\",\n      DOCU: \"docu\"\n    }\n  },\n      _setting = {\n    treeId: \"\",\n    treeObj: null,\n    view: {\n      addDiyDom: null,\n      dblClickExpand: true,\n      expandSpeed: \"\",\n      //fast\n      nameIsHTML: false,\n      showLine: true,\n      txtSelectedEnable: false,\n      nameFunction: null,\n      iconUrlFunction: null,\n      iconCssFunction: null,\n      titleFunction: null,\n      hideFunction: null\n    },\n    data: {\n      key: {\n        name: \"name\",\n        parent: \"parent\",\n        children: \"children\"\n      },\n      keep: {\n        parent: false,\n        leaf: false\n      }\n    },\n    async: {\n      enable: false,\n      contentType: \"application/x-www-form-urlencoded\",\n      type: \"post\",\n      dataType: \"text\",\n      headers: {},\n      xhrFields: {},\n      url: \"\",\n      autoParam: [],\n      otherParam: [],\n      dataFilter: null\n    },\n    callback: {\n      beforeAsync: null,\n      beforeClick: null,\n      beforeDblClick: null,\n      beforeRightClick: null,\n      beforeMouseDown: null,\n      beforeMouseUp: null,\n      beforeExpand: null,\n      beforeCollapse: null,\n      beforeRemove: null,\n      onAsyncError: null,\n      onAsyncSuccess: null,\n      onNodeCreated: null,\n      onClick: null,\n      onDblClick: null,\n      onRightClick: null,\n      onMouseDown: null,\n      onMouseUp: null,\n      onExpand: null,\n      onCollapse: null,\n      onRemove: null,\n      onMouseOver: null,\n      onMouseOut: null\n    }\n  },\n      _initRoot = function _initRoot(setting) {\n    var r = data.getRoot(setting);\n\n    if (!r) {\n      r = {};\n      data.setRoot(setting, r);\n    }\n\n    r[setting.data.key.children] = [];\n    r.expandTriggerFlag = false;\n    r.curSelectedList = [];\n    r.noSelection = true;\n    r.createdNodes = [];\n    r.zId = r.zId || 0;\n    r._ver = new Date().getTime();\n  },\n      _initCache = function _initCache(setting) {\n    var c = data.getCache(setting);\n    !c && data.setCache(setting, c = {});\n    c.nodes = [];\n  },\n      _bindEvent = function _bindEvent(setting) {\n    var o = setting.treeObj,\n        c = consts.event;\n    o.bind(c.NODECREATED, function (event, node) {\n      tools.apply(setting.callback.onNodeCreated, [node, event]);\n    });\n    o.bind(c.CLICK, function (event, srcEvent, node) {\n      tools.apply(setting.callback.onClick, [node, srcEvent]);\n    });\n    o.bind(c.EXPAND, function (event, node) {\n      tools.apply(setting.callback.onExpand, [node, event]);\n    });\n    o.bind(c.COLLAPSE, function (event, node) {\n      tools.apply(setting.callback.onCollapse, [node, event]);\n    });\n    o.bind(c.ASYNC_SUCCESS, function (event, node, msg) {\n      tools.apply(setting.callback.onAsyncSuccess, [node, event, msg]);\n    });\n    o.bind(c.ASYNC_ERROR, function (event, node, XMLHttpRequest, textStatus, errorThrown) {\n      tools.apply(setting.callback.onAsyncError, [node, event, XMLHttpRequest, textStatus, errorThrown]);\n    });\n    o.bind(c.REMOVE, function (event, node) {\n      tools.apply(setting.callback.onRemove, [node, event]);\n    });\n    o.bind(c.SELECTED, function (event, node) {\n      tools.apply(setting.callback.onSelected, [node, event]);\n    });\n    o.bind(c.UNSELECTED, function (event, node) {\n      tools.apply(setting.callback.onUnSelected, [node, event]);\n    });\n  },\n      _unbindEvent = function _unbindEvent(setting) {\n    var o = setting.treeObj,\n        c = consts.event;\n    o.unbind(c.NODECREATED).unbind(c.CLICK).unbind(c.EXPAND).unbind(c.COLLAPSE).unbind(c.ASYNC_SUCCESS).unbind(c.ASYNC_ERROR).unbind(c.REMOVE).unbind(c.SELECTED).unbind(c.UNSELECTED);\n  },\n      _eventProxy = function _eventProxy(event) {\n    var target = event.target,\n        setting = data.getSetting(event.data.treeId),\n        tId = \"\",\n        node = null,\n        nodeEventType = \"\",\n        treeEventType = \"\",\n        nodeEventCallback = null,\n        treeEventCallback = null,\n        tmp = null;\n\n    if (tools.eqs(event.type, \"mousedown\")) {\n      treeEventType = \"mousedown\";\n    } else if (tools.eqs(event.type, \"mouseup\")) {\n      treeEventType = \"mouseup\";\n    } else if (tools.eqs(event.type, \"mouseover\")) {\n      treeEventType = \"mouseover\";\n    } else if (tools.eqs(event.type, \"mouseout\")) {\n      treeEventType = \"mouseout\";\n    } else if (tools.eqs(event.type, \"contextmenu\")) {\n      treeEventType = \"contextmenu\";\n    } else if (tools.eqs(event.type, \"click\")) {\n      if (tools.eqs(target.tagName, \"span\") && target.getAttribute(\"treeNode\" + consts.id.SWITCH) !== null) {\n        tId = tools.getNodeMainDom(target).id;\n        nodeEventType = \"switchNode\";\n      } else {\n        tmp = tools.getMDom(setting, target, [{\n          tagName: \"div\",\n          attrName: \"treeNode\" + consts.id.DIV\n        }]);\n\n        if (tmp) {\n          tId = tools.getNodeMainDom(tmp).id;\n          nodeEventType = \"clickNode\";\n        }\n      }\n    } else if (tools.eqs(event.type, \"dblclick\")) {\n      treeEventType = \"dblclick\";\n      tmp = tools.getMDom(setting, target, [{\n        tagName: \"div\",\n        attrName: \"treeNode\" + consts.id.DIV\n      }]);\n\n      if (tmp) {\n        tId = tools.getNodeMainDom(tmp).id;\n        nodeEventType = \"switchNode\";\n      }\n    }\n\n    if (treeEventType.length > 0 && tId.length == 0) {\n      tmp = tools.getMDom(setting, target, [{\n        tagName: \"div\",\n        attrName: \"treeNode\" + consts.id.DIV\n      }]);\n\n      if (tmp) {\n        tId = tools.getNodeMainDom(tmp).id;\n      }\n    } // event to node\n\n\n    if (tId.length > 0) {\n      node = data.getNodeCache(setting, tId);\n\n      switch (nodeEventType) {\n        case \"switchNode\":\n          if (node == null || !node[setting.treeId].isParent) {\n            nodeEventType = \"\";\n          } else if (tools.eqs(event.type, \"click\") || tools.eqs(event.type, \"dblclick\") && tools.apply(setting.view.dblClickExpand, [node], setting.view.dblClickExpand)) {\n            nodeEventCallback = handler.onSwitchNode;\n          } else {\n            nodeEventType = \"\";\n          }\n\n          break;\n\n        case \"clickNode\":\n          nodeEventCallback = handler.onClickNode;\n          break;\n      }\n    } // event to zTree\n\n\n    switch (treeEventType) {\n      case \"mousedown\":\n        treeEventCallback = handler.onZTreeMousedown;\n        break;\n\n      case \"mouseup\":\n        treeEventCallback = handler.onZTreeMouseup;\n        break;\n\n      case \"mouseover\":\n        treeEventCallback = handler.onZTreeMouseover;\n        break;\n\n      case \"mouseout\":\n        treeEventCallback = handler.onZTreeMouseout;\n        break;\n\n      case \"dblclick\":\n        treeEventCallback = handler.onZTreeDblclick;\n        break;\n\n      case \"contextmenu\":\n        treeEventCallback = handler.onZTreeContextmenu;\n        break;\n    }\n\n    var proxyResult = {\n      stop: false,\n      node: node,\n      nodeEventType: nodeEventType,\n      nodeEventCallback: nodeEventCallback,\n      treeEventType: treeEventType,\n      treeEventCallback: treeEventCallback\n    };\n    return proxyResult;\n  },\n      //default init node of core\n  _initNode = function _initNode(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {\n    if (!n) return;\n    var r = data.getRoot(setting),\n        children = n[setting.data.key.children];\n    var Z = n[setting.treeId] = n[setting.treeId] || {};\n    Z.level = level;\n    Z.tId = setting.treeId + \"_\" + ++r.zId;\n    Z.open = !!Z.open;\n\n    if (tools.isArray(children)) {\n      Z.isParent = true;\n      Z.zAsync = true;\n    } else {\n      Z.open = Z.isParent && !setting.async.enable ? Z.open : false;\n      Z.zAsync = !Z.isParent;\n    }\n\n    Z.isFirstNode = isFirstNode;\n    Z.isLastNode = isLastNode;\n    Z.isAjaxing = false;\n  },\n      _init = {\n    bind: [_bindEvent],\n    unbind: [_unbindEvent],\n    caches: [_initCache],\n    nodes: [_initNode],\n    proxys: [_eventProxy],\n    roots: [_initRoot],\n    beforeA: [],\n    afterA: [],\n    innerBeforeA: [],\n    innerAfterA: [],\n    innerAfterIcon: [],\n    zTreeTools: []\n  },\n      //method of operate data\n  data = {\n    addNodeCache: function addNodeCache(setting, node) {\n      data.getCache(setting).nodes[data.getNodeCacheId(node[setting.treeId].tId)] = node;\n    },\n    getNodeCacheId: function getNodeCacheId(tId) {\n      return tId.substring(tId.lastIndexOf(\"_\") + 1);\n    },\n    addAfterA: function addAfterA(afterA) {\n      _init.afterA.push(afterA);\n    },\n    addBeforeA: function addBeforeA(beforeA) {\n      _init.beforeA.push(beforeA);\n    },\n    addInnerAfterA: function addInnerAfterA(innerAfterA) {\n      _init.innerAfterA.push(innerAfterA);\n    },\n    addInnerBeforeA: function addInnerBeforeA(innerBeforeA) {\n      _init.innerBeforeA.push(innerBeforeA);\n    },\n    addInnerAfterIcon: function addInnerAfterIcon(innerAfterIcon) {\n      _init.innerAfterIcon.push(innerAfterIcon);\n    },\n    addInitBind: function addInitBind(bindEvent) {\n      _init.bind.push(bindEvent);\n    },\n    addInitUnBind: function addInitUnBind(unbindEvent) {\n      _init.unbind.push(unbindEvent);\n    },\n    addInitCache: function addInitCache(initCache) {\n      _init.caches.push(initCache);\n    },\n    addInitNode: function addInitNode(initNode) {\n      _init.nodes.push(initNode);\n    },\n    addInitProxy: function addInitProxy(initProxy, isFirst) {\n      if (!!isFirst) {\n        _init.proxys.splice(0, 0, initProxy);\n      } else {\n        _init.proxys.push(initProxy);\n      }\n    },\n    addInitRoot: function addInitRoot(initRoot) {\n      _init.roots.push(initRoot);\n    },\n    addNodesData: function addNodesData(setting, parentNode, index, nodes) {\n      var children = parentNode[setting.data.key.children] || [],\n          Z;\n\n      if (children.length == nodes.length) {\n        parentNode[setting.treeId].isParent = true;\n        return;\n      }\n\n      if (index === 0) {\n        var first = children[nodes.length - 1];\n        Z = first[setting.treeId];\n        Z ? Z.isFirstNode = false : Z = {\n          isFirstNode: false\n        };\n        view.setNodeLineIcos(setting, first, Z);\n      } else if (index < 0) {\n        var last = children[children.length - nodes.length - 1];\n\n        if (last) {\n          Z = last[setting.treeId] || {};\n          Z.isLastNode = false;\n          view.setNodeLineIcos(setting, last, Z);\n        }\n      }\n\n      parentNode[setting.treeId].isParent = true; //            var children = parentNode[setting.data.key.children], params;\n      //            if (!children) {\n      //                children = parentNode[setting.data.key.children] = [];\n      //                index = -1;\n      //            } else if (index >= children.length) {\n      //                index = -1;\n      //            }\n      //            if (children.length > 0 && index === 0) {\n      //                children[0][setting.treeId].isFirstNode = false;\n      //                view.setNodeLineIcos(setting, children[0]);\n      //            } else if (children.length > 0 && index < 0) {\n      //                children[children.length - 1][setting.treeId].isLastNode = false;\n      //                view.setNodeLineIcos(setting, children[children.length - 1]);\n      //            }\n      //            parentNode[setting.treeId].isParent = true;\n      //            if (index < 0) {\n      //                parentNode[setting.data.key.children] = children.concat(nodes);\n      //            } else {\n      //                params = [index, 0].concat(nodes);\n      //                children.splice.apply(children, params);\n      //            }\n    },\n    addSelectedNode: function addSelectedNode(setting, node) {\n      if (!data.isSelectedNode(setting, node)) {\n        var root = data.getRoot(setting);\n        root.curSelectedList.push(node);\n      }\n    },\n    addCreatedNode: function addCreatedNode(setting, node) {\n      if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {\n        var root = data.getRoot(setting);\n        root.createdNodes.push(node);\n      }\n    },\n    addZTreeTools: function addZTreeTools(zTreeTools) {\n      _init.zTreeTools.push(zTreeTools);\n    },\n    exSetting: function exSetting(s) {\n      _$.extend(true, _setting, s);\n    },\n    getAfterA: function getAfterA(setting, node, array) {\n      for (var i = 0, j = _init.afterA.length; i < j; i++) {\n        _init.afterA[i].apply(this, arguments);\n      }\n    },\n    getBeforeA: function getBeforeA(setting, node, array) {\n      for (var i = 0, j = _init.beforeA.length; i < j; i++) {\n        _init.beforeA[i].apply(this, arguments);\n      }\n    },\n    getInnerAfterIcon: function getInnerAfterIcon(setting, node, array) {\n      for (var i = 0, j = _init.innerAfterIcon.length; i < j; i++) {\n        _init.innerAfterIcon[i].apply(this, arguments);\n      }\n    },\n    getInnerAfterA: function getInnerAfterA(setting, node, array) {\n      for (var i = 0, j = _init.innerAfterA.length; i < j; i++) {\n        _init.innerAfterA[i].apply(this, arguments);\n      }\n    },\n    getInnerBeforeA: function getInnerBeforeA(setting, node, array) {\n      for (var i = 0, j = _init.innerBeforeA.length; i < j; i++) {\n        _init.innerBeforeA[i].apply(this, arguments);\n      }\n    },\n    getCache: function getCache(setting) {\n      return caches[setting.treeId];\n    },\n    getNodeByParam: function getNodeByParam(setting, nodes, key, value) {\n      if (!nodes || !key) return null;\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        var node = nodes[i];\n\n        if (node[key] == value) {\n          return nodes[i];\n        }\n\n        var children = node[setting.data.key.children];\n        var tmp = data.getNodeByParam(setting, children, key, value);\n        if (tmp) return tmp;\n      }\n\n      return null;\n    },\n    getNodeCache: function getNodeCache(setting, tId) {\n      if (!tId) return null;\n      return caches[setting.treeId].nodes[data.getNodeCacheId(tId)] || 0;\n    },\n    getNodes: function getNodes(setting) {\n      return data.getRoot(setting)[setting.data.key.children];\n    },\n    getNodesByParam: function getNodesByParam(setting, nodes, key, value) {\n      if (!nodes || !key) return [];\n      var result = [];\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        var node = nodes[i];\n\n        if (node[key] == value) {\n          result.push(node);\n        }\n\n        var children = node[setting.data.key.children];\n        result = result.concat(data.getNodesByParam(setting, children, key, value));\n      }\n\n      return result;\n    },\n    getNodesByParamFuzzy: function getNodesByParamFuzzy(setting, nodes, key, value) {\n      if (!nodes || !key) return [];\n      var result = [];\n      value = value.toLowerCase();\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        var node = nodes[i];\n\n        if (typeof node[key] == \"string\" && nodes[i][key].toLowerCase().indexOf(value) > -1) {\n          result.push(node);\n        }\n\n        var children = node[setting.data.key.children];\n        result = result.concat(data.getNodesByParamFuzzy(setting, children, key, value));\n      }\n\n      return result;\n    },\n    getNodesByFilter: function getNodesByFilter(setting, nodes, filter, isSingle, invokeParam) {\n      if (!nodes) return isSingle ? null : [];\n      var result = isSingle ? null : [];\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        var node = nodes[i];\n\n        if (tools.apply(filter, [node, invokeParam], false)) {\n          if (isSingle) {\n            return node;\n          }\n\n          result.push(node);\n        }\n\n        var children = node[setting.data.key.children];\n        var tmpResult = data.getNodesByFilter(setting, children, filter, isSingle, invokeParam);\n\n        if (isSingle && !!tmpResult) {\n          return tmpResult;\n        }\n\n        result = isSingle ? tmpResult : result.concat(tmpResult);\n      }\n\n      return result;\n    },\n    getRoot: function getRoot(setting) {\n      return setting ? roots[setting.treeId] : null;\n    },\n    getRoots: function getRoots() {\n      return roots;\n    },\n    getSetting: function getSetting(treeId) {\n      return settings[treeId];\n    },\n    getSettings: function getSettings() {\n      return settings;\n    },\n    getZTreeTools: function getZTreeTools(treeId) {\n      var r = this.getRoot(this.getSetting(treeId));\n      return r ? r.treeTools : null;\n    },\n    initCache: function initCache(setting) {\n      for (var i = 0, j = _init.caches.length; i < j; i++) {\n        _init.caches[i].apply(this, arguments);\n      }\n    },\n    initNode: function initNode(setting, level, node, parentNode, preNode, nextNode) {\n      for (var i = 0, j = _init.nodes.length; i < j; i++) {\n        _init.nodes[i].apply(this, arguments);\n      }\n    },\n    initRoot: function initRoot(setting) {\n      for (var i = 0, j = _init.roots.length; i < j; i++) {\n        _init.roots[i].apply(this, arguments);\n      }\n    },\n    isSelectedNode: function isSelectedNode(setting, node) {\n      var root = data.getRoot(setting);\n\n      for (var i = 0, j = root.curSelectedList.length; i < j; i++) {\n        if (node === root.curSelectedList[i]) return true;\n      }\n\n      return false;\n    },\n    nodeName: function nodeName(setting, node) {\n      return setting.view.nameFunction ? setting.view.nameFunction(node) : node[setting.data.key.name];\n    },\n    removeNodeCache: function removeNodeCache(setting, node) {\n      var children = node[setting.data.key.children];\n\n      if (children) {\n        for (var i = 0, l = children.length; i < l; i++) {\n          data.removeNodeCache(setting, children[i]);\n        }\n      }\n\n      data.getCache(setting).nodes[data.getNodeCacheId(node[setting.treeId].tId)] = null;\n    },\n    removeSelectedNode: function removeSelectedNode(setting, node) {\n      var root = data.getRoot(setting);\n\n      for (var i = 0, j = root.curSelectedList.length; i < j; i++) {\n        if (node === root.curSelectedList[i] || !data.getNodeCache(setting, root.curSelectedList[i][setting.treeId].tId)) {\n          root.curSelectedList.splice(i, 1);\n          setting.treeObj.trigger(consts.event.UNSELECTED, [node]);\n          i--;\n          j--;\n        }\n      }\n    },\n    setCache: function setCache(setting, cache) {\n      caches[setting.treeId] = cache;\n    },\n    setRoot: function setRoot(setting, root) {\n      roots[setting.treeId] = root;\n    },\n    setZTreeTools: function setZTreeTools(setting, zTreeTools) {\n      for (var i = 0, j = _init.zTreeTools.length; i < j; i++) {\n        _init.zTreeTools[i].apply(this, arguments);\n      }\n    },\n    transformToArrayFormat: function transformToArrayFormat(setting, nodes) {\n      if (!nodes) return [];\n      var r = [];\n\n      if (tools.isArray(nodes)) {\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          _do(nodes[i]);\n        }\n      } else {\n        _do(nodes);\n      }\n\n      return r;\n\n      function _do(_node) {\n        r.push(_node);\n        var children = _node[setting.data.key.children];\n\n        if (children) {\n          r = r.concat(data.transformToArrayFormat(setting, children));\n        }\n      }\n    }\n  },\n      //method of event proxy\n  event = {\n    bindEvent: function bindEvent(setting) {\n      for (var i = 0, j = _init.bind.length; i < j; i++) {\n        _init.bind[i].apply(this, arguments);\n      }\n    },\n    unbindEvent: function unbindEvent(setting) {\n      for (var i = 0, j = _init.unbind.length; i < j; i++) {\n        _init.unbind[i].apply(this, arguments);\n      }\n    },\n    bindTree: function bindTree(setting) {\n      var eventParam = {\n        treeId: setting.treeId\n      },\n          o = setting.treeObj;\n\n      if (!setting.view.txtSelectedEnable) {\n        // for can't select text\n        o.bind('selectstart', handler.onSelectStart).css({\n          \"-moz-user-select\": \"-moz-none\"\n        });\n      }\n\n      o.bind('click', eventParam, event.proxy);\n      o.bind('dblclick', eventParam, event.proxy);\n      o.bind('mouseover', eventParam, event.proxy);\n      o.bind('mouseout', eventParam, event.proxy);\n      o.bind('mousedown', eventParam, event.proxy);\n      o.bind('mouseup', eventParam, event.proxy);\n      o.bind('contextmenu', eventParam, event.proxy);\n    },\n    unbindTree: function unbindTree(setting) {\n      var o = setting.treeObj;\n      o.unbind('selectstart', handler.onSelectStart).unbind('click', event.proxy).unbind('dblclick', event.proxy).unbind('mouseover', event.proxy).unbind('mouseout', event.proxy).unbind('mousedown', event.proxy).unbind('mouseup', event.proxy).unbind('contextmenu', event.proxy);\n    },\n    doProxy: function doProxy(e) {\n      var results = [];\n\n      for (var i = 0, j = _init.proxys.length; i < j; i++) {\n        var proxyResult = _init.proxys[i].apply(this, arguments);\n\n        results.push(proxyResult);\n\n        if (proxyResult.stop) {\n          break;\n        }\n      }\n\n      return results;\n    },\n    proxy: function proxy(e) {\n      var results = event.doProxy(e),\n          r = true,\n          x = false;\n\n      for (var i = 0, l = results.length; i < l; i++) {\n        var proxyResult = results[i];\n\n        if (proxyResult.nodeEventCallback) {\n          x = true;\n          r = proxyResult.nodeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;\n        }\n\n        if (proxyResult.treeEventCallback) {\n          x = true;\n          r = proxyResult.treeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;\n        }\n      }\n\n      return r;\n    }\n  },\n      //method of event handler\n  handler = {\n    onSwitchNode: function onSwitchNode(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n\n      if (node[setting.treeId].open) {\n        if (tools.apply(setting.callback.beforeCollapse, [node, event], true) == false) return true;\n        data.getRoot(setting).expandTriggerFlag = true;\n        view.switchNode(setting, node, true);\n      } else {\n        if (tools.apply(setting.callback.beforeExpand, [node, event], true) == false) return true;\n        data.getRoot(setting).expandTriggerFlag = true;\n        view.switchNode(setting, node, false);\n      }\n\n      return true;\n    },\n    onClickNode: function onClickNode(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n      if (tools.apply(setting.callback.beforeClick, [node, event], true) == false) return true;\n      view.selectNode(setting, node, true);\n      setting.treeObj.trigger(consts.event.CLICK, [event, node]);\n      return true;\n    },\n    onZTreeMousedown: function onZTreeMousedown(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n\n      if (tools.apply(setting.callback.beforeMouseDown, [node, event], true)) {\n        tools.apply(setting.callback.onMouseDown, [node, event]);\n      }\n\n      return true;\n    },\n    onZTreeMouseup: function onZTreeMouseup(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n\n      if (tools.apply(setting.callback.beforeMouseUp, [node, event], true)) {\n        tools.apply(setting.callback.onMouseUp, [node, event]);\n      }\n\n      return true;\n    },\n    onZTreeMouseover: function onZTreeMouseover(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n      tools.apply(setting.callback.onMouseOver, [node, event]);\n      return true;\n    },\n    onZTreeMouseout: function onZTreeMouseout(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n      tools.apply(setting.callback.onMouseOut, [node, event]);\n      return true;\n    },\n    onZTreeDblclick: function onZTreeDblclick(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n\n      if (tools.apply(setting.callback.beforeDblClick, [node, event], true)) {\n        tools.apply(setting.callback.onDblClick, [node, event]);\n      }\n\n      return true;\n    },\n    onZTreeContextmenu: function onZTreeContextmenu(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n\n      if (tools.apply(setting.callback.beforeRightClick, [node, event], true)) {\n        tools.apply(setting.callback.onRightClick, [node, event]);\n      }\n\n      return typeof setting.callback.onRightClick != \"function\";\n    },\n    onSelectStart: function onSelectStart(e) {\n      var n = e.originalEvent.srcElement.nodeName.toLowerCase();\n      return n === \"input\" || n === \"textarea\";\n    }\n  },\n      //method of tools for zTree\n  tools = {\n    apply: function apply(fun, param, defaultValue) {\n      if (typeof fun == \"function\") {\n        return fun.apply(zt, param ? param : []);\n      }\n\n      return defaultValue;\n    },\n    canAsync: function canAsync(setting, node) {\n      var children = node[setting.data.key.children];\n      var isParent = node[setting.treeId].isParent;\n      return setting.async.enable && node && isParent && !(node[setting.treeId].zAsync || children && children.length > 0);\n    },\n    clone: function clone(obj) {\n      if (obj === null) return null;\n      var o = tools.isArray(obj) ? [] : {};\n\n      for (var i in obj) {\n        o[i] = obj[i] instanceof Date ? new Date(obj[i].getTime()) : _typeof(obj[i]) === \"object\" ? tools.clone(obj[i]) : obj[i];\n      }\n\n      return o;\n    },\n    eqs: function eqs(str1, str2) {\n      return str1.toLowerCase() === str2.toLowerCase();\n    },\n    isArray: function isArray(arr) {\n      return Object.prototype.toString.apply(arr) === \"[object Array]\";\n    },\n    $: function $(node, exp, setting) {\n      if (!!exp && typeof exp != \"string\") {\n        setting = exp;\n        exp = \"\";\n      }\n\n      if (typeof node == \"string\") {\n        return _$(node, setting ? setting.treeObj.get(0).ownerDocument : null);\n      } else {\n        if (!node[setting.treeId]) {\n          return _$();\n        }\n\n        return _$(\"#\" + node[setting.treeId].tId + exp, setting ? setting.treeObj : null);\n      }\n    },\n    getMDom: function getMDom(setting, curDom, targetExpr) {\n      if (!curDom) return null;\n\n      while (curDom && curDom.id !== setting.treeId) {\n        for (var i = 0, l = targetExpr.length; curDom.tagName && i < l; i++) {\n          if (tools.eqs(curDom.tagName, targetExpr[i].tagName) && curDom.getAttribute(targetExpr[i].attrName) !== null) {\n            return curDom;\n          }\n        }\n\n        curDom = curDom.parentNode;\n      }\n\n      return null;\n    },\n    getNodeMainDom: function getNodeMainDom(target) {\n      return _$(target).parent(\"li\").get(0) || _$(target).parentsUntil(\"li\").parent().get(0);\n    }\n  },\n      //method of operate ztree dom\n  view = {\n    addNodes: function addNodes(setting, parentNode, index, newNodes, isSilent) {\n      if (setting.data.keep.leaf && parentNode && !parentNode[setting.treeId].isParent) {\n        return;\n      }\n\n      if (!tools.isArray(newNodes)) {\n        newNodes = [newNodes];\n      }\n\n      if (parentNode) {\n        var target_switchObj = $$(parentNode, consts.id.SWITCH, setting),\n            target_icoObj = $$(parentNode, consts.id.ICON, setting),\n            target_ulObj = $$(parentNode, consts.id.UL, setting);\n        var Z = parentNode[setting.treeId];\n\n        if (!Z.open) {\n          view.replaceSwitchClass(Z.level, target_switchObj, consts.folder.CLOSE);\n          view.replaceIcoClass(target_icoObj, setting, parentNode, Z);\n          Z.open = false;\n          target_ulObj.css({\n            \"display\": \"none\"\n          });\n        }\n\n        data.addNodesData(setting, parentNode, index, newNodes);\n        view.createNodes(setting, Z.level + 1, newNodes, parentNode, index);\n\n        if (!isSilent) {\n          view.expandCollapseParentNode(setting, parentNode, true);\n        }\n      } else {\n        data.addNodesData(setting, data.getRoot(setting), index, newNodes);\n        view.createNodes(setting, 0, newNodes, null, index);\n      }\n    },\n    appendNodes: function appendNodes(setting, level, nodes, parentNode, index, initFlag, openFlag) {\n      if (!nodes) return [];\n      var tmpPNode = parentNode || data.getRoot(setting),\n          tmpPChild = tmpPNode[setting.data.key.children],\n          html = [],\n          isFirstNode,\n          isLastNode;\n\n      if (!tmpPChild || index >= tmpPChild.length - nodes.length) {\n        index = -1;\n      }\n\n      for (var i = 0, l = nodes.length, Z; i < l; i++) {\n        var node = nodes[i];\n\n        if (initFlag) {\n          isFirstNode = (index === 0 || tmpPChild.length == nodes.length) && i == 0;\n          isLastNode = index < 0 && i == nodes.length - 1;\n          data.initNode(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag);\n          data.addNodeCache(setting, node);\n        }\n\n        Z = node[setting.treeId];\n        var childHtml = [];\n        var children = node[setting.data.key.children];\n\n        if (children && children.length > 0) {\n          //make child html first, because checkType\n          childHtml = view.appendNodes(setting, level + 1, children, node, -1, initFlag, openFlag && Z.open);\n        }\n\n        if (openFlag && Z) {\n          view.makeDOMNodeMainBefore(html, setting, node, Z);\n          view.makeDOMNodeDiv(html, setting, node, Z);\n          view.makeDOMNodeLine(html, setting, node, Z);\n          data.getBeforeA(setting, node, html);\n          view.makeDOMNodeNameBefore(html, setting, node, Z);\n          data.getInnerBeforeA(setting, node, html);\n          view.makeDOMNodeIcon(html, setting, node, Z);\n          data.getInnerAfterIcon(setting, node, html);\n          view.makeDOMNodeName(html, setting, node, Z);\n          data.getInnerAfterA(setting, node, html);\n          html.push(\"</a>\"); //view.makeDOMNodeNameAfter(html, setting, node);\n\n          data.getAfterA(setting, node, html);\n          html.push(\"</div>\");\n\n          if (Z.isParent && Z.open) {\n            view.makeUlHtml(setting, node, html, childHtml.join(''), Z);\n          }\n\n          html.push(\"</li>\"); //view.makeDOMNodeMainAfter(html, setting, node);\n\n          data.addCreatedNode(setting, node);\n          Z.dom = true;\n        }\n      }\n\n      return html;\n    },\n    appendParentULDom: function appendParentULDom(setting, node) {\n      var html = [],\n          nObj = $$(node, setting),\n          Z = node[setting.treeId],\n          parent;\n\n      if (!nObj.get(0) && !!(parent = node[setting.data.key.parent])) {\n        view.appendParentULDom(setting, parent);\n        parent = null;\n        nObj = $$(node, setting);\n      }\n\n      var ulObj = $$(node, consts.id.UL, setting);\n\n      if (ulObj.get(0)) {\n        ulObj.remove();\n      }\n\n      var children = node[setting.data.key.children],\n          childHtml = view.appendNodes(setting, Z.level + 1, children, node, -1, false, true);\n      view.makeUlHtml(setting, node, html, childHtml.join(''), Z);\n      nObj.append(html.join(''));\n    },\n    asyncNode: function asyncNode(setting, node, isSilent, callback) {\n      if (node && !node[setting.treeId].isParent) {\n        tools.apply(callback);\n        return false;\n      } else if (node && node[setting.treeId].isAjaxing) {\n        return false;\n      } else if (tools.apply(setting.callback.beforeAsync, [node], true) == false) {\n        tools.apply(callback);\n        return false;\n      }\n\n      if (node) {\n        node[setting.treeId].isAjaxing = true;\n        var icoObj = $$(node, consts.id.ICON, setting);\n        icoObj.attr({\n          \"style\": \"\",\n          \"class\": consts.className.BUTTON + \" \" + consts.className.ICO_LOADING\n        });\n      }\n\n      var i,\n          l,\n          tmpParam = {};\n      var autoParam = tools.apply(setting.async.autoParam, [node], setting.async.autoParam);\n\n      for (i = 0, l = autoParam.length; node && i < l; i++) {\n        var pKey = autoParam[i].split(\"=\"),\n            spKey = pKey;\n\n        if (pKey.length > 1) {\n          spKey = pKey[1];\n          pKey = pKey[0];\n        }\n\n        tmpParam[spKey] = node[pKey];\n      }\n\n      var otherParam = tools.apply(setting.async.otherParam, [node], setting.async.otherParam);\n\n      if (tools.isArray(otherParam)) {\n        for (i = 0, l = otherParam.length; i < l; i += 2) {\n          tmpParam[otherParam[i]] = otherParam[i + 1];\n        }\n      } else {\n        for (var p in otherParam) {\n          tmpParam[p] = otherParam[p];\n        }\n      }\n\n      var _tmpV = data.getRoot(setting)._ver;\n\n      _$.ajax({\n        contentType: setting.async.contentType,\n        cache: false,\n        type: setting.async.type,\n        url: tools.apply(setting.async.url, [node], setting.async.url),\n        data: setting.async.contentType.indexOf('application/json') > -1 ? JSON.stringify(tmpParam) : tmpParam,\n        dataType: setting.async.dataType,\n        headers: setting.async.headers,\n        xhrFields: setting.async.xhrFields,\n        success: function success(msg) {\n          if (_tmpV != data.getRoot(setting)._ver) {\n            return;\n          }\n\n          var newNodes = [];\n\n          try {\n            if (!msg || msg.length == 0) {\n              newNodes = [];\n            } else if (typeof msg == \"string\") {\n              newNodes = eval(\"(\" + msg + \")\");\n            } else {\n              newNodes = msg;\n            }\n          } catch (err) {\n            newNodes = msg;\n          }\n\n          var Z = node ? node[setting.treeId] : null;\n\n          if (Z) {\n            Z.isAjaxing = null;\n            Z.zAsync = true;\n          }\n\n          view.setNodeLineIcos(setting, node, Z);\n\n          if (newNodes && newNodes !== \"\") {\n            newNodes = tools.apply(setting.async.dataFilter, [node, newNodes], newNodes);\n            view.addNodes(setting, node, -1, !!newNodes ? newNodes : [], !!isSilent);\n          } else {\n            view.addNodes(setting, node, -1, [], !!isSilent);\n          }\n\n          setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [node, msg]);\n          tools.apply(callback);\n        },\n        error: function error(XMLHttpRequest, textStatus, errorThrown) {\n          if (_tmpV != data.getRoot(setting)._ver) {\n            return;\n          }\n\n          var Z = node ? node[setting.treeId] : null;\n          Z && (Z.isAjaxing = null);\n          view.setNodeLineIcos(setting, node, Z);\n          setting.treeObj.trigger(consts.event.ASYNC_ERROR, [node, XMLHttpRequest, textStatus, errorThrown]);\n        }\n      });\n\n      return true;\n    },\n    cancelPreSelectedNode: function cancelPreSelectedNode(setting, node, excludeNode) {\n      var list = data.getRoot(setting).curSelectedList,\n          i,\n          n;\n\n      for (i = list.length - 1; i >= 0; i--) {\n        n = list[i];\n\n        if (node === n || !node && (!excludeNode || excludeNode !== n)) {\n          $$(n, consts.id.DIV, setting).css('background-color', '');\n\n          if (node) {\n            data.removeSelectedNode(setting, node);\n            break;\n          } else {\n            list.splice(i, 1);\n            setting.treeObj.trigger(consts.event.UNSELECTED, [n]);\n          }\n        }\n      }\n    },\n    createNodeCallback: function createNodeCallback(setting) {\n      if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {\n        var root = data.getRoot(setting);\n\n        while (root.createdNodes.length > 0) {\n          var node = root.createdNodes.shift();\n          tools.apply(setting.view.addDiyDom, [node]);\n\n          if (!!setting.callback.onNodeCreated) {\n            setting.treeObj.trigger(consts.event.NODECREATED, [node]);\n          }\n        }\n      }\n    },\n    createNodes: function createNodes(setting, level, nodes, parentNode, index) {\n      if (!nodes || nodes.length == 0) return;\n      var root = data.getRoot(setting),\n          openFlag = !parentNode || parentNode[setting.treeId].open || !!$$(parentNode[setting.data.key.children][0], setting).get(0);\n      root.createdNodes = [];\n      var zTreeHtml = view.appendNodes(setting, level, nodes, parentNode, index, true, openFlag),\n          parentObj,\n          nextObj;\n\n      if (!parentNode) {\n        parentObj = setting.treeObj;\n      } else {\n        var ulObj = $$(parentNode, consts.id.UL, setting);\n\n        if (ulObj.get(0)) {\n          parentObj = ulObj;\n        }\n      }\n\n      if (parentObj) {\n        if (index >= 0) {\n          nextObj = parentObj.children()[index];\n        }\n\n        if (index >= 0 && nextObj) {\n          _$(nextObj).before(zTreeHtml.join(''));\n        } else {\n          parentObj.append(zTreeHtml.join(''));\n        }\n      }\n\n      view.createNodeCallback(setting);\n    },\n    destroy: function destroy(setting) {\n      if (!setting) return;\n\n      var _data$getCache = data.getCache(setting),\n          nodes = _data$getCache.nodes;\n\n      if (nodes) {\n        for (var i in nodes) {\n          if (nodes[i]) delete nodes[i][setting.treeId];\n        }\n      }\n\n      data.initCache(setting);\n      data.initRoot(setting);\n      event.unbindTree(setting);\n      event.unbindEvent(setting);\n      setting.treeObj.empty();\n      delete settings[setting.treeId];\n    },\n    expandCollapseNode: function expandCollapseNode(setting, node, expandFlag, animateFlag, callback) {\n      var root = data.getRoot(setting);\n\n      var _callback;\n\n      if (!node) {\n        tools.apply(callback, []);\n        return;\n      }\n\n      var children = node[setting.data.key.children];\n      var Z = node[setting.treeId];\n\n      if (root.expandTriggerFlag) {\n        _callback = callback;\n\n        callback = function callback() {\n          if (_callback) _callback();\n          setting.treeObj.trigger(Z.open ? consts.event.EXPAND : consts.event.COLLAPSE, [node]);\n        };\n\n        root.expandTriggerFlag = false;\n      }\n\n      Z ? Z = Z : Z = {\n        open: null\n      };\n\n      if (!Z.open && Z.isParent && (!$$(node, consts.id.UL, setting).get(0) || children && children.length > 0 && !$$(children[0], setting).get(0))) {\n        view.appendParentULDom(setting, node);\n        view.createNodeCallback(setting);\n      }\n\n      if (Z.open == expandFlag) {\n        tools.apply(callback, []);\n        return;\n      }\n\n      var ulObj = $$(node, consts.id.UL, setting),\n          switchObj = $$(node, consts.id.SWITCH, setting),\n          icoObj = $$(node, consts.id.ICON, setting);\n\n      if (Z.isParent) {\n        Z.open = !Z.open;\n\n        if (setting.view.iconUrlFunction) {\n          icoObj.attr(\"style\", view.makeNodeIcoStyle(setting, node, Z));\n        }\n\n        if (Z.open) {\n          view.replaceSwitchClass(Z.level, switchObj, consts.folder.OPEN);\n          view.replaceIcoClass(icoObj, setting, node, Z);\n\n          if (animateFlag == false || setting.view.expandSpeed == \"\") {\n            ulObj.show();\n            tools.apply(callback, []);\n          } else {\n            if (children && children.length > 0) {\n              ulObj.slideDown(setting.view.expandSpeed, callback);\n            } else {\n              ulObj.show();\n              tools.apply(callback, []);\n            }\n          }\n        } else {\n          view.replaceSwitchClass(Z.level, switchObj, consts.folder.CLOSE);\n          view.replaceIcoClass(icoObj, setting, node, Z);\n\n          if (animateFlag == false || setting.view.expandSpeed == \"\" || !(children && children.length > 0)) {\n            ulObj.hide();\n            tools.apply(callback, []);\n          } else {\n            ulObj.slideUp(setting.view.expandSpeed, callback);\n          }\n        }\n      } else {\n        tools.apply(callback, []);\n      }\n    },\n    expandCollapseParentNode: function expandCollapseParentNode(setting, node, expandFlag, animateFlag, callback) {\n      if (!node) return;\n      var parent = node[setting.data.key.parent];\n      var Z = parent ? parent[setting.treeId] : null;\n      parent = Z ? data.getNodeCache(setting, Z.tId) : null;\n\n      if (!parent) {\n        view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback);\n      } else {\n        view.expandCollapseNode(setting, node, expandFlag, animateFlag);\n        view.expandCollapseParentNode(setting, parent, expandFlag, animateFlag, callback);\n      }\n    },\n    expandCollapseSonNode: function expandCollapseSonNode(setting, node, expandFlag, animateFlag, callback) {\n      var root = data.getRoot(setting),\n          treeNodes = node ? node[setting.data.key.children] : root[setting.data.key.children],\n          selfAnimateSign = node ? false : animateFlag,\n          expandTriggerFlag = data.getRoot(setting).expandTriggerFlag;\n      data.getRoot(setting).expandTriggerFlag = false;\n\n      if (treeNodes) {\n        for (var i = 0, l = treeNodes.length; i < l; i++) {\n          if (treeNodes[i]) view.expandCollapseSonNode(setting, treeNodes[i], expandFlag, selfAnimateSign);\n        }\n      }\n\n      data.getRoot(setting).expandTriggerFlag = expandTriggerFlag;\n      view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback);\n    },\n    isSelectedNode: function isSelectedNode(setting, node) {\n      if (!node) {\n        return false;\n      }\n\n      var list = data.getRoot(setting).curSelectedList,\n          i;\n\n      for (i = list.length - 1; i >= 0; i--) {\n        if (node === list[i]) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    makeDOMNodeDiv: function makeDOMNodeDiv(html, setting, node, Z) {\n      html.push(\"<div id='\" + Z.tId + \"_div' treeNode_div style='height:22px\");\n\n      if (setting.view.hideFunction) {\n        Z.hide = setting.view.hideFunction(node);\n        Z.hide && html.push(\";display:none\");\n      }\n\n      html.push(\"'\");\n\n      if (setting.view.titleFunction) {\n        var title = setting.view.titleFunction(node);\n        if (title) html.push(\" title='\", title.replace(/'/g, \"&#39;\").replace(/</g, '&lt;').replace(/>/g, '&gt;'), \"'\");\n      }\n\n      html.push(\">\");\n    },\n    makeDOMNodeIcon: function makeDOMNodeIcon(html, setting, node, Z) {\n      html.push(\"<span id='\", Z.tId, consts.id.ICON, \"' treeNode\", consts.id.ICON, \" class='\", view.makeNodeIcoClass(setting, node, Z), \"' style='\", view.makeNodeIcoStyle(setting, node, Z), \"'></span>\");\n    },\n    makeDOMNodeName: function makeDOMNodeName(html, setting, node, Z) {\n      var nameStr = data.nodeName(setting, node),\n          name = nameStr ? setting.view.nameIsHTML ? nameStr : nameStr.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') : '';\n      html.push(\"<span id='\", Z.tId, consts.id.SPAN, \"' class='\", consts.className.NAME, \"'>\", name, \"</span>\");\n    },\n    makeDOMNodeLine: function makeDOMNodeLine(html, setting, node, Z) {\n      html.push(\"<span id='\", Z.tId, consts.id.SWITCH, \"' class='\", view.makeNodeLineClass(setting, node, Z), \"' treeNode\", consts.id.SWITCH, \"></span>\");\n    },\n    makeDOMNodeMainBefore: function makeDOMNodeMainBefore(html, setting, node, Z) {\n      html.push(\"<li id='\", Z.tId, \"' class='\", consts.className.LEVEL, Z.level, \"' tabindex='0' hidefocus='true' treenode>\");\n    },\n    makeDOMNodeNameBefore: function makeDOMNodeNameBefore(html, setting, node, Z) {\n      html.push(\"<a id='\", Z.tId, consts.id.A, \"' class='\", consts.className.LEVEL, Z.level, \"' treeNode\", consts.id.A, \">\"); //, \" onclick=\\\"\", (Z.click || ''), \"\\\" \", \"style='\", fontStyle.join(''), \"'\"\n    },\n    makeNodeIcoClass: function makeNodeIcoClass(setting, node, Z) {\n      var iconCss = consts.className.BUTTON + \" ico \";\n\n      if (!Z.isAjaxing) {\n        if (setting.view.iconCssFunction) {\n          var css = setting.view.iconCssFunction(node, Z.open);\n          if (css) return iconCss + css;\n        }\n\n        if (Z.isParent) {\n          iconCss += 'ico_' + (Z.open ? consts.folder.OPEN : consts.folder.CLOSE);\n        } else {\n          iconCss += 'ico_' + consts.folder.DOCU;\n        }\n      }\n\n      return iconCss;\n    },\n    makeNodeIcoStyle: function makeNodeIcoStyle(setting, node, Z) {\n      if (!Z.isAjaxing && setting.view.iconUrlFunction) {\n        var iconUrl = setting.view.iconUrlFunction(node, Z.open);\n        if (iconUrl) return \"background-size:16px 16px;background-image:url(\" + iconUrl + \");\";\n      }\n\n      return '';\n    },\n    makeNodeLineClass: function makeNodeLineClass(setting, node, Z) {\n      var lineClass = [];\n\n      if (setting.view.showLine) {\n        if (Z.level == 0 && Z.isFirstNode && Z.isLastNode) {\n          lineClass.push(consts.line.ROOT);\n        } else if (Z.level == 0 && Z.isFirstNode) {\n          lineClass.push(consts.line.ROOTS);\n        } else if (Z.isLastNode) {\n          lineClass.push(consts.line.BOTTOM);\n        } else {\n          lineClass.push(consts.line.CENTER);\n        }\n      } else {\n        lineClass.push(consts.line.NOLINE);\n      }\n\n      if (Z.isParent) {\n        lineClass.push(Z.open ? consts.folder.OPEN : consts.folder.CLOSE);\n      } else {\n        lineClass.push(consts.folder.DOCU);\n      }\n\n      return view.makeNodeLineClassEx(Z.level) + lineClass.join('_');\n    },\n    makeNodeLineClassEx: function makeNodeLineClassEx(level) {\n      return consts.className.BUTTON + \" \" + consts.className.LEVEL + level + \" \" + consts.className.SWITCH + \" \";\n    },\n    makeUlHtml: function makeUlHtml(setting, node, html, content, Z) {\n      html.push(\"<ul id='\", Z.tId, consts.id.UL, \"' class='\", consts.className.LEVEL, Z.level, \" \", view.makeUlLineClass(setting, Z), \"' style='display:\", Z.open ? \"block\" : \"none\", \"'>\");\n      html.push(content);\n      html.push(\"</ul>\");\n    },\n    makeUlLineClass: function makeUlLineClass(setting, Z) {\n      return setting.view.showLine && !Z.isLastNode ? consts.line.LINE : \"\";\n    },\n    removeChildNodes: function removeChildNodes(setting, node) {\n      if (!node) return;\n      var nodes = node[setting.data.key.children];\n      if (!nodes) return;\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        data.removeNodeCache(setting, nodes[i]);\n        delete nodes[i][setting.treeId];\n      }\n\n      data.removeSelectedNode(setting);\n      delete node[setting.data.key.children];\n\n      if (!setting.data.keep.parent) {\n        var Z = node[setting.treeId];\n        Z.isParent = false;\n        Z.open = false;\n        var tmp_switchObj = $$(node, consts.id.SWITCH, setting),\n            tmp_icoObj = $$(node, consts.id.ICON, setting);\n        view.replaceSwitchClass(Z.level, tmp_switchObj, consts.folder.DOCU);\n        view.replaceIcoClass(tmp_icoObj, setting, node, Z);\n        $$(node, consts.id.UL, setting).remove();\n      } else {\n        $$(node, consts.id.UL, setting).empty();\n      }\n    },\n    scrollIntoView: function scrollIntoView(setting, dom) {\n      if (!dom) {\n        return;\n      } // support IE 7\n\n\n      if (typeof Element === 'undefined') {\n        var contRect = setting.treeObj.get(0).getBoundingClientRect(),\n            findMeRect = dom.getBoundingClientRect();\n\n        if (findMeRect.top < contRect.top || findMeRect.bottom > contRect.bottom || findMeRect.right > contRect.right || findMeRect.left < contRect.left) {\n          dom.scrollIntoView();\n        }\n\n        return;\n      } // CC-BY jocki84@googlemail.com, https://gist.github.com/jocki84/6ffafd003387179a988e\n\n\n      if (!Element.prototype.scrollIntoViewIfNeeded) {\n        Element.prototype.scrollIntoViewIfNeeded = function (centerIfNeeded) {\n          \"use strict\";\n\n          function makeRange(start, length) {\n            return {\n              \"start\": start,\n              \"length\": length,\n              \"end\": start + length\n            };\n          }\n\n          function coverRange(inner, outer) {\n            if (false === centerIfNeeded || outer.start < inner.end && inner.start < outer.end) {\n              return Math.max(inner.end - outer.length, Math.min(outer.start, inner.start));\n            }\n\n            return (inner.start + inner.end - outer.length) / 2;\n          }\n\n          function makePoint(x, y) {\n            return {\n              \"x\": x,\n              \"y\": y,\n              \"translate\": function translate(dX, dY) {\n                return makePoint(x + dX, y + dY);\n              }\n            };\n          }\n\n          function absolute(elem, pt) {\n            while (elem) {\n              pt = pt.translate(elem.offsetLeft, elem.offsetTop);\n              elem = elem.offsetParent;\n            }\n\n            return pt;\n          }\n\n          var target = absolute(this, makePoint(0, 0)),\n              extent = makePoint(this.offsetWidth, this.offsetHeight),\n              elem = this.parentNode,\n              origin;\n\n          while (elem instanceof HTMLElement) {\n            // Apply desired scroll amount.\n            origin = absolute(elem, makePoint(elem.clientLeft, elem.clientTop)); //elem.scrollLeft = coverRange(makeRange(target.x - origin.x, extent.x), makeRange(elem.scrollLeft, elem.clientWidth));\n\n            elem.scrollTop = coverRange(makeRange(target.y - origin.y, extent.y), makeRange(elem.scrollTop, elem.clientHeight)); // Determine actual scroll amount by reading back scroll properties.\n\n            target = target.translate(-elem.scrollLeft, -elem.scrollTop);\n            elem = elem.parentNode;\n          }\n        };\n      }\n\n      dom.scrollIntoViewIfNeeded();\n      var treeDom = setting.treeObj.get(0).parentNode;\n      treeDom.scrollBy(-1000, 0);\n    },\n    setFirstNode: function setFirstNode(setting, parentNode) {\n      var children = parentNode[setting.data.key.children];\n\n      if (children && children.length > 0) {\n        children[0][setting.treeId].isFirstNode = true;\n      }\n    },\n    setLastNode: function setLastNode(setting, parentNode) {\n      var children = parentNode[setting.data.key.children];\n\n      if (children && children.length > 0) {\n        children[children.length - 1][setting.treeId].isLastNode = true;\n      }\n    },\n    removeNode: function removeNode(setting, node) {\n      var root = data.getRoot(setting),\n          parentNode = node[setting.data.key.parent] || root,\n          Z = node[setting.treeId];\n      Z.isFirstNode = false;\n      Z.isLastNode = false;\n\n      if (!data.getNodeCache(setting, Z.tId)) {\n        return;\n      }\n\n      $$(node, setting).remove();\n      data.removeNodeCache(setting, node);\n      data.removeSelectedNode(setting, node);\n      var children = parentNode[setting.data.key.children] || [];\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        if (children[i][setting.treeId].tId == Z.tId) {\n          children.splice(i, 1);\n          break;\n        }\n      }\n\n      delete node[setting.treeId];\n      view.setFirstNode(setting, parentNode);\n      view.setLastNode(setting, parentNode);\n      var tmp_ulObj,\n          tmp_switchObj,\n          tmp_icoObj,\n          childLength = children.length; //repair nodes old parent\n\n      if (!setting.data.keep.parent && childLength == 0) {\n        //old parentNode has no child nodes\n        var pZ = parentNode[setting.treeId];\n        pZ.isParent = false;\n        pZ.open = false;\n        delete parentNode[setting.data.key.children];\n        tmp_ulObj = $$(parentNode, consts.id.UL, setting);\n        tmp_switchObj = $$(parentNode, consts.id.SWITCH, setting);\n        tmp_icoObj = $$(parentNode, consts.id.ICON, setting);\n        view.replaceSwitchClass(pZ.level, tmp_switchObj, consts.folder.DOCU);\n        view.replaceIcoClass(tmp_icoObj, setting, parentNode, pZ);\n        tmp_ulObj.css(\"display\", \"none\");\n      } else if (setting.view.showLine && childLength > 0) {\n        //old parentNode has child nodes\n        var newLast = children[childLength - 1];\n        tmp_ulObj = $$(newLast, consts.id.UL, setting);\n        tmp_switchObj = $$(newLast, consts.id.SWITCH, setting);\n        tmp_icoObj = $$(newLast, consts.id.ICON, setting);\n\n        if (parentNode == root) {\n          if (children.length == 1) {\n            //node was root, and ztree has only one root after move node\n            view.replaceSwitchClass(newLast[setting.treeId].level, tmp_switchObj, consts.line.ROOT);\n          } else {\n            var tmp_first_switchObj = $$(children[0], consts.id.SWITCH, setting);\n            view.replaceSwitchClass(children[0][setting.treeId].level, tmp_first_switchObj, consts.line.ROOTS);\n            view.replaceSwitchClass(newLast[setting.treeId].level, tmp_switchObj, consts.line.BOTTOM);\n          }\n        } else {\n          view.replaceSwitchClass(newLast[setting.treeId].level, tmp_switchObj, consts.line.BOTTOM);\n        }\n\n        tmp_ulObj.removeClass(consts.line.LINE);\n      }\n    },\n    replaceIcoClass: function replaceIcoClass(obj, setting, node, Z) {\n      if (!obj || Z.isAjaxing) return;\n      obj.attr(\"class\", this.makeNodeIcoClass(setting, node, Z));\n    },\n    replaceSwitchClass: function replaceSwitchClass(level, obj, newName) {\n      if (!obj) return;\n      var tmpName = obj.attr(\"class\");\n      if (tmpName == undefined) return;\n      var tmpList = tmpName.split(\"_\");\n\n      switch (newName) {\n        case consts.line.ROOT:\n        case consts.line.ROOTS:\n        case consts.line.CENTER:\n        case consts.line.BOTTOM:\n        case consts.line.NOLINE:\n          tmpList[0] = view.makeNodeLineClassEx(level) + newName;\n          break;\n\n        case consts.folder.OPEN:\n        case consts.folder.CLOSE:\n        case consts.folder.DOCU:\n          tmpList[1] = newName;\n          break;\n      }\n\n      obj.attr(\"class\", tmpList.join(\"_\"));\n\n      if (newName !== consts.folder.DOCU) {\n        obj.removeAttr(\"disabled\");\n      } else {\n        obj.attr(\"disabled\", \"disabled\");\n      }\n    },\n    selectNode: function selectNode(setting, node) {\n      view.cancelPreSelectedNode(setting, null, node);\n      $$(node, consts.id.DIV, setting).css('background-color', $_theme.selected_color);\n      data.addSelectedNode(setting, node);\n      setting.treeObj.trigger(consts.event.SELECTED, [node]);\n    },\n    setNodeLineIcos: function setNodeLineIcos(setting, node, Z) {\n      if (!node) return;\n      var switchObj = $$(node, consts.id.SWITCH, setting),\n          ulObj = $$(node, consts.id.UL, setting),\n          icoObj = $$(node, consts.id.ICON, setting),\n          ulLine = view.makeUlLineClass(setting, Z);\n\n      if (ulLine.length == 0) {\n        ulObj.removeClass(consts.line.LINE);\n      } else {\n        ulObj.addClass(ulLine);\n      }\n\n      switchObj.attr(\"class\", view.makeNodeLineClass(setting, node, Z));\n\n      if (Z.isParent) {\n        switchObj.removeAttr(\"disabled\");\n      } else {\n        switchObj.attr(\"disabled\", \"disabled\");\n      }\n\n      icoObj.removeAttr(\"style\");\n      icoObj.attr(\"style\", view.makeNodeIcoStyle(setting, node, Z));\n      icoObj.attr(\"class\", view.makeNodeIcoClass(setting, node, Z));\n    },\n    setNodeName: function setNodeName(setting, node) {\n      var nObj = $$(node, consts.id.SPAN, setting);\n      nObj.empty();\n\n      if (setting.view.nameIsHTML) {\n        nObj.html(data.nodeName(setting, node));\n      } else {\n        nObj.text(data.nodeName(setting, node));\n      }\n    },\n    setNodeTitle: function setNodeTitle(setting, node) {\n      if (setting.view.titleFunction) {\n        var title = setting.view.titleFunction(node);\n        $$(node, consts.id.DIV, setting).attr(\"title\", !title ? \"\" : title);\n      }\n    },\n    setNodeHide: function setNodeHide(setting, node, Z) {\n      if (setting.view.hideFunction) {\n        var hide = setting.view.hideFunction(node);\n        if ((Z.hide || false) === hide) return;\n        Z.hide = hide;\n        $$(node, consts.id.DIV, setting).css(\"display\", hide ? \"none\" : '');\n        $$(node, consts.id.UL, setting).css(\"display\", hide ? \"none\" : '');\n      }\n    },\n    switchNode: function switchNode(setting, node, open) {\n      if (open || !tools.canAsync(setting, node)) {\n        view.expandCollapseNode(setting, node, !open);\n      } else if (setting.async.enable) {\n        if (!view.asyncNode(setting, node)) {\n          view.expandCollapseNode(setting, node, !open);\n          return;\n        }\n      } else if (node) {\n        view.expandCollapseNode(setting, node, !open);\n      }\n    }\n  }; // zTree defind\n\n\n  _$.fn.zTree = {\n    consts: _consts,\n    _z: {\n      tools: tools,\n      view: view,\n      event: event,\n      data: data\n    },\n    getZTreeObj: function getZTreeObj(treeId) {\n      var o = data.getZTreeTools(treeId);\n      return o ? o : null;\n    },\n    destroy: function destroy(treeId) {\n      if (!!treeId && treeId.length > 0) {\n        view.destroy(data.getSetting(treeId));\n      } else {\n        for (var s in settings) {\n          view.destroy(settings[s]);\n        }\n      }\n    },\n    init: function init(obj, zSetting, zNodes) {\n      var setting = tools.clone(_setting);\n\n      _$.extend(true, setting, zSetting);\n\n      setting.treeId = obj.attr(\"id\");\n      setting.treeObj = obj;\n      setting.treeObj.empty();\n      settings[setting.treeId] = setting; //For some older browser,(e.g., ie6)\n\n      if (typeof document.body.style.maxHeight === \"undefined\") {\n        setting.view.expandSpeed = \"\";\n      }\n\n      data.initRoot(setting);\n      var root = data.getRoot(setting);\n      zNodes = zNodes ? tools.isArray(zNodes) ? zNodes : [zNodes] : [];\n      root[setting.data.key.children] = zNodes;\n      data.initCache(setting);\n      event.unbindTree(setting);\n      event.bindTree(setting);\n      event.unbindEvent(setting);\n      event.bindEvent(setting);\n      var zTreeTools = {\n        setting: setting,\n        addNodes: function addNodes(parentNode, index, newNodes, isSilent) {\n          if (!parentNode) parentNode = null;\n          if (parentNode && !parentNode[setting.treeId].isParent && setting.data.keep.leaf) return null;\n          var i = parseInt(index, 10);\n\n          if (isNaN(i)) {\n            isSilent = !!newNodes;\n            newNodes = index;\n            index = -1;\n          } else {\n            index = i;\n          }\n\n          if (!newNodes) return null;\n          var xNewNodes = tools.isArray(newNodes) ? newNodes : [newNodes];\n\n          function addCallback() {\n            view.addNodes(setting, parentNode, index, xNewNodes, isSilent == true);\n          }\n\n          if (tools.canAsync(setting, parentNode)) {\n            view.asyncNode(setting, parentNode, isSilent, addCallback);\n          } else {\n            addCallback();\n          }\n\n          return xNewNodes;\n        },\n        cancelSelectedNode: function cancelSelectedNode(node) {\n          view.cancelPreSelectedNode(setting, node);\n        },\n        destroy: function destroy() {\n          view.destroy(setting);\n        },\n        expandAll: function expandAll(expandFlag) {\n          expandFlag = !!expandFlag;\n          view.expandCollapseSonNode(setting, null, expandFlag, true);\n          return expandFlag;\n        },\n        expandNode: function expandNode(node, expandFlag, sonSign, focus, callbackFlag) {\n          if (!node) return null;\n          var Z = node[setting.treeId];\n          if (!Z.isParent || expandFlag === !!Z.open) return null;\n\n          if (expandFlag !== true && expandFlag !== false) {\n            expandFlag = !Z.open;\n          }\n\n          callbackFlag = !!callbackFlag;\n\n          if (callbackFlag && expandFlag && tools.apply(setting.callback.beforeExpand, [node], true) == false) {\n            return null;\n          } else if (callbackFlag && !expandFlag && tools.apply(setting.callback.beforeCollapse, [node], true) == false) {\n            return null;\n          }\n\n          var parent;\n\n          if (expandFlag && (parent = node[setting.data.key.parent])) {\n            view.expandCollapseParentNode(setting, parent, expandFlag, false);\n            parent = null;\n          }\n\n          if (expandFlag === Z.open && !sonSign) {\n            return null;\n          }\n\n          data.getRoot(setting).expandTriggerFlag = callbackFlag;\n\n          if (!tools.canAsync(setting, node) && sonSign) {\n            view.expandCollapseSonNode(setting, node, expandFlag, true, showNodeFocus);\n          } else {\n            Z.open = !expandFlag;\n            view.switchNode(this.setting, node, Z.open);\n            showNodeFocus();\n          }\n\n          return expandFlag;\n\n          function showNodeFocus() {\n            var a = $$(node, setting).get(0);\n\n            if (a && focus !== false) {\n              view.scrollIntoView(setting, a);\n            }\n          }\n        },\n        getNodes: function getNodes() {\n          return data.getNodes(setting);\n        },\n        getNodeByParam: function getNodeByParam(key, value, parentNode) {\n          if (!key) return null;\n          return data.getNodeByParam(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), key, value);\n        },\n        getNodeByTId: function getNodeByTId(tId) {\n          return data.getNodeCache(setting, tId);\n        },\n        getNodesByParam: function getNodesByParam(key, value, parentNode) {\n          if (!key) return null;\n          return data.getNodesByParam(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), key, value);\n        },\n        getNodesByParamFuzzy: function getNodesByParamFuzzy(key, value, parentNode) {\n          if (!key) return null;\n          return data.getNodesByParamFuzzy(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), key, value);\n        },\n        getNodesByFilter: function getNodesByFilter(filter, isSingle, parentNode, invokeParam) {\n          isSingle = !!isSingle;\n          if (!filter || typeof filter != \"function\") return isSingle ? null : [];\n          return data.getNodesByFilter(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), filter, isSingle, invokeParam);\n        },\n        getSelectedNodes: function getSelectedNodes() {\n          var r = [],\n              list = data.getRoot(setting).curSelectedList;\n\n          for (var i = 0, l = list.length; i < l; i++) {\n            r.push(list[i]);\n          }\n\n          return r;\n        },\n        isSelectedNode: function isSelectedNode(node) {\n          return data.isSelectedNode(setting, node);\n        },\n        reAsyncChildNodesPromise: function reAsyncChildNodesPromise(parentNode, reloadType, isSilent) {\n          var promise = new Promise(function (resolve, reject) {\n            try {\n              zTreeTools.reAsyncChildNodes(parentNode, reloadType, isSilent, function () {\n                resolve(parentNode);\n              });\n            } catch (e) {\n              reject(e);\n            }\n          });\n          return promise;\n        },\n        reAsyncChildNodes: function reAsyncChildNodes(parentNode, reloadType, isSilent, callback) {\n          if (!this.setting.async.enable) return;\n          var isRoot = !parentNode;\n\n          if (isRoot) {\n            parentNode = data.getRoot(setting);\n          }\n\n          if (reloadType == \"refresh\") {\n            var children = parentNode[setting.data.key.children];\n\n            for (var i = 0, l = children ? children.length : 0; i < l; i++) {\n              data.removeNodeCache(setting, children[i]);\n            }\n\n            data.removeSelectedNode(setting);\n            parentNode[setting.data.key.children] = [];\n\n            if (isRoot) {\n              this.setting.treeObj.empty();\n            } else {\n              var ulObj = $$(parentNode, consts.id.UL, setting);\n              ulObj.empty();\n            }\n          }\n\n          view.asyncNode(this.setting, isRoot ? null : parentNode, !!isSilent, callback);\n        },\n        refresh: function refresh(nodes) {\n          var selectedList = data.getRoot(setting).curSelectedList || [];\n          this.setting.treeObj.empty();\n          var root = data.getRoot(setting);\n          nodes = nodes || root[setting.data.key.children];\n          data.initRoot(setting);\n          root[setting.data.key.children] = nodes;\n          data.initCache(setting);\n          view.createNodes(setting, 0, nodes, null, -1);\n          selectedList.forEach(function (node) {\n            return view.selectNode(setting, node);\n          });\n        },\n        reset: function reset(zNodes) {\n          var keep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          var _data$getCache2 = data.getCache(this.setting),\n              nodes = _data$getCache2.nodes;\n\n          if (nodes) {\n            var treeId = this.setting.treeId,\n                node;\n\n            for (var i in nodes) {\n              node = nodes[i];\n              if (!node || !node[treeId]) continue;\n              !keep ? delete node[treeId] : node[treeId].dom = false;\n            }\n          }\n\n          zNodes = zNodes ? tools.isArray(zNodes) ? zNodes : [zNodes] : [];\n          zNodes.length == 1 && (zNodes[0][this.setting.treeId] = zNodes[0][this.setting.treeId] || {\n            open: true\n          });\n          this.setting.treeObj.empty();\n          var root = data.getRoot(setting);\n          data.initRoot(setting);\n          root[setting.data.key.children] = zNodes;\n          data.initCache(setting);\n          view.createNodes(setting, 0, zNodes, null, -1);\n        },\n        removeChildNodes: function removeChildNodes(node) {\n          if (!node) return null;\n          var nodes = node[setting.data.key.children];\n          view.removeChildNodes(setting, node);\n          return nodes ? nodes : null;\n        },\n        removeNode: function removeNode(node, callbackFlag) {\n          if (!node || !node[setting.treeId]) return;\n          callbackFlag = !!callbackFlag;\n          if (callbackFlag && tools.apply(setting.callback.beforeRemove, [node], true) == false) return;\n          view.removeNode(setting, node);\n\n          if (callbackFlag) {\n            this.setting.treeObj.trigger(consts.event.REMOVE, [node]);\n          }\n        },\n        selectNode: function selectNode(node, isSilent) {\n          if (!node) return;\n          var parent = node[setting.data.key.parent];\n          var Z = parent ? parent[setting.treeId] : null;\n          parent = Z ? data.getNodeCache(setting, Z.tId) : null;\n\n          if (parent) {\n            view.expandCollapseParentNode(setting, parent, true, false, showNodeFocus);\n            parent = null;\n          } else if (!isSilent) {\n            try {\n              $$(node, setting).focus().blur();\n            } catch (e) {}\n          }\n\n          view.selectNode(setting, node);\n\n          function showNodeFocus() {\n            if (isSilent) {\n              return;\n            }\n\n            var a = $$(node, setting).get(0);\n            view.scrollIntoView(setting, a);\n          }\n        },\n        transformTozTreeNodes: function transformTozTreeNodes(simpleNodes) {\n          return data.transformTozTreeFormat(setting, simpleNodes);\n        },\n        transformToArray: function transformToArray(nodes) {\n          return data.transformToArrayFormat(setting, nodes);\n        },\n        updateNodeName: function updateNodeName(node) {\n          var Z = node[setting.treeId];\n          Z && Z.dom && view.setNodeName(setting, node);\n          return !!(Z && Z.dom);\n        },\n        updateNodeIcon: function updateNodeIcon(node) {\n          var Z = node[setting.treeId];\n          Z && Z.dom && view.setNodeLineIcos(setting, node, Z);\n          return !!(Z && Z.dom);\n        },\n        updateNodeTitle: function updateNodeTitle(node) {\n          var Z = node[setting.treeId];\n          Z && Z.dom && view.setNodeTitle(setting, node);\n          return !!(Z && Z.dom);\n        },\n        updateNodeHide: function updateNodeHide(node) {\n          var Z = node[setting.treeId];\n          Z && Z.dom && view.setNodeHide(setting, node, Z);\n          return !!(Z && Z.dom);\n        },\n        updateNode: function updateNode(node) {\n          var Z = node[setting.treeId];\n\n          if (Z && Z.dom) {\n            view.setNodeLineIcos(setting, node, Z);\n            view.setNodeName(setting, node);\n            view.setNodeTitle(setting, node);\n            view.setNodeHide(setting, node, Z);\n          }\n\n          return !!(Z && Z.dom);\n        },\n        getA: function getA(node) {\n          return $$(node, consts.id.A, setting);\n        }\n      };\n      root.treeTools = zTreeTools;\n      data.setZTreeTools(setting, zTreeTools);\n      var children = root[setting.data.key.children];\n\n      if (children && children.length > 0) {\n        view.createNodes(setting, 0, children, null, -1);\n      } else if (setting.async.enable && setting.async.url && setting.async.url !== '') {\n        view.asyncNode(setting);\n      }\n\n      return zTreeTools;\n    }\n  };\n  var zt = _$.fn.zTree,\n      $$ = tools.$,\n      consts = zt.consts;\n})(jQuery);",{"version":3,"sources":["D:\\cdRule\\src\\components\\Tree\\jquery.ztree.core.js"],"names":["settings","roots","caches","_consts","className","BUTTON","LEVEL","ICO_LOADING","SWITCH","NAME","event","NODECREATED","CLICK","EXPAND","COLLAPSE","ASYNC_SUCCESS","ASYNC_ERROR","REMOVE","SELECTED","UNSELECTED","id","DIV","A","ICON","SPAN","UL","line","ROOT","ROOTS","CENTER","BOTTOM","NOLINE","LINE","folder","OPEN","CLOSE","DOCU","_setting","treeId","treeObj","view","addDiyDom","dblClickExpand","expandSpeed","nameIsHTML","showLine","txtSelectedEnable","nameFunction","iconUrlFunction","iconCssFunction","titleFunction","hideFunction","data","key","name","parent","children","keep","leaf","async","enable","contentType","type","dataType","headers","xhrFields","url","autoParam","otherParam","dataFilter","callback","beforeAsync","beforeClick","beforeDblClick","beforeRightClick","beforeMouseDown","beforeMouseUp","beforeExpand","beforeCollapse","beforeRemove","onAsyncError","onAsyncSuccess","onNodeCreated","onClick","onDblClick","onRightClick","onMouseDown","onMouseUp","onExpand","onCollapse","onRemove","onMouseOver","onMouseOut","_initRoot","r","setting","_initCache","c","_bindEvent","o","consts","tools","_unbindEvent","_eventProxy","target","tId","node","nodeEventType","treeEventType","nodeEventCallback","treeEventCallback","tmp","tagName","attrName","handler","proxyResult","stop","_initNode","n","Z","_init","bind","unbind","nodes","proxys","beforeA","afterA","innerBeforeA","innerAfterA","innerAfterIcon","zTreeTools","addNodeCache","getNodeCacheId","addAfterA","addBeforeA","addInnerAfterA","addInnerBeforeA","addInnerAfterIcon","addInitBind","addInitUnBind","addInitCache","addInitNode","addInitProxy","addInitRoot","addNodesData","parentNode","index","first","isFirstNode","last","addSelectedNode","root","addCreatedNode","addZTreeTools","exSetting","$","getAfterA","i","j","getBeforeA","getInnerAfterIcon","getInnerAfterA","getInnerBeforeA","getCache","getNodeByParam","l","getNodeCache","getNodes","getNodesByParam","result","getNodesByParamFuzzy","value","getNodesByFilter","isSingle","tmpResult","getRoot","getRoots","getSetting","getSettings","getZTreeTools","initCache","initNode","initRoot","isSelectedNode","nodeName","removeNodeCache","removeSelectedNode","setCache","setRoot","setZTreeTools","transformToArrayFormat","_do","_node","bindEvent","unbindEvent","bindTree","eventParam","unbindTree","doProxy","results","proxy","x","onSwitchNode","onClickNode","onZTreeMousedown","onZTreeMouseup","onZTreeMouseover","onZTreeMouseout","onZTreeDblclick","onZTreeContextmenu","onSelectStart","e","apply","fun","param","canAsync","isParent","clone","obj","eqs","str1","str2","isArray","Object","exp","getMDom","curDom","targetExpr","getNodeMainDom","addNodes","newNodes","target_switchObj","$$","target_icoObj","target_ulObj","appendNodes","tmpPNode","tmpPChild","html","isLastNode","childHtml","level","openFlag","appendParentULDom","nObj","ulObj","asyncNode","icoObj","tmpParam","pKey","spKey","_tmpV","cache","JSON","success","msg","eval","error","cancelPreSelectedNode","list","excludeNode","createNodeCallback","createNodes","zTreeHtml","parentObj","nextObj","destroy","expandCollapseNode","_callback","open","switchObj","animateFlag","expandCollapseParentNode","expandCollapseSonNode","treeNodes","selfAnimateSign","expandTriggerFlag","makeDOMNodeDiv","title","makeDOMNodeIcon","makeDOMNodeName","nameStr","makeDOMNodeLine","makeDOMNodeMainBefore","makeDOMNodeNameBefore","makeNodeIcoClass","iconCss","css","makeNodeIcoStyle","iconUrl","makeNodeLineClass","lineClass","makeNodeLineClassEx","makeUlHtml","makeUlLineClass","removeChildNodes","tmp_switchObj","tmp_icoObj","scrollIntoView","contRect","findMeRect","dom","Element","start","length","outer","inner","Math","makePoint","y","pt","elem","absolute","extent","origin","coverRange","makeRange","treeDom","setFirstNode","setLastNode","removeNode","childLength","pZ","tmp_ulObj","newLast","tmp_first_switchObj","replaceIcoClass","replaceSwitchClass","tmpName","tmpList","newName","selectNode","$_theme","setNodeLineIcos","ulLine","setNodeName","setNodeTitle","setNodeHide","hide","switchNode","_z","getZTreeObj","init","document","zNodes","parseInt","isNaN","isSilent","xNewNodes","addCallback","cancelSelectedNode","expandAll","expandFlag","expandNode","callbackFlag","showNodeFocus","a","focus","getNodeByTId","getSelectedNodes","reAsyncChildNodesPromise","promise","resolve","reject","reAsyncChildNodes","isRoot","reloadType","refresh","selectedList","reset","transformTozTreeNodes","transformToArray","updateNodeName","updateNodeIcon","updateNodeTitle","updateNodeHide","updateNode","getA","zt"],"mappings":"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","sourcesContent":["/*\n * JQuery zTree core v3.5.40\n * http://treejs.cn/\n *\n * Copyright (c) 2010 Hunter.z\n *\n * Licensed same as jquery - MIT License\n * http://www.opensource.org/licenses/mit-license.php\n *\n * email: hunter.z@263.net\n * Date: 2019-01-18\n */\n(function($) {\n    var settings = {},\n    roots = {},\n    caches = {},\n    _consts = {\n        className: {\n            BUTTON: \"button\",\n            LEVEL: \"level\",\n            ICO_LOADING: \"ico_loading\",\n            SWITCH: \"switch\",\n            NAME: 'node_name'\n        },\n        event: {\n            NODECREATED: \"ztree_nodeCreated\",\n            CLICK: \"ztree_click\",\n            EXPAND: \"ztree_expand\",\n            COLLAPSE: \"ztree_collapse\",\n            ASYNC_SUCCESS: \"ztree_async_success\",\n            ASYNC_ERROR: \"ztree_async_error\",\n            REMOVE: \"ztree_remove\",\n            SELECTED: \"ztree_selected\",\n            UNSELECTED: \"ztree_unselected\"\n        },\n        id: {\n            DIV: '_div',\n            A: \"_a\",\n            ICON: \"_ico\",\n            SPAN: \"_span\",\n            SWITCH: \"_switch\",\n            UL: \"_ul\"\n        },\n        line: {\n            ROOT: \"root\",\n            ROOTS: \"roots\",\n            CENTER: \"center\",\n            BOTTOM: \"bottom\",\n            NOLINE: \"noline\",\n            LINE: \"line\"\n        },\n        folder: {\n            OPEN: \"open\",\n            CLOSE: \"close\",\n            DOCU: \"docu\"\n        }\n    },\n    _setting = {\n        treeId: \"\",\n        treeObj: null,\n        view: {\n            addDiyDom: null,\n            dblClickExpand: true,\n            expandSpeed: \"\", //fast\n            nameIsHTML: false,\n            showLine: true,\n            txtSelectedEnable: false,\n            nameFunction: null,\n            iconUrlFunction: null,\n            iconCssFunction: null,\n            titleFunction: null,\n            hideFunction: null\n        },\n        data: {\n            key: {\n                name: \"name\",\n                parent: \"parent\",\n                children: \"children\"\n            },\n            keep: {\n                parent: false,\n                leaf: false\n            }\n        },\n        async: {\n            enable: false,\n            contentType: \"application/x-www-form-urlencoded\",\n            type: \"post\",\n            dataType: \"text\",\n            headers: {},\n            xhrFields: {},\n            url: \"\",\n            autoParam: [],\n            otherParam: [],\n            dataFilter: null\n        },\n        callback: {\n            beforeAsync: null,\n            beforeClick: null,\n            beforeDblClick: null,\n            beforeRightClick: null,\n            beforeMouseDown: null,\n            beforeMouseUp: null,\n            beforeExpand: null,\n            beforeCollapse: null,\n            beforeRemove: null,\n            onAsyncError: null,\n            onAsyncSuccess: null,\n            onNodeCreated: null,\n            onClick: null,\n            onDblClick: null,\n            onRightClick: null,\n            onMouseDown: null,\n            onMouseUp: null,\n            onExpand: null,\n            onCollapse: null,\n            onRemove: null,\n            onMouseOver: null,\n            onMouseOut: null,\n        }\n    },\n    _initRoot = function(setting) {\n        var r = data.getRoot(setting);\n        if (!r) {\n            r = {};\n            data.setRoot(setting, r);\n        }\n        r[setting.data.key.children] = [];\n        r.expandTriggerFlag = false;\n        r.curSelectedList = [];\n        r.noSelection = true;\n        r.createdNodes = [];\n        r.zId = r.zId || 0;\n        r._ver = (new Date()).getTime();\n    },\n    _initCache = function(setting) {\n        var c = data.getCache(setting);\n        !c && data.setCache(setting, c = {});\n        c.nodes = [];\n    },\n    _bindEvent = function(setting) {\n        var o = setting.treeObj, c = consts.event;\n        o.bind(c.NODECREATED, function(event, node) {\n            tools.apply(setting.callback.onNodeCreated, [node, event]);\n        });\n        o.bind(c.CLICK, function(event, srcEvent, node) {\n            tools.apply(setting.callback.onClick, [node, srcEvent]);\n        });\n        o.bind(c.EXPAND, function(event, node) {\n            tools.apply(setting.callback.onExpand, [node, event]);\n        });\n        o.bind(c.COLLAPSE, function(event, node) {\n            tools.apply(setting.callback.onCollapse, [node, event]);\n        });\n        o.bind(c.ASYNC_SUCCESS, function(event, node, msg) {\n            tools.apply(setting.callback.onAsyncSuccess, [node, event, msg]);\n        });\n        o.bind(c.ASYNC_ERROR, function(event, node, XMLHttpRequest, textStatus, errorThrown) {\n            tools.apply(setting.callback.onAsyncError, [node, event, XMLHttpRequest, textStatus, errorThrown]);\n        });\n        o.bind(c.REMOVE, function(event, node) {\n            tools.apply(setting.callback.onRemove, [node, event]);\n        });\n        o.bind(c.SELECTED, function(event, node) {\n            tools.apply(setting.callback.onSelected, [node, event]);\n        });\n        o.bind(c.UNSELECTED, function(event, node) {\n            tools.apply(setting.callback.onUnSelected, [node, event]);\n        });\n    },\n    _unbindEvent = function(setting) {\n        var o = setting.treeObj,\n        c = consts.event;\n        o.unbind(c.NODECREATED).unbind(c.CLICK).unbind(c.EXPAND).unbind(c.COLLAPSE).unbind(c.ASYNC_SUCCESS).unbind(c.ASYNC_ERROR).unbind(c.REMOVE).unbind(c.SELECTED).unbind(c.UNSELECTED);\n    },\n    _eventProxy = function(event) {\n        var target = event.target,\n        setting = data.getSetting(event.data.treeId),\n        tId = \"\",\n        node = null,\n        nodeEventType = \"\",\n        treeEventType = \"\",\n        nodeEventCallback = null,\n        treeEventCallback = null,\n        tmp = null;\n        if (tools.eqs(event.type, \"mousedown\")) {\n            treeEventType = \"mousedown\";\n        } else if (tools.eqs(event.type, \"mouseup\")) {\n            treeEventType = \"mouseup\";\n        } else if (tools.eqs(event.type, \"mouseover\")) {\n        \ttreeEventType = \"mouseover\";\n        } else if (tools.eqs(event.type, \"mouseout\")) {\n        \ttreeEventType = \"mouseout\";\n        } else if (tools.eqs(event.type, \"contextmenu\")) {\n            treeEventType = \"contextmenu\";\n        } else if (tools.eqs(event.type, \"click\")) {\n            if (tools.eqs(target.tagName, \"span\") && target.getAttribute(\"treeNode\" + consts.id.SWITCH) !== null) {\n                tId = tools.getNodeMainDom(target).id;\n                nodeEventType = \"switchNode\";\n            } else {\n                tmp = tools.getMDom(setting, target, [{\n                    tagName: \"div\",\n                    attrName: \"treeNode\" + consts.id.DIV\n                }]);\n                if (tmp) {\n                    tId = tools.getNodeMainDom(tmp).id;\n                    nodeEventType = \"clickNode\";\n                }\n            }\n        } else if (tools.eqs(event.type, \"dblclick\")) {\n            treeEventType = \"dblclick\";\n            tmp = tools.getMDom(setting, target, [{\n                tagName: \"div\",\n                attrName: \"treeNode\" + consts.id.DIV\n            }]);\n            if (tmp) {\n                tId = tools.getNodeMainDom(tmp).id;\n                nodeEventType = \"switchNode\";\n            }\n        }\n        if (treeEventType.length > 0 && tId.length == 0) {\n            tmp = tools.getMDom(setting, target, [{\n                tagName: \"div\",\n                attrName: \"treeNode\" + consts.id.DIV\n            }]);\n            if (tmp) {\n                tId = tools.getNodeMainDom(tmp).id;\n            }\n        }\n        // event to node\n        if (tId.length > 0) {\n            node = data.getNodeCache(setting, tId);\n            switch (nodeEventType) {\n            case \"switchNode\":\n                if (node == null || !node[setting.treeId].isParent) {\n                    nodeEventType = \"\";\n                } else if (tools.eqs(event.type, \"click\") || (tools.eqs(event.type, \"dblclick\") && tools.apply(setting.view.dblClickExpand, [node], setting.view.dblClickExpand))) {\n                    nodeEventCallback = handler.onSwitchNode;\n                } else {\n                    nodeEventType = \"\";\n                }\n                break;\n            case \"clickNode\":\n                nodeEventCallback = handler.onClickNode;\n                break;\n            }\n        }\n        // event to zTree\n        switch (treeEventType) {\n        case \"mousedown\":\n            treeEventCallback = handler.onZTreeMousedown;\n            break;\n        case \"mouseup\":\n            treeEventCallback = handler.onZTreeMouseup;\n            break;\n        case \"mouseover\":\n            treeEventCallback = handler.onZTreeMouseover;\n            break;\n        case \"mouseout\":\n            treeEventCallback = handler.onZTreeMouseout;\n            break;\n        case \"dblclick\":\n            treeEventCallback = handler.onZTreeDblclick;\n            break;\n        case \"contextmenu\":\n            treeEventCallback = handler.onZTreeContextmenu;\n            break;\n        }\n        var proxyResult = {\n            stop: false,\n            node: node,\n            nodeEventType: nodeEventType,\n            nodeEventCallback: nodeEventCallback,\n            treeEventType: treeEventType,\n            treeEventCallback: treeEventCallback\n        };\n        return proxyResult;\n    },\n    //default init node of core\n    _initNode = function(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {\n        if (!n) return;\n        var r = data.getRoot(setting), children = n[setting.data.key.children];\n        var Z = n[setting.treeId] = n[setting.treeId] || {};\n        Z.level = level;\n        Z.tId = setting.treeId + \"_\" + (++r.zId);\n        Z.open = !!Z.open;\n        if (tools.isArray(children)) {\n            Z.isParent = true;\n            Z.zAsync = true;\n        } else {\n            Z.open = (Z.isParent && !setting.async.enable) ? Z.open: false;\n            Z.zAsync = !Z.isParent;\n        }\n        Z.isFirstNode = isFirstNode;\n        Z.isLastNode = isLastNode;\n        Z.isAjaxing = false;\n    },\n    _init = {\n        bind: [_bindEvent],\n        unbind: [_unbindEvent],\n        caches: [_initCache],\n        nodes: [_initNode],\n        proxys: [_eventProxy],\n        roots: [_initRoot],\n        beforeA: [],\n        afterA: [],\n        innerBeforeA: [],\n        innerAfterA: [],\n        innerAfterIcon: [],\n        zTreeTools: []\n    },\n    //method of operate data\n    data = {\n        addNodeCache: function(setting, node) {\n            data.getCache(setting).nodes[data.getNodeCacheId(node[setting.treeId].tId)] = node;\n        },\n        getNodeCacheId: function(tId) {\n            return tId.substring(tId.lastIndexOf(\"_\") + 1);\n        },\n        addAfterA: function(afterA) {\n            _init.afterA.push(afterA);\n        },\n        addBeforeA: function(beforeA) {\n            _init.beforeA.push(beforeA);\n        },\n        addInnerAfterA: function(innerAfterA) {\n            _init.innerAfterA.push(innerAfterA);\n        },\n        addInnerBeforeA: function(innerBeforeA) {\n            _init.innerBeforeA.push(innerBeforeA);\n        },\n        addInnerAfterIcon: function(innerAfterIcon) {\n            _init.innerAfterIcon.push(innerAfterIcon);\n        },\n        addInitBind: function(bindEvent) {\n            _init.bind.push(bindEvent);\n        },\n        addInitUnBind: function(unbindEvent) {\n            _init.unbind.push(unbindEvent);\n        },\n        addInitCache: function(initCache) {\n            _init.caches.push(initCache);\n        },\n        addInitNode: function(initNode) {\n            _init.nodes.push(initNode);\n        },\n        addInitProxy: function(initProxy, isFirst) {\n            if ( !! isFirst) {\n                _init.proxys.splice(0, 0, initProxy);\n            } else {\n                _init.proxys.push(initProxy);\n            }\n        },\n        addInitRoot: function(initRoot) {\n            _init.roots.push(initRoot);\n        },\n        addNodesData: function(setting, parentNode, index, nodes) {\n            var children = parentNode[setting.data.key.children] || [], Z;\n            if (children.length == nodes.length) {\n                parentNode[setting.treeId].isParent = true;\n            \treturn;\n            }\n            if (index === 0) {\n            \tvar first = children[nodes.length - 1];\n                Z = first[setting.treeId];\n                Z?Z.isFirstNode = false:Z={isFirstNode:false}\n                view.setNodeLineIcos(setting, first, Z);\n            } else if (index < 0) {\n                var last = children[children.length - nodes.length - 1];\n                if (last) {\n                    Z = last[setting.treeId] || {};\n                \tZ.isLastNode = false;\n                    view.setNodeLineIcos(setting, last, Z);\n                }\n            }\n            parentNode[setting.treeId].isParent = true;\n//            var children = parentNode[setting.data.key.children], params;\n//            if (!children) {\n//                children = parentNode[setting.data.key.children] = [];\n//                index = -1;\n//            } else if (index >= children.length) {\n//                index = -1;\n//            }\n//            if (children.length > 0 && index === 0) {\n//                children[0][setting.treeId].isFirstNode = false;\n//                view.setNodeLineIcos(setting, children[0]);\n//            } else if (children.length > 0 && index < 0) {\n//                children[children.length - 1][setting.treeId].isLastNode = false;\n//                view.setNodeLineIcos(setting, children[children.length - 1]);\n//            }\n//            parentNode[setting.treeId].isParent = true;\n//            if (index < 0) {\n//                parentNode[setting.data.key.children] = children.concat(nodes);\n//            } else {\n//                params = [index, 0].concat(nodes);\n//                children.splice.apply(children, params);\n//            }\n        },\n        addSelectedNode: function(setting, node) {\n            if (!data.isSelectedNode(setting, node)) {\n                var root = data.getRoot(setting);\n                root.curSelectedList.push(node);\n            }\n        },\n        addCreatedNode: function(setting, node) {\n            if (!! setting.callback.onNodeCreated || !!setting.view.addDiyDom) {\n                var root = data.getRoot(setting);\n                root.createdNodes.push(node);\n            }\n        },\n        addZTreeTools: function(zTreeTools) {\n            _init.zTreeTools.push(zTreeTools);\n        },\n        exSetting: function(s) {\n            $.extend(true, _setting, s);\n        },\n        getAfterA: function(setting, node, array) {\n            for (var i = 0, j = _init.afterA.length; i < j; i++) {\n                _init.afterA[i].apply(this, arguments);\n            }\n        },\n        getBeforeA: function(setting, node, array) {\n            for (var i = 0, j = _init.beforeA.length; i < j; i++) {\n                _init.beforeA[i].apply(this, arguments);\n            }\n        },\n        getInnerAfterIcon: function(setting, node, array) {\n            for (var i = 0, j = _init.innerAfterIcon.length; i < j; i++) {\n                _init.innerAfterIcon[i].apply(this, arguments);\n            }\n        },\n        getInnerAfterA: function(setting, node, array) {\n            for (var i = 0, j = _init.innerAfterA.length; i < j; i++) {\n                _init.innerAfterA[i].apply(this, arguments);\n            }\n        },\n        getInnerBeforeA: function(setting, node, array) {\n            for (var i = 0, j = _init.innerBeforeA.length; i < j; i++) {\n                _init.innerBeforeA[i].apply(this, arguments);\n            }\n        },\n        getCache: function(setting) {\n            return caches[setting.treeId];\n        },\n        getNodeByParam: function(setting, nodes, key, value) {\n            if (!nodes || !key) return null;\n            for (var i = 0, l = nodes.length; i < l; i++) {\n                var node = nodes[i];\n                if (node[key] == value) {\n                    return nodes[i];\n                }\n                var children = node[setting.data.key.children];\n                var tmp = data.getNodeByParam(setting, children, key, value);\n                if (tmp) return tmp;\n            }\n            return null;\n        },\n        getNodeCache: function(setting, tId) {\n            if (!tId) return null;\n            return caches[setting.treeId].nodes[data.getNodeCacheId(tId)] || 0;\n        },\n        getNodes: function(setting) {\n            return data.getRoot(setting)[setting.data.key.children];\n        },\n        getNodesByParam: function(setting, nodes, key, value) {\n            if (!nodes || !key) return [];\n            var result = [];\n            for (var i = 0, l = nodes.length; i < l; i++) {\n                var node = nodes[i];\n                if (node[key] == value) {\n                    result.push(node);\n                }\n                var children = node[setting.data.key.children];\n                result = result.concat(data.getNodesByParam(setting, children, key, value));\n            }\n            return result;\n        },\n        getNodesByParamFuzzy: function(setting, nodes, key, value) {\n            if (!nodes || !key) return [];\n            var result = [];\n            value = value.toLowerCase();\n            for (var i = 0, l = nodes.length; i < l; i++) {\n                var node = nodes[i];\n                if (typeof node[key] == \"string\" && nodes[i][key].toLowerCase().indexOf(value) > -1) {\n                    result.push(node);\n                }\n                var children = node[setting.data.key.children];\n                result = result.concat(data.getNodesByParamFuzzy(setting, children, key, value));\n            }\n            return result;\n        },\n        getNodesByFilter: function(setting, nodes, filter, isSingle, invokeParam) {\n            if (!nodes) return (isSingle ? null: []);\n            var result = isSingle ? null: [];\n            for (var i = 0, l = nodes.length; i < l; i++) {\n                var node = nodes[i];\n                if (tools.apply(filter, [node, invokeParam], false)) {\n                    if (isSingle) {\n                        return node;\n                    }\n                    result.push(node);\n                }\n                var children = node[setting.data.key.children];\n                var tmpResult = data.getNodesByFilter(setting, children, filter, isSingle, invokeParam);\n                if (isSingle && !!tmpResult) {\n                    return tmpResult;\n                }\n                result = isSingle ? tmpResult: result.concat(tmpResult);\n            }\n            return result;\n        },\n        getRoot: function(setting) {\n            return setting ? roots[setting.treeId] : null;\n        },\n        getRoots: function() {\n            return roots;\n        },\n        getSetting: function(treeId) {\n            return settings[treeId];\n        },\n        getSettings: function() {\n            return settings;\n        },\n        getZTreeTools: function(treeId) {\n            var r = this.getRoot(this.getSetting(treeId));\n            return r ? r.treeTools: null;\n        },\n        initCache: function(setting) {\n            for (var i = 0, j = _init.caches.length; i < j; i++) {\n                _init.caches[i].apply(this, arguments);\n            }\n        },\n        initNode: function(setting, level, node, parentNode, preNode, nextNode) {\n            for (var i = 0, j = _init.nodes.length; i < j; i++) {\n                _init.nodes[i].apply(this, arguments);\n            }\n        },\n        initRoot: function(setting) {\n            for (var i = 0, j = _init.roots.length; i < j; i++) {\n                _init.roots[i].apply(this, arguments);\n            }\n        },\n        isSelectedNode: function(setting, node) {\n            var root = data.getRoot(setting);\n            for (var i = 0, j = root.curSelectedList.length; i < j; i++) {\n                if (node === root.curSelectedList[i]) return true;\n            }\n            return false;\n        },\n        nodeName: function(setting, node) {\n            return setting.view.nameFunction ? setting.view.nameFunction(node) : node[setting.data.key.name];\n        },\n        removeNodeCache: function(setting, node) {\n            var children = node[setting.data.key.children];\n            if (children) {\n                for (var i = 0, l = children.length; i < l; i++) {\n                    data.removeNodeCache(setting, children[i]);\n                }\n            }\n            data.getCache(setting).nodes[data.getNodeCacheId(node[setting.treeId].tId)] = null;\n        },\n        removeSelectedNode: function(setting, node) {\n            var root = data.getRoot(setting);\n            for (var i = 0, j = root.curSelectedList.length; i < j; i++) {\n                if (node === root.curSelectedList[i] || !data.getNodeCache(setting, root.curSelectedList[i][setting.treeId].tId)) {\n                    root.curSelectedList.splice(i, 1);\n                    setting.treeObj.trigger(consts.event.UNSELECTED, [node]);\n                    i--;\n                    j--;\n                }\n            }\n        },\n        setCache: function(setting, cache) {\n            caches[setting.treeId] = cache;\n        },\n        setRoot: function(setting, root) {\n            roots[setting.treeId] = root;\n        },\n        setZTreeTools: function(setting, zTreeTools) {\n            for (var i = 0, j = _init.zTreeTools.length; i < j; i++) {\n                _init.zTreeTools[i].apply(this, arguments);\n            }\n        },\n        transformToArrayFormat: function(setting, nodes) {\n            if (!nodes) return [];\n            var r = [];\n            if (tools.isArray(nodes)) {\n                for (var i = 0, l = nodes.length; i < l; i++) {\n                    _do(nodes[i]);\n                }\n            } else {\n                _do(nodes);\n            }\n            return r;\n\n            function _do(_node) {\n                r.push(_node);\n                var children = _node[setting.data.key.children];\n                if (children) {\n                    r = r.concat(data.transformToArrayFormat(setting, children));\n                }\n            }\n        }\n    },\n    //method of event proxy\n    event = {\n        bindEvent: function(setting) {\n            for (var i = 0, j = _init.bind.length; i < j; i++) {\n                _init.bind[i].apply(this, arguments);\n            }\n        },\n        unbindEvent: function(setting) {\n            for (var i = 0, j = _init.unbind.length; i < j; i++) {\n                _init.unbind[i].apply(this, arguments);\n            }\n        },\n        bindTree: function(setting) {\n            var eventParam = {\n                treeId: setting.treeId\n            },\n            o = setting.treeObj;\n            if (!setting.view.txtSelectedEnable) {\n                // for can't select text\n                o.bind('selectstart', handler.onSelectStart).css({\n                    \"-moz-user-select\": \"-moz-none\"\n                });\n            }\n            o.bind('click', eventParam, event.proxy);\n            o.bind('dblclick', eventParam, event.proxy);\n            o.bind('mouseover', eventParam, event.proxy);\n            o.bind('mouseout', eventParam, event.proxy);\n            o.bind('mousedown', eventParam, event.proxy);\n            o.bind('mouseup', eventParam, event.proxy);\n            o.bind('contextmenu', eventParam, event.proxy);\n        },\n        unbindTree: function(setting) {\n            var o = setting.treeObj;\n            o.unbind('selectstart', handler.onSelectStart).unbind('click', event.proxy).unbind('dblclick', event.proxy).unbind('mouseover', event.proxy).unbind('mouseout', event.proxy).unbind('mousedown', event.proxy).unbind('mouseup', event.proxy).unbind('contextmenu', event.proxy);\n        },\n        doProxy: function(e) {\n            var results = [];\n            for (var i = 0, j = _init.proxys.length; i < j; i++) {\n                var proxyResult = _init.proxys[i].apply(this, arguments);\n                results.push(proxyResult);\n                if (proxyResult.stop) {\n                    break;\n                }\n            }\n            return results;\n        },\n        proxy: function(e) {\n            var results = event.doProxy(e), r = true, x = false;\n            for (var i = 0, l = results.length; i < l; i++) {\n                var proxyResult = results[i];\n                if (proxyResult.nodeEventCallback) {\n                    x = true;\n                    r = proxyResult.nodeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;\n                }\n                if (proxyResult.treeEventCallback) {\n                    x = true;\n                    r = proxyResult.treeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;\n                }\n            }\n            return r;\n        }\n    },\n    //method of event handler\n    handler = {\n        onSwitchNode: function(event, node) {\n            var setting = data.getSetting(event.data.treeId);\n            if (node[setting.treeId].open) {\n                if (tools.apply(setting.callback.beforeCollapse, [node, event], true) == false) return true;\n                data.getRoot(setting).expandTriggerFlag = true;\n                view.switchNode(setting, node, true);\n            } else {\n                if (tools.apply(setting.callback.beforeExpand, [node, event], true) == false) return true;\n                data.getRoot(setting).expandTriggerFlag = true;\n                view.switchNode(setting, node, false);\n            }\n            return true;\n        },\n        onClickNode: function(event, node) {\n            var setting = data.getSetting(event.data.treeId);\n            if (tools.apply(setting.callback.beforeClick, [node, event], true) == false) return true;\n            view.selectNode(setting, node, true);\n            setting.treeObj.trigger(consts.event.CLICK, [event, node]);\n            return true;\n        },\n        onZTreeMousedown: function(event, node) {\n            var setting = data.getSetting(event.data.treeId);\n            if (tools.apply(setting.callback.beforeMouseDown, [node, event], true)) {\n                tools.apply(setting.callback.onMouseDown, [node, event]);\n            }\n            return true;\n        },\n        onZTreeMouseup: function(event, node) {\n            var setting = data.getSetting(event.data.treeId);\n            if (tools.apply(setting.callback.beforeMouseUp, [node, event], true)) {\n                tools.apply(setting.callback.onMouseUp, [node, event]);\n            }\n            return true;\n        },\n        onZTreeMouseover: function(event, node) {\n            var setting = data.getSetting(event.data.treeId);\n            tools.apply(setting.callback.onMouseOver, [node, event]);\n            return true;\n        },\n        onZTreeMouseout: function(event, node) {\n            var setting = data.getSetting(event.data.treeId);\n            tools.apply(setting.callback.onMouseOut, [node, event]);\n            return true;\n        },\n        onZTreeDblclick: function(event, node) {\n            var setting = data.getSetting(event.data.treeId);\n            if (tools.apply(setting.callback.beforeDblClick, [node, event], true)) {\n                tools.apply(setting.callback.onDblClick, [node, event]);\n            }\n            return true;\n        },\n        onZTreeContextmenu: function(event, node) {\n            var setting = data.getSetting(event.data.treeId);\n            if (tools.apply(setting.callback.beforeRightClick, [node, event], true)) {\n                tools.apply(setting.callback.onRightClick, [node, event]);\n            }\n            return (typeof setting.callback.onRightClick) != \"function\";\n        },\n        onSelectStart: function(e) {\n            var n = e.originalEvent.srcElement.nodeName.toLowerCase();\n            return (n === \"input\" || n === \"textarea\");\n        }\n    },\n    //method of tools for zTree\n    tools = {\n        apply: function(fun, param, defaultValue) {\n            if ((typeof fun) == \"function\") {\n                return fun.apply(zt, param ? param: []);\n            }\n            return defaultValue;\n        },\n        canAsync: function(setting, node) {\n            var children = node[setting.data.key.children];\n            var isParent = node[setting.treeId].isParent;\n            return (setting.async.enable && node && isParent && !(node[setting.treeId].zAsync || (children && children.length > 0)));\n        },\n        clone: function(obj) {\n            if (obj === null) return null;\n            var o = tools.isArray(obj) ? [] : {};\n            for (var i in obj) {\n                o[i] = (obj[i] instanceof Date) ? new Date(obj[i].getTime()) : (typeof obj[i] === \"object\" ? tools.clone(obj[i]) : obj[i]);\n            }\n            return o;\n        },\n        eqs: function(str1, str2) {\n            return str1.toLowerCase() === str2.toLowerCase();\n        },\n        isArray: function(arr) {\n            return Object.prototype.toString.apply(arr) === \"[object Array]\";\n        },\n        $: function(node, exp, setting) {\n            if ( !! exp && typeof exp != \"string\") {\n                setting = exp;\n                exp = \"\";\n            }\n            if (typeof node == \"string\") {\n                return $(node, setting ? setting.treeObj.get(0).ownerDocument: null);\n            } else {\n            \tif (!node[setting.treeId]) {\n            \t\treturn $();\n            \t}\n                return $(\"#\" + node[setting.treeId].tId + exp, setting ? setting.treeObj: null);\n            }\n        },\n        getMDom: function(setting, curDom, targetExpr) {\n            if (!curDom) return null;\n            while (curDom && curDom.id !== setting.treeId) {\n                for (var i = 0, l = targetExpr.length; curDom.tagName && i < l; i++) {\n                    if (tools.eqs(curDom.tagName, targetExpr[i].tagName) && curDom.getAttribute(targetExpr[i].attrName) !== null) {\n                        return curDom;\n                    }\n                }\n                curDom = curDom.parentNode;\n            }\n            return null;\n        },\n        getNodeMainDom: function(target) {\n            return ($(target).parent(\"li\").get(0) || $(target).parentsUntil(\"li\").parent().get(0));\n        }\n    },\n    //method of operate ztree dom\n    view = {\n        addNodes: function(setting, parentNode, index, newNodes, isSilent) {\n            if (setting.data.keep.leaf && parentNode && !parentNode[setting.treeId].isParent) {\n                return;\n            }\n            if (!tools.isArray(newNodes)) {\n                newNodes = [newNodes];\n            }\n            if (parentNode) {\n                var target_switchObj = $$(parentNode, consts.id.SWITCH, setting),\n                target_icoObj = $$(parentNode, consts.id.ICON, setting),\n                target_ulObj = $$(parentNode, consts.id.UL, setting);\n                var Z = parentNode[setting.treeId];\n                if (!Z.open) {\n                    view.replaceSwitchClass(Z.level, target_switchObj, consts.folder.CLOSE);\n                    view.replaceIcoClass(target_icoObj, setting, parentNode, Z);\n                    Z.open = false;\n                    target_ulObj.css({\n                        \"display\": \"none\"\n                    });\n                }\n                data.addNodesData(setting, parentNode, index, newNodes);\n                view.createNodes(setting, Z.level + 1, newNodes, parentNode, index);\n                if (!isSilent) {\n                    view.expandCollapseParentNode(setting, parentNode, true);\n                }\n            } else {\n                data.addNodesData(setting, data.getRoot(setting), index, newNodes);\n                view.createNodes(setting, 0, newNodes, null, index);\n            }\n        },\n        appendNodes: function(setting, level, nodes, parentNode, index, initFlag, openFlag) {\n            if (!nodes) return [];\n            var tmpPNode = parentNode || data.getRoot(setting), tmpPChild = tmpPNode[setting.data.key.children], html = [], isFirstNode, isLastNode;\n            if (!tmpPChild || index >= tmpPChild.length - nodes.length) {\n                index = -1;\n            }\n            for (var i = 0, l = nodes.length, Z; i < l; i++) {\n                var node = nodes[i];\n                if (initFlag) {\n                    isFirstNode = ((index === 0 || tmpPChild.length == nodes.length) && (i == 0));\n                    isLastNode = (index < 0 && i == (nodes.length - 1));\n                    data.initNode(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag);\n                    data.addNodeCache(setting, node);\n                }\n                Z = node[setting.treeId];\n                var childHtml = [];\n                var children = node[setting.data.key.children];\n                if (children && children.length > 0) {\n                    //make child html first, because checkType\n                    childHtml = view.appendNodes(setting, level + 1, children, node, -1, initFlag, openFlag && Z.open);\n                }\n                if (openFlag && Z) {\n                    view.makeDOMNodeMainBefore(html, setting, node, Z);\n                    view.makeDOMNodeDiv(html, setting, node, Z);\n                    view.makeDOMNodeLine(html, setting, node, Z);\n                    data.getBeforeA(setting, node, html);\n                    view.makeDOMNodeNameBefore(html, setting, node, Z);\n                    data.getInnerBeforeA(setting, node, html);\n                    view.makeDOMNodeIcon(html, setting, node, Z);\n                    data.getInnerAfterIcon(setting, node, html);\n                    view.makeDOMNodeName(html, setting, node, Z);\n                    data.getInnerAfterA(setting, node, html);\n                    html.push(\"</a>\"); //view.makeDOMNodeNameAfter(html, setting, node);\n                    data.getAfterA(setting, node, html);\n                    html.push(\"</div>\");\n                    if (Z.isParent && Z.open) {\n                        view.makeUlHtml(setting, node, html, childHtml.join(''), Z);\n                    }\n                    html.push(\"</li>\"); //view.makeDOMNodeMainAfter(html, setting, node);\n                    data.addCreatedNode(setting, node);\n                    Z.dom = true;\n                }\n            }\n            return html;\n        },\n        appendParentULDom: function(setting, node) {\n            var html = [], nObj = $$(node, setting), Z = node[setting.treeId], parent;\n            if (!nObj.get(0) && !!(parent = node[setting.data.key.parent])) {\n                view.appendParentULDom(setting, parent); parent = null;\n                nObj = $$(node, setting);\n            }\n            var ulObj = $$(node, consts.id.UL, setting);\n            if (ulObj.get(0)) {\n                ulObj.remove();\n            }\n            var children = node[setting.data.key.children],\n            childHtml = view.appendNodes(setting, Z.level + 1, children, node, -1, false, true);\n            view.makeUlHtml(setting, node, html, childHtml.join(''), Z);\n            nObj.append(html.join(''));\n        },\n        asyncNode: function(setting, node, isSilent, callback) {\n            if (node && !node[setting.treeId].isParent) {\n                tools.apply(callback);\n                return false;\n            } else if (node && node[setting.treeId].isAjaxing) {\n                return false;\n            } else if (tools.apply(setting.callback.beforeAsync, [node], true) == false) {\n                tools.apply(callback);\n                return false;\n            }\n            if (node) {\n                node[setting.treeId].isAjaxing = true;\n                var icoObj = $$(node, consts.id.ICON, setting);\n                icoObj.attr({\n                    \"style\": \"\",\n                    \"class\": consts.className.BUTTON + \" \" + consts.className.ICO_LOADING\n                });\n            }\n            var i, l, tmpParam = {};\n            var autoParam = tools.apply(setting.async.autoParam, [node], setting.async.autoParam);\n            for (i = 0, l = autoParam.length; node && i < l; i++) {\n                var pKey = autoParam[i].split(\"=\"), spKey = pKey;\n                if (pKey.length > 1) {\n                    spKey = pKey[1];\n                    pKey = pKey[0];\n                }\n                tmpParam[spKey] = node[pKey];\n            }\n            var otherParam = tools.apply(setting.async.otherParam, [node], setting.async.otherParam);\n            if (tools.isArray(otherParam)) {\n                for (i = 0, l = otherParam.length; i < l; i += 2) {\n                    tmpParam[otherParam[i]] = otherParam[i + 1];\n                }\n            } else {\n                for (var p in otherParam) {\n                    tmpParam[p] = otherParam[p];\n                }\n            }\n            var _tmpV = data.getRoot(setting)._ver;\n            $.ajax({\n                contentType: setting.async.contentType,\n                cache: false,\n                type: setting.async.type,\n                url: tools.apply(setting.async.url, [node], setting.async.url),\n                data: setting.async.contentType.indexOf('application/json') > -1 ? JSON.stringify(tmpParam) : tmpParam,\n                dataType: setting.async.dataType,\n                headers: setting.async.headers,\n                xhrFields: setting.async.xhrFields,\n                success: function(msg) {\n                    if (_tmpV != data.getRoot(setting)._ver) {\n                        return;\n                    }\n                    var newNodes = [];\n                    try {\n                        if (!msg || msg.length == 0) {\n                            newNodes = [];\n                        } else if (typeof msg == \"string\") {\n                            newNodes = eval(\"(\" + msg + \")\");\n                        } else {\n                            newNodes = msg;\n                        }\n                    } catch(err) {\n                        newNodes = msg;\n                    }\n                    var Z = node ? node[setting.treeId] : null;\n                    if (Z) {\n                        Z.isAjaxing = null;\n                        Z.zAsync = true;\n                    }\n                    view.setNodeLineIcos(setting, node, Z);\n                    if (newNodes && newNodes !== \"\") {\n                        newNodes = tools.apply(setting.async.dataFilter, [node, newNodes], newNodes);\n                        view.addNodes(setting, node, -1, !!newNodes ? newNodes: [], !!isSilent);\n                    } else {\n                        view.addNodes(setting, node, -1, [], !!isSilent);\n                    }\n                    setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [node, msg]);\n                    tools.apply(callback);\n                },\n                error: function(XMLHttpRequest, textStatus, errorThrown) {\n                    if (_tmpV != data.getRoot(setting)._ver) {\n                        return;\n                    }\n                    var Z = node ? node[setting.treeId] : null;\n                    Z && (Z.isAjaxing = null);\n                    view.setNodeLineIcos(setting, node, Z);\n                    setting.treeObj.trigger(consts.event.ASYNC_ERROR, [node, XMLHttpRequest, textStatus, errorThrown]);\n                }\n            });\n            return true;\n        },\n        cancelPreSelectedNode: function(setting, node, excludeNode) {\n            var list = data.getRoot(setting).curSelectedList, i, n;\n            for (i = list.length - 1; i >= 0; i--) {\n                n = list[i];\n                if (node === n || (!node && (!excludeNode || excludeNode !== n))) {\n                    $$(n, consts.id.DIV, setting).css('background-color', '');\n                    if (node) {\n                        data.removeSelectedNode(setting, node);\n                        break;\n                    } else {\n                        list.splice(i, 1);\n                        setting.treeObj.trigger(consts.event.UNSELECTED, [n]);\n                    }\n                }\n            }\n        },\n        createNodeCallback: function(setting) {\n            if ( !! setting.callback.onNodeCreated || !!setting.view.addDiyDom) {\n                var root = data.getRoot(setting);\n                while (root.createdNodes.length > 0) {\n                    var node = root.createdNodes.shift();\n                    tools.apply(setting.view.addDiyDom, [node]);\n                    if ( !! setting.callback.onNodeCreated) {\n                        setting.treeObj.trigger(consts.event.NODECREATED, [node]);\n                    }\n                }\n            }\n        },\n        createNodes: function(setting, level, nodes, parentNode, index) {\n            if (!nodes || nodes.length == 0) return;\n            var root = data.getRoot(setting),\n            openFlag = !parentNode || parentNode[setting.treeId].open || !!$$(parentNode[setting.data.key.children][0], setting).get(0);\n            root.createdNodes = [];\n            var zTreeHtml = view.appendNodes(setting, level, nodes, parentNode, index, true, openFlag),\n            parentObj,\n            nextObj;\n            if (!parentNode) {\n                parentObj = setting.treeObj;\n            } else {\n                var ulObj = $$(parentNode, consts.id.UL, setting);\n                if (ulObj.get(0)) {\n                    parentObj = ulObj;\n                }\n            }\n            if (parentObj) {\n                if (index >= 0) {\n                    nextObj = parentObj.children()[index];\n                }\n                if (index >= 0 && nextObj) {\n                    $(nextObj).before(zTreeHtml.join(''));\n                } else {\n                    parentObj.append(zTreeHtml.join(''));\n                }\n            }\n            view.createNodeCallback(setting);\n        },\n        destroy: function(setting) {\n            if (!setting) return;\n            let { nodes } = data.getCache(setting);\n            if (nodes) {\n                for (let i in nodes) {\n                    if(nodes[i]) delete nodes[i][setting.treeId];\n                }\n            }\n            data.initCache(setting);\n            data.initRoot(setting);\n            event.unbindTree(setting);\n            event.unbindEvent(setting);\n            setting.treeObj.empty();\n            delete settings[setting.treeId];\n        },\n        expandCollapseNode: function(setting, node, expandFlag, animateFlag, callback) {\n            var root = data.getRoot(setting);\n            var _callback;\n            if (!node) {\n                tools.apply(callback, []);\n                return;\n            }\n            var children = node[setting.data.key.children];\n            var Z = node[setting.treeId];\n            if (root.expandTriggerFlag) {\n                _callback = callback;\n                callback = function() {\n                    if (_callback) _callback();\n                    setting.treeObj.trigger(Z.open ? consts.event.EXPAND : consts.event.COLLAPSE, [node]);\n                };\n                root.expandTriggerFlag = false;\n            }\n            Z?Z=Z:Z={open:null}\n            if (!Z.open && Z.isParent && ((!$$(node, consts.id.UL, setting).get(0)) || (children && children.length > 0 && !$$(children[0], setting).get(0)))) {\n                view.appendParentULDom(setting, node);\n                view.createNodeCallback(setting);\n            }\n            if (Z.open == expandFlag) {\n                tools.apply(callback, []);\n                return;\n            }\n            var ulObj = $$(node, consts.id.UL, setting),\n            switchObj = $$(node, consts.id.SWITCH, setting),\n            icoObj = $$(node, consts.id.ICON, setting);\n            if (Z.isParent) {\n                Z.open = !Z.open;\n                if (setting.view.iconUrlFunction) {\n                    icoObj.attr(\"style\", view.makeNodeIcoStyle(setting, node, Z));\n                }\n                if (Z.open) {\n                    view.replaceSwitchClass(Z.level, switchObj, consts.folder.OPEN);\n                    view.replaceIcoClass(icoObj, setting, node, Z);\n                    if (animateFlag == false || setting.view.expandSpeed == \"\") {\n                        ulObj.show();\n                        tools.apply(callback, []);\n                    } else {\n                        if (children && children.length > 0) {\n                            ulObj.slideDown(setting.view.expandSpeed, callback);\n                        } else {\n                            ulObj.show();\n                            tools.apply(callback, []);\n                        }\n                    }\n                } else {\n                    view.replaceSwitchClass(Z.level, switchObj, consts.folder.CLOSE);\n                    view.replaceIcoClass(icoObj, setting, node, Z);\n                    if (animateFlag == false || setting.view.expandSpeed == \"\" || !(children && children.length > 0)) {\n                        ulObj.hide();\n                        tools.apply(callback, []);\n                    } else {\n                        ulObj.slideUp(setting.view.expandSpeed, callback);\n                    }\n                }\n            } else {\n                tools.apply(callback, []);\n            }\n        },\n        expandCollapseParentNode: function(setting, node, expandFlag, animateFlag, callback) {\n            if (!node) return;\n            var parent = node[setting.data.key.parent];\n            var Z = parent ? parent[setting.treeId] : null;\n            parent = Z ? data.getNodeCache(setting, Z.tId) : null;\n            if (!parent) {\n                view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback);\n            } else {\n                view.expandCollapseNode(setting, node, expandFlag, animateFlag);\n                view.expandCollapseParentNode(setting, parent, expandFlag, animateFlag, callback);\n            }\n        },\n        expandCollapseSonNode: function(setting, node, expandFlag, animateFlag, callback) {\n            var root = data.getRoot(setting),\n            treeNodes = node ? node[setting.data.key.children] : root[setting.data.key.children],\n            selfAnimateSign = node ? false: animateFlag,\n            expandTriggerFlag = data.getRoot(setting).expandTriggerFlag;\n            data.getRoot(setting).expandTriggerFlag = false;\n            if (treeNodes) {\n                for (var i = 0, l = treeNodes.length; i < l; i++) {\n                    if (treeNodes[i]) view.expandCollapseSonNode(setting, treeNodes[i], expandFlag, selfAnimateSign);\n                }\n            }\n            data.getRoot(setting).expandTriggerFlag = expandTriggerFlag;\n            view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback);\n        },\n        isSelectedNode: function(setting, node) {\n            if (!node) {\n                return false;\n            }\n            var list = data.getRoot(setting).curSelectedList, i;\n            for (i = list.length - 1; i >= 0; i--) {\n                if (node === list[i]) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        makeDOMNodeDiv: function(html, setting, node, Z) {\n            html.push(\"<div id='\" + Z.tId + \"_div' treeNode_div style='height:22px\");\n            if (setting.view.hideFunction) {\n            \tZ.hide = setting.view.hideFunction(node);\n            \tZ.hide && html.push(\";display:none\");\n            }\n            html.push(\"'\");\n        \tif (setting.view.titleFunction) {\n                var title = setting.view.titleFunction(node);\n                if (title) html.push(\" title='\", title.replace(/'/g, \"&#39;\").replace(/</g, '&lt;').replace(/>/g, '&gt;'), \"'\");\n            }\n            html.push(\">\");\n        },\n        makeDOMNodeIcon: function(html, setting, node, Z) {\n            html.push(\"<span id='\", Z.tId, consts.id.ICON, \"' treeNode\", consts.id.ICON, \" class='\", view.makeNodeIcoClass(setting, node, Z), \"' style='\", view.makeNodeIcoStyle(setting, node, Z), \"'></span>\");\n        },\n        makeDOMNodeName: function(html, setting, node, Z) {\n            var nameStr = data.nodeName(setting, node),\n            name = nameStr ? setting.view.nameIsHTML ? nameStr: nameStr.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') : '';\n            html.push(\"<span id='\", Z.tId, consts.id.SPAN, \"' class='\", consts.className.NAME, \"'>\", name, \"</span>\");\n        },\n        makeDOMNodeLine: function(html, setting, node, Z) {\n            html.push(\"<span id='\", Z.tId, consts.id.SWITCH, \"' class='\", view.makeNodeLineClass(setting, node, Z), \"' treeNode\", consts.id.SWITCH, \"></span>\");\n        },\n        makeDOMNodeMainBefore: function(html, setting, node, Z) {\n            html.push(\"<li id='\", Z.tId, \"' class='\", consts.className.LEVEL, Z.level, \"' tabindex='0' hidefocus='true' treenode>\");\n        },\n        makeDOMNodeNameBefore: function(html, setting, node, Z) {\n            html.push(\"<a id='\", Z.tId, consts.id.A, \"' class='\", consts.className.LEVEL, Z.level, \"' treeNode\", consts.id.A, \">\"); //, \" onclick=\\\"\", (Z.click || ''), \"\\\" \", \"style='\", fontStyle.join(''), \"'\"\n        },\n        makeNodeIcoClass: function(setting, node, Z) {\n            var iconCss = consts.className.BUTTON + \" ico \";\n            if (!Z.isAjaxing) {\n                if (setting.view.iconCssFunction) {\n                    var css = setting.view.iconCssFunction(node, Z.open);\n                    if (css) return iconCss + css;\n                }\n                if (Z.isParent) {\n                    iconCss += 'ico_' + (Z.open ? consts.folder.OPEN: consts.folder.CLOSE);\n                } else {\n                    iconCss += 'ico_' + consts.folder.DOCU;\n                }\n            }\n            return iconCss;\n        },\n        makeNodeIcoStyle: function(setting, node, Z) {\n            if (!Z.isAjaxing && setting.view.iconUrlFunction) {\n                var iconUrl = setting.view.iconUrlFunction(node, Z.open);\n                if (iconUrl) return \"background-size:16px 16px;background-image:url(\" + iconUrl + \");\";\n            }\n            return '';\n        },\n        makeNodeLineClass: function(setting, node, Z) {\n            var lineClass = [];\n            if (setting.view.showLine) {\n                if (Z.level == 0 && Z.isFirstNode && Z.isLastNode) {\n                    lineClass.push(consts.line.ROOT);\n                } else if (Z.level == 0 && Z.isFirstNode) {\n                    lineClass.push(consts.line.ROOTS);\n                } else if (Z.isLastNode) {\n                    lineClass.push(consts.line.BOTTOM);\n                } else {\n                    lineClass.push(consts.line.CENTER);\n                }\n            } else {\n                lineClass.push(consts.line.NOLINE);\n            }\n            if (Z.isParent) {\n                lineClass.push(Z.open ? consts.folder.OPEN: consts.folder.CLOSE);\n            } else {\n                lineClass.push(consts.folder.DOCU);\n            }\n            return view.makeNodeLineClassEx(Z.level) + lineClass.join('_');\n        },\n        makeNodeLineClassEx: function(level) {\n            return consts.className.BUTTON + \" \" + consts.className.LEVEL + level + \" \" + consts.className.SWITCH + \" \";\n        },\n        makeUlHtml: function(setting, node, html, content, Z) {\n            html.push(\"<ul id='\", Z.tId, consts.id.UL, \"' class='\", consts.className.LEVEL, Z.level, \" \", view.makeUlLineClass(setting, Z), \"' style='display:\", (Z.open ? \"block\": \"none\"), \"'>\");\n            html.push(content);\n            html.push(\"</ul>\");\n        },\n        makeUlLineClass: function(setting, Z) {\n            return (setting.view.showLine && !Z.isLastNode) ? consts.line.LINE: \"\";\n        },\n        removeChildNodes: function(setting, node) {\n            if (!node) return;\n            var nodes = node[setting.data.key.children];\n            if (!nodes) return;\n            for (var i = 0, l = nodes.length; i < l; i++) {\n                data.removeNodeCache(setting, nodes[i]);\n                delete nodes[i][setting.treeId];\n            }\n            data.removeSelectedNode(setting);\n            delete node[setting.data.key.children];\n            if (!setting.data.keep.parent) {\n                var Z = node[setting.treeId];\n                Z.isParent = false;\n                Z.open = false;\n                var tmp_switchObj = $$(node, consts.id.SWITCH, setting),\n                tmp_icoObj = $$(node, consts.id.ICON, setting);\n                view.replaceSwitchClass(Z.level, tmp_switchObj, consts.folder.DOCU);\n                view.replaceIcoClass(tmp_icoObj, setting, node, Z);\n                $$(node, consts.id.UL, setting).remove();\n            } else {\n                $$(node, consts.id.UL, setting).empty();\n            }\n        },\n        scrollIntoView: function(setting, dom) {\n            if (!dom) {\n                return;\n            }\n            // support IE 7\n            if (typeof Element === 'undefined') {\n                var contRect = setting.treeObj.get(0).getBoundingClientRect(), findMeRect = dom.getBoundingClientRect();\n                if (findMeRect.top < contRect.top || findMeRect.bottom > contRect.bottom || findMeRect.right > contRect.right || findMeRect.left < contRect.left) {\n                    dom.scrollIntoView();\n                }\n                return;\n            }\n            // CC-BY jocki84@googlemail.com, https://gist.github.com/jocki84/6ffafd003387179a988e\n            if (!Element.prototype.scrollIntoViewIfNeeded) {\n                Element.prototype.scrollIntoViewIfNeeded = function(centerIfNeeded) {\n                    \"use strict\";\n\n                    function makeRange(start, length) {\n                        return {\n                            \"start\": start,\n                            \"length\": length,\n                            \"end\": start + length\n                        };\n                    }\n\n                    function coverRange(inner, outer) {\n                        if (false === centerIfNeeded || (outer.start < inner.end && inner.start < outer.end)) {\n                            return Math.max(inner.end - outer.length, Math.min(outer.start, inner.start));\n                        }\n                        return (inner.start + inner.end - outer.length) / 2;\n                    }\n\n                    function makePoint(x, y) {\n                        return {\n                            \"x\": x,\n                            \"y\": y,\n                            \"translate\": function translate(dX, dY) {\n                                return makePoint(x + dX, y + dY);\n                            }\n                        };\n                    }\n\n                    function absolute(elem, pt) {\n                        while (elem) {\n                            pt = pt.translate(elem.offsetLeft, elem.offsetTop);\n                            elem = elem.offsetParent;\n                        }\n                        return pt;\n                    }\n                    var target = absolute(this, makePoint(0, 0)), extent = makePoint(this.offsetWidth, this.offsetHeight), elem = this.parentNode, origin;\n                    while (elem instanceof HTMLElement) {\n                        // Apply desired scroll amount.\n                        origin = absolute(elem, makePoint(elem.clientLeft, elem.clientTop));\n                        //elem.scrollLeft = coverRange(makeRange(target.x - origin.x, extent.x), makeRange(elem.scrollLeft, elem.clientWidth));\n                        elem.scrollTop = coverRange(makeRange(target.y - origin.y, extent.y), makeRange(elem.scrollTop, elem.clientHeight));\n                        // Determine actual scroll amount by reading back scroll properties.\n                        target = target.translate( - elem.scrollLeft, -elem.scrollTop);\n                        elem = elem.parentNode;\n                    }\n                };\n            }\n            dom.scrollIntoViewIfNeeded();\n            let treeDom = setting.treeObj.get(0).parentNode;\n            treeDom.scrollBy(-1000, 0);\n        },\n        setFirstNode: function(setting, parentNode) {\n            var children = parentNode[setting.data.key.children];\n            if (children && children.length > 0) {\n                children[0][setting.treeId].isFirstNode = true;\n            }\n        },\n        setLastNode: function(setting, parentNode) {\n            var children = parentNode[setting.data.key.children];\n            if (children && children.length > 0) {\n                children[children.length - 1][setting.treeId].isLastNode = true;\n            }\n        },\n        removeNode: function(setting, node) {\n            var root = data.getRoot(setting), parentNode = node[setting.data.key.parent] || root, Z = node[setting.treeId];\n            Z.isFirstNode = false;\n            Z.isLastNode = false;\n            if (!data.getNodeCache(setting, Z.tId)) {\n                return;\n            }\n            $$(node, setting).remove();\n            data.removeNodeCache(setting, node);\n            data.removeSelectedNode(setting, node);\n            var children = parentNode[setting.data.key.children] || [];\n            for (var i = 0, l = children.length; i < l; i++) {\n                if (children[i][setting.treeId].tId == Z.tId) {\n                    children.splice(i, 1);\n                    break;\n                }\n            }\n            delete node[setting.treeId];\n            view.setFirstNode(setting, parentNode);\n            view.setLastNode(setting, parentNode);\n            var tmp_ulObj, tmp_switchObj, tmp_icoObj, childLength = children.length;\n            //repair nodes old parent\n            if (!setting.data.keep.parent && childLength == 0) {\n                //old parentNode has no child nodes\n                var pZ = parentNode[setting.treeId];\n                pZ.isParent = false;\n                pZ.open = false;\n                delete parentNode[setting.data.key.children];\n                tmp_ulObj = $$(parentNode, consts.id.UL, setting);\n                tmp_switchObj = $$(parentNode, consts.id.SWITCH, setting);\n                tmp_icoObj = $$(parentNode, consts.id.ICON, setting);\n                view.replaceSwitchClass(pZ.level, tmp_switchObj, consts.folder.DOCU);\n                view.replaceIcoClass(tmp_icoObj, setting, parentNode, pZ);\n                tmp_ulObj.css(\"display\", \"none\");\n            } else if (setting.view.showLine && childLength > 0) {\n                //old parentNode has child nodes\n                var newLast = children[childLength - 1];\n                tmp_ulObj = $$(newLast, consts.id.UL, setting);\n                tmp_switchObj = $$(newLast, consts.id.SWITCH, setting);\n                tmp_icoObj = $$(newLast, consts.id.ICON, setting);\n                if (parentNode == root) {\n                    if (children.length == 1) {\n                        //node was root, and ztree has only one root after move node\n                        view.replaceSwitchClass(newLast[setting.treeId].level, tmp_switchObj, consts.line.ROOT);\n                    } else {\n                        var tmp_first_switchObj = $$(children[0], consts.id.SWITCH, setting);\n                        view.replaceSwitchClass(children[0][setting.treeId].level, tmp_first_switchObj, consts.line.ROOTS);\n                        view.replaceSwitchClass(newLast[setting.treeId].level, tmp_switchObj, consts.line.BOTTOM);\n                    }\n                } else {\n                    view.replaceSwitchClass(newLast[setting.treeId].level, tmp_switchObj, consts.line.BOTTOM);\n                }\n                tmp_ulObj.removeClass(consts.line.LINE);\n            }\n        },\n        replaceIcoClass: function(obj, setting, node, Z) {\n            if (!obj || Z.isAjaxing) return;\n            obj.attr(\"class\", this.makeNodeIcoClass(setting, node, Z));\n        },\n        replaceSwitchClass: function(level, obj, newName) {\n            if (!obj) return;\n            var tmpName = obj.attr(\"class\");\n            if (tmpName == undefined) return;\n            var tmpList = tmpName.split(\"_\");\n            switch (newName) {\n            case consts.line.ROOT:\n            case consts.line.ROOTS:\n            case consts.line.CENTER:\n            case consts.line.BOTTOM:\n            case consts.line.NOLINE:\n                tmpList[0] = view.makeNodeLineClassEx(level) + newName;\n                break;\n            case consts.folder.OPEN:\n            case consts.folder.CLOSE:\n            case consts.folder.DOCU:\n                tmpList[1] = newName;\n                break;\n            }\n            obj.attr(\"class\", tmpList.join(\"_\"));\n            if (newName !== consts.folder.DOCU) {\n                obj.removeAttr(\"disabled\");\n            } else {\n                obj.attr(\"disabled\", \"disabled\");\n            }\n        },\n        selectNode: function(setting, node) {\n        \tview.cancelPreSelectedNode(setting, null, node);\n            $$(node, consts.id.DIV, setting).css('background-color', $_theme.selected_color);\n            data.addSelectedNode(setting, node);\n            setting.treeObj.trigger(consts.event.SELECTED, [node]);\n        },\n        setNodeLineIcos: function(setting, node, Z) {\n            if (!node) return;\n            var switchObj = $$(node, consts.id.SWITCH, setting),\n            ulObj = $$(node, consts.id.UL, setting),\n            icoObj = $$(node, consts.id.ICON, setting),\n            ulLine = view.makeUlLineClass(setting, Z);\n            if (ulLine.length == 0) {\n                ulObj.removeClass(consts.line.LINE);\n            } else {\n                ulObj.addClass(ulLine);\n            }\n            switchObj.attr(\"class\", view.makeNodeLineClass(setting, node, Z));\n            if (Z.isParent) {\n                switchObj.removeAttr(\"disabled\");\n            } else {\n                switchObj.attr(\"disabled\", \"disabled\");\n            }\n            icoObj.removeAttr(\"style\");\n            icoObj.attr(\"style\", view.makeNodeIcoStyle(setting, node, Z));\n            icoObj.attr(\"class\", view.makeNodeIcoClass(setting, node, Z));\n        },\n        setNodeName: function(setting, node) {\n            var nObj = $$(node, consts.id.SPAN, setting);\n            nObj.empty();\n            if (setting.view.nameIsHTML) {\n                nObj.html(data.nodeName(setting, node));\n            } else {\n                nObj.text(data.nodeName(setting, node));\n            }\n        },\n        setNodeTitle: function(setting, node) {\n            if (setting.view.titleFunction) {\n                var title = setting.view.titleFunction(node);\n                $$(node, consts.id.DIV, setting).attr(\"title\", !title ? \"\": title);\n            }\n        },\n        setNodeHide: function(setting, node, Z) {\n            if (setting.view.hideFunction) {\n                var hide = setting.view.hideFunction(node);\n                if ((Z.hide||false) === hide) return;\n                Z.hide = hide;\n                $$(node, consts.id.DIV, setting).css(\"display\", hide ? \"none\": '');\n                $$(node, consts.id.UL, setting).css(\"display\", hide ? \"none\": '');\n            }\n        },\n        switchNode: function(setting, node, open) {\n            if (open || !tools.canAsync(setting, node)) {\n                view.expandCollapseNode(setting, node, !open);\n            } else if (setting.async.enable) {\n                if (!view.asyncNode(setting, node)) {\n                    view.expandCollapseNode(setting, node, !open);\n                    return;\n                }\n            } else if (node) {\n                view.expandCollapseNode(setting, node, !open);\n            }\n        }\n    };\n    // zTree defind\n    $.fn.zTree = {\n        consts: _consts,\n        _z: {\n            tools: tools,\n            view: view,\n            event: event,\n            data: data\n        },\n        getZTreeObj: function(treeId) {\n            var o = data.getZTreeTools(treeId);\n            return o ? o: null;\n        },\n        destroy: function(treeId) {\n            if ( !! treeId && treeId.length > 0) {\n                view.destroy(data.getSetting(treeId));\n            } else {\n                for (var s in settings) {\n                    view.destroy(settings[s]);\n                }\n            }\n        },\n        init: function(obj, zSetting, zNodes) {\n            var setting = tools.clone(_setting);\n            $.extend(true, setting, zSetting);\n            setting.treeId = obj.attr(\"id\");\n            setting.treeObj = obj;\n            setting.treeObj.empty();\n            settings[setting.treeId] = setting;\n            //For some older browser,(e.g., ie6)\n            if (typeof document.body.style.maxHeight === \"undefined\") {\n                setting.view.expandSpeed = \"\";\n            }\n            data.initRoot(setting);\n            var root = data.getRoot(setting);\n            zNodes = zNodes ? (tools.isArray(zNodes) ? zNodes: [zNodes]) : [];\n            root[setting.data.key.children] = zNodes;\n            data.initCache(setting);\n            event.unbindTree(setting);\n            event.bindTree(setting);\n            event.unbindEvent(setting);\n            event.bindEvent(setting);\n            var zTreeTools = {\n                setting: setting,\n                addNodes: function(parentNode, index, newNodes, isSilent) {\n                    if (!parentNode) parentNode = null;\n                    if (parentNode && !parentNode[setting.treeId].isParent && setting.data.keep.leaf) return null;\n                    var i = parseInt(index, 10);\n                    if (isNaN(i)) {\n                        isSilent = !!newNodes;\n                        newNodes = index;\n                        index = -1;\n                    } else {\n                        index = i;\n                    }\n                    if (!newNodes) return null;\n                    var xNewNodes = tools.isArray(newNodes) ? newNodes: [newNodes];\n\n                    function addCallback() {\n                        view.addNodes(setting, parentNode, index, xNewNodes, (isSilent == true));\n                    }\n                    if (tools.canAsync(setting, parentNode)) {\n                        view.asyncNode(setting, parentNode, isSilent, addCallback);\n                    } else {\n                        addCallback();\n                    }\n                    return xNewNodes;\n                },\n                cancelSelectedNode: function(node) {\n                    view.cancelPreSelectedNode(setting, node);\n                },\n                destroy: function() {\n                    view.destroy(setting);\n                },\n                expandAll: function(expandFlag) {\n                    expandFlag = !!expandFlag;\n                    view.expandCollapseSonNode(setting, null, expandFlag, true);\n                    return expandFlag;\n                },\n                expandNode: function(node, expandFlag, sonSign, focus, callbackFlag) {\n                    if (!node) return null;\n                    var Z = node[setting.treeId];\n                    if (!Z.isParent || expandFlag === !!Z.open) return null;\n                    if (expandFlag !== true && expandFlag !== false) {\n                        expandFlag = !Z.open;\n                    }\n                    callbackFlag = !!callbackFlag;\n                    if (callbackFlag && expandFlag && (tools.apply(setting.callback.beforeExpand, [node], true) == false)) {\n                        return null;\n                    } else if (callbackFlag && !expandFlag && (tools.apply(setting.callback.beforeCollapse, [node], true) == false)) {\n                        return null;\n                    }\n                    var parent;\n                    if (expandFlag && (parent = node[setting.data.key.parent])) {\n                        view.expandCollapseParentNode(setting, parent, expandFlag, false); parent = null;\n                    }\n                    if (expandFlag === Z.open && !sonSign) {\n                        return null;\n                    }\n                    data.getRoot(setting).expandTriggerFlag = callbackFlag;\n                    if (!tools.canAsync(setting, node) && sonSign) {\n                        view.expandCollapseSonNode(setting, node, expandFlag, true, showNodeFocus);\n                    } else {\n                        Z.open = !expandFlag;\n                        view.switchNode(this.setting, node, Z.open);\n                        showNodeFocus();\n                    }\n                    return expandFlag;\n\n                    function showNodeFocus() {\n                        var a = $$(node, setting).get(0);\n                        if (a && focus !== false) {\n                            view.scrollIntoView(setting, a);\n                        }\n                    }\n                },\n                getNodes: function() {\n                    return data.getNodes(setting);\n                },\n                getNodeByParam: function(key, value, parentNode) {\n                    if (!key) return null;\n                    return data.getNodeByParam(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), key, value);\n                },\n                getNodeByTId: function(tId) {\n                    return data.getNodeCache(setting, tId);\n                },\n                getNodesByParam: function(key, value, parentNode) {\n                    if (!key) return null;\n                    return data.getNodesByParam(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), key, value);\n                },\n                getNodesByParamFuzzy: function(key, value, parentNode) {\n                    if (!key) return null;\n                    return data.getNodesByParamFuzzy(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), key, value);\n                },\n                getNodesByFilter: function(filter, isSingle, parentNode, invokeParam) {\n                    isSingle = !!isSingle;\n                    if (!filter || (typeof filter != \"function\")) return (isSingle ? null: []);\n                    return data.getNodesByFilter(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), filter, isSingle, invokeParam);\n                },\n                getSelectedNodes: function() {\n                    var r = [], list = data.getRoot(setting).curSelectedList;\n                    for (var i = 0, l = list.length; i < l; i++) {\n                        r.push(list[i]);\n                    }\n                    return r;\n                },\n                isSelectedNode: function(node) {\n                    return data.isSelectedNode(setting, node);\n                },\n                reAsyncChildNodesPromise: function(parentNode, reloadType, isSilent) {\n                    var promise = new Promise(function(resolve, reject) {\n                        try {\n                            zTreeTools.reAsyncChildNodes(parentNode, reloadType, isSilent, function() {\n                                resolve(parentNode);\n                            });\n                        } catch(e) {\n                            reject(e);\n                        }\n                    });\n                    return promise;\n                },\n                reAsyncChildNodes: function(parentNode, reloadType, isSilent, callback) {\n                    if (!this.setting.async.enable) return;\n                    var isRoot = !parentNode;\n                    if (isRoot) {\n                        parentNode = data.getRoot(setting);\n                    }\n                    if (reloadType == \"refresh\") {\n                        var children = parentNode[setting.data.key.children];\n                        for (var i = 0, l = children ? children.length: 0; i < l; i++) {\n                            data.removeNodeCache(setting, children[i]);\n                        }\n                        data.removeSelectedNode(setting);\n                        parentNode[setting.data.key.children] = [];\n                        if (isRoot) {\n                            this.setting.treeObj.empty();\n                        } else {\n                            var ulObj = $$(parentNode, consts.id.UL, setting);\n                            ulObj.empty();\n                        }\n                    }\n                    view.asyncNode(this.setting, isRoot ? null: parentNode, !!isSilent, callback);\n                },\n                refresh: function(nodes) {\n                \tlet selectedList = data.getRoot(setting).curSelectedList || [];\n                    this.setting.treeObj.empty();\n                    var root = data.getRoot(setting);\n                    nodes = nodes || root[setting.data.key.children];\n                    data.initRoot(setting);\n                    root[setting.data.key.children] = nodes;\n                    data.initCache(setting);\n                    view.createNodes(setting, 0, nodes, null, -1);\n                    selectedList.forEach(node => view.selectNode(setting, node));\n                },\n                reset: function(zNodes,keep=false) {\n                    let { nodes } = data.getCache(this.setting);\n                    if (nodes) {\n                    \tlet treeId = this.setting.treeId, node;\n                    \tfor (let i in nodes) {\n                    \t\tnode = nodes[i];\n                    \t\tif (!node || !node[treeId]) continue;\n                    \t\t!keep ? (delete node[treeId]) : (node[treeId].dom=false);\n                        }\n                    }\n                    zNodes = zNodes ? (tools.isArray(zNodes) ? zNodes: [zNodes]) : [];\n                    zNodes.length == 1 && (zNodes[0][this.setting.treeId] = zNodes[0][this.setting.treeId] || {open: true});\n                    this.setting.treeObj.empty();\n                    var root = data.getRoot(setting);\n                    data.initRoot(setting);\n                    root[setting.data.key.children] = zNodes;\n                    data.initCache(setting);\n                    view.createNodes(setting, 0, zNodes, null, -1);\n                },\n                removeChildNodes: function(node) {\n                    if (!node) return null;\n                    var nodes = node[setting.data.key.children];\n                    view.removeChildNodes(setting, node);\n                    return nodes ? nodes: null;\n                },\n                removeNode: function(node, callbackFlag) {\n                    if (!node || !node[setting.treeId]) return;\n                    callbackFlag = !!callbackFlag;\n                    if (callbackFlag && tools.apply(setting.callback.beforeRemove, [node], true) == false) return;\n                    view.removeNode(setting, node);\n                    if (callbackFlag) {\n                        this.setting.treeObj.trigger(consts.event.REMOVE, [node]);\n                    }\n                },\n                selectNode: function(node, isSilent) {\n                    if (!node) return;\n                    var parent = node[setting.data.key.parent];\n                \tvar Z = parent ? parent[setting.treeId] : null;\n                    parent = Z ? data.getNodeCache(setting, Z.tId) : null;\n                    if (parent) {\n                        view.expandCollapseParentNode(setting, parent, true, false, showNodeFocus); parent = null;\n                    } else if (!isSilent) {\n                        try {\n                            $$(node, setting).focus().blur();\n                        } catch(e) {}\n                    }\n                    view.selectNode(setting, node);\n\n                    function showNodeFocus() {\n                        if (isSilent) {\n                            return;\n                        }\n                        var a = $$(node, setting).get(0);\n                        view.scrollIntoView(setting, a);\n                    }\n                },\n                transformTozTreeNodes: function(simpleNodes) {\n                    return data.transformTozTreeFormat(setting, simpleNodes);\n                },\n                transformToArray: function(nodes) {\n                    return data.transformToArrayFormat(setting, nodes);\n                },\n                updateNodeName: function(node) {\n                    var Z = node[setting.treeId];\n                    Z && Z.dom && view.setNodeName(setting, node);\n                    return !!(Z && Z.dom);\n                },\n                updateNodeIcon: function(node) {\n                \tvar Z = node[setting.treeId];\n                \tZ && Z.dom && view.setNodeLineIcos(setting, node, Z);\n                    return !!(Z && Z.dom);\n                },\n                updateNodeTitle: function(node) {\n                \tvar Z = node[setting.treeId];\n                \tZ && Z.dom && view.setNodeTitle(setting, node);\n                    return !!(Z && Z.dom);\n                },\n                updateNodeHide: function(node) {\n                \tvar Z = node[setting.treeId];\n                \tZ && Z.dom && view.setNodeHide(setting, node, Z);\n                    return !!(Z && Z.dom);\n                },\n                updateNode: function(node) {\n                \tvar Z = node[setting.treeId];\n                    if (Z && Z.dom) {\n                        view.setNodeLineIcos(setting, node, Z);\n                        view.setNodeName(setting, node);\n                        view.setNodeTitle(setting, node);\n                        view.setNodeHide(setting, node, Z);\n                    }\n                    return !!(Z && Z.dom);\n                },\n                getA: function(node) {\n                \treturn $$(node, consts.id.A, setting);\n                }\n            };\n            root.treeTools = zTreeTools;\n            data.setZTreeTools(setting, zTreeTools);\n            var children = root[setting.data.key.children];\n            if (children && children.length > 0) {\n                view.createNodes(setting, 0, children, null, -1);\n            } else if (setting.async.enable && setting.async.url && setting.async.url !== '') {\n                view.asyncNode(setting);\n            }\n            return zTreeTools;\n        }\n    };\n    var zt = $.fn.zTree,\n    $$ = tools.$,\n    consts = zt.consts;\n})(jQuery);"]}]}