{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\InputTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\InputTree.vue","mtime":1612227987676},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 单选树使用例子\n* <InputTree label=\"选择地区\" valueField=\"id\" :setting=\"setting\" v-model=\"value\" :text=\"text\" :getTreeRoots=\"getTreeRoots\" @change=\"onSelectChg\"/>\n*\n*  data: {value: 0, text: '中国', setting: {参考zTree的setting}},\n*  methods: {\n*    getTreeRoots(callback) {\n*      // 异步或同步取到树根结点roots\n*      callback(roots); //记得调用回调函数，把数据传回去\n*    },\n*    onSelectChg(value, node) {// value是node的valueField值, node是树结点对象\n*    }\n*  }\n* ========================================================================================================\n*  多选树使用例子：车辆树选多部车辆\n*  <InputTree label=\"选择一部车\" :tree=\"carTree\" v-model=\"carIds\" hasOwnField=\"plate\" @change=\"onCheckChg\"/>\n*\n*  import CarTree from '@/common/tree/CarTree.vue';\n*  data: {carIds:[]}, // carIds因为是多选，所以是数组\n*  computed: {\n*    carTree: function() { return CarTree }\n*  },\n*  methods: {\n*    onCheckChg(cars, checked) {// cars是当次勾选发生变化的车辆列表；checked:true勾上,false:去勾\n*    }\n*  }\n*  hasOwnField=\"plate\" 车辆树即有车辆也有车队，plate字段是车辆才有的，表示只允许选上车辆\n*/\nimport Vue from 'vue';\nimport { domLeftTop } from '@/components/util/Dom.js';\nimport { arrayGetValue } from '@/common/util/Arrays.js';\nimport { arrayRemoveItem } from '@/common/util/Arrays.js';\nimport { getNodeByValue } from '@/common/util/Trees.js';\nimport { getNodesByValues } from '@/common/util/Trees.js';\nimport Tree from '@/components/Tree';\nexport default {\n  name: \"InputTree\",\n  props: {\n    label: String,\n    // 标题文本\n    tree: {\n      default: function _default() {\n        return Tree;\n      }\n    },\n    // 树组件\n    setting: {\n      default: function _default() {\n        return {};\n      }\n    },\n    // 参考ztree的setting配置\n    getTreeRoots: Function,\n    // 调用该方法获取树结点\n    expandRoot: {\n      type: Boolean,\n      default: true\n    },\n    // 显示树时默认展开根结点\n    hasOwnField: {\n      type: String,\n      default: null\n    },\n    // 只对树有该属性的结点处理\n    value: null,\n    // 当前值(v-model)\n    text: null,\n    // 初始显示文本\n    labelField: {\n      type: String,\n      default: null\n    },\n    // 显示字段，如果不指定，将使用tree的显示字段或nameFunction\n    valueField: {\n      type: String,\n      default: 'id'\n    },\n    // 值字段\n    treeWidth: {\n      type: Number,\n      default: 0\n    },\n    // 弹出树的宽度px，0则默认InputTree的总宽度\n    treeHeight: {\n      type: Number,\n      default: 350\n    },\n    // 弹出树的高度px\n    placeholder: String,\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示搜索栏\n    required: Boolean,\n    // 是否显示必填\n    disabled: Boolean,\n    // 是否可操作\n    clearable: Boolean,\n    // 是否显示可清除图标\n    border: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示边框\n    borderColor: {\n      default: $_theme.border_color_light\n    },\n    height: {\n      type: Number,\n      default: $_theme.inputHeight\n    },\n    // 高度数值，单位是px\n    inputStyle: {\n      default: null\n    },\n    // 输入框的style\n    labelMinWidth: {\n      type: Number,\n      default: 10\n    },\n    // lable宽度最小数值，单位是px\n    labelMaxWidth: {\n      type: Number\n    },\n    // lable宽度最小数值，单位是px\n    custom: {\n      type: Boolean,\n      default: false // 自定义\n\n    }\n  },\n  _tree: null,\n  _roots: null,\n  _value: null,\n  _item: null,\n  _setting: null,\n  data: function data() {\n    return {\n      txt: this.text,\n      focused: false,\n      hover: false,\n      open: false\n    };\n  },\n  watch: {\n    value: function value(v) {\n      this._myself ? this._myself = false : (this._value = v, this.refresh());\n    },\n    text: function text(v) {\n      this.txt = v;\n    },\n    focused: function focused(v) {\n      document[v ? 'addEventListener' : 'removeEventListener']('click', this.checkBlur);\n    }\n  },\n  mounted: function mounted() {\n    this._setting = Object.assign({\n      callback: {}\n    }, this.setting);\n    this._setting.check = Object.assign({\n      enable: false,\n      hasOwnField: this.hasOwnField\n    }, this.setting.check || {});\n    this._value = this.value;\n    if (this.value === null) return;\n\n    if (Array.isArray(this.value)) {\n      //多选\n      this._setting.check.enable = true;\n      if (this.value.length == 0) return;\n    } // 获取文字出来显示\n\n\n    !this.text && this.refresh();\n    this.txt = this.txt || this.text;\n  },\n  methods: {\n    refresh: function refresh() {\n      this.txt = null;\n      this._item = null;\n\n      this._getRoots(this._setItemAndText.bind(this));\n    },\n    _setItemAndText: function _setItemAndText(roots) {\n      if (!roots) return;\n\n      if (this._setting.check.enable === true) {\n        this._item = this.valueField ? getNodesByValues(roots, this.value, this.valueField, this.hasOwnField) : _toConsumableArray(this.value);\n        this._item && this.setTxt(this._item, true);\n      } else {\n        this._item = this.valueField ? getNodeByValue(roots, this.value, this.valueField, this.hasOwnField) : this.value;\n        this._item && this.setTxt(this._item, false);\n      }\n    },\n    setTxt: function setTxt(item, isarray) {\n      if (this.labelField) {\n        //如果设置labelField，根据labelField值显示值\n        this.txt = isarray ? arrayGetValue(item, this.labelField).join(',') : item[this.labelField];\n      } else if (this.tree.getNodeText || this._setting.view && this._setting.view.nameFunction) {\n        var fun = this.tree.getNodeText || this._setting.view && this._setting.view.nameFunction;\n\n        if (isarray) {\n          var array = [];\n\n          for (var i = 0, len = item.length; i < len; i++) {\n            array.push(fun(item[i]));\n          }\n\n          this.txt = array.join(',');\n        } else {\n          this.txt = fun(item);\n        }\n      } else {\n        var feild = this._setting.data && this._setting.data.key && this._setting.data.key.name;\n        feild = feild || 'name';\n        this.txt = isarray ? arrayGetValue(item, feild).join(',') : item[feild];\n      }\n    },\n    _getRoots: function _getRoots(callback) {\n      var _this = this;\n\n      if (this._roots) return callback(this._roots);\n      this.getTreeRoots ? this.getTreeRoots(function (roots) {\n        _this._roots = Array.isArray(roots) ? roots : [roots];\n        callback(_this._roots);\n      }) : this.tree.getTreeRoots ? this.tree.getTreeRoots(callback) : callback(null);\n    },\n    toggleShowTree: function toggleShowTree() {\n      // 显示或隐藏选项列表\n      this.$el.focus();\n      this.$emit('click');\n\n      if (this.custom) {\n        return;\n      }\n\n      this.open ? this.hideTree() : this.showTree();\n    },\n    showTree: function showTree() {\n      var _this2 = this;\n\n      if (!this._tree) {\n        var onTreeInited = function onTreeInited() {\n          if (!_this2._item && _this2.value) {\n            var roots = _this2._tree.getTree().getNodes();\n\n            _this2._setItemAndText(roots);\n          }\n\n          if (_this2._item) {\n            if (_this2._setting.check.enable === true) {\n              //多选\n              _this2._tree.checkNodes(_this2._item, true, true);\n\n              _this2._tree.selectNode(_this2._item[0]);\n            } else {\n              _this2._tree.selectNode(_this2._item);\n            }\n          }\n        };\n\n        this.createTree(onTreeInited);\n        this._tree.init && this._getRoots(function (roots) {\n          return _this2._tree.init(roots, _this2.expandRoot);\n        });\n      } else {\n        this.styleTree();\n      }\n\n      this.open = true;\n      document.addEventListener('click', this.onMouseClick);\n    },\n    hideTree: function hideTree() {\n      // 隐藏弹出的选项列表\n      this._tree.$el.style.display = 'none';\n      this.open = false;\n      document.removeEventListener('click', this.onMouseClick);\n    },\n    onMouseClick: function onMouseClick(event) {\n      if (!this._tree.$el.contains(event.target) && !this.$el.contains(event.target)) {\n        this.hideTree();\n      }\n    },\n    checkBlur: function checkBlur(event) {\n      this.focused = this.$el.contains(event.target);\n    },\n    createTree: function createTree(onTreeInited) {\n      if (this._setting.check.enable === true) {\n        //多选\n        this._setting.callback.onCheck && (this._setting.callback._onCheck = this._setting.callback.onCheck);\n        this._setting.callback.onCheck = this.onItemCheck;\n      } else {\n        this._setting.callback.onClick && (this._setting.callback._onClick = this._setting.callback.onClick);\n        this._setting.callback.onClick = this.onItemClick;\n      }\n\n      var constructor = Vue.extend(this.tree);\n      this._tree = new constructor({\n        propsData: {\n          setting: this._setting,\n          miniBar: true,\n          borderColor: this.borderColor,\n          searchable: this.searchable,\n          onTreeInited: onTreeInited\n        }\n      });\n\n      this._tree.$mount();\n\n      this.styleTree();\n      this.$el.appendChild(this._tree.$el);\n    },\n    styleTree: function styleTree() {\n      // 自动判断是显示在下面还是上面\n      var _domLeftTop = domLeftTop(this.$el),\n          left = _domLeftTop.left,\n          top = _domLeftTop.top,\n          isbottom = true,\n          _treeHeight = this.treeHeight;\n\n      var this_height = this.$el.clientHeight + (this.border ? 2 : 0);\n      var down = document.documentElement.clientHeight - top - this_height;\n\n      if (down > _treeHeight) {\n        // 下面空间充足，显示在下面\n        top += this_height;\n      } else if (top > _treeHeight) {\n        // 上面空间足够，显示在上面\n        top -= _treeHeight - 0;\n        isbottom = false;\n      } else {\n        // 上面和下面的空间都不够\n        if (down > top) {\n          // 下面的空间大，显示在下面\n          _treeHeight = down - 20;\n          top += this_height;\n        } else {\n          // 上面的空间大，显示在上面\n          _treeHeight = top - 5;\n          top -= _treeHeight - 0;\n          isbottom = false;\n        }\n      }\n\n      var style = this._tree.$el.style;\n      style.position = \"fixed\";\n      style['box-shadow'] = '0px 0px 5px 0px RGBA(0, 0, 0, 0.1)';\n      style[isbottom ? 'border-top-width' : 'border-bottom-width'] = 0;\n      style['z-index'] = $_theme.zindex();\n      style.top = top + 'px';\n      style.left = left + 'px';\n      style.height = _treeHeight + 'px', style.width = (this.treeWidth || this.$el.offsetWidth) + 'px';\n      style.display = 'block';\n    },\n    onItemClick: function onItemClick(node, event) {\n      if (this.hasOwnField && !node.hasOwnProperty(this.hasOwnField)) return;\n      this._setting.callback._onClick && this._setting.callback._onClick(node, event);\n      if (this._item == node) return this.hideTree();\n      this._item = node;\n      var value = this.valueField ? node[this.valueField] : node;\n      if (this._value === value) return this.hideTree();\n      this._value = value;\n      this.setTxt(node, false);\n      this._myself = true;\n      this.$emit('input', value);\n      this.$emit('change', value, node, this.txt);\n      this.hideTree();\n    },\n    onItemCheck: function onItemCheck(node, chgs, value, event) {\n      this._item = this._item || [];\n      this._value = this._value || [];\n      this._setting.callback._onCheck && this._setting.callback._onCheck(node, chgs, value, event);\n      var items = [],\n          roots = value == 0 ? this._tree.getTree().getNodes() : null;\n\n      if (roots && roots.length == 1 && roots[0] == node) {\n        //根结点全不选\n        this.txt = '';\n        this._item = [];\n        this._value = [];\n      } else {\n        for (var i = 0, len = chgs.length; i < len; i++) {\n          node = chgs[i];\n          items.push(node);\n\n          if (value == 1) {\n            this._item.push(node);\n\n            this._value.push(this.valueField ? node[this.valueField] : node);\n          } else {\n            items.push(node);\n            arrayRemoveItem(this._item, node);\n            arrayRemoveItem(this._value, this.valueField ? node[this.valueField] : node);\n          }\n        }\n\n        this.setTxt(this._item, true);\n      }\n\n      this._myself = true;\n      this.$emit('input', this._value);\n      this.$emit('change', items, value == 1, this.txt);\n    },\n    getSelectedItem: function getSelectedItem() {\n      return this._item;\n    },\n    clear: function clear() {\n      this.open && this.hideTree();\n      this.txt = null;\n\n      if (this._setting.check.enable && this._tree) {\n        if (this._item && this._item.length > 0) {\n          this._tree.getTree().checkAllNodes(false);\n        }\n      }\n\n      this._value = null;\n      this._item = null;\n      this._myself = true;\n      this.$emit('input', null);\n      this.$emit('change', null, null, null);\n    }\n  },\n  computed: {\n    showClear: function showClear() {\n      // 判断是否要显示清除按钮\n      return this.clearable && this.hover && this.txt;\n    },\n    lineHeight: function lineHeight() {\n      // 获取除边框外的高度\n      return this.height - (this.border ? 2 : 0);\n    },\n    labelStyle: function labelStyle() {\n      return {\n        minWidth: this.labelMinWidth + 'px',\n        maxWidth: this.labelMaxWidth + 'px',\n        borderRightColor: this.theme.border_color_light,\n        backgroundColor: this.theme.bg_color\n      };\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.focused = false;\n    this.open && this.hideTree();\n    this._tree && this._tree.destroy();\n    this._tree = null;\n    this._roots = null;\n    this._item = null;\n    this._value = null;\n    this._setting = null;\n  }\n};",{"version":3,"sources":["InputTree.vue"],"names":[],"mappings":"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","sourcesContent":["\r\n<template>\r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"{height:`${height}px`, borderColor:focused?theme.color:borderColor, zIndex:focused?theme.zindex():''}\" tabindex=\"0\" @focus=\"focused=true\" @mouseenter=\"hover=true\" @mouseleave=\"hover=false\">\r\n\r\n    <!--label显示-->\r\n    <span :class=\"$style.label\" :style=\"labelStyle\"  v-if=\"label\" is-label>{{label}}</span>\r\n\r\n    <!--必填显示-->\r\n    <span :class=\"[$style.required,'el-icon-star-on']\" :style=\"{backgroundColor:theme.bg_color}\" v-if=\"required\"></span>\r\n\r\n    <!--下拉图标和清除图标显示-->\r\n    <i :class=\"[$style.icon,open?'el-icon-arrow-up':'el-icon-arrow-down']\" :style=\"{lineHeight:lineHeight+'px'}\" v-show=\"!showClear\" @click=\"toggleShowTree\"></i>\r\n    <i :class=\"$style.icon\" :style=\"{lineHeight:lineHeight+'px'}\" v-show=\"showClear\"  class=\"el-icon-close\" @click.stop=\"clear\"></i>\r\n\r\n    <!--selector显示-->\r\n    <div ref=\"selector\" :title=\"txt\" :class=\"$style.selector\" @click=\"toggleShowTree\" :style=\"[{lineHeight:lineHeight+'px'},inputStyle]\">\r\n        <span :class=\"$style.placeholder\" v-if=\"!txt && placeholder\">{{placeholder}}</span>\r\n        <span>{{txt}}</span>\r\n    </div>\r\n\r\n    <!--不可操作层-->\r\n    <div v-if=\"disabled\" :class=\"$style.disabled\"/>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  /*\r\n  * 单选树使用例子\r\n  * <InputTree label=\"选择地区\" valueField=\"id\" :setting=\"setting\" v-model=\"value\" :text=\"text\" :getTreeRoots=\"getTreeRoots\" @change=\"onSelectChg\"/>\r\n  *\r\n  *  data: {value: 0, text: '中国', setting: {参考zTree的setting}},\r\n  *  methods: {\r\n  *    getTreeRoots(callback) {\r\n  *      // 异步或同步取到树根结点roots\r\n  *      callback(roots); //记得调用回调函数，把数据传回去\r\n  *    },\r\n  *    onSelectChg(value, node) {// value是node的valueField值, node是树结点对象\r\n  *    }\r\n  *  }\r\n  * ========================================================================================================\r\n  *  多选树使用例子：车辆树选多部车辆\r\n  *  <InputTree label=\"选择一部车\" :tree=\"carTree\" v-model=\"carIds\" hasOwnField=\"plate\" @change=\"onCheckChg\"/>\r\n  *\r\n  *  import CarTree from '@/common/tree/CarTree.vue';\r\n  *  data: {carIds:[]}, // carIds因为是多选，所以是数组\r\n  *  computed: {\r\n  *    carTree: function() { return CarTree }\r\n  *  },\r\n  *  methods: {\r\n  *    onCheckChg(cars, checked) {// cars是当次勾选发生变化的车辆列表；checked:true勾上,false:去勾\r\n  *    }\r\n  *  }\r\n  *  hasOwnField=\"plate\" 车辆树即有车辆也有车队，plate字段是车辆才有的，表示只允许选上车辆\r\n  */\r\n\r\n  import Vue from 'vue';\r\n\r\n  import { domLeftTop } from '@/components/util/Dom.js';\r\n  import { arrayGetValue } from '@/common/util/Arrays.js';\r\n  import { arrayRemoveItem } from '@/common/util/Arrays.js';\r\n  import { getNodeByValue } from '@/common/util/Trees.js';\r\n  import { getNodesByValues } from '@/common/util/Trees.js';\r\n\r\n  import Tree from '@/components/Tree';\r\n\r\n  export default {\r\n    name: \"InputTree\",\r\n    props: {\r\n      label: String,                                               // 标题文本\r\n      tree:        { default: ()=>{return Tree} },                 // 树组件\r\n      setting:     { default: ()=>{return {}} },                   // 参考ztree的setting配置\r\n      getTreeRoots: Function,                                      // 调用该方法获取树结点\r\n      expandRoot: { type: Boolean,  default: true },               // 显示树时默认展开根结点\r\n      hasOwnField: { type: String,  default: null },               // 只对树有该属性的结点处理\r\n      value: null,                                                 // 当前值(v-model)\r\n      text:  null,                                                 // 初始显示文本\r\n      labelField: { type: String,  default: null },                // 显示字段，如果不指定，将使用tree的显示字段或nameFunction\r\n      valueField: { type: String,  default: 'id' },                // 值字段\r\n      treeWidth:  { type: Number,  default: 0 },                   // 弹出树的宽度px，0则默认InputTree的总宽度\r\n      treeHeight: { type: Number,  default: 350 },                 // 弹出树的高度px\r\n      placeholder: String,\r\n      searchable: { type: Boolean, default: true },                // 是否显示搜索栏\r\n      required:   Boolean,                                         // 是否显示必填\r\n      disabled:   Boolean,                                         // 是否可操作\r\n      clearable:  Boolean,                                         // 是否显示可清除图标\r\n      border:     { type: Boolean, default: true },                // 是否显示边框\r\n      borderColor:{ default: $_theme.border_color_light },\r\n      height:     { type: Number,  default: $_theme.inputHeight }, // 高度数值，单位是px\r\n      inputStyle: { default: null },                                // 输入框的style\r\n      labelMinWidth:{ type: Number,  default: 10 },  \t\t  \t   // lable宽度最小数值，单位是px\r\n      labelMaxWidth:{ type: Number},  \t\t  \t   // lable宽度最小数值，单位是px\r\n      custom: { type: Boolean, default: false }   // 自定义\r\n    },\r\n    _tree:  null,\r\n    _roots: null,\r\n    _value: null,\r\n    _item:  null,\r\n    _setting: null,\r\n\r\n    data() {\r\n      return {\r\n        txt: this.text,\r\n        focused: false,\r\n        hover: false,\r\n        open:  false,\r\n      };\r\n    },\r\n    watch: {\r\n      value: function(v) {\r\n        this._myself ? (this._myself = false) : (this._value = v, this.refresh());\r\n      },\r\n      text: function(v) {\r\n        this.txt = v;\r\n      },\r\n      focused: function(v) {\r\n        document[v?'addEventListener':'removeEventListener']('click', this.checkBlur);\r\n      }\r\n    },\r\n    mounted() {\r\n      this._setting = Object.assign({callback: {}}, this.setting);\r\n      this._setting.check = Object.assign({enable: false, hasOwnField: this.hasOwnField}, this.setting.check||{});\r\n      this._value = this.value;\r\n      if (this.value === null) return;\r\n\r\n      if (Array.isArray(this.value)) {//多选\r\n        this._setting.check.enable = true\r\n        if (this.value.length == 0) return;\r\n      }\r\n      // 获取文字出来显示\r\n      !this.text && this.refresh();\r\n      this.txt = this.txt || this.text;\r\n    },\r\n    methods: {\r\n      refresh() {\r\n        this.txt = null;\r\n        this._item = null;\r\n        this._getRoots(this._setItemAndText.bind(this));\r\n      },\r\n      _setItemAndText(roots) {\r\n        if (!roots) return;\r\n        if (this._setting.check.enable === true) {\r\n          this._item = this.valueField ? getNodesByValues(roots, this.value, this.valueField, this.hasOwnField) : [...this.value];\r\n          this._item && this.setTxt(this._item, true);\r\n        } else {\r\n          this._item = this.valueField ? getNodeByValue(roots, this.value, this.valueField, this.hasOwnField) : this.value;\r\n          this._item && this.setTxt(this._item, false);\r\n        }\r\n      },\r\n      setTxt(item, isarray) {\r\n        if (this.labelField) {//如果设置labelField，根据labelField值显示值\r\n          this.txt = isarray ? arrayGetValue(item,this.labelField).join(',') : item[this.labelField];\r\n        } else if (this.tree.getNodeText || (this._setting.view && this._setting.view.nameFunction)) {\r\n          let fun = this.tree.getNodeText || (this._setting.view && this._setting.view.nameFunction);\r\n          if (isarray) {\r\n            let array = [];\r\n            for (let i=0, len=item.length; i<len; i++) {\r\n              array.push(fun(item[i]));\r\n            }\r\n            this.txt = array.join(',');\r\n          } else {\r\n            this.txt = fun(item);\r\n          }\r\n        } else {\r\n          let feild = this._setting.data && this._setting.data.key && this._setting.data.key.name;\r\n          feild = feild || 'name';\r\n          this.txt = isarray ? arrayGetValue(item,feild).join(',') : item[feild];\r\n        }\r\n      },\r\n      _getRoots(callback) {\r\n        if (this._roots) return callback(this._roots);\r\n        this.getTreeRoots ? this.getTreeRoots(roots => {\r\n          this._roots = Array.isArray(roots) ? roots : [roots];\r\n          callback(this._roots);\r\n        }) : (\r\n          this.tree.getTreeRoots ? this.tree.getTreeRoots(callback) : callback(null)\r\n        );\r\n      },\r\n      toggleShowTree() {// 显示或隐藏选项列表\r\n        this.$el.focus();\r\n        this.$emit('click');\r\n        if(this.custom){\r\n          return;\r\n        }\r\n        this.open ? this.hideTree() : this.showTree();\r\n      },\r\n      showTree() {\r\n        if (!this._tree) {\r\n          let onTreeInited = () => {\r\n            if (!this._item && this.value) {\r\n              let roots = this._tree.getTree().getNodes();\r\n              this._setItemAndText(roots);\r\n            }\r\n            if (this._item) {\r\n              if (this._setting.check.enable === true) {//多选\r\n                this._tree.checkNodes(this._item, true, true);\r\n                this._tree.selectNode(this._item[0]);\r\n              } else {\r\n                this._tree.selectNode(this._item);\r\n              }\r\n            }\r\n          };\r\n          this.createTree(onTreeInited);\r\n          this._tree.init && this._getRoots(roots => this._tree.init(roots, this.expandRoot));\r\n        } else {\r\n          this.styleTree();\r\n        }\r\n        this.open = true;\r\n        document.addEventListener('click', this.onMouseClick);\r\n      },\r\n      hideTree() {// 隐藏弹出的选项列表\r\n        this._tree.$el.style.display = 'none';\r\n        this.open = false;\r\n        document.removeEventListener('click', this.onMouseClick);\r\n      },\r\n      onMouseClick(event) {\r\n        if (!this._tree.$el.contains(event.target) && !this.$el.contains(event.target)) {\r\n          this.hideTree();\r\n        }\r\n      },\r\n      checkBlur(event) {\r\n        this.focused = this.$el.contains(event.target);\r\n      },\r\n      createTree(onTreeInited) {\r\n        if (this._setting.check.enable === true) {//多选\r\n          this._setting.callback.onCheck && (this._setting.callback._onCheck = this._setting.callback.onCheck);\r\n          this._setting.callback.onCheck = this.onItemCheck;\r\n        } else {\r\n          this._setting.callback.onClick && (this._setting.callback._onClick = this._setting.callback.onClick);\r\n          this._setting.callback.onClick = this.onItemClick;\r\n        }\r\n        let constructor = Vue.extend(this.tree);\r\n        this._tree = new constructor({propsData: {setting:this._setting, miniBar:true, borderColor:this.borderColor, searchable:this.searchable, onTreeInited:onTreeInited}});\r\n        this._tree.$mount();\r\n        this.styleTree();\r\n        this.$el.appendChild(this._tree.$el);\r\n      },\r\n      styleTree() {\r\n        // 自动判断是显示在下面还是上面\r\n        let {left, top} = domLeftTop(this.$el), isbottom = true, _treeHeight = this.treeHeight;\r\n        let this_height = this.$el.clientHeight + (this.border ? 2 : 0);\r\n        let down = document.documentElement.clientHeight - top - this_height;\r\n        if (down > _treeHeight) {// 下面空间充足，显示在下面\r\n          top += this_height;\r\n        } else if (top > _treeHeight) {// 上面空间足够，显示在上面\r\n          top -= _treeHeight - 0;\r\n          isbottom = false;\r\n        } else {// 上面和下面的空间都不够\r\n          if (down > top) {// 下面的空间大，显示在下面\r\n            _treeHeight = down - 20;\r\n            top += this_height;\r\n          } else {// 上面的空间大，显示在上面\r\n            _treeHeight = top - 5;\r\n            top -= _treeHeight - 0;\r\n            isbottom = false;\r\n          }\r\n        }\r\n        let style = this._tree.$el.style;\r\n        style.position = \"fixed\";\r\n        style['box-shadow'] = '0px 0px 5px 0px RGBA(0, 0, 0, 0.1)';\r\n        style[isbottom?'border-top-width':'border-bottom-width'] = 0;\r\n        style['z-index'] = $_theme.zindex();\r\n        style.top = top + 'px';\r\n        style.left = left + 'px';\r\n        style.height = _treeHeight + 'px',\r\n        style.width = (this.treeWidth || this.$el.offsetWidth) + 'px';\r\n        style.display = 'block';\r\n      },\r\n      onItemClick(node, event) {\r\n        if (this.hasOwnField && !node.hasOwnProperty(this.hasOwnField)) return;\r\n        this._setting.callback._onClick && this._setting.callback._onClick(node, event);\r\n        if (this._item == node) return this.hideTree();\r\n        this._item = node;\r\n        let value = this.valueField ? node[this.valueField] : node;\r\n        if (this._value === value) return this.hideTree();\r\n        this._value = value;\r\n        this.setTxt(node, false);\r\n        this._myself = true;\r\n        this.$emit('input',  value);\r\n        this.$emit('change', value, node, this.txt);\r\n        this.hideTree();\r\n      },\r\n      onItemCheck(node, chgs, value, event) {\r\n        this._item = this._item || [];\r\n        this._value = this._value || [];\r\n        this._setting.callback._onCheck && this._setting.callback._onCheck(node, chgs, value, event);\r\n\r\n        let items = [], roots = value == 0 ? this._tree.getTree().getNodes() : null;\r\n        if (roots && roots.length == 1 && roots[0] == node) {//根结点全不选\r\n          this.txt = '';\r\n          this._item = [];\r\n          this._value = [];\r\n        } else {\r\n          for (let i=0,len=chgs.length; i<len; i++) {\r\n            node = chgs[i];\r\n            items.push(node);\r\n            if (value == 1) {\r\n              this._item.push(node);\r\n              this._value.push(this.valueField ? node[this.valueField] : node);\r\n            } else {\r\n              items.push(node);\r\n              arrayRemoveItem(this._item, node);\r\n              arrayRemoveItem(this._value, this.valueField ? node[this.valueField] : node);\r\n            }\r\n          }\r\n          this.setTxt(this._item, true);\r\n        }\r\n        this._myself = true;\r\n        this.$emit('input',  this._value);\r\n        this.$emit('change', items, value == 1, this.txt);\r\n      },\r\n      getSelectedItem() {\r\n        return this._item;\r\n      },\r\n      clear() {\r\n        this.open && this.hideTree();\r\n        this.txt = null;\r\n        if (this._setting.check.enable && this._tree) {\r\n          if (this._item && this._item.length > 0) {\r\n            this._tree.getTree().checkAllNodes(false);\r\n          }\r\n        }\r\n        this._value = null;\r\n        this._item = null;\r\n        this._myself = true;\r\n        this.$emit('input', null);\r\n        this.$emit('change', null, null, null);\r\n      }\r\n    },\r\n    computed: {\r\n      showClear() {// 判断是否要显示清除按钮\r\n        return this.clearable && this.hover && this.txt;\r\n      },\r\n      lineHeight() {// 获取除边框外的高度\r\n        return this.height - (this.border ? 2 : 0);\r\n      },\r\n      labelStyle() {\r\n        return {\r\n          minWidth:this.labelMinWidth + 'px',\r\n          maxWidth:this.labelMaxWidth + 'px',\r\n          borderRightColor: this.theme.border_color_light,\r\n          backgroundColor: this.theme.bg_color\r\n        };\r\n      },\r\n    },\r\n    beforeDestroy() {\r\n      this.focused = false;\r\n      this.open && this.hideTree();\r\n      this._tree && this._tree.destroy();\r\n      this._tree = null;\r\n      this._roots = null;\r\n      this._item = null;\r\n      this._value = null;\r\n      this._setting = null;\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .container {\r\n    outline: none;\r\n    display: inline-block;\r\n    white-space: nowrap;\r\n    background-color: #fff;\r\n    position: relative;\r\n    user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    -moz-user-select: none;\r\n  }\r\n  .container > *:not(ul) {\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .border {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n  }\r\n  /* 标题文本 */\r\n  .label {\r\n    float: left;\r\n    padding: 0 6px;\r\n    border-right-style: solid;\r\n    border-right-width: 0px;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  /* select容器 */\r\n  .selector {\r\n    padding-left: 8px;\r\n    margin-right: 24px;\r\n    cursor: pointer;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n  .placeholder {\r\n    color: #B0B0B0;\r\n  }\r\n  .icon {\r\n    float: right;\r\n    width: 20px;\r\n    line-height: 0;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n  }\r\n  /* 下拉容器 */\r\n  .dropdown {\r\n    position: fixed;\r\n    padding: 0;\r\n    margin: 0;\r\n    list-style: none;\r\n    background-color: #fff;\r\n    margin-block-start: 0;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    overflow-y: auto;\r\n  }\r\n  .option_item {\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    height: 30px;\r\n    line-height: 30px;\r\n    padding: 0 8px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  /* 必填 */\r\n  .required {\r\n    float: right;\r\n    padding: 0 2px;\r\n    color: #f00;\r\n  }\r\n  /* 禁止操作 */\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(255, 255, 255, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60);\r\n    cursor: not-allowed;\r\n  }\r\n</style>\r\n"],"sourceRoot":"src/components"}]}