{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\textarea\\src\\textarea.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\textarea\\src\\textarea.js","mtime":1635230121506},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport vSize from \"../../mixins/size\";\nimport { UtilTools } from \"../../tools\";\nvar autoTxtElem;\nexport default {\n  name: 'VxeTextarea',\n  mixins: [vSize],\n  model: {\n    prop: 'value',\n    event: 'modelValue'\n  },\n  props: {\n    value: [String, Number],\n    immediate: {\n      type: Boolean,\n      default: true\n    },\n    name: String,\n    readonly: Boolean,\n    disabled: Boolean,\n    placeholder: String,\n    maxlength: [String, Number],\n    rows: {\n      type: [String, Number],\n      default: 2\n    },\n    showWordCount: Boolean,\n    autosize: [Boolean, Object],\n    form: String,\n    resize: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.textarea.resize;\n      }\n    },\n    className: String,\n    size: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.textarea.size || GlobalConfig.size;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      inputValue: this.value\n    };\n  },\n  computed: {\n    inputCount: function inputCount() {\n      return XEUtils.getSize(this.inputValue);\n    },\n    isCountError: function isCountError() {\n      return this.maxlength && this.inputCount > XEUtils.toNumber(this.maxlength);\n    },\n    defaultEvents: function defaultEvents() {\n      var _this = this;\n\n      var evnts = {};\n      XEUtils.each(this.$listeners, function (cb, name) {\n        if (['input', 'change', 'blur'].indexOf(name) === -1) {\n          evnts[name] = _this.triggerEvent;\n        }\n      });\n      evnts.input = this.inputEvent;\n      evnts.change = this.changeEvent;\n      evnts.blur = this.blurEvent;\n      return evnts;\n    },\n    sizeOpts: function sizeOpts() {\n      return Object.assign({\n        minRows: 1,\n        maxRows: 10\n      }, GlobalConfig.textarea.autosize, this.autosize);\n    }\n  },\n  watch: {\n    value: function value(val) {\n      this.inputValue = val;\n      this.updateAutoTxt();\n    }\n  },\n  mounted: function mounted() {\n    var autosize = this.autosize;\n\n    if (autosize) {\n      this.updateAutoTxt();\n      this.handleResize();\n    }\n  },\n  render: function render(h) {\n    var _ref;\n\n    var className = this.className,\n        defaultEvents = this.defaultEvents,\n        inputValue = this.inputValue,\n        vSize = this.vSize,\n        name = this.name,\n        form = this.form,\n        resize = this.resize,\n        placeholder = this.placeholder,\n        readonly = this.readonly,\n        disabled = this.disabled,\n        maxlength = this.maxlength,\n        autosize = this.autosize,\n        showWordCount = this.showWordCount;\n    var attrs = {\n      name: name,\n      form: form,\n      placeholder: placeholder,\n      maxlength: maxlength,\n      readonly: readonly,\n      disabled: disabled\n    };\n\n    if (placeholder) {\n      attrs.placeholder = UtilTools.getFuncText(placeholder);\n    }\n\n    return h('div', {\n      class: ['vxe-textarea', className, (_ref = {}, _defineProperty(_ref, \"size--\".concat(vSize), vSize), _defineProperty(_ref, 'is--autosize', autosize), _defineProperty(_ref, 'is--disabled', disabled), _ref)]\n    }, [h('textarea', {\n      ref: 'textarea',\n      class: 'vxe-textarea--inner',\n      domProps: {\n        value: inputValue\n      },\n      attrs: attrs,\n      style: resize ? {\n        resize: resize\n      } : null,\n      on: defaultEvents\n    }), showWordCount ? h('span', {\n      class: ['vxe-textarea--count', {\n        'is--error': this.isCountError\n      }]\n    }, \"\".concat(this.inputCount).concat(maxlength ? \"/\".concat(maxlength) : '')) : null]);\n  },\n  methods: {\n    focus: function focus() {\n      this.$refs.textarea.focus();\n      return this.$nextTick();\n    },\n    blur: function blur() {\n      this.$refs.textarea.blur();\n      return this.$nextTick();\n    },\n    triggerEvent: function triggerEvent(evnt) {\n      var inputValue = this.inputValue;\n      this.$emit(evnt.type, {\n        value: inputValue,\n        $event: evnt\n      });\n    },\n    emitUpdate: function emitUpdate(value, evnt) {\n      this.inputValue = value;\n      this.$emit('modelValue', value);\n\n      if (this.value !== value) {\n        this.$emit('change', {\n          value: value,\n          $event: evnt\n        });\n      }\n    },\n    inputEvent: function inputEvent(evnt) {\n      var immediate = this.immediate;\n      var value = evnt.target.value;\n      this.inputValue = value;\n\n      if (immediate) {\n        this.emitUpdate(value, evnt);\n      }\n\n      this.handleResize();\n      this.triggerEvent(evnt);\n    },\n    changeEvent: function changeEvent(evnt) {\n      var immediate = this.immediate;\n\n      if (immediate) {\n        this.triggerEvent(evnt);\n      } else {\n        this.emitUpdate(this.inputValue, evnt);\n      }\n    },\n    blurEvent: function blurEvent(evnt) {\n      var inputValue = this.inputValue,\n          immediate = this.immediate;\n\n      if (!immediate) {\n        this.emitUpdate(inputValue, evnt);\n      }\n\n      this.$emit('blur', {\n        value: inputValue,\n        $event: evnt\n      });\n    },\n    updateAutoTxt: function updateAutoTxt() {\n      var $refs = this.$refs,\n          inputValue = this.inputValue,\n          size = this.size,\n          autosize = this.autosize;\n\n      if (autosize) {\n        if (!autoTxtElem) {\n          autoTxtElem = document.createElement('div');\n        }\n\n        if (!autoTxtElem.parentNode) {\n          document.body.appendChild(autoTxtElem);\n        }\n\n        var textElem = $refs.textarea;\n        var textStyle = getComputedStyle(textElem);\n        autoTxtElem.className = ['vxe-textarea--autosize', size ? \"size--\".concat(size) : ''].join(' ');\n        autoTxtElem.style.width = \"\".concat(textElem.clientWidth, \"px\");\n        autoTxtElem.style.padding = textStyle.padding;\n        autoTxtElem.innerHTML = ('' + (inputValue || '　')).replace(/\\n$/, '\\n　');\n      }\n    },\n    handleResize: function handleResize() {\n      var _this2 = this;\n\n      if (this.autosize) {\n        this.$nextTick(function () {\n          var $refs = _this2.$refs,\n              sizeOpts = _this2.sizeOpts;\n          var minRows = sizeOpts.minRows,\n              maxRows = sizeOpts.maxRows;\n          var textElem = $refs.textarea;\n          var sizeHeight = autoTxtElem.clientHeight;\n          var textStyle = getComputedStyle(textElem);\n          var lineHeight = XEUtils.toNumber(textStyle.lineHeight);\n          var paddingTop = XEUtils.toNumber(textStyle.paddingTop);\n          var paddingBottom = XEUtils.toNumber(textStyle.paddingBottom);\n          var borderTopWidth = XEUtils.toNumber(textStyle.borderTopWidth);\n          var borderBottomWidth = XEUtils.toNumber(textStyle.borderBottomWidth);\n          var intervalHeight = paddingTop + paddingBottom + borderTopWidth + borderBottomWidth;\n          var rowNum = (sizeHeight - intervalHeight) / lineHeight;\n          var textRows = rowNum && /[0-9]/.test(rowNum) ? rowNum : Math.floor(rowNum) + 1;\n          var vaildRows = textRows;\n\n          if (textRows < minRows) {\n            vaildRows = minRows;\n          } else if (textRows > maxRows) {\n            vaildRows = maxRows;\n          }\n\n          textElem.style.height = \"\".concat(vaildRows * lineHeight + intervalHeight, \"px\");\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\textarea\\src\\textarea.js"],"names":["name","mixins","model","prop","event","props","value","immediate","type","default","readonly","disabled","placeholder","maxlength","rows","showWordCount","autosize","form","resize","GlobalConfig","className","size","data","inputValue","computed","inputCount","XEUtils","isCountError","defaultEvents","evnts","sizeOpts","minRows","maxRows","watch","mounted","render","vSize","attrs","UtilTools","h","class","ref","domProps","style","on","methods","focus","blur","triggerEvent","evnt","$event","emitUpdate","inputEvent","changeEvent","blurEvent","updateAutoTxt","$refs","autoTxtElem","document","textElem","textStyle","getComputedStyle","handleResize","sizeHeight","lineHeight","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","intervalHeight","rowNum","textRows","Math","vaildRows"],"mappings":"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","sourcesContent":["import XEUtils from 'xe-utils'\r\nimport GlobalConfig from '../../v-x-e-table/src/conf'\r\nimport vSize from '../../mixins/size'\r\nimport { UtilTools } from '../../tools'\r\n\r\nlet autoTxtElem\r\n\r\nexport default {\r\n  name: 'VxeTextarea',\r\n  mixins: [vSize],\r\n  model: {\r\n    prop: 'value',\r\n    event: 'modelValue'\r\n  },\r\n  props: {\r\n    value: [String, Number],\r\n    immediate: { type: Boolean, default: true },\r\n    name: String,\r\n    readonly: Boolean,\r\n    disabled: Boolean,\r\n    placeholder: String,\r\n    maxlength: [String, Number],\r\n    rows: { type: [String, Number], default: 2 },\r\n    showWordCount: Boolean,\r\n    autosize: [Boolean, Object],\r\n    form: String,\r\n    resize: { type: String, default: () => GlobalConfig.textarea.resize },\r\n    className: String,\r\n    size: { type: String, default: () => GlobalConfig.textarea.size || GlobalConfig.size }\r\n  },\r\n  data () {\r\n    return {\r\n      inputValue: this.value\r\n    }\r\n  },\r\n  computed: {\r\n    inputCount () {\r\n      return XEUtils.getSize(this.inputValue)\r\n    },\r\n    isCountError () {\r\n      return this.maxlength && this.inputCount > XEUtils.toNumber(this.maxlength)\r\n    },\r\n    defaultEvents () {\r\n      const evnts = {}\r\n      XEUtils.each(this.$listeners, (cb, name) => {\r\n        if (['input', 'change', 'blur'].indexOf(name) === -1) {\r\n          evnts[name] = this.triggerEvent\r\n        }\r\n      })\r\n      evnts.input = this.inputEvent\r\n      evnts.change = this.changeEvent\r\n      evnts.blur = this.blurEvent\r\n      return evnts\r\n    },\r\n    sizeOpts () {\r\n      return Object.assign({ minRows: 1, maxRows: 10 }, GlobalConfig.textarea.autosize, this.autosize)\r\n    }\r\n  },\r\n  watch: {\r\n    value (val) {\r\n      this.inputValue = val\r\n      this.updateAutoTxt()\r\n    }\r\n  },\r\n  mounted () {\r\n    const { autosize } = this\r\n    if (autosize) {\r\n      this.updateAutoTxt()\r\n      this.handleResize()\r\n    }\r\n  },\r\n  render (h) {\r\n    const { className, defaultEvents, inputValue, vSize, name, form, resize, placeholder, readonly, disabled, maxlength, autosize, showWordCount } = this\r\n    const attrs = {\r\n      name,\r\n      form,\r\n      placeholder,\r\n      maxlength,\r\n      readonly,\r\n      disabled\r\n    }\r\n    if (placeholder) {\r\n      attrs.placeholder = UtilTools.getFuncText(placeholder)\r\n    }\r\n    return h('div', {\r\n      class: ['vxe-textarea', className, {\r\n        [`size--${vSize}`]: vSize,\r\n        'is--autosize': autosize,\r\n        'is--disabled': disabled\r\n      }]\r\n    }, [\r\n      h('textarea', {\r\n        ref: 'textarea',\r\n        class: 'vxe-textarea--inner',\r\n        domProps: {\r\n          value: inputValue\r\n        },\r\n        attrs,\r\n        style: resize ? {\r\n          resize\r\n        } : null,\r\n        on: defaultEvents\r\n      }),\r\n      showWordCount ? h('span', {\r\n        class: ['vxe-textarea--count', {\r\n          'is--error': this.isCountError\r\n        }]\r\n      }, `${this.inputCount}${maxlength ? `/${maxlength}` : ''}`) : null\r\n    ])\r\n  },\r\n  methods: {\r\n    focus () {\r\n      this.$refs.textarea.focus()\r\n      return this.$nextTick()\r\n    },\r\n    blur () {\r\n      this.$refs.textarea.blur()\r\n      return this.$nextTick()\r\n    },\r\n    triggerEvent (evnt) {\r\n      const { inputValue } = this\r\n      this.$emit(evnt.type, { value: inputValue, $event: evnt })\r\n    },\r\n    emitUpdate (value, evnt) {\r\n      this.inputValue = value\r\n      this.$emit('modelValue', value)\r\n      if (this.value !== value) {\r\n        this.$emit('change', { value, $event: evnt })\r\n      }\r\n    },\r\n    inputEvent (evnt) {\r\n      const { immediate } = this\r\n      const value = evnt.target.value\r\n      this.inputValue = value\r\n      if (immediate) {\r\n        this.emitUpdate(value, evnt)\r\n      }\r\n      this.handleResize()\r\n      this.triggerEvent(evnt)\r\n    },\r\n    changeEvent (evnt) {\r\n      const { immediate } = this\r\n      if (immediate) {\r\n        this.triggerEvent(evnt)\r\n      } else {\r\n        this.emitUpdate(this.inputValue, evnt)\r\n      }\r\n    },\r\n    blurEvent (evnt) {\r\n      const { inputValue, immediate } = this\r\n      if (!immediate) {\r\n        this.emitUpdate(inputValue, evnt)\r\n      }\r\n      this.$emit('blur', { value: inputValue, $event: evnt })\r\n    },\r\n    updateAutoTxt () {\r\n      const { $refs, inputValue, size, autosize } = this\r\n      if (autosize) {\r\n        if (!autoTxtElem) {\r\n          autoTxtElem = document.createElement('div')\r\n        }\r\n        if (!autoTxtElem.parentNode) {\r\n          document.body.appendChild(autoTxtElem)\r\n        }\r\n        const textElem = $refs.textarea\r\n        const textStyle = getComputedStyle(textElem)\r\n        autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ')\r\n        autoTxtElem.style.width = `${textElem.clientWidth}px`\r\n        autoTxtElem.style.padding = textStyle.padding\r\n        autoTxtElem.innerHTML = ('' + (inputValue || '　')).replace(/\\n$/, '\\n　')\r\n      }\r\n    },\r\n    handleResize () {\r\n      if (this.autosize) {\r\n        this.$nextTick(() => {\r\n          const { $refs, sizeOpts } = this\r\n          const { minRows, maxRows } = sizeOpts\r\n          const textElem = $refs.textarea\r\n          const sizeHeight = autoTxtElem.clientHeight\r\n          const textStyle = getComputedStyle(textElem)\r\n          const lineHeight = XEUtils.toNumber(textStyle.lineHeight)\r\n          const paddingTop = XEUtils.toNumber(textStyle.paddingTop)\r\n          const paddingBottom = XEUtils.toNumber(textStyle.paddingBottom)\r\n          const borderTopWidth = XEUtils.toNumber(textStyle.borderTopWidth)\r\n          const borderBottomWidth = XEUtils.toNumber(textStyle.borderBottomWidth)\r\n          const intervalHeight = paddingTop + paddingBottom + borderTopWidth + borderBottomWidth\r\n          const rowNum = (sizeHeight - intervalHeight) / lineHeight\r\n          const textRows = rowNum && /[0-9]/.test(rowNum) ? rowNum : Math.floor(rowNum) + 1\r\n          let vaildRows = textRows\r\n          if (textRows < minRows) {\r\n            vaildRows = minRows\r\n          } else if (textRows > maxRows) {\r\n            vaildRows = maxRows\r\n          }\r\n          textElem.style.height = `${(vaildRows * lineHeight) + intervalHeight}px`\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}]}