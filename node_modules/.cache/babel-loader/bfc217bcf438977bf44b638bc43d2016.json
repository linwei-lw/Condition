{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Chart\\LineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Chart\\LineChart.vue","mtime":1669969501186},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//import echarts from 'echarts';\nimport { getColor } from \"./Colors.js\"; //import '@/components/util/element-resize.js';\n\nexport default {\n  name: \"LineChart\",\n  props: {\n    border: {\n      type: Boolean,\n      default: true\n    },\n    // 是否有边框\n    borderColor: {\n      type: String,\n      default: $_theme.border_color_dark\n    },\n    disabled: Boolean,\n    // 是否禁用\n    tooltipFormatter: [Function, String],\n    yaxisLabelFormatter: [Function, String],\n    xaxisLabelFormatter: [Function, String],\n    show_x_axisLabel: {\n      default: true,\n      type: Boolean\n    },\n    show_y_axisLabel: {\n      default: true,\n      type: Boolean\n    },\n    show_x_axisLine: {\n      default: true,\n      type: Boolean\n    },\n    show_y_axisLine: {\n      default: true,\n      type: Boolean\n    },\n    show_x_axisTick: {\n      default: true,\n      type: Boolean\n    },\n    show_y_axisTick: {\n      default: true,\n      type: Boolean\n    },\n    show_y_splitLine: {\n      default: true,\n      type: Boolean\n    },\n    legend: Array,\n    xaxisField: String,\n    seriesFields: Array,\n    data: Array,\n    chartType: {\n      default: 'line'\n    },\n    xAxisBoundaryGap: {\n      default: false,\n      type: Boolean\n    },\n    gridOption: {\n      default: function _default() {\n        return {\n          left: 10,\n          right: 10,\n          bottom: 10,\n          top: 10,\n          containLabel: true\n        };\n      },\n      type: Object\n    },\n    title: {\n      type: String\n    },\n    itemStyle: {\n      type: Object\n    }\n  },\n  watch: {\n    data: function data(v) {\n      this.setData(v);\n    },\n    yaxisLabelFormatter: function yaxisLabelFormatter() {\n      this._chart && this._chart.setOption({\n        yAxis: {\n          axisLabel: {\n            color: \"#232323\",\n            formatter: this.yaxisLabelFormatter\n          }\n        }\n      });\n    },\n    tooltipFormatter: function tooltipFormatter() {\n      this._chart && this._chart.setOption({\n        tooltip: {\n          formatter: this.tooltipFormatter\n        }\n      });\n    },\n    show_y_axisLine: function show_y_axisLine() {\n      this._chart && this._chart.setOption({\n        yAxis: {\n          axisLine: {\n            show: this.show_y_axisLine\n          }\n        }\n      });\n    },\n    show_y_axisTick: function show_y_axisTick() {\n      this._chart && this._chart.setOption({\n        yAxis: {\n          axisTick: {\n            show: this.show_y_axisTick\n          }\n        }\n      });\n    },\n    show_y_axisLabel: function show_y_axisLabel() {\n      this._chart && this._chart.setOption({\n        yAxis: {\n          axisLabel: {\n            show: this.show_y_axisLabel\n          }\n        }\n      });\n    }\n  },\n  mounted: function mounted() {\n    var series = [this._getSerieOption(0)];\n\n    if (this.seriesFields && this.seriesFields.length > 1) {\n      for (var i = 1; i < this.seriesFields.length; i++) {\n        series.push(this._getSerieOption(i));\n      }\n    }\n\n    var option = {\n      grid: this.gridOption,\n      legend: {\n        data: this.legend\n      },\n      tooltip: {\n        trigger: 'axis',\n        formatter: this.tooltipFormatter,\n        axisPointer: {\n          type: 'cross',\n          animation: false,\n          label: {\n            backgroundColor: '#6F6F6F'\n          }\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: [],\n        boundaryGap: this.xAxisBoundaryGap,\n        axisLabel: {\n          show: this.show_x_axisLabel,\n          color: \"#232323\",\n          formatter: this.xaxisLabelFormatter\n        },\n        axisLine: {\n          show: this.show_x_axisLine,\n          lineStyle: {\n            color: this.theme.border_color_dark\n          }\n        },\n        axisTick: {\n          show: this.show_x_axisTick\n        }\n      },\n      yAxis: {\n        type: 'value',\n        axisLabel: {\n          show: this.show_y_axisLabel,\n          color: \"#232323\",\n          formatter: this.yaxisLabelFormatter\n        },\n        splitLine: {\n          show: this.show_y_splitLine,\n          lineStyle: {\n            color: this.theme.border_color_light,\n            type: 'dashed'\n          }\n        },\n        axisLine: {\n          show: this.show_y_axisLine,\n          lineStyle: {\n            color: this.theme.border_color_dark\n          }\n        },\n        axisTick: {\n          show: this.show_y_axisTick\n        }\n      },\n      series: series,\n      title: {\n        text: this.title,\n        x: 'center'\n      }\n    };\n    this._chart = echarts.init(this.$el);\n\n    this._chart.setOption(option);\n\n    this.data && this.data.length && this.setData(this.data);\n    addResizeListener(this.$el, this._chart.resize);\n  },\n  methods: {\n    getChart: function getChart() {\n      return this._chart;\n    },\n    setData: function setData(data) {\n      var xAxisData = [],\n          series = [];\n\n      if (!this.seriesFields || this.seriesFields.length == 0) {\n        series = [{\n          data: data\n        }];\n\n        if (this.xaxisField) {\n          for (var i = 0, len = data.length, item; i < len; i++) {\n            item = data[i];\n            xAxisData.push(item[this.xaxisField]);\n          }\n        }\n      } else if (this.seriesFields.length == 1) {\n        var seriesData = [],\n            sfield = this.seriesFields[0];\n        series = [{\n          data: seriesData\n        }];\n\n        for (var _i = 0, _len = data.length, _item; _i < _len; _i++) {\n          _item = data[_i];\n          seriesData.push(_item[sfield]);\n          this.xaxisField && xAxisData.push(_item[this.xaxisField]);\n        }\n      } else {\n        this.seriesFields.forEach(function (s) {\n          return series.push({\n            data: []\n          });\n        });\n\n        for (var _i2 = 0, _len2 = data.length, _item2; _i2 < _len2; _i2++) {\n          _item2 = data[_i2];\n          this.xaxisField && xAxisData.push(_item2[this.xaxisField]);\n\n          for (var j = 0, jlen = this.seriesFields.length; j < jlen; j++) {\n            series[j].data.push(_item2[this.seriesFields[j]]);\n          }\n        }\n      }\n\n      this._chart && this._chart.setOption({\n        xAxis: [{\n          data: xAxisData\n        }],\n        series: series\n      });\n    },\n    _getSerieOption: function _getSerieOption(i) {\n      return {\n        type: this.chartType,\n        name: this.legend ? this.legend[i] : null,\n        data: [],\n        showSymbol: false,\n        hoverAnimation: false,\n        color: [getColor(i)],\n        smooth: true,\n        itemStyle: this.itemStyle\n      };\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this._chart && removeResizeListener(this.$el, this._chart.resize);\n  }\n};",{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;AAMA;AACA,SAAA,QAAA,sB,CACA;;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AAAA,MAAA,IAAA,EAAA,OAAA;AAAA,MAAA,OAAA,EAAA;AAAA,KADA;AACA;AACA,IAAA,WAAA,EAAA;AAAA,MAAA,IAAA,EAAA,MAAA;AAAA,MAAA,OAAA,EAAA,OAAA,CAAA;AAAA,KAFA;AAGA,IAAA,QAAA,EAAA,OAHA;AAGA;AACA,IAAA,gBAAA,EAAA,CAAA,QAAA,EAAA,MAAA,CAJA;AAKA,IAAA,mBAAA,EAAA,CAAA,QAAA,EAAA,MAAA,CALA;AAMA,IAAA,mBAAA,EAAA,CAAA,QAAA,EAAA,MAAA,CANA;AAOA,IAAA,gBAAA,EAAA;AAAA,MAAA,OAAA,EAAA,IAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAPA;AAQA,IAAA,gBAAA,EAAA;AAAA,MAAA,OAAA,EAAA,IAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KARA;AASA,IAAA,eAAA,EAAA;AAAA,MAAA,OAAA,EAAA,IAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KATA;AAUA,IAAA,eAAA,EAAA;AAAA,MAAA,OAAA,EAAA,IAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAVA;AAWA,IAAA,eAAA,EAAA;AAAA,MAAA,OAAA,EAAA,IAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAXA;AAYA,IAAA,eAAA,EAAA;AAAA,MAAA,OAAA,EAAA,IAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAZA;AAaA,IAAA,gBAAA,EAAA;AAAA,MAAA,OAAA,EAAA,IAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAbA;AAcA,IAAA,MAAA,EAAA,KAdA;AAeA,IAAA,UAAA,EAAA,MAfA;AAgBA,IAAA,YAAA,EAAA,KAhBA;AAiBA,IAAA,IAAA,EAAA,KAjBA;AAkBA,IAAA,SAAA,EAAA;AAAA,MAAA,OAAA,EAAA;AAAA,KAlBA;AAmBA,IAAA,gBAAA,EAAA;AAAA,MAAA,OAAA,EAAA,KAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAnBA;AAoBA,IAAA,UAAA,EAAA;AAAA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA;AAAA,UAAA,IAAA,EAAA,EAAA;AAAA,UAAA,KAAA,EAAA,EAAA;AAAA,UAAA,MAAA,EAAA,EAAA;AAAA,UAAA,GAAA,EAAA,EAAA;AAAA,UAAA,YAAA,EAAA;AAAA,SAAA;AACA,OAFA;AAEA,MAAA,IAAA,EAAA;AAFA,KApBA;AAuBA,IAAA,KAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAvBA;AAwBA,IAAA,SAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA;AAxBA,GAFA;AA4BA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA,cAAA,CAAA,EAAA;AACA,WAAA,OAAA,CAAA,CAAA;AACA,KAHA;AAIA,IAAA,mBAAA,EAAA,+BAAA;AACA,WAAA,MAAA,IAAA,KAAA,MAAA,CAAA,SAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,UAAA,SAAA,EAAA;AAAA,YAAA,KAAA,EAAA,SAAA;AAAA,YAAA,SAAA,EAAA,KAAA;AAAA;AAAA;AAAA,OAAA,CAAA;AACA,KANA;AAOA,IAAA,gBAAA,EAAA,4BAAA;AACA,WAAA,MAAA,IAAA,KAAA,MAAA,CAAA,SAAA,CAAA;AAAA,QAAA,OAAA,EAAA;AAAA,UAAA,SAAA,EAAA,KAAA;AAAA;AAAA,OAAA,CAAA;AACA,KATA;AAUA,IAAA,eAAA,EAAA,2BAAA;AACA,WAAA,MAAA,IAAA,KAAA,MAAA,CAAA,SAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,IAAA,EAAA,KAAA;AAAA;AAAA;AAAA,OAAA,CAAA;AACA,KAZA;AAaA,IAAA,eAAA,EAAA,2BAAA;AACA,WAAA,MAAA,IAAA,KAAA,MAAA,CAAA,SAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,IAAA,EAAA,KAAA;AAAA;AAAA;AAAA,OAAA,CAAA;AACA,KAfA;AAgBA,IAAA,gBAAA,EAAA,4BAAA;AACA,WAAA,MAAA,IAAA,KAAA,MAAA,CAAA,SAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,UAAA,SAAA,EAAA;AAAA,YAAA,IAAA,EAAA,KAAA;AAAA;AAAA;AAAA,OAAA,CAAA;AACA;AAlBA,GA5BA;AAgDA,EAAA,OAhDA,qBAgDA;AACA,QAAA,MAAA,GAAA,CAAA,KAAA,eAAA,CAAA,CAAA,CAAA,CAAA;;AACA,QAAA,KAAA,YAAA,IAAA,KAAA,YAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,YAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,KAAA,eAAA,CAAA,CAAA,CAAA;AACA;AACA;;AACA,QAAA,MAAA,GAAA;AACA,MAAA,IAAA,EAAA,KAAA,UADA;AAEA,MAAA,MAAA,EAAA;AAAA,QAAA,IAAA,EAAA,KAAA;AAAA,OAFA;AAGA,MAAA,OAAA,EAAA;AAAA,QAAA,OAAA,EAAA,MAAA;AAAA,QAAA,SAAA,EAAA,KAAA,gBAAA;AAAA,QAAA,WAAA,EAAA;AAAA,UAAA,IAAA,EAAA,OAAA;AAAA,UAAA,SAAA,EAAA,KAAA;AAAA,UAAA,KAAA,EAAA;AAAA,YAAA,eAAA,EAAA;AAAA;AAAA;AAAA,OAHA;AAIA,MAAA,KAAA,EAAA;AACA,QAAA,IAAA,EAAA,UADA;AAEA,QAAA,IAAA,EAAA,EAFA;AAGA,QAAA,WAAA,EAAA,KAAA,gBAHA;AAIA,QAAA,SAAA,EAAA;AAAA,UAAA,IAAA,EAAA,KAAA,gBAAA;AAAA,UAAA,KAAA,EAAA,SAAA;AAAA,UAAA,SAAA,EAAA,KAAA;AAAA,SAJA;AAKA,QAAA,QAAA,EAAA;AAAA,UAAA,IAAA,EAAA,KAAA,eAAA;AAAA,UAAA,SAAA,EAAA;AAAA,YAAA,KAAA,EAAA,KAAA,KAAA,CAAA;AAAA;AAAA,SALA;AAMA,QAAA,QAAA,EAAA;AAAA,UAAA,IAAA,EAAA,KAAA;AAAA;AANA,OAJA;AAYA,MAAA,KAAA,EAAA;AACA,QAAA,IAAA,EAAA,OADA;AAEA,QAAA,SAAA,EAAA;AAAA,UAAA,IAAA,EAAA,KAAA,gBAAA;AAAA,UAAA,KAAA,EAAA,SAAA;AAAA,UAAA,SAAA,EAAA,KAAA;AAAA,SAFA;AAGA,QAAA,SAAA,EAAA;AAAA,UAAA,IAAA,EAAA,KAAA,gBAAA;AAAA,UAAA,SAAA,EAAA;AAAA,YAAA,KAAA,EAAA,KAAA,KAAA,CAAA,kBAAA;AAAA,YAAA,IAAA,EAAA;AAAA;AAAA,SAHA;AAIA,QAAA,QAAA,EAAA;AAAA,UAAA,IAAA,EAAA,KAAA,eAAA;AAAA,UAAA,SAAA,EAAA;AAAA,YAAA,KAAA,EAAA,KAAA,KAAA,CAAA;AAAA;AAAA,SAJA;AAKA,QAAA,QAAA,EAAA;AAAA,UAAA,IAAA,EAAA,KAAA;AAAA;AALA,OAZA;AAmBA,MAAA,MAAA,EAAA,MAnBA;AAoBA,MAAA,KAAA,EAAA;AAAA,QAAA,IAAA,EAAA,KAAA,KAAA;AAAA,QAAA,CAAA,EAAA;AAAA;AApBA,KAAA;AAsBA,SAAA,MAAA,GAAA,OAAA,CAAA,IAAA,CAAA,KAAA,GAAA,CAAA;;AACA,SAAA,MAAA,CAAA,SAAA,CAAA,MAAA;;AACA,SAAA,IAAA,IAAA,KAAA,IAAA,CAAA,MAAA,IAAA,KAAA,OAAA,CAAA,KAAA,IAAA,CAAA;AACA,IAAA,iBAAA,CAAA,KAAA,GAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA;AACA,GAjFA;AAkFA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,sBACA;AACA,aAAA,KAAA,MAAA;AACA,KAHA;AAIA,IAAA,OAJA,mBAIA,IAJA,EAIA;AACA,UAAA,SAAA,GAAA,EAAA;AAAA,UAAA,MAAA,GAAA,EAAA;;AACA,UAAA,CAAA,KAAA,YAAA,IAAA,KAAA,YAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,QAAA,MAAA,GAAA,CAAA;AAAA,UAAA,IAAA,EAAA;AAAA,SAAA,CAAA;;AACA,YAAA,KAAA,UAAA,EAAA;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,MAAA,EAAA,IAAA,EAAA,CAAA,GAAA,GAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AACA,YAAA,SAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,UAAA,CAAA;AACA;AACA;AACA,OARA,MAQA,IAAA,KAAA,YAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,YAAA,UAAA,GAAA,EAAA;AAAA,YAAA,MAAA,GAAA,KAAA,YAAA,CAAA,CAAA,CAAA;AACA,QAAA,MAAA,GAAA,CAAA;AAAA,UAAA,IAAA,EAAA;AAAA,SAAA,CAAA;;AACA,aAAA,IAAA,EAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,CAAA,MAAA,EAAA,KAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA;AACA,UAAA,KAAA,GAAA,IAAA,CAAA,EAAA,CAAA;AACA,UAAA,UAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,CAAA;AACA,eAAA,UAAA,IAAA,SAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,UAAA,CAAA,CAAA;AACA;AACA,OARA,MAQA;AACA,aAAA,YAAA,CAAA,OAAA,CAAA,UAAA,CAAA;AAAA,iBAAA,MAAA,CAAA,IAAA,CAAA;AAAA,YAAA,IAAA,EAAA;AAAA,WAAA,CAAA;AAAA,SAAA;;AACA,aAAA,IAAA,GAAA,GAAA,CAAA,EAAA,KAAA,GAAA,IAAA,CAAA,MAAA,EAAA,MAAA,EAAA,GAAA,GAAA,KAAA,EAAA,GAAA,EAAA,EAAA;AACA,UAAA,MAAA,GAAA,IAAA,CAAA,GAAA,CAAA;AACA,eAAA,UAAA,IAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,UAAA,CAAA,CAAA;;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,IAAA,GAAA,KAAA,YAAA,CAAA,MAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,YAAA,CAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA;;AACA,WAAA,MAAA,IAAA,KAAA,MAAA,CAAA,SAAA,CAAA;AAAA,QAAA,KAAA,EAAA,CAAA;AAAA,UAAA,IAAA,EAAA;AAAA,SAAA,CAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA,CAAA;AACA,KAjCA;AAkCA,IAAA,eAlCA,2BAkCA,CAlCA,EAkCA;AACA,aAAA;AACA,QAAA,IAAA,EAAA,KAAA,SADA;AAEA,QAAA,IAAA,EAAA,KAAA,MAAA,GAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,IAFA;AAGA,QAAA,IAAA,EAAA,EAHA;AAIA,QAAA,UAAA,EAAA,KAJA;AAKA,QAAA,cAAA,EAAA,KALA;AAMA,QAAA,KAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CANA;AAOA,QAAA,MAAA,EAAA,IAPA;AAQA,QAAA,SAAA,EAAA,KAAA;AARA,OAAA;AAUA;AA7CA,GAlFA;AAkIA,EAAA,aAlIA,2BAkIA;AACA,SAAA,MAAA,IAAA,oBAAA,CAAA,KAAA,GAAA,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA;AACA;AApIA,CAAA","sourcesContent":["<template>\r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"{borderColor:borderColor}\"></div>\r\n</template>\r\n\r\n<script>\r\n\r\n  //import echarts from 'echarts';\r\n  import {getColor} from './Colors.js';\r\n  //import '@/components/util/element-resize.js';\r\n\r\n  export default {\r\n    name: \"LineChart\",\r\n    props: {\r\n      border: { type: Boolean, default: true },                // 是否有边框\r\n      borderColor: { type: String, default: $_theme.border_color_dark },\r\n      disabled: Boolean,                                       // 是否禁用\r\n      tooltipFormatter: [Function, String],\r\n      yaxisLabelFormatter: [Function, String],\r\n      xaxisLabelFormatter: [Function, String],\r\n      show_x_axisLabel:{ default:true, type: Boolean },\r\n      show_y_axisLabel:{ default:true, type: Boolean },\r\n      show_x_axisLine: { default:true, type: Boolean },\r\n      show_y_axisLine: { default:true, type: Boolean },\r\n      show_x_axisTick: { default:true, type: Boolean },\r\n      show_y_axisTick: { default:true, type: Boolean },\r\n      show_y_splitLine:{ default:true, type: Boolean },\r\n      legend: Array,\r\n      xaxisField: String,\r\n      seriesFields: Array,\r\n      data: Array,\r\n      chartType:{ default: 'line' },\r\n      xAxisBoundaryGap:{ default:false,type: Boolean },\r\n      gridOption:{ default:function(){\r\n        return {left: 10, right: 10, bottom: 10, top: 10, containLabel: true}\r\n      },type:Object },\r\n      title:{type:String},\r\n      itemStyle:{type:Object}\r\n    },\r\n    watch: {\r\n      data: function(v) {\r\n        this.setData(v);\r\n      },\r\n      yaxisLabelFormatter: function() {\r\n        this._chart && this._chart.setOption({ yAxis: {axisLabel: { color: \"#232323\", formatter: this.yaxisLabelFormatter }}});\r\n      },\r\n      tooltipFormatter: function() {\r\n        this._chart && this._chart.setOption({ tooltip: {formatter: this.tooltipFormatter}});\r\n      },\r\n      show_y_axisLine: function() {\r\n        this._chart && this._chart.setOption({ yAxis: {axisLine: { show: this.show_y_axisLine}}});\r\n      },\r\n      show_y_axisTick: function() {\r\n        this._chart && this._chart.setOption({ yAxis: {axisTick: { show: this.show_y_axisTick}}});\r\n      },\r\n      show_y_axisLabel: function() {\r\n        this._chart && this._chart.setOption({ yAxis: {axisLabel: { show: this.show_y_axisLabel}}});\r\n      },\r\n    },\r\n    mounted() {\r\n      let series = [this._getSerieOption(0)];\r\n      if (this.seriesFields && this.seriesFields.length > 1) {\r\n        for (let i=1; i<this.seriesFields.length; i++) {\r\n          series.push(this._getSerieOption(i));\r\n        }\r\n      }\r\n      let option = {\r\n        grid: this.gridOption,\r\n        legend: { data: this.legend },\r\n        tooltip: { trigger: 'axis', formatter: this.tooltipFormatter, axisPointer: {type:'cross', animation: false, label: { backgroundColor: '#6F6F6F' }}},\r\n        xAxis: {\r\n          type: 'category',\r\n          data: [],\r\n          boundaryGap: this.xAxisBoundaryGap,\r\n          axisLabel: { show: this.show_x_axisLabel, color: \"#232323\", formatter: this.xaxisLabelFormatter },\r\n          axisLine: { show: this.show_x_axisLine, lineStyle: { color: this.theme.border_color_dark } },\r\n          axisTick: { show: this.show_x_axisTick }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          axisLabel: { show: this.show_y_axisLabel, color: \"#232323\", formatter: this.yaxisLabelFormatter },\r\n          splitLine: { show: this.show_y_splitLine, lineStyle: { color:this.theme.border_color_light, type:'dashed' } },\r\n          axisLine:  { show: this.show_y_axisLine,  lineStyle: { color: this.theme.border_color_dark } },\r\n          axisTick:  { show: this.show_y_axisTick }\r\n        },\r\n        series: series,\r\n        title:{text:this.title,x:'center'}\r\n      };\r\n      this._chart = echarts.init(this.$el);\r\n      this._chart.setOption(option);\r\n      this.data && this.data.length && this.setData(this.data);\r\n      addResizeListener(this.$el, this._chart.resize);\r\n    },\r\n    methods: {\r\n      getChart(){\r\n        return this._chart;\r\n      },\r\n      setData(data) {\r\n        let xAxisData = [], series = [];\r\n        if (!this.seriesFields || this.seriesFields.length == 0) {\r\n          series = [{data:data}];\r\n          if (this.xaxisField) {\r\n            for (let i=0,len=data.length,item; i<len; i++) {\r\n              item = data[i];\r\n              xAxisData.push(item[this.xaxisField]);\r\n            }\r\n          }\r\n        } else if (this.seriesFields.length == 1) {\r\n          let seriesData = [], sfield = this.seriesFields[0];\r\n          series = [{data:seriesData}];\r\n          for (let i=0,len=data.length,item; i<len; i++) {\r\n            item = data[i];\r\n            seriesData.push(item[sfield]);\r\n            this.xaxisField && xAxisData.push(item[this.xaxisField]);\r\n          }\r\n        } else {\r\n          this.seriesFields.forEach(s => series.push({data:[]}));\r\n          for (let i=0,len=data.length,item; i<len; i++) {\r\n            item = data[i];\r\n            this.xaxisField && xAxisData.push(item[this.xaxisField]);\r\n            for (let j=0,jlen=this.seriesFields.length; j<jlen; j++) {\r\n              series[j].data.push(item[this.seriesFields[j]]);\r\n            }\r\n          }\r\n        }\r\n        this._chart && this._chart.setOption({ xAxis: [{data: xAxisData}], series: series});\r\n      },\r\n      _getSerieOption(i) {\r\n        return {\r\n          type: this.chartType,\r\n          name: this.legend ? this.legend[i] : null,\r\n          data: [],\r\n          showSymbol: false,\r\n          hoverAnimation: false,\r\n          color: [getColor(i)],\r\n          smooth: true,\r\n          itemStyle:this.itemStyle\r\n        };\r\n      }\r\n    },\r\n    \r\n    beforeDestroy() {\r\n      this._chart && removeResizeListener(this.$el, this._chart.resize);\r\n    }\r\n  };\r\n</script>\r\n\r\n<style module>\r\n  .container {\r\n    background-color: #fff;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  .border {\r\n    border-style: solid;\r\n    border-width: 1px;\r\n  }\r\n  .disabled {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    background-color: rgba(235, 235, 235, 0.6);\r\n    opacity: 0.6;\r\n    filter: alpha(opacity=60); \r\n    cursor: not-allowed;\r\n  }\r\n</style>\r\n"],"sourceRoot":"src/components/Chart"}]}