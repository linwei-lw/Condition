{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\modal\\src\\modal.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\modal\\src\\modal.js","mtime":1635230121053},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport vSize from \"../../mixins/size\";\nimport XEUtils from 'xe-utils';\nimport { UtilTools, DomTools, GlobalEvent } from \"../../tools\";\nexport var allActivedModals = [];\nexport var msgQueue = [];\nexport default {\n  name: 'VxeModal',\n  mixins: [vSize],\n  props: {\n    value: Boolean,\n    id: String,\n    type: {\n      type: String,\n      default: 'modal'\n    },\n    loading: {\n      type: Boolean,\n      default: null\n    },\n    status: String,\n    iconStatus: String,\n    className: String,\n    top: {\n      type: [Number, String],\n      default: function _default() {\n        return GlobalConfig.modal.top;\n      }\n    },\n    position: [String, Object],\n    title: String,\n    duration: {\n      type: [Number, String],\n      default: function _default() {\n        return GlobalConfig.modal.duration;\n      }\n    },\n    // 请使用 content\n    message: [String, Function],\n    content: [String, Function],\n    cancelButtonText: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.modal.cancelButtonText;\n      }\n    },\n    confirmButtonText: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.modal.confirmButtonText;\n      }\n    },\n    lockView: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.lockView;\n      }\n    },\n    lockScroll: Boolean,\n    mask: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.mask;\n      }\n    },\n    maskClosable: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.maskClosable;\n      }\n    },\n    escClosable: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.escClosable;\n      }\n    },\n    resize: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.resize;\n      }\n    },\n    showHeader: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.showHeader;\n      }\n    },\n    showFooter: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.showFooter;\n      }\n    },\n    showZoom: {\n      type: Boolean,\n      default: null\n    },\n    showClose: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.showClose;\n      }\n    },\n    dblclickZoom: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.dblclickZoom;\n      }\n    },\n    width: [Number, String],\n    height: [Number, String],\n    minWidth: {\n      type: [Number, String],\n      default: function _default() {\n        return GlobalConfig.modal.minWidth;\n      }\n    },\n    minHeight: {\n      type: [Number, String],\n      default: function _default() {\n        return GlobalConfig.modal.minHeight;\n      }\n    },\n    zIndex: Number,\n    marginSize: {\n      type: [Number, String],\n      default: GlobalConfig.modal.marginSize\n    },\n    fullscreen: Boolean,\n    remember: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.remember;\n      }\n    },\n    destroyOnClose: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.destroyOnClose;\n      }\n    },\n    showTitleOverflow: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.showTitleOverflow;\n      }\n    },\n    transfer: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.transfer;\n      }\n    },\n    storage: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.storage;\n      }\n    },\n    storageKey: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.modal.storageKey;\n      }\n    },\n    animat: {\n      type: Boolean,\n      default: function _default() {\n        return GlobalConfig.modal.animat;\n      }\n    },\n    size: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.modal.size || GlobalConfig.size;\n      }\n    },\n    beforeHideMethod: {\n      type: Function,\n      default: function _default() {\n        return GlobalConfig.modal.beforeHideMethod;\n      }\n    },\n    slots: Object,\n    events: Object\n  },\n  data: function data() {\n    return {\n      inited: false,\n      visible: false,\n      contentVisible: false,\n      modalTop: 0,\n      modalZindex: 0,\n      zoomLocat: null,\n      firstOpen: false\n    };\n  },\n  computed: {\n    isMsg: function isMsg() {\n      return this.type === 'message';\n    }\n  },\n  watch: {\n    width: function width() {\n      this.recalculate();\n    },\n    height: function height() {\n      this.recalculate();\n    },\n    value: function value(visible) {\n      this[visible ? 'open' : 'close']('model');\n    }\n  },\n  created: function created() {\n    if (this.storage && !this.id) {\n      UtilTools.error('vxe.error.reqProp', ['modal.id']);\n    }\n  },\n  mounted: function mounted() {\n    var $listeners = this.$listeners,\n        _this$events = this.events,\n        events = _this$events === void 0 ? {} : _this$events;\n\n    if (this.value) {\n      this.open();\n    }\n\n    this.recalculate();\n\n    if (this.escClosable) {\n      GlobalEvent.on(this, 'keydown', this.handleGlobalKeydownEvent);\n    } // 触发 inserted 事件\n\n\n    var type = 'inserted';\n    var params = {\n      type: type,\n      $modal: this,\n      $event: {\n        type: type\n      }\n    };\n\n    if ($listeners.inserted) {\n      this.$emit('inserted', params);\n    } else if (events.inserted) {\n      events.inserted.call(this, params);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    var $el = this.$el;\n    GlobalEvent.off(this, 'keydown');\n    this.removeMsgQueue();\n\n    if ($el.parentNode === document.body) {\n      $el.parentNode.removeChild($el);\n    }\n  },\n  render: function render(h) {\n    var _ref,\n        _this = this;\n\n    var _e = this._e,\n        $scopedSlots = this.$scopedSlots,\n        _this$slots = this.slots,\n        slots = _this$slots === void 0 ? {} : _this$slots,\n        inited = this.inited,\n        vSize = this.vSize,\n        className = this.className,\n        type = this.type,\n        resize = this.resize,\n        showClose = this.showClose,\n        showZoom = this.showZoom,\n        animat = this.animat,\n        loading = this.loading,\n        status = this.status,\n        iconStatus = this.iconStatus,\n        showFooter = this.showFooter,\n        zoomLocat = this.zoomLocat,\n        modalTop = this.modalTop,\n        dblclickZoom = this.dblclickZoom,\n        contentVisible = this.contentVisible,\n        visible = this.visible,\n        title = this.title,\n        lockScroll = this.lockScroll,\n        lockView = this.lockView,\n        mask = this.mask,\n        isMsg = this.isMsg,\n        showTitleOverflow = this.showTitleOverflow,\n        destroyOnClose = this.destroyOnClose;\n    var content = this.content || this.message;\n    var defaultSlot = $scopedSlots.default || slots.default;\n    var footerSlot = $scopedSlots.footer || slots.footer;\n    var headerSlot = $scopedSlots.header || slots.header;\n    var titleSlot = $scopedSlots.title || slots.title;\n    var headerOns = {\n      mousedown: this.mousedownEvent\n    };\n\n    if (showZoom && dblclickZoom && type === 'modal') {\n      headerOns.dblclick = this.toggleZoomEvent;\n    }\n\n    return h('div', {\n      class: ['vxe-modal--wrapper', \"type--\".concat(type), className || '', (_ref = {}, _defineProperty(_ref, \"size--\".concat(vSize), vSize), _defineProperty(_ref, \"status--\".concat(status), status), _defineProperty(_ref, 'is--animat', animat), _defineProperty(_ref, 'lock--scroll', lockScroll), _defineProperty(_ref, 'lock--view', lockView), _defineProperty(_ref, 'is--resize', resize), _defineProperty(_ref, 'is--mask', mask), _defineProperty(_ref, 'is--maximize', zoomLocat), _defineProperty(_ref, 'is--visible', contentVisible), _defineProperty(_ref, 'is--active', visible), _defineProperty(_ref, 'is--loading', loading), _ref)],\n      style: {\n        zIndex: this.modalZindex,\n        top: modalTop ? \"\".concat(modalTop, \"px\") : null\n      },\n      on: {\n        click: this.selfClickEvent\n      }\n    }, [h('div', {\n      class: 'vxe-modal--box',\n      on: {\n        mousedown: this.boxMousedownEvent\n      },\n      ref: 'modalBox'\n    }, [this.showHeader ? h('div', {\n      class: ['vxe-modal--header', !isMsg && showTitleOverflow ? 'is--ellipsis' : ''],\n      on: headerOns\n    }, headerSlot ? !inited || destroyOnClose && !visible ? [] : headerSlot.call(this, {\n      $modal: this\n    }, h) : [titleSlot ? titleSlot.call(this, {\n      $modal: this\n    }, h) : h('span', {\n      class: 'vxe-modal--title'\n    }, title ? UtilTools.getFuncText(title) : GlobalConfig.i18n('vxe.alert.title')), showZoom ? h('i', {\n      class: ['vxe-modal--zoom-btn', 'trigger--btn', zoomLocat ? GlobalConfig.icon.MODAL_ZOOM_OUT : GlobalConfig.icon.MODAL_ZOOM_IN],\n      attrs: {\n        title: GlobalConfig.i18n(\"vxe.modal.zoom\".concat(zoomLocat ? 'Out' : 'In'))\n      },\n      on: {\n        click: this.toggleZoomEvent\n      }\n    }) : _e(), showClose ? h('i', {\n      class: ['vxe-modal--close-btn', 'trigger--btn', GlobalConfig.icon.MODAL_CLOSE],\n      attrs: {\n        title: GlobalConfig.i18n('vxe.modal.close')\n      },\n      on: {\n        click: this.closeEvent\n      }\n    }) : _e()]) : null, h('div', {\n      class: 'vxe-modal--body'\n    }, [status ? h('div', {\n      class: 'vxe-modal--status-wrapper'\n    }, [h('i', {\n      class: ['vxe-modal--status-icon', iconStatus || GlobalConfig.icon[\"MODAL_\".concat(status).toLocaleUpperCase()]]\n    })]) : null, h('div', {\n      class: 'vxe-modal--content'\n    }, defaultSlot ? !inited || destroyOnClose && !visible ? [] : defaultSlot.call(this, {\n      $modal: this\n    }, h) : UtilTools.getFuncText(content)), !isMsg ? h('div', {\n      class: ['vxe-loading', {\n        'is--visible': loading\n      }]\n    }, [h('div', {\n      class: 'vxe-loading--spinner'\n    })]) : null]), showFooter ? h('div', {\n      class: 'vxe-modal--footer'\n    }, footerSlot ? !inited || destroyOnClose && !visible ? [] : footerSlot.call(this, {\n      $modal: this\n    }, h) : [type === 'confirm' ? h('vxe-button', {\n      ref: 'cancelBtn',\n      on: {\n        click: this.cancelEvent\n      }\n    }, this.cancelButtonText || GlobalConfig.i18n('vxe.button.cancel')) : null, h('vxe-button', {\n      ref: 'confirmBtn',\n      props: {\n        status: 'primary'\n      },\n      on: {\n        click: this.confirmEvent\n      }\n    }, this.confirmButtonText || GlobalConfig.i18n('vxe.button.confirm'))]) : null, !isMsg && resize ? h('span', {\n      class: 'vxe-modal--resize'\n    }, ['wl', 'wr', 'swst', 'sest', 'st', 'swlb', 'selb', 'sb'].map(function (type) {\n      return h('span', {\n        class: \"\".concat(type, \"-resize\"),\n        attrs: {\n          type: type\n        },\n        on: {\n          mousedown: _this.dragEvent\n        }\n      });\n    })) : null])]);\n  },\n  methods: {\n    recalculate: function recalculate() {\n      var width = this.width,\n          height = this.height;\n      var modalBoxElem = this.getBox();\n      modalBoxElem.style.width = width ? isNaN(width) ? width : \"\".concat(width, \"px\") : null;\n      modalBoxElem.style.height = height ? isNaN(height) ? height : \"\".concat(height, \"px\") : null;\n      return this.$nextTick();\n    },\n    selfClickEvent: function selfClickEvent(evnt) {\n      if (this.maskClosable && evnt.target === this.$el) {\n        var type = 'mask';\n        this.close(type);\n      }\n    },\n    updateZindex: function updateZindex() {\n      var zIndex = this.zIndex,\n          modalZindex = this.modalZindex;\n\n      if (zIndex) {\n        this.modalZindex = zIndex;\n      } else if (modalZindex < UtilTools.getLastZIndex()) {\n        this.modalZindex = UtilTools.nextZIndex();\n      }\n    },\n    closeEvent: function closeEvent(evnt) {\n      var type = 'close';\n      this.$emit(type, {\n        type: type,\n        $modal: this,\n        $event: evnt\n      });\n      this.close(type);\n    },\n    confirmEvent: function confirmEvent(evnt) {\n      var type = 'confirm';\n      this.$emit(type, {\n        type: type,\n        $modal: this,\n        $event: evnt\n      });\n      this.close(type);\n    },\n    cancelEvent: function cancelEvent(evnt) {\n      var type = 'cancel';\n      this.$emit(type, {\n        type: type,\n        $modal: this,\n        $event: evnt\n      });\n      this.close(type);\n    },\n    open: function open() {\n      var _this2 = this;\n\n      var $refs = this.$refs,\n          _this$events2 = this.events,\n          events = _this$events2 === void 0 ? {} : _this$events2,\n          inited = this.inited,\n          duration = this.duration,\n          visible = this.visible,\n          isMsg = this.isMsg,\n          remember = this.remember,\n          showFooter = this.showFooter;\n\n      if (!inited) {\n        this.inited = true;\n\n        if (this.transfer) {\n          document.body.appendChild(this.$el);\n        }\n      }\n\n      if (!visible) {\n        if (!remember) {\n          this.recalculate();\n        }\n\n        this.visible = true;\n        this.contentVisible = false;\n        this.updateZindex();\n        allActivedModals.push(this);\n        setTimeout(function () {\n          _this2.contentVisible = true;\n\n          _this2.$nextTick(function () {\n            if (showFooter) {\n              var operBtn = $refs.confirmBtn || $refs.cancelBtn;\n\n              if (operBtn) {\n                operBtn.focus();\n              }\n            }\n\n            var type = '';\n            var params = {\n              type: type,\n              $modal: _this2\n            };\n\n            if (events.show) {\n              events.show.call(_this2, params);\n            } else {\n              _this2.$emit('input', true);\n\n              _this2.$emit('show', params);\n            }\n          });\n        }, 10);\n\n        if (isMsg) {\n          this.addMsgQueue();\n\n          if (duration !== -1) {\n            setTimeout(function () {\n              return _this2.close('close');\n            }, XEUtils.toNumber(duration));\n          }\n        } else {\n          this.$nextTick(function () {\n            var firstOpen = _this2.firstOpen,\n                fullscreen = _this2.fullscreen;\n\n            if (!remember || !firstOpen) {\n              _this2.updatePosition().then(function () {\n                setTimeout(function () {\n                  return _this2.updatePosition();\n                }, 20);\n              });\n            }\n\n            if (!firstOpen) {\n              _this2.firstOpen = true;\n\n              if (_this2.hasPosStorage()) {\n                _this2.restorePosStorage();\n              } else if (fullscreen) {\n                _this2.$nextTick(function () {\n                  return _this2.maximize();\n                });\n              }\n            }\n          });\n        }\n      }\n    },\n    addMsgQueue: function addMsgQueue() {\n      if (msgQueue.indexOf(this) === -1) {\n        msgQueue.push(this);\n      }\n\n      this.updateStyle();\n    },\n    removeMsgQueue: function removeMsgQueue() {\n      var _this3 = this;\n\n      if (msgQueue.indexOf(this) > -1) {\n        XEUtils.remove(msgQueue, function (comp) {\n          return comp === _this3;\n        });\n      }\n\n      this.updateStyle();\n    },\n    updateStyle: function updateStyle() {\n      this.$nextTick(function () {\n        var offsetTop = 0;\n        msgQueue.forEach(function (comp) {\n          offsetTop += XEUtils.toNumber(comp.top);\n          comp.modalTop = offsetTop;\n          offsetTop += comp.$refs.modalBox.clientHeight;\n        });\n      });\n    },\n    updatePosition: function updatePosition() {\n      var _this4 = this;\n\n      return this.$nextTick().then(function () {\n        var marginSize = _this4.marginSize,\n            position = _this4.position;\n\n        var modalBoxElem = _this4.getBox();\n\n        var clientVisibleWidth = document.documentElement.clientWidth || document.body.clientWidth;\n        var clientVisibleHeight = document.documentElement.clientHeight || document.body.clientHeight;\n        var isPosCenter = position === 'center';\n\n        var _ref2 = isPosCenter ? {\n          top: position,\n          left: position\n        } : Object.assign({}, position),\n            top = _ref2.top,\n            left = _ref2.left;\n\n        var topCenter = isPosCenter || top === 'center';\n        var leftCenter = isPosCenter || left === 'center';\n        var posTop = '';\n        var posLeft = '';\n\n        if (left && !leftCenter) {\n          posLeft = isNaN(left) ? left : \"\".concat(left, \"px\");\n        } else {\n          posLeft = \"\".concat(Math.max(marginSize, clientVisibleWidth / 2 - modalBoxElem.offsetWidth / 2), \"px\");\n        }\n\n        if (top && !topCenter) {\n          posTop = isNaN(top) ? top : \"\".concat(top, \"px\");\n        } else {\n          posTop = \"\".concat(Math.max(marginSize, clientVisibleHeight / 2 - modalBoxElem.offsetHeight / 2), \"px\");\n        }\n\n        modalBoxElem.style.top = posTop;\n        modalBoxElem.style.left = posLeft;\n      });\n    },\n    close: function close(type) {\n      var _this5 = this;\n\n      var _this$events3 = this.events,\n          events = _this$events3 === void 0 ? {} : _this$events3,\n          remember = this.remember,\n          visible = this.visible,\n          isMsg = this.isMsg,\n          beforeHideMethod = this.beforeHideMethod;\n      var params = {\n        type: type,\n        $modal: this\n      };\n\n      if (visible) {\n        Promise.resolve(beforeHideMethod ? beforeHideMethod(params) : null).then(function (rest) {\n          if (!XEUtils.isError(rest)) {\n            if (isMsg) {\n              _this5.removeMsgQueue();\n            }\n\n            _this5.contentVisible = false;\n\n            if (!remember) {\n              _this5.zoomLocat = null;\n            }\n\n            XEUtils.remove(allActivedModals, function (item) {\n              return item === _this5;\n            });\n\n            _this5.$emit('before-hide', params);\n\n            setTimeout(function () {\n              _this5.visible = false;\n\n              if (events.hide) {\n                events.hide.call(_this5, params);\n              } else {\n                _this5.$emit('input', false);\n\n                _this5.$emit('hide', params);\n              }\n            }, 200);\n          }\n        }).catch(function (e) {\n          return e;\n        });\n      }\n    },\n    handleGlobalKeydownEvent: function handleGlobalKeydownEvent(evnt) {\n      var _this6 = this;\n\n      var isEsc = evnt.keyCode === 27;\n\n      if (isEsc) {\n        var lastModal = XEUtils.max(allActivedModals, function (item) {\n          return item.modalZindex;\n        }); // 多个时，只关掉最上层的窗口\n\n        if (lastModal) {\n          setTimeout(function () {\n            if (lastModal === _this6 && lastModal.escClosable) {\n              _this6.close('exit');\n            }\n          }, 10);\n        }\n      }\n    },\n    getBox: function getBox() {\n      return this.$refs.modalBox;\n    },\n    isMaximized: function isMaximized() {\n      return !!this.zoomLocat;\n    },\n    maximize: function maximize() {\n      var _this7 = this;\n\n      return this.$nextTick().then(function () {\n        if (!_this7.zoomLocat) {\n          var marginSize = _this7.marginSize;\n\n          var modalBoxElem = _this7.getBox();\n\n          var _DomTools$getDomNode = DomTools.getDomNode(),\n              visibleHeight = _DomTools$getDomNode.visibleHeight,\n              visibleWidth = _DomTools$getDomNode.visibleWidth;\n\n          _this7.zoomLocat = {\n            top: modalBoxElem.offsetTop,\n            left: modalBoxElem.offsetLeft,\n            width: modalBoxElem.offsetWidth + (modalBoxElem.style.width ? 0 : 1),\n            height: modalBoxElem.offsetHeight + (modalBoxElem.style.height ? 0 : 1)\n          };\n          Object.assign(modalBoxElem.style, {\n            top: \"\".concat(marginSize, \"px\"),\n            left: \"\".concat(marginSize, \"px\"),\n            width: \"\".concat(visibleWidth - marginSize * 2, \"px\"),\n            height: \"\".concat(visibleHeight - marginSize * 2, \"px\")\n          });\n\n          _this7.savePosStorage();\n        }\n      });\n    },\n    revert: function revert() {\n      var _this8 = this;\n\n      return this.$nextTick().then(function () {\n        var zoomLocat = _this8.zoomLocat;\n\n        if (zoomLocat) {\n          var modalBoxElem = _this8.getBox();\n\n          _this8.zoomLocat = null;\n          Object.assign(modalBoxElem.style, {\n            top: \"\".concat(zoomLocat.top, \"px\"),\n            left: \"\".concat(zoomLocat.left, \"px\"),\n            width: \"\".concat(zoomLocat.width, \"px\"),\n            height: \"\".concat(zoomLocat.height, \"px\")\n          });\n\n          _this8.savePosStorage();\n        }\n      });\n    },\n    zoom: function zoom() {\n      var _this9 = this;\n\n      return this[this.zoomLocat ? 'revert' : 'maximize']().then(function () {\n        return _this9.isMaximized();\n      });\n    },\n    toggleZoomEvent: function toggleZoomEvent(evnt) {\n      var _this10 = this;\n\n      var $listeners = this.$listeners,\n          zoomLocat = this.zoomLocat,\n          _this$events4 = this.events,\n          events = _this$events4 === void 0 ? {} : _this$events4;\n      var params = {\n        type: zoomLocat ? 'revert' : 'max',\n        $modal: this,\n        $event: evnt\n      };\n      return this.zoom().then(function () {\n        if ($listeners.zoom) {\n          _this10.$emit('zoom', params);\n        } else if (events.zoom) {\n          events.zoom.call(_this10, params);\n        }\n      });\n    },\n    getPosition: function getPosition() {\n      if (!this.isMsg) {\n        var modalBoxElem = this.getBox();\n\n        if (modalBoxElem) {\n          return {\n            top: modalBoxElem.offsetTop,\n            left: modalBoxElem.offsetLeft\n          };\n        }\n      }\n\n      return null;\n    },\n    setPosition: function setPosition(top, left) {\n      if (!this.isMsg) {\n        var modalBoxElem = this.getBox();\n\n        if (XEUtils.isNumber(top)) {\n          modalBoxElem.style.top = \"\".concat(top, \"px\");\n        }\n\n        if (XEUtils.isNumber(left)) {\n          modalBoxElem.style.left = \"\".concat(left, \"px\");\n        }\n      }\n\n      return this.$nextTick();\n    },\n    boxMousedownEvent: function boxMousedownEvent() {\n      var modalZindex = this.modalZindex;\n\n      if (allActivedModals.some(function (_vm) {\n        return _vm.visible && _vm.modalZindex > modalZindex;\n      })) {\n        this.updateZindex();\n      }\n    },\n    mousedownEvent: function mousedownEvent(evnt) {\n      var _this11 = this;\n\n      var remember = this.remember,\n          storage = this.storage,\n          marginSize = this.marginSize,\n          zoomLocat = this.zoomLocat;\n      var modalBoxElem = this.getBox();\n\n      if (!zoomLocat && evnt.button === 0 && !DomTools.getEventTargetNode(evnt, modalBoxElem, 'trigger--btn').flag) {\n        evnt.preventDefault();\n        var domMousemove = document.onmousemove;\n        var domMouseup = document.onmouseup;\n        var disX = evnt.clientX - modalBoxElem.offsetLeft;\n        var disY = evnt.clientY - modalBoxElem.offsetTop;\n\n        var _DomTools$getDomNode2 = DomTools.getDomNode(),\n            visibleHeight = _DomTools$getDomNode2.visibleHeight,\n            visibleWidth = _DomTools$getDomNode2.visibleWidth;\n\n        document.onmousemove = function (evnt) {\n          evnt.preventDefault();\n          var offsetWidth = modalBoxElem.offsetWidth;\n          var offsetHeight = modalBoxElem.offsetHeight;\n          var minX = marginSize;\n          var maxX = visibleWidth - offsetWidth - marginSize - 1;\n          var minY = marginSize;\n          var maxY = visibleHeight - offsetHeight - marginSize - 1;\n          var left = evnt.clientX - disX;\n          var top = evnt.clientY - disY;\n\n          if (left > maxX) {\n            left = maxX;\n          }\n\n          if (left < minX) {\n            left = minX;\n          }\n\n          if (top > maxY) {\n            top = maxY;\n          }\n\n          if (top < minY) {\n            top = minY;\n          }\n\n          modalBoxElem.style.left = \"\".concat(left, \"px\");\n          modalBoxElem.style.top = \"\".concat(top, \"px\");\n        };\n\n        document.onmouseup = function () {\n          document.onmousemove = domMousemove;\n          document.onmouseup = domMouseup;\n\n          if (remember && storage) {\n            _this11.$nextTick(function () {\n              _this11.savePosStorage();\n            });\n          }\n        };\n      }\n    },\n    dragEvent: function dragEvent(evnt) {\n      var _this12 = this;\n\n      evnt.preventDefault();\n      var $listeners = this.$listeners,\n          marginSize = this.marginSize,\n          _this$events5 = this.events,\n          events = _this$events5 === void 0 ? {} : _this$events5,\n          remember = this.remember,\n          storage = this.storage;\n\n      var _DomTools$getDomNode3 = DomTools.getDomNode(),\n          visibleHeight = _DomTools$getDomNode3.visibleHeight,\n          visibleWidth = _DomTools$getDomNode3.visibleWidth;\n\n      var type = evnt.target.getAttribute('type');\n      var minWidth = XEUtils.toNumber(this.minWidth);\n      var minHeight = XEUtils.toNumber(this.minHeight);\n      var maxWidth = visibleWidth;\n      var maxHeight = visibleHeight;\n      var modalBoxElem = this.getBox();\n      var domMousemove = document.onmousemove;\n      var domMouseup = document.onmouseup;\n      var clientWidth = modalBoxElem.clientWidth;\n      var clientHeight = modalBoxElem.clientHeight;\n      var disX = evnt.clientX;\n      var disY = evnt.clientY;\n      var offsetTop = modalBoxElem.offsetTop;\n      var offsetLeft = modalBoxElem.offsetLeft;\n      var params = {\n        type: 'resize',\n        $modal: this\n      };\n\n      document.onmousemove = function (evnt) {\n        evnt.preventDefault();\n        var dragLeft;\n        var dragTop;\n        var width;\n        var height;\n\n        switch (type) {\n          case 'wl':\n            dragLeft = disX - evnt.clientX;\n            width = dragLeft + clientWidth;\n\n            if (offsetLeft - dragLeft > marginSize) {\n              if (width > minWidth) {\n                modalBoxElem.style.width = \"\".concat(width < maxWidth ? width : maxWidth, \"px\");\n                modalBoxElem.style.left = \"\".concat(offsetLeft - dragLeft, \"px\");\n              }\n            }\n\n            break;\n\n          case 'swst':\n            dragLeft = disX - evnt.clientX;\n            dragTop = disY - evnt.clientY;\n            width = dragLeft + clientWidth;\n            height = dragTop + clientHeight;\n\n            if (offsetLeft - dragLeft > marginSize) {\n              if (width > minWidth) {\n                modalBoxElem.style.width = \"\".concat(width < maxWidth ? width : maxWidth, \"px\");\n                modalBoxElem.style.left = \"\".concat(offsetLeft - dragLeft, \"px\");\n              }\n            }\n\n            if (offsetTop - dragTop > marginSize) {\n              if (height > minHeight) {\n                modalBoxElem.style.height = \"\".concat(height < maxHeight ? height : maxHeight, \"px\");\n                modalBoxElem.style.top = \"\".concat(offsetTop - dragTop, \"px\");\n              }\n            }\n\n            break;\n\n          case 'swlb':\n            dragLeft = disX - evnt.clientX;\n            dragTop = evnt.clientY - disY;\n            width = dragLeft + clientWidth;\n            height = dragTop + clientHeight;\n\n            if (offsetLeft - dragLeft > marginSize) {\n              if (width > minWidth) {\n                modalBoxElem.style.width = \"\".concat(width < maxWidth ? width : maxWidth, \"px\");\n                modalBoxElem.style.left = \"\".concat(offsetLeft - dragLeft, \"px\");\n              }\n            }\n\n            if (offsetTop + height + marginSize < visibleHeight) {\n              if (height > minHeight) {\n                modalBoxElem.style.height = \"\".concat(height < maxHeight ? height : maxHeight, \"px\");\n              }\n            }\n\n            break;\n\n          case 'st':\n            dragTop = disY - evnt.clientY;\n            height = clientHeight + dragTop;\n\n            if (offsetTop - dragTop > marginSize) {\n              if (height > minHeight) {\n                modalBoxElem.style.height = \"\".concat(height < maxHeight ? height : maxHeight, \"px\");\n                modalBoxElem.style.top = \"\".concat(offsetTop - dragTop, \"px\");\n              }\n            }\n\n            break;\n\n          case 'wr':\n            dragLeft = evnt.clientX - disX;\n            width = dragLeft + clientWidth;\n\n            if (offsetLeft + width + marginSize < visibleWidth) {\n              if (width > minWidth) {\n                modalBoxElem.style.width = \"\".concat(width < maxWidth ? width : maxWidth, \"px\");\n              }\n            }\n\n            break;\n\n          case 'sest':\n            dragLeft = evnt.clientX - disX;\n            dragTop = disY - evnt.clientY;\n            width = dragLeft + clientWidth;\n            height = dragTop + clientHeight;\n\n            if (offsetLeft + width + marginSize < visibleWidth) {\n              if (width > minWidth) {\n                modalBoxElem.style.width = \"\".concat(width < maxWidth ? width : maxWidth, \"px\");\n              }\n            }\n\n            if (offsetTop - dragTop > marginSize) {\n              if (height > minHeight) {\n                modalBoxElem.style.height = \"\".concat(height < maxHeight ? height : maxHeight, \"px\");\n                modalBoxElem.style.top = \"\".concat(offsetTop - dragTop, \"px\");\n              }\n            }\n\n            break;\n\n          case 'selb':\n            dragLeft = evnt.clientX - disX;\n            dragTop = evnt.clientY - disY;\n            width = dragLeft + clientWidth;\n            height = dragTop + clientHeight;\n\n            if (offsetLeft + width + marginSize < visibleWidth) {\n              if (width > minWidth) {\n                modalBoxElem.style.width = \"\".concat(width < maxWidth ? width : maxWidth, \"px\");\n              }\n            }\n\n            if (offsetTop + height + marginSize < visibleHeight) {\n              if (height > minHeight) {\n                modalBoxElem.style.height = \"\".concat(height < maxHeight ? height : maxHeight, \"px\");\n              }\n            }\n\n            break;\n\n          case 'sb':\n            dragTop = evnt.clientY - disY;\n            height = dragTop + clientHeight;\n\n            if (offsetTop + height + marginSize < visibleHeight) {\n              if (height > minHeight) {\n                modalBoxElem.style.height = \"\".concat(height < maxHeight ? height : maxHeight, \"px\");\n              }\n            }\n\n            break;\n        }\n\n        modalBoxElem.className = modalBoxElem.className.replace(/\\s?is--drag/, '') + ' is--drag';\n\n        if (remember && storage) {\n          _this12.savePosStorage();\n        }\n\n        if ($listeners.zoom) {\n          _this12.$emit('zoom', params);\n        } else if (events.zoom) {\n          events.zoom.call(_this12, params);\n        }\n      };\n\n      document.onmouseup = function () {\n        _this12.zoomLocat = null;\n        document.onmousemove = domMousemove;\n        document.onmouseup = domMouseup;\n        setTimeout(function () {\n          modalBoxElem.className = modalBoxElem.className.replace(/\\s?is--drag/, '');\n        }, 50);\n      };\n    },\n    getStorageMap: function getStorageMap(key) {\n      var version = GlobalConfig.version;\n      var rest = XEUtils.toStringJSON(localStorage.getItem(key));\n      return rest && rest._v === version ? rest : {\n        _v: version\n      };\n    },\n    hasPosStorage: function hasPosStorage() {\n      var id = this.id,\n          remember = this.remember,\n          storage = this.storage,\n          storageKey = this.storageKey;\n      return !!(remember && storage && this.getStorageMap(storageKey)[id]);\n    },\n    restorePosStorage: function restorePosStorage() {\n      var id = this.id,\n          remember = this.remember,\n          storage = this.storage,\n          storageKey = this.storageKey;\n\n      if (remember && storage) {\n        var posStorage = this.getStorageMap(storageKey)[id];\n\n        if (posStorage) {\n          var modalBoxElem = this.getBox();\n\n          var _posStorage$split = posStorage.split(','),\n              _posStorage$split2 = _slicedToArray(_posStorage$split, 8),\n              left = _posStorage$split2[0],\n              top = _posStorage$split2[1],\n              width = _posStorage$split2[2],\n              height = _posStorage$split2[3],\n              zoomLeft = _posStorage$split2[4],\n              zoomTop = _posStorage$split2[5],\n              zoomWidth = _posStorage$split2[6],\n              zoomHeight = _posStorage$split2[7];\n\n          if (left) {\n            modalBoxElem.style.left = \"\".concat(left, \"px\");\n          }\n\n          if (top) {\n            modalBoxElem.style.top = \"\".concat(top, \"px\");\n          }\n\n          if (width) {\n            modalBoxElem.style.width = \"\".concat(width, \"px\");\n          }\n\n          if (height) {\n            modalBoxElem.style.height = \"\".concat(height, \"px\");\n          }\n\n          if (zoomLeft && zoomTop) {\n            this.zoomLocat = {\n              left: zoomLeft,\n              top: zoomTop,\n              width: zoomWidth,\n              height: zoomHeight\n            };\n          }\n        }\n      }\n    },\n    savePosStorage: function savePosStorage() {\n      var id = this.id,\n          remember = this.remember,\n          storage = this.storage,\n          storageKey = this.storageKey,\n          zoomLocat = this.zoomLocat;\n\n      if (remember && storage) {\n        var modalBoxElem = this.getBox();\n        var posStorageMap = this.getStorageMap(storageKey);\n        posStorageMap[id] = [modalBoxElem.style.left, modalBoxElem.style.top, modalBoxElem.style.width, modalBoxElem.style.height].concat(zoomLocat ? [zoomLocat.left, zoomLocat.top, zoomLocat.width, zoomLocat.height] : []).map(function (val) {\n          return val ? XEUtils.toNumber(val) : '';\n        }).join(',');\n        localStorage.setItem(storageKey, XEUtils.toJSONString(posStorageMap));\n      }\n    }\n  }\n};",null]}