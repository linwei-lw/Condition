{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\common\\util\\Objects.js","dependencies":[{"path":"D:\\cdRule\\src\\common\\util\\Objects.js","mtime":1612227987770},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\r\n * 把对象所有属性复制给另一个对象\r\n * @param {Map} fromMap 被复制对象\r\n * @param {Map} destMap 目标对象\r\n * @param {Set} [excludeKeys] 被排除的属性\r\n * @return {Map} 返回目标对象\r\n */\nexport function objCopyTo(fromMap, destMap) {\n  let excludeKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (!destMap || !fromMap) return destMap;\n\n  for (let key in fromMap) {\n    if (excludeKeys && excludeKeys.has(key)) continue;\n    destMap[key] = fromMap[key];\n  }\n\n  return destMap;\n}\n/**\r\n * 把对象复制一份\r\n * @param {Map} map 被复制对象\r\n * @param {Set} [excludeKeys] 被排除的属性\r\n * @return {Map} 复制对象\r\n */\n\nexport function objClone(map) {\n  let excludeKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!map) return map;\n  let destMap = {};\n\n  for (let key in map) {\n    if (excludeKeys && excludeKeys.has(key)) continue;\n    destMap[key] = map[key];\n  }\n\n  return destMap;\n}\n/**\r\n * 把数组每个对象复制一份\r\n * @param {Array} array 被复制对象\r\n * @param {Set} [excludeKeys] 被排除的属性\r\n * @return {Array} 复制数组对象\r\n */\n\nexport function objsClone(array) {\n  let excludeKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!array || array.length == 0) return array;\n  let _array = [];\n\n  for (let i = 0, len = array.length; i < len; i++) {\n    _array.push(objClone(array[i], excludeKeys));\n  }\n\n  return _array;\n}\n/**\r\n * 判断对象是否为空\r\n * @param {Map} map MAP对象\r\n * @param {Boolean} [allowBlank] 是否允许值为空\r\n * @param {Set} [excludeKeys] 被排除的属性\r\n * @return {Boolean}\r\n */\n\nexport function objIsEmpty(map) {\n  let allowBlank = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let excludeKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (!map) return true;\n  let value;\n\n  for (let key in map) {\n    if (excludeKeys && excludeKeys.has(key)) continue;\n    if (allowBlank) return false;\n    value = map[key];\n\n    if (value !== null && value !== '' && value != undefined) {\n      return false;\n    }\n  }\n\n  return true;\n}",null]}