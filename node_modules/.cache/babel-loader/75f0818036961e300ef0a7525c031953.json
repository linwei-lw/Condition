{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\v-x-e-table\\src\\renderer.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\v-x-e-table\\src\\renderer.js","mtime":1635230121549},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport { UtilTools } from '../../tools';\nconst defaultCompProps = {\n  transfer: true\n};\nconst componentDefaultModelProp = 'value';\n\nfunction isEmptyValue(cellValue) {\n  return cellValue === null || cellValue === undefined || cellValue === '';\n}\n\nfunction getChangeEvent(renderOpts) {\n  switch (renderOpts.name) {\n    case 'input':\n    case 'textarea':\n    case '$input':\n    case '$textarea':\n      return 'input';\n  }\n\n  return 'change';\n}\n\nfunction parseDate(value, props) {\n  return value && props.valueFormat ? XEUtils.toStringDate(value, props.valueFormat) : value;\n}\n\nfunction getFormatDate(value, props, defaultFormat) {\n  const _props$dateConfig = props.dateConfig,\n        dateConfig = _props$dateConfig === void 0 ? {} : _props$dateConfig;\n  return XEUtils.toDateString(parseDate(value, props), dateConfig.labelFormat || defaultFormat);\n}\n\nfunction getLabelFormatDate(value, props) {\n  return getFormatDate(value, props, GlobalConfig.i18n(`vxe.input.date.labelFormat.${props.type}`));\n}\n\nfunction getDefaultComponentName(_ref) {\n  let name = _ref.name;\n  return `vxe-${name.replace('$', '')}`;\n}\n\nfunction handleConfirmFilter(params, checked, option) {\n  const $panel = params.$panel;\n  $panel.changeOption({}, checked, option);\n}\n\nfunction getNativeAttrs(_ref2) {\n  let name = _ref2.name,\n      attrs = _ref2.attrs;\n\n  if (name === 'input') {\n    attrs = Object.assign({\n      type: 'text'\n    }, attrs);\n  }\n\n  return attrs;\n}\n\nfunction getInputImmediateModel(renderOpts) {\n  const name = renderOpts.name,\n        immediate = renderOpts.immediate,\n        props = renderOpts.props;\n\n  if (!immediate) {\n    if (name === '$input') {\n      const _ref3 = props || {},\n            type = _ref3.type;\n\n      return !(!type || type === 'text' || type === 'number' || type === 'integer' || type === 'float');\n    }\n\n    if (name === 'input' || name === 'textarea' || name === '$textarea') {\n      return false;\n    }\n\n    return true;\n  }\n\n  return immediate;\n}\n\nfunction isImmediateCell(renderOpts, params) {\n  return params.$type === 'cell' || getInputImmediateModel(renderOpts);\n}\n\nfunction getCellEditProps(renderOpts, params, value, defaultProps) {\n  const vSize = params.$table.vSize;\n  return XEUtils.assign({\n    immediate: getInputImmediateModel(renderOpts)\n  }, vSize ? {\n    size: vSize\n  } : {}, defaultCompProps, defaultProps, renderOpts.props, {\n    [componentDefaultModelProp]: value\n  });\n}\n\nfunction getFilterProps(renderOpts, params, value, defaultProps) {\n  const vSize = params.$table.vSize;\n  return XEUtils.assign(vSize ? {\n    size: vSize\n  } : {}, defaultCompProps, defaultProps, renderOpts.props, {\n    [componentDefaultModelProp]: value\n  });\n}\n\nfunction getItemProps(renderOpts, params, value, defaultProps) {\n  const vSize = params.$form.vSize;\n  return XEUtils.assign(vSize ? {\n    size: vSize\n  } : {}, defaultCompProps, defaultProps, renderOpts.props, {\n    [componentDefaultModelProp]: value\n  });\n}\n\nfunction getCellLabelVNs(h, renderOpts, params, cellLabel) {\n  const placeholder = renderOpts.placeholder;\n  return [h('span', {\n    class: 'vxe-cell--label'\n  }, placeholder && isEmptyValue(cellLabel) ? [h('span', {\n    class: 'vxe-cell--placeholder'\n  }, UtilTools.formatText(UtilTools.getFuncText(placeholder), 1))] : UtilTools.formatText(cellLabel, 1))];\n}\n\nfunction getNativeOns(renderOpts, params) {\n  const nativeEvents = renderOpts.nativeEvents;\n  const nativeOns = {};\n  XEUtils.objectEach(nativeEvents, (func, key) => {\n    nativeOns[key] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      func(params, ...args);\n    };\n  });\n  return nativeOns;\n}\n\nfunction getOns(renderOpts, params, inputFunc, changeFunc) {\n  const name = renderOpts.name,\n        events = renderOpts.events;\n  const modelEvent = 'input';\n  const changeEvent = getChangeEvent(renderOpts);\n  const isSameEvent = changeEvent === modelEvent;\n  const ons = {};\n  XEUtils.objectEach(events, (func, key) => {\n    ons[key] = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      func(params, ...args);\n    };\n  });\n\n  if (inputFunc) {\n    ons[modelEvent] = function (targetEvnt) {\n      // 对输入框进行优化\n      inputFunc(name === '$input' || name === '$textarea' ? targetEvnt.value : targetEvnt);\n\n      if (events && events[modelEvent]) {\n        events[modelEvent](params, targetEvnt);\n      }\n\n      if (isSameEvent && changeFunc) {\n        changeFunc(targetEvnt);\n      }\n    };\n  }\n\n  if (!isSameEvent && changeFunc) {\n    ons[changeEvent] = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      changeFunc(...args);\n\n      if (events && events[changeEvent]) {\n        events[changeEvent](params, ...args);\n      }\n    };\n  }\n\n  return ons;\n}\n\nfunction getEditOns(renderOpts, params) {\n  const $table = params.$table,\n        row = params.row,\n        column = params.column;\n  const name = renderOpts.name;\n  const model = column.model;\n  const isImmediate = isImmediateCell(renderOpts, params);\n  return getOns(renderOpts, params, cellValue => {\n    // 处理 model 值双向绑定\n    if (isImmediate) {\n      UtilTools.setCellValue(row, column, cellValue);\n    } else {\n      model.update = true;\n      model.value = cellValue;\n    }\n  }, eventParams => {\n    // 处理 change 事件相关逻辑\n    if (!isImmediate && (name === '$input' || name === '$textarea')) {\n      $table.updateStatus(params, eventParams.value);\n    } else {\n      $table.updateStatus(params);\n    }\n  });\n}\n\nfunction getFilterOns(renderOpts, params, option) {\n  return getOns(renderOpts, params, value => {\n    // 处理 model 值双向绑定\n    option.data = value;\n  }, () => {\n    handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n  });\n}\n\nfunction getItemOns(renderOpts, params) {\n  const $form = params.$form,\n        data = params.data,\n        property = params.property;\n  return getOns(renderOpts, params, value => {\n    // 处理 model 值双向绑定\n    XEUtils.set(data, property, value);\n  }, () => {\n    // 处理 change 事件相关逻辑\n    $form.updateStatus(params);\n  });\n}\n\nfunction getNativeEditOns(renderOpts, params) {\n  const $table = params.$table,\n        row = params.row,\n        column = params.column;\n  const model = column.model;\n  return getOns(renderOpts, params, evnt => {\n    // 处理 model 值双向绑定\n    const cellValue = evnt.target.value;\n\n    if (isImmediateCell(renderOpts, params)) {\n      UtilTools.setCellValue(row, column, cellValue);\n    } else {\n      model.update = true;\n      model.value = cellValue;\n    }\n  }, evnt => {\n    // 处理 change 事件相关逻辑\n    const cellValue = evnt.target.value;\n    $table.updateStatus(params, cellValue);\n  });\n}\n\nfunction getNativeFilterOns(renderOpts, params, option) {\n  return getOns(renderOpts, params, evnt => {\n    // 处理 model 值双向绑定\n    option.data = evnt.target.value;\n  }, () => {\n    handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n  });\n}\n\nfunction getNativeItemOns(renderOpts, params) {\n  const $form = params.$form,\n        data = params.data,\n        property = params.property;\n  return getOns(renderOpts, params, evnt => {\n    // 处理 model 值双向绑定\n    const itemValue = evnt.target.value;\n    XEUtils.set(data, property, itemValue);\n  }, () => {\n    // 处理 change 事件相关逻辑\n    $form.updateStatus(params);\n  });\n}\n/**\r\n * 单元格可编辑渲染-原生的标签\r\n * input、textarea、select\r\n */\n\n\nfunction nativeEditRender(h, renderOpts, params) {\n  const row = params.row,\n        column = params.column;\n  const name = renderOpts.name;\n  const attrs = getNativeAttrs(renderOpts);\n  const cellValue = isImmediateCell(renderOpts, params) ? UtilTools.getCellValue(row, column) : column.model.value;\n  return [h(name, {\n    class: `vxe-default-${name}`,\n    attrs,\n    domProps: {\n      value: cellValue\n    },\n    on: getNativeEditOns(renderOpts, params)\n  })];\n}\n\nfunction defaultEditRender(h, renderOpts, params) {\n  const row = params.row,\n        column = params.column;\n  const cellValue = UtilTools.getCellValue(row, column);\n  return [h(getDefaultComponentName(renderOpts), {\n    props: getCellEditProps(renderOpts, params, cellValue),\n    on: getEditOns(renderOpts, params),\n    nativeOn: getNativeOns(renderOpts, params)\n  })];\n}\n\nfunction defaultButtonEditRender(h, renderOpts, params) {\n  return [h('vxe-button', {\n    props: getCellEditProps(renderOpts, params),\n    on: getOns(renderOpts, params),\n    nativeOn: getNativeOns(renderOpts, params)\n  })];\n}\n\nfunction defaultButtonsEditRender(h, renderOpts, params) {\n  return renderOpts.children.map(childRenderOpts => defaultButtonEditRender(h, childRenderOpts, params)[0]);\n}\n\nfunction renderNativeOptgroups(h, renderOpts, params, renderOptionsMethods) {\n  const optionGroups = renderOpts.optionGroups,\n        _renderOpts$optionGro = renderOpts.optionGroupProps,\n        optionGroupProps = _renderOpts$optionGro === void 0 ? {} : _renderOpts$optionGro;\n  const groupOptions = optionGroupProps.options || 'options';\n  const groupLabel = optionGroupProps.label || 'label';\n  return optionGroups.map((group, gIndex) => {\n    return h('optgroup', {\n      key: gIndex,\n      domProps: {\n        label: group[groupLabel]\n      }\n    }, renderOptionsMethods(h, group[groupOptions], renderOpts, params));\n  });\n}\n/**\r\n * 渲染原生的 option 标签\r\n */\n\n\nfunction renderNativeOptions(h, options, renderOpts, params) {\n  const _renderOpts$optionPro = renderOpts.optionProps,\n        optionProps = _renderOpts$optionPro === void 0 ? {} : _renderOpts$optionPro;\n  const row = params.row,\n        column = params.column;\n  const labelProp = optionProps.label || 'label';\n  const valueProp = optionProps.value || 'value';\n  const disabledProp = optionProps.disabled || 'disabled';\n  const cellValue = isImmediateCell(renderOpts, params) ? UtilTools.getCellValue(row, column) : column.model.value;\n  return options.map((option, oIndex) => {\n    return h('option', {\n      key: oIndex,\n      attrs: {\n        value: option[valueProp],\n        disabled: option[disabledProp]\n      },\n      domProps: {\n        /* eslint-disable eqeqeq */\n        selected: option[valueProp] == cellValue\n      }\n    }, option[labelProp]);\n  });\n}\n\nfunction nativeFilterRender(h, renderOpts, params) {\n  const column = params.column;\n  const name = renderOpts.name;\n  const attrs = getNativeAttrs(renderOpts);\n  return column.filters.map((option, oIndex) => {\n    return h(name, {\n      key: oIndex,\n      class: `vxe-default-${name}`,\n      attrs,\n      domProps: {\n        value: option.data\n      },\n      on: getNativeFilterOns(renderOpts, params, option)\n    });\n  });\n}\n\nfunction defaultFilterRender(h, renderOpts, params) {\n  const column = params.column;\n  return column.filters.map((option, oIndex) => {\n    const optionValue = option.data;\n    return h(getDefaultComponentName(renderOpts), {\n      key: oIndex,\n      props: getFilterProps(renderOpts, renderOpts, optionValue),\n      on: getFilterOns(renderOpts, params, option)\n    });\n  });\n}\n\nfunction handleFilterMethod(_ref4) {\n  let option = _ref4.option,\n      row = _ref4.row,\n      column = _ref4.column;\n  const data = option.data;\n  const cellValue = XEUtils.get(row, column.property);\n  /* eslint-disable eqeqeq */\n\n  return cellValue == data;\n}\n\nfunction nativeSelectEditRender(h, renderOpts, params) {\n  return [h('select', {\n    class: 'vxe-default-select',\n    attrs: getNativeAttrs(renderOpts),\n    on: getNativeEditOns(renderOpts, params)\n  }, renderOpts.optionGroups ? renderNativeOptgroups(h, renderOpts, params, renderNativeOptions) : renderNativeOptions(h, renderOpts.options, renderOpts, params))];\n}\n\nfunction defaultSelectEditRender(h, renderOpts, params) {\n  const row = params.row,\n        column = params.column;\n  const options = renderOpts.options,\n        optionProps = renderOpts.optionProps,\n        optionGroups = renderOpts.optionGroups,\n        optionGroupProps = renderOpts.optionGroupProps;\n  const cellValue = UtilTools.getCellValue(row, column);\n  return [h(getDefaultComponentName(renderOpts), {\n    props: getCellEditProps(renderOpts, params, cellValue, {\n      options,\n      optionProps,\n      optionGroups,\n      optionGroupProps\n    }),\n    on: getEditOns(renderOpts, params)\n  })];\n}\n\nfunction getSelectCellValue(renderOpts, _ref5) {\n  let row = _ref5.row,\n      column = _ref5.column;\n  const _renderOpts$props = renderOpts.props,\n        props = _renderOpts$props === void 0 ? {} : _renderOpts$props,\n        options = renderOpts.options,\n        optionGroups = renderOpts.optionGroups,\n        _renderOpts$optionPro2 = renderOpts.optionProps,\n        optionProps = _renderOpts$optionPro2 === void 0 ? {} : _renderOpts$optionPro2,\n        _renderOpts$optionGro2 = renderOpts.optionGroupProps,\n        optionGroupProps = _renderOpts$optionGro2 === void 0 ? {} : _renderOpts$optionGro2;\n  const cellValue = XEUtils.get(row, column.property);\n  let selectItem;\n  const labelProp = optionProps.label || 'label';\n  const valueProp = optionProps.value || 'value';\n\n  if (!isEmptyValue(cellValue)) {\n    return XEUtils.map(props.multiple ? cellValue : [cellValue], optionGroups ? value => {\n      const groupOptions = optionGroupProps.options || 'options';\n\n      for (let index = 0; index < optionGroups.length; index++) {\n        /* eslint-disable eqeqeq */\n        selectItem = XEUtils.find(optionGroups[index][groupOptions], item => item[valueProp] == value);\n\n        if (selectItem) {\n          break;\n        }\n      }\n\n      return selectItem ? selectItem[labelProp] : value;\n    } : value => {\n      /* eslint-disable eqeqeq */\n      selectItem = XEUtils.find(options, item => item[valueProp] == value);\n      return selectItem ? selectItem[labelProp] : value;\n    }).join(', ');\n  }\n\n  return null;\n}\n/**\r\n * 渲染表单-项\r\n * 用于渲染原生的标签\r\n */\n\n\nfunction nativeItemRender(h, renderOpts, params) {\n  const data = params.data,\n        property = params.property;\n  const name = renderOpts.name;\n  const attrs = getNativeAttrs(renderOpts);\n  const itemValue = XEUtils.get(data, property);\n  return [h(name, {\n    class: `vxe-default-${name}`,\n    attrs,\n    domProps: attrs && name === 'input' && (attrs.type === 'submit' || attrs.type === 'reset') ? null : {\n      value: itemValue\n    },\n    on: getNativeItemOns(renderOpts, params)\n  })];\n}\n\nfunction defaultItemRender(h, renderOpts, params) {\n  const data = params.data,\n        property = params.property;\n  const itemValue = XEUtils.get(data, property);\n  return [h(getDefaultComponentName(renderOpts), {\n    props: getItemProps(renderOpts, params, itemValue),\n    on: getItemOns(renderOpts, params),\n    nativeOn: getNativeOns(renderOpts, params)\n  })];\n}\n\nfunction defaultButtonItemRender(h, renderOpts, params) {\n  return [h('vxe-button', {\n    props: getItemProps(renderOpts, params),\n    on: getOns(renderOpts, params),\n    nativeOn: getNativeOns(renderOpts, params)\n  })];\n}\n\nfunction defaultButtonsItemRender(h, renderOpts, params) {\n  return renderOpts.children.map(childRenderOpts => defaultButtonItemRender(h, childRenderOpts, params)[0]);\n}\n/**\r\n * 渲染原生的 select 标签\r\n */\n\n\nfunction renderNativeFormOptions(h, options, renderOpts, params) {\n  const data = params.data,\n        property = params.property;\n  const _renderOpts$optionPro3 = renderOpts.optionProps,\n        optionProps = _renderOpts$optionPro3 === void 0 ? {} : _renderOpts$optionPro3;\n  const labelProp = optionProps.label || 'label';\n  const valueProp = optionProps.value || 'value';\n  const disabledProp = optionProps.disabled || 'disabled';\n  const cellValue = XEUtils.get(data, property);\n  return options.map((item, oIndex) => {\n    return h('option', {\n      key: oIndex,\n      attrs: {\n        value: item[valueProp],\n        disabled: item[disabledProp]\n      },\n      domProps: {\n        /* eslint-disable eqeqeq */\n        selected: item[valueProp] == cellValue\n      }\n    }, item[labelProp]);\n  });\n}\n\nfunction handleExportSelectMethod(params) {\n  const row = params.row,\n        column = params.column,\n        options = params.options;\n  return options.original ? UtilTools.getCellValue(row, column) : getSelectCellValue(column.editRender || column.cellRender, params);\n}\n/**\r\n * 渲染表单-项中\r\n * 单选框和复选框\r\n */\n\n\nfunction defaultFormItemRadioAndCheckboxRender(h, renderOpts, params) {\n  const options = renderOpts.options,\n        _renderOpts$optionPro4 = renderOpts.optionProps,\n        optionProps = _renderOpts$optionPro4 === void 0 ? {} : _renderOpts$optionPro4;\n  const data = params.data,\n        property = params.property;\n  const labelProp = optionProps.label || 'label';\n  const valueProp = optionProps.value || 'value';\n  const disabledProp = optionProps.disabled || 'disabled';\n  const itemValue = XEUtils.get(data, property);\n  const name = getDefaultComponentName(renderOpts);\n  return [h(`${name}-group`, {\n    props: getItemProps(renderOpts, params, itemValue),\n    on: getItemOns(renderOpts, params),\n    nativeOn: getNativeOns(renderOpts, params)\n  }, options.map((item, index) => {\n    return h(name, {\n      key: index,\n      props: {\n        label: item[valueProp],\n        content: item[labelProp],\n        disabled: item[disabledProp]\n      }\n    });\n  }))];\n}\n/**\r\n * 内置的组件渲染\r\n */\n\n\nconst renderMap = {\n  input: {\n    autofocus: 'input',\n    renderEdit: nativeEditRender,\n    renderDefault: nativeEditRender,\n    renderFilter: nativeFilterRender,\n    filterMethod: handleFilterMethod,\n    renderItemContent: nativeItemRender\n  },\n  textarea: {\n    autofocus: 'textarea',\n    renderEdit: nativeEditRender,\n    renderItemContent: nativeItemRender\n  },\n  select: {\n    renderEdit: nativeSelectEditRender,\n    renderDefault: nativeSelectEditRender,\n\n    renderCell(h, renderOpts, params) {\n      return getCellLabelVNs(h, renderOpts, params, getSelectCellValue(renderOpts, params));\n    },\n\n    renderFilter(h, renderOpts, params) {\n      const column = params.column;\n      return column.filters.map((option, oIndex) => {\n        return h('select', {\n          key: oIndex,\n          class: 'vxe-default-select',\n          attrs: getNativeAttrs(renderOpts),\n          on: getNativeFilterOns(renderOpts, params, option)\n        }, renderOpts.optionGroups ? renderNativeOptgroups(h, renderOpts, params, renderNativeOptions) : renderNativeOptions(h, renderOpts.options, renderOpts, params));\n      });\n    },\n\n    filterMethod: handleFilterMethod,\n\n    renderItemContent(h, renderOpts, params) {\n      return [h('select', {\n        class: 'vxe-default-select',\n        attrs: getNativeAttrs(renderOpts),\n        on: getNativeItemOns(renderOpts, params)\n      }, renderOpts.optionGroups ? renderNativeOptgroups(h, renderOpts, params, renderNativeFormOptions) : renderNativeFormOptions(h, renderOpts.options, renderOpts, params))];\n    },\n\n    cellExportMethod: handleExportSelectMethod\n  },\n  $input: {\n    autofocus: '.vxe-input--inner',\n    renderEdit: defaultEditRender,\n\n    renderCell(h, renderOpts, params) {\n      const _renderOpts$props2 = renderOpts.props,\n            props = _renderOpts$props2 === void 0 ? {} : _renderOpts$props2;\n      const row = params.row,\n            column = params.column;\n      const digits = props.digits || GlobalConfig.input.digits;\n      let cellValue = XEUtils.get(row, column.property);\n\n      if (cellValue) {\n        switch (props.type) {\n          case 'date':\n          case 'week':\n          case 'month':\n          case 'year':\n            cellValue = getLabelFormatDate(cellValue, props);\n            break;\n\n          case 'float':\n            cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits);\n            break;\n        }\n      }\n\n      return getCellLabelVNs(h, renderOpts, params, cellValue);\n    },\n\n    renderDefault: defaultEditRender,\n    renderFilter: defaultFilterRender,\n    filterMethod: handleFilterMethod,\n    renderItemContent: defaultItemRender\n  },\n  $textarea: {\n    autofocus: '.vxe-textarea--inner',\n    renderItemContent: defaultItemRender\n  },\n  $button: {\n    renderDefault: defaultButtonEditRender,\n    renderItemContent: defaultButtonItemRender\n  },\n  $buttons: {\n    renderDefault: defaultButtonsEditRender,\n    renderItemContent: defaultButtonsItemRender\n  },\n  $select: {\n    autofocus: '.vxe-input--inner',\n    renderEdit: defaultSelectEditRender,\n    renderDefault: defaultSelectEditRender,\n\n    renderCell(h, renderOpts, params) {\n      return getCellLabelVNs(h, renderOpts, params, getSelectCellValue(renderOpts, params));\n    },\n\n    renderFilter(h, renderOpts, params) {\n      const column = params.column;\n      const options = renderOpts.options,\n            optionProps = renderOpts.optionProps,\n            optionGroups = renderOpts.optionGroups,\n            optionGroupProps = renderOpts.optionGroupProps;\n      const nativeOn = getNativeOns(renderOpts, params);\n      return column.filters.map((option, oIndex) => {\n        const optionValue = option.data;\n        return h(getDefaultComponentName(renderOpts), {\n          key: oIndex,\n          props: getFilterProps(renderOpts, params, optionValue, {\n            options,\n            optionProps,\n            optionGroups,\n            optionGroupProps\n          }),\n          on: getFilterOns(renderOpts, params, option),\n          nativeOn\n        });\n      });\n    },\n\n    filterMethod: handleFilterMethod,\n\n    renderItemContent(h, renderOpts, params) {\n      const data = params.data,\n            property = params.property;\n      const options = renderOpts.options,\n            optionProps = renderOpts.optionProps,\n            optionGroups = renderOpts.optionGroups,\n            optionGroupProps = renderOpts.optionGroupProps;\n      const itemValue = XEUtils.get(data, property);\n      return [h(getDefaultComponentName(renderOpts), {\n        props: getItemProps(renderOpts, params, itemValue, {\n          options,\n          optionProps,\n          optionGroups,\n          optionGroupProps\n        }),\n        on: getItemOns(renderOpts, params),\n        nativeOn: getNativeOns(renderOpts, params)\n      })];\n    },\n\n    cellExportMethod: handleExportSelectMethod\n  },\n  $radio: {\n    autofocus: '.vxe-radio--input',\n    renderItemContent: defaultFormItemRadioAndCheckboxRender\n  },\n  $checkbox: {\n    autofocus: '.vxe-checkbox--input',\n    renderItemContent: defaultFormItemRadioAndCheckboxRender\n  },\n  $switch: {\n    autofocus: '.vxe-switch--button',\n    renderEdit: defaultEditRender,\n    renderDefault: defaultEditRender,\n    renderItemContent: defaultItemRender\n    /**\r\n     * 全局渲染器\r\n     */\n\n  }\n};\nexport const renderer = {\n  mixin(map) {\n    XEUtils.each(map, (options, name) => renderer.add(name, options));\n    return renderer;\n  },\n\n  get(name) {\n    return renderMap[name] || null;\n  },\n\n  add(name, options) {\n    if (name && options) {\n      const renders = renderMap[name];\n\n      if (renders) {\n        // 检测是否覆盖\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          XEUtils.each(options, (val, key) => {\n            if (!XEUtils.eqNull(renders[key]) && renders[key] !== val) {\n              UtilTools.warn('vxe.error.coverProp', [`Renderer.${name}`, key]);\n            }\n          });\n        }\n\n        Object.assign(renders, options);\n      } else {\n        renderMap[name] = options;\n      }\n    }\n\n    return renderer;\n  },\n\n  delete(name) {\n    delete renderMap[name];\n    return renderer;\n  }\n\n};",null]}