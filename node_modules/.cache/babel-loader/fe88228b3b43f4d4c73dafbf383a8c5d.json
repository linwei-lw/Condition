{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Tree\\SearchBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Tree\\SearchBox.vue","mtime":1662449411103},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { domLeftTop } from '@/components/util/Dom.js';\nimport { treeSearch } from '@/common/util/Trees.js';\nexport default {\n  props: {\n    placeholder: String,\n    hasOwnField: String,\n    // 如果指定该属性，查询对象必须有该属性，否则不查询该对象\n    searchFun: Function,\n    // 查询回调函数 参数(node, searchText) 返回true(符合条件)|false(不符合条件)\n    onItemSelected: Function,\n    // 选择某个查询的结果 参数(node)\n    border: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示边框\n    borderColor: {\n      type: String,\n      default: $_theme.border_color_light\n    },\n    // 边框颜色\n    radius: {\n      type: String,\n      default: $_theme.input_radius\n    },\n    // 边框圆角\n    treeBorder: {\n      type: Boolean,\n      default: false\n    },\n    // 树是否显示边框\n    showSearchIcon: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示搜索图标\n    height: {\n      type: Number,\n      default: $_theme.inputHeight\n    },\n    // 高度数值，单位是px\n    searchMax: {\n      type: Number,\n      default: 200\n    } // 搜索栏显示的最多数量\n\n  },\n  _timeout: null,\n  _tree: null,\n  _options: null,\n  _selectedInfo: null,\n\n  // {dom:xxx, index:yyy}\n  data() {\n    return {\n      value: null,\n      showDropDown: false,\n      tip: null,\n      mytitle: null\n    };\n  },\n\n  watch: {\n    showDropDown: function showDropDown(v) {\n      this.hideDropDown = this.hideDropDown || (e => this.showDropDown = false);\n\n      v ? setTimeout(() => document.addEventListener('click', this.hideDropDown), 10) : document.removeEventListener('click', this.hideDropDown);\n    },\n    tip: function tip(v) {\n      this.hideTip = this.hideTip || (e => this.tip = null);\n\n      v ? setTimeout(() => document.addEventListener('click', this.hideTip), 10) : document.removeEventListener('click', this.hideTip);\n    }\n  },\n  methods: {\n    setTree(tree) {\n      this._tree = tree;\n      if (!tree) return;\n      this._check = tree.setting.check && tree.setting.check.enable;\n      if (this._check) this.mytitle = $_L.get('用空格、逗号或分号隔开可精确查询多个') + '\\n' + $_L.get('按回车键勾选上所有查询结果');\n    },\n\n    showOrHideClearBtn(show) {\n      this.$refs.clearBtn.style.display = show && this.value ? '' : 'none';\n    },\n\n    handleClick() {\n      if (!this.value) {\n        return this.$emit('blankclick', this);\n      }\n\n      if (this._options && this._options.length > 0 && !this.showDropDown) {\n        this.styleDropDown();\n        this.showDropDown = true;\n      }\n    },\n\n    handleInput(event) {\n      this.value = event.target.value;\n      this.$emit('input', event.target.value);\n\n      if (!this.value) {\n        this.clear();\n        this.$emit('blankinput', this);\n        return;\n      }\n\n      this.showOrHideClearBtn(true);\n      this._timeout && clearTimeout(this._timeout);\n      this._timeout = setTimeout(this.onSearch, 500);\n    },\n\n    openOptions(options) {\n      this._options = options;\n      this.openDropDown();\n    },\n\n    onSearch() {\n      this._timeout = null;\n      if (!this._tree) return;\n\n      let _this$getSearchText = this.getSearchText(this.value),\n          _this$getSearchText2 = _slicedToArray(_this$getSearchText, 2),\n          text = _this$getSearchText2[0],\n          array = _this$getSearchText2[1];\n\n      this._options = treeSearch(this._tree, text, array, this.hasOwnField, this.searchFun, array ? array.length : this.searchMax);\n      this._selectedInfo = null;\n\n      if (this._options.length == 0) {\n        return this.showTip($_L.get('无结果'), '#f00');\n      }\n\n      this.tip = null;\n      this.openDropDown();\n    },\n\n    getSearchText(text) {\n      text = (text || '').trim();\n      if (!text) return [null, null];\n      if (!this._check) return [text, null];\n      let array = text.split(/[ |,|;|；|，|　]/);\n      if (array.length == 1) return [text.toLowerCase(), null];\n      return [null, new Set(array)];\n    },\n\n    showTip(tip, color) {\n      this.showDropDown = false;\n      this.tip = tip;\n      this.$nextTick(() => {\n        let treeDom = this._tree.setting.treeObj.get(0).parentNode;\n\n        let treeHide = treeDom.offsetWidth == 0;\n\n        let _ref = treeHide ? domLeftTop(this.$el.parentNode) : domLeftTop(treeDom),\n            left = _ref.left,\n            top = _ref.top;\n\n        treeHide && (top = this.$el.offsetHeight + top);\n        !treeHide && left--;\n        let style = this.$refs.tip.style;\n        style.color = color;\n        style['z-index'] = $_theme.zindex();\n        style.top = top + 'px';\n        style.left = left + 'px';\n        style.width = (treeHide ? this.$el.parentNode.offsetWidth : treeDom.offsetWidth + 2) + 'px';\n      });\n    },\n\n    handleKeypress(event) {\n      if ((event.keyCode || event.which) == 13) {\n        let setting = this._tree.setting;\n\n        if (setting.check && setting.check.enable && setting.check.hasChecked && this._options && this._options.length) {\n          //hasChecked:是否需要勾选上\n          setting = setting.treeId;\n          let n;\n\n          this._options.forEach(node => (!node[setting] || node[setting].value != 1) && this._tree.checkNode(n = node, true, true, true));\n\n          n && this._tree.selectNode(n, false);\n          this.showDropDown = false;\n        }\n      }\n    },\n\n    openDropDown() {\n      // 显示或隐藏选项列表\n      this.showDropDown = true;\n      this.styleDropDown();\n      let dom = this.$refs.dropdown;\n      dom.innerHTML = '';\n      let span = [];\n\n      for (let i = 0, len = this._options.length, node, icon_url, icon_css, li, name; i < len; i++) {\n        node = this._options[i];\n        span.push(\"<span style='width:30px;height:30px;background-position:center;\");\n        icon_url = this.iconUrl(node);\n        icon_url && span.push(icon_url);\n        span.push(\"' class='button\");\n        icon_css = this.iconCss(node);\n        icon_css && span.push(\" \", icon_css);\n        span.push(\"'></span>\");\n        span.push(name = this.nameFunction(node) || '');\n        li = document.createElement(\"li\");\n        li.className = this.$style.option_item;\n        li.style['background-color'] = this.theme.alternate_colors[i % 2];\n        li.innerHTML = span.join('');\n\n        li.onclick = event => this.onItemClick(event, i, name);\n\n        span.length = 0;\n        dom.appendChild(li);\n      }\n    },\n\n    styleDropDown() {\n      let treeDom = this._tree.setting.treeObj.get(0).parentNode;\n\n      let treeHide = treeDom.offsetWidth == 0;\n\n      let _ref2 = treeHide ? domLeftTop(this.$el.parentNode) : domLeftTop(treeDom),\n          left = _ref2.left,\n          top = _ref2.top;\n\n      treeHide && (top = this.$el.offsetHeight + top);\n      !treeHide && left--;\n      let style = this.$refs.dropdown.style;\n      style.color = '';\n      style['z-index'] = $_theme.zindex();\n      style.top = top + 'px';\n      style.left = left + 'px';\n      style.height = Math.min(treeHide ? document.documentElement.clientHeight - top - 21 : treeDom.offsetHeight - 1, this._options.length * 30) + 'px';\n      style.width = (treeHide ? this.$el.parentNode.offsetWidth - 2 : treeDom.offsetWidth) + 'px';\n    },\n\n    iconUrl(node) {\n      if (!this._tree.setting.view.iconUrlFunction) return null;\n\n      let iconUrl = this._tree.setting.view.iconUrlFunction(node);\n\n      return iconUrl ? \"background-size:16px 16px;background-image:url(\" + iconUrl + \");\" : null;\n    },\n\n    iconCss(node) {\n      if (this._tree.setting.view.iconCssFunction) {\n        return this._tree.setting.view.iconCssFunction(node) || null;\n      }\n\n      return node[this._tree.setting.treeId].isParent ? 'ico_close' : 'ico_docu';\n    },\n\n    nameFunction(node) {\n      return this._tree.setting.view.nameFunction ? this._tree.setting.view.nameFunction(node) : node[this._tree.setting.data.key.name];\n    },\n\n    onItemClick(event, index, name) {\n      this.value = name.split(' ')[0];\n\n      if (this._selectedInfo) {\n        this._selectedInfo.dom.style.cssText = 'background-color:' + this.theme.alternate_colors[this._selectedInfo.index % 2];\n      }\n\n      this._selectedInfo = {\n        dom: event.target,\n        index: index\n      };\n      this._selectedInfo.dom.style.cssText = 'background-color:' + this.theme.selected_color + '!important';\n      let node = this._options[index];\n\n      this._tree.selectNode(node, false);\n\n      let setting = this._tree.setting,\n          tools = setting.treeObj.zTree._z.tools;\n\n      if (!setting.callback.beforeClick || tools.apply(setting.callback.beforeClick, [node], true) !== false) {\n        setting.treeObj.trigger(setting.treeObj.zTree.consts.event.CLICK, [null, node]);\n      }\n\n      if (setting.check && setting.check.enable && setting.check.hasChecked) {\n        //hasChecked:是否需要勾选上\n        this._tree.checkNode(node, true, true, true);\n      }\n\n      this.onItemSelected && this.onItemSelected(node);\n    },\n\n    clear() {\n      this._timeout && clearTimeout(this._timeout);\n      this._timeout = null;\n      this.showDropDown = false;\n      this.$refs.dropdown.innerHTML = '';\n      this.value = this.tip = null;\n      this._options = null;\n      this._selectedInfo = null;\n      this.showOrHideClearBtn(false);\n    }\n\n  }\n};",null]}