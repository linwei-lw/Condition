{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\table\\src\\body.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\table\\src\\body.js","mtime":1635230121669},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.string.fixed\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport VXETable from \"../../v-x-e-table\";\nimport { UtilTools, DomTools, isEnableConf } from \"../../tools\";\nimport { getOffsetSize, calcTreeLine, mergeBodyMethod } from \"./util\";\nimport { browse } from \"../../tools/src/dom\";\nvar renderType = 'body'; // 滚动、拖动过程中不需要触发\n\nfunction isOperateMouse($xetable) {\n  return $xetable._isResize || $xetable.lastScrollTime && Date.now() < $xetable.lastScrollTime + $xetable.delayHover;\n}\n\nfunction renderLine(h, _vm, $xetable, rowLevel, items, params) {\n  var column = params.column;\n  var treeOpts = $xetable.treeOpts,\n      treeConfig = $xetable.treeConfig;\n  var slots = column.slots,\n      treeNode = column.treeNode;\n\n  if (slots && slots.line) {\n    return $xetable.callSlot(slots.line, params, h);\n  }\n\n  if (treeConfig && treeNode && treeOpts.line) {\n    return [h('div', {\n      class: 'vxe-tree--line-wrapper'\n    }, [h('div', {\n      class: 'vxe-tree--line',\n      style: {\n        height: \"\".concat(calcTreeLine(params, items), \"px\"),\n        left: \"\".concat(rowLevel * treeOpts.indent + (rowLevel ? 2 - getOffsetSize($xetable) : 0) + 16, \"px\")\n      }\n    })])];\n  }\n\n  return [];\n}\n/**\r\n * 渲染列\r\n */\n\n\nfunction renderColumn(h, _vm, $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, columns, items) {\n  var _ref2;\n\n  var tableListeners = $xetable.$listeners,\n      afterFullData = $xetable.afterFullData,\n      tableData = $xetable.tableData,\n      height = $xetable.height,\n      columnKey = $xetable.columnKey,\n      overflowX = $xetable.overflowX,\n      scrollXLoad = $xetable.scrollXLoad,\n      scrollYLoad = $xetable.scrollYLoad,\n      highlightCurrentRow = $xetable.highlightCurrentRow,\n      allColumnOverflow = $xetable.showOverflow,\n      isAllOverflow = $xetable.isAllOverflow,\n      allAlign = $xetable.align,\n      currentColumn = $xetable.currentColumn,\n      cellClassName = $xetable.cellClassName,\n      cellStyle = $xetable.cellStyle,\n      mergeList = $xetable.mergeList,\n      spanMethod = $xetable.spanMethod,\n      radioOpts = $xetable.radioOpts,\n      checkboxOpts = $xetable.checkboxOpts,\n      expandOpts = $xetable.expandOpts,\n      treeOpts = $xetable.treeOpts,\n      tooltipOpts = $xetable.tooltipOpts,\n      mouseConfig = $xetable.mouseConfig,\n      editConfig = $xetable.editConfig,\n      editOpts = $xetable.editOpts,\n      editRules = $xetable.editRules,\n      validOpts = $xetable.validOpts,\n      editStore = $xetable.editStore,\n      validStore = $xetable.validStore,\n      tooltipConfig = $xetable.tooltipConfig;\n  var type = column.type,\n      cellRender = column.cellRender,\n      editRender = column.editRender,\n      align = column.align,\n      showOverflow = column.showOverflow,\n      className = column.className,\n      treeNode = column.treeNode;\n  var actived = editStore.actived;\n  var showAllTip = tooltipOpts.showAll || tooltipOpts.enabled;\n  var columnIndex = $xetable.getColumnIndex(column);\n\n  var _columnIndex = $xetable.getVTColumnIndex(column);\n\n  var isEdit = isEnableConf(editRender);\n  var fixedHiddenColumn = fixedType ? column.fixed !== fixedType : column.fixed && overflowX;\n  var cellOverflow = XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow) ? allColumnOverflow : showOverflow;\n  var showEllipsis = cellOverflow === 'ellipsis';\n  var showTitle = cellOverflow === 'title';\n  var showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n  var hasEllipsis = showTitle || showTooltip || showEllipsis;\n  var isDirty;\n  var tdOns = {};\n  var cellAlign = align || allAlign;\n  var hasValidError = validStore.row === row && validStore.column === column;\n  var showValidTip = editRules && validOpts.showMessage && (validOpts.message === 'default' ? height || tableData.length > 1 : validOpts.message === 'inline');\n  var attrs = {\n    colid: column.id\n  };\n  var bindMouseenter = tableListeners['cell-mouseenter'];\n  var bindMouseleave = tableListeners['cell-mouseleave'];\n  var triggerDblclick = editRender && editConfig && editOpts.trigger === 'dblclick';\n  var params = {\n    $table: $xetable,\n    $seq: $seq,\n    seq: seq,\n    rowid: rowid,\n    row: row,\n    rowIndex: rowIndex,\n    $rowIndex: $rowIndex,\n    _rowIndex: _rowIndex,\n    column: column,\n    columnIndex: columnIndex,\n    $columnIndex: $columnIndex,\n    _columnIndex: _columnIndex,\n    fixed: fixedType,\n    type: renderType,\n    isHidden: fixedHiddenColumn,\n    level: rowLevel,\n    visibleData: afterFullData,\n    data: tableData,\n    items: items // 虚拟滚动不支持动态高度\n\n  };\n\n  if ((scrollXLoad || scrollYLoad) && !hasEllipsis) {\n    showEllipsis = hasEllipsis = true;\n  } // hover 进入事件\n\n\n  if (showTitle || showTooltip || showAllTip || bindMouseenter || tooltipConfig) {\n    tdOns.mouseenter = function (evnt) {\n      if (isOperateMouse($xetable)) {\n        return;\n      }\n\n      if (showTitle) {\n        DomTools.updateCellTitle(evnt.currentTarget, column);\n      } else if (showTooltip || showAllTip) {\n        // 如果配置了显示 tooltip\n        $xetable.triggerBodyTooltipEvent(evnt, params);\n      }\n\n      if (bindMouseenter) {\n        $xetable.emitEvent('cell-mouseenter', Object.assign({\n          cell: evnt.currentTarget\n        }, params), evnt);\n      }\n    };\n  } // hover 退出事件\n\n\n  if (showTooltip || showAllTip || bindMouseleave || tooltipConfig) {\n    tdOns.mouseleave = function (evnt) {\n      if (isOperateMouse($xetable)) {\n        return;\n      }\n\n      if (showTooltip || showAllTip) {\n        $xetable.handleTargetLeaveEvent(evnt);\n      }\n\n      if (bindMouseleave) {\n        $xetable.emitEvent('cell-mouseleave', Object.assign({\n          cell: evnt.currentTarget\n        }, params), evnt);\n      }\n    };\n  } // 按下事件处理\n\n\n  if (checkboxOpts.range || mouseConfig) {\n    tdOns.mousedown = function (evnt) {\n      $xetable.triggerCellMousedownEvent(evnt, params);\n    };\n  } // 点击事件处理\n\n\n  if (highlightCurrentRow || tableListeners['cell-click'] || editRender && editConfig || expandOpts.trigger === 'row' || expandOpts.trigger === 'cell' || radioOpts.trigger === 'row' || column.type === 'radio' && radioOpts.trigger === 'cell' || checkboxOpts.trigger === 'row' || column.type === 'checkbox' && checkboxOpts.trigger === 'cell' || treeOpts.trigger === 'row' || column.treeNode && treeOpts.trigger === 'cell') {\n    tdOns.click = function (evnt) {\n      $xetable.triggerCellClickEvent(evnt, params);\n    };\n  } // 双击事件处理\n\n\n  if (triggerDblclick || tableListeners['cell-dblclick']) {\n    tdOns.dblclick = function (evnt) {\n      $xetable.triggerCellDblclickEvent(evnt, params);\n    };\n  } // 合并行或列\n\n\n  if (mergeList.length) {\n    var spanRest = mergeBodyMethod(mergeList, _rowIndex, _columnIndex);\n\n    if (spanRest) {\n      var rowspan = spanRest.rowspan,\n          colspan = spanRest.colspan;\n\n      if (!rowspan || !colspan) {\n        return null;\n      }\n\n      if (rowspan > 1) {\n        attrs.rowspan = rowspan;\n      }\n\n      if (colspan > 1) {\n        attrs.colspan = colspan;\n      }\n    }\n  } else if (spanMethod) {\n    // 自定义合并行或列的方法\n    var _ref = spanMethod(params) || {},\n        _ref$rowspan = _ref.rowspan,\n        _rowspan = _ref$rowspan === void 0 ? 1 : _ref$rowspan,\n        _ref$colspan = _ref.colspan,\n        _colspan = _ref$colspan === void 0 ? 1 : _ref$colspan;\n\n    if (!_rowspan || !_colspan) {\n      return null;\n    }\n\n    if (_rowspan > 1) {\n      attrs.rowspan = _rowspan;\n    }\n\n    if (_colspan > 1) {\n      attrs.colspan = _colspan;\n    }\n  } // 如果被合并不可隐藏\n\n\n  if (fixedHiddenColumn && mergeList) {\n    if (attrs.colspan > 1 || attrs.rowspan > 1) {\n      fixedHiddenColumn = false;\n    }\n  } // 如果编辑列开启显示状态\n\n\n  if (!fixedHiddenColumn && editConfig && (editRender || cellRender) && (editOpts.showStatus || editOpts.showUpdateStatus)) {\n    isDirty = $xetable.isUpdateByRow(row, column.property);\n  }\n\n  var tdVNs = [];\n\n  if (fixedHiddenColumn && (allColumnOverflow ? isAllOverflow : allColumnOverflow)) {\n    tdVNs.push(h('div', {\n      class: ['vxe-cell', {\n        'c--title': showTitle,\n        'c--tooltip': showTooltip,\n        'c--ellipsis': showEllipsis\n      }]\n    }));\n  } else {\n    // 渲染单元格\n    tdVNs.push.apply(tdVNs, _toConsumableArray(renderLine(h, _vm, $xetable, rowLevel, items, params)).concat([h('div', {\n      class: ['vxe-cell', {\n        'c--title': showTitle,\n        'c--tooltip': showTooltip,\n        'c--ellipsis': showEllipsis\n      }],\n      attrs: {\n        title: showTitle ? $xetable.getCellLabel(row, column) : null\n      }\n    }, column.renderCell(h, params))]));\n\n    if (showValidTip && hasValidError) {\n      tdVNs.push(h('div', {\n        class: 'vxe-cell--valid',\n        style: validStore.rule && validStore.rule.maxWidth ? {\n          width: \"\".concat(validStore.rule.maxWidth, \"px\")\n        } : null\n      }, [h('span', {\n        class: 'vxe-cell--valid-msg'\n      }, validStore.content)]));\n    }\n  }\n\n  return h('td', {\n    class: ['vxe-body--column', column.id, (_ref2 = {}, _defineProperty(_ref2, \"col--\".concat(cellAlign), cellAlign), _defineProperty(_ref2, \"col--\".concat(type), type), _defineProperty(_ref2, 'col--last', $columnIndex === columns.length - 1), _defineProperty(_ref2, 'col--tree-node', treeNode), _defineProperty(_ref2, 'col--edit', isEdit), _defineProperty(_ref2, 'col--ellipsis', hasEllipsis), _defineProperty(_ref2, 'fixed--hidden', fixedHiddenColumn), _defineProperty(_ref2, 'col--dirty', isDirty), _defineProperty(_ref2, 'col--actived', editConfig && isEdit && actived.row === row && (actived.column === column || editOpts.mode === 'row')), _defineProperty(_ref2, 'col--valid-error', hasValidError), _defineProperty(_ref2, 'col--current', currentColumn === column), _ref2), UtilTools.getClass(className, params), UtilTools.getClass(cellClassName, params)],\n    key: columnKey ? column.id : $columnIndex,\n    attrs: attrs,\n    style: cellStyle ? XEUtils.isFunction(cellStyle) ? cellStyle(params) : cellStyle : null,\n    on: tdOns\n  }, tdVNs);\n}\n\nfunction renderRows(h, _vm, $xetable, $seq, rowLevel, fixedType, tableData, tableColumn) {\n  var stripe = $xetable.stripe,\n      rowKey = $xetable.rowKey,\n      highlightHoverRow = $xetable.highlightHoverRow,\n      rowClassName = $xetable.rowClassName,\n      rowStyle = $xetable.rowStyle,\n      editConfig = $xetable.editConfig,\n      allColumnOverflow = $xetable.showOverflow,\n      treeConfig = $xetable.treeConfig,\n      treeOpts = $xetable.treeOpts,\n      editOpts = $xetable.editOpts,\n      treeExpandeds = $xetable.treeExpandeds,\n      scrollYLoad = $xetable.scrollYLoad,\n      scrollYStore = $xetable.scrollYStore,\n      editStore = $xetable.editStore,\n      rowExpandeds = $xetable.rowExpandeds,\n      radioOpts = $xetable.radioOpts,\n      checkboxOpts = $xetable.checkboxOpts,\n      expandColumn = $xetable.expandColumn,\n      hasFixedColumn = $xetable.hasFixedColumn;\n  var rows = [];\n  tableData.forEach(function (row, $rowIndex) {\n    var trOn = {};\n    var rowIndex = $rowIndex;\n    var seq = rowIndex + 1;\n\n    if (scrollYLoad) {\n      seq += scrollYStore.startIndex;\n    }\n\n    var _rowIndex = $xetable.getVTRowIndex(row); // 确保任何情况下 rowIndex 都精准指向真实 data 索引\n\n\n    rowIndex = $xetable.getRowIndex(row); // 事件绑定\n\n    if (highlightHoverRow) {\n      trOn.mouseenter = function (evnt) {\n        if (isOperateMouse($xetable)) {\n          return;\n        }\n\n        $xetable.triggerHoverEvent(evnt, {\n          row: row,\n          rowIndex: rowIndex\n        });\n      };\n\n      trOn.mouseleave = function () {\n        if (isOperateMouse($xetable)) {\n          return;\n        }\n\n        $xetable.clearHoverRow();\n      };\n    }\n\n    var rowid = UtilTools.getRowid($xetable, row);\n    var params = {\n      $table: $xetable,\n      $seq: $seq,\n      seq: seq,\n      rowid: rowid,\n      fixed: fixedType,\n      type: renderType,\n      level: rowLevel,\n      row: row,\n      rowIndex: rowIndex,\n      $rowIndex: $rowIndex\n    };\n    var isNewRow = false;\n\n    if (editConfig) {\n      isNewRow = editStore.insertList.indexOf(row) > -1;\n    }\n\n    rows.push(h('tr', {\n      class: ['vxe-body--row', {\n        'row--stripe': stripe && ($xetable.getVTRowIndex(row) + 1) % 2 === 0,\n        'is--new': isNewRow,\n        'row--new': isNewRow && (editOpts.showStatus || editOpts.showInsertStatus),\n        'row--radio': radioOpts.highlight && $xetable.selectRow === row,\n        'row--checked': checkboxOpts.highlight && $xetable.isCheckedByCheckboxRow(row)\n      }, rowClassName ? XEUtils.isFunction(rowClassName) ? rowClassName(params) : rowClassName : ''],\n      attrs: {\n        rowid: rowid\n      },\n      style: rowStyle ? XEUtils.isFunction(rowStyle) ? rowStyle(params) : rowStyle : null,\n      key: rowKey || treeConfig ? rowid : $rowIndex,\n      on: trOn\n    }, tableColumn.map(function (column, $columnIndex) {\n      return renderColumn(h, _vm, $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, tableColumn, tableData);\n    }))); // 如果行被展开了\n\n    if (expandColumn && rowExpandeds.length && rowExpandeds.indexOf(row) > -1) {\n      var cellStyle;\n\n      if (treeConfig) {\n        cellStyle = {\n          paddingLeft: \"\".concat(rowLevel * treeOpts.indent + 30, \"px\")\n        };\n      }\n\n      var showOverflow = expandColumn.showOverflow;\n      var hasEllipsis = XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow) ? allColumnOverflow : showOverflow;\n      var expandParams = {\n        $table: $xetable,\n        $seq: $seq,\n        seq: seq,\n        column: expandColumn,\n        fixed: fixedType,\n        type: renderType,\n        level: rowLevel,\n        row: row,\n        rowIndex: rowIndex,\n        $rowIndex: $rowIndex\n      };\n      rows.push(h('tr', {\n        class: 'vxe-body--expanded-row',\n        key: \"expand_\".concat(rowid),\n        style: rowStyle ? XEUtils.isFunction(rowStyle) ? rowStyle(expandParams) : rowStyle : null,\n        on: trOn\n      }, [h('td', {\n        class: ['vxe-body--expanded-column', {\n          'fixed--hidden': fixedType && !hasFixedColumn,\n          'col--ellipsis': hasEllipsis\n        }],\n        attrs: {\n          colspan: tableColumn.length\n        }\n      }, [h('div', {\n        class: 'vxe-body--expanded-cell',\n        style: cellStyle\n      }, [expandColumn.renderData(h, expandParams)])])]));\n    } // 如果是树形表格\n\n\n    if (treeConfig && treeExpandeds.length) {\n      var rowChildren = row[treeOpts.children];\n\n      if (rowChildren && rowChildren.length && treeExpandeds.indexOf(row) > -1) {\n        rows.push.apply(rows, _toConsumableArray(renderRows(h, _vm, $xetable, $seq ? \"\".concat($seq, \".\").concat(seq) : \"\".concat(seq), rowLevel + 1, fixedType, rowChildren, tableColumn)));\n      }\n    }\n  });\n  return rows;\n}\n/**\r\n * 同步滚动条\r\n */\n\n\nvar scrollProcessTimeout;\n\nfunction syncBodyScroll(scrollTop, elem1, elem2) {\n  if (elem1 || elem2) {\n    if (elem1) {\n      elem1.onscroll = null;\n      elem1.scrollTop = scrollTop;\n    }\n\n    if (elem2) {\n      elem2.onscroll = null;\n      elem2.scrollTop = scrollTop;\n    }\n\n    clearTimeout(scrollProcessTimeout);\n    scrollProcessTimeout = setTimeout(function () {\n      if (elem1) {\n        elem1.onscroll = elem1._onscroll;\n      }\n\n      if (elem2) {\n        elem2.onscroll = elem2._onscroll;\n      }\n    }, 300);\n  }\n}\n\nexport default {\n  name: 'VxeTableBody',\n  props: {\n    tableData: Array,\n    tableColumn: Array,\n    fixedColumn: Array,\n    size: String,\n    fixedType: String\n  },\n  data: function data() {\n    return {\n      wheelTime: null,\n      wheelYSize: 0,\n      wheelYInterval: 0,\n      wheelYTotal: 0\n    };\n  },\n  mounted: function mounted() {\n    var $xetable = this.$parent,\n        $el = this.$el,\n        $refs = this.$refs,\n        fixedType = this.fixedType;\n    var elemStore = $xetable.elemStore;\n    var prefix = \"\".concat(fixedType || 'main', \"-body-\");\n    elemStore[\"\".concat(prefix, \"wrapper\")] = $el;\n    elemStore[\"\".concat(prefix, \"table\")] = $refs.table;\n    elemStore[\"\".concat(prefix, \"colgroup\")] = $refs.colgroup;\n    elemStore[\"\".concat(prefix, \"list\")] = $refs.tbody;\n    elemStore[\"\".concat(prefix, \"xSpace\")] = $refs.xSpace;\n    elemStore[\"\".concat(prefix, \"ySpace\")] = $refs.ySpace;\n    elemStore[\"\".concat(prefix, \"emptyBlock\")] = $refs.emptyBlock;\n    this.$el.onscroll = this.scrollEvent;\n    this.$el._onscroll = this.scrollEvent;\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearTimeout(this.wheelTime);\n    this.$el._onscroll = null;\n    this.$el.onscroll = null;\n  },\n  render: function render(h) {\n    var _e = this._e,\n        $xetable = this.$parent,\n        fixedColumn = this.fixedColumn,\n        fixedType = this.fixedType;\n    var $scopedSlots = $xetable.$scopedSlots,\n        tId = $xetable.tId,\n        tableData = $xetable.tableData,\n        tableColumn = $xetable.tableColumn,\n        allColumnOverflow = $xetable.showOverflow,\n        keyboardConfig = $xetable.keyboardConfig,\n        keyboardOpts = $xetable.keyboardOpts,\n        mergeList = $xetable.mergeList,\n        spanMethod = $xetable.spanMethod,\n        scrollXLoad = $xetable.scrollXLoad,\n        scrollYLoad = $xetable.scrollYLoad,\n        isAllOverflow = $xetable.isAllOverflow,\n        emptyOpts = $xetable.emptyOpts,\n        mouseConfig = $xetable.mouseConfig,\n        mouseOpts = $xetable.mouseOpts,\n        sYOpts = $xetable.sYOpts; // 如果是使用优化模式\n\n    if (fixedType) {\n      if (!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts.isMerge) && (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow))) {\n        tableColumn = fixedColumn;\n      }\n    }\n\n    var emptyContent;\n\n    if ($scopedSlots.empty) {\n      emptyContent = $scopedSlots.empty.call(this, {\n        $table: $xetable\n      }, h);\n    } else {\n      var compConf = emptyOpts.name ? VXETable.renderer.get(emptyOpts.name) : null;\n      var renderEmpty = compConf ? compConf.renderEmpty : null;\n\n      if (renderEmpty) {\n        emptyContent = renderEmpty.call(this, h, emptyOpts, {\n          $table: $xetable\n        });\n      } else {\n        emptyContent = $xetable.emptyText || GlobalConfig.i18n('vxe.table.emptyText');\n      }\n    }\n\n    return h('div', {\n      class: ['vxe-table--body-wrapper', fixedType ? \"fixed-\".concat(fixedType, \"--wrapper\") : 'body--wrapper'],\n      attrs: {\n        xid: tId\n      },\n      on: scrollYLoad && sYOpts.mode === 'wheel' ? {\n        wheel: this.wheelEvent\n      } : {}\n    }, [fixedType ? _e() : h('div', {\n      class: 'vxe-body--x-space',\n      ref: 'xSpace'\n    }), h('div', {\n      class: 'vxe-body--y-space',\n      ref: 'ySpace'\n    }), h('table', {\n      class: 'vxe-table--body',\n      attrs: {\n        xid: tId,\n        cellspacing: 0,\n        cellpadding: 0,\n        border: 0\n      },\n      ref: 'table'\n    }, [\n    /**\r\n     * 列宽\r\n     */\n    h('colgroup', {\n      ref: 'colgroup'\n    }, tableColumn.map(function (column, $columnIndex) {\n      return h('col', {\n        attrs: {\n          name: column.id\n        },\n        key: $columnIndex\n      });\n    })),\n    /**\r\n     * 内容\r\n     */\n    h('tbody', {\n      ref: 'tbody'\n    }, renderRows(h, this, $xetable, '', 0, fixedType, tableData, tableColumn))]), h('div', {\n      class: 'vxe-table--checkbox-range'\n    }), mouseConfig && mouseOpts.area ? h('div', {\n      class: 'vxe-table--cell-area'\n    }, [h('span', {\n      class: 'vxe-table--cell-main-area'\n    }, mouseOpts.extension ? [h('span', {\n      class: 'vxe-table--cell-main-area-btn',\n      on: {\n        mousedown: function mousedown(evnt) {\n          $xetable.triggerCellExtendMousedownEvent(evnt, {\n            $table: $xetable,\n            fixed: fixedType,\n            type: renderType\n          });\n        }\n      }\n    })] : null), h('span', {\n      class: 'vxe-table--cell-copy-area'\n    }), h('span', {\n      class: 'vxe-table--cell-extend-area'\n    }), h('span', {\n      class: 'vxe-table--cell-multi-area'\n    }), h('span', {\n      class: 'vxe-table--cell-active-area'\n    })]) : null, !fixedType ? h('div', {\n      class: 'vxe-table--empty-block',\n      ref: 'emptyBlock'\n    }, [h('div', {\n      class: 'vxe-table--empty-content'\n    }, emptyContent)]) : null]);\n  },\n  methods: {\n    /**\r\n     * 滚动处理\r\n     * 如果存在列固定左侧，同步更新滚动状态\r\n     * 如果存在列固定右侧，同步更新滚动状态\r\n     */\n    scrollEvent: function scrollEvent(evnt) {\n      var scrollBodyElem = this.$el,\n          $xetable = this.$parent,\n          fixedType = this.fixedType;\n      var $refs = $xetable.$refs,\n          highlightHoverRow = $xetable.highlightHoverRow,\n          scrollXLoad = $xetable.scrollXLoad,\n          scrollYLoad = $xetable.scrollYLoad,\n          lastScrollTop = $xetable.lastScrollTop,\n          lastScrollLeft = $xetable.lastScrollLeft;\n      var tableHeader = $refs.tableHeader,\n          tableBody = $refs.tableBody,\n          leftBody = $refs.leftBody,\n          rightBody = $refs.rightBody,\n          tableFooter = $refs.tableFooter,\n          validTip = $refs.validTip;\n      var headerElem = tableHeader ? tableHeader.$el : null;\n      var footerElem = tableFooter ? tableFooter.$el : null;\n      var bodyElem = tableBody.$el;\n      var leftElem = leftBody ? leftBody.$el : null;\n      var rightElem = rightBody ? rightBody.$el : null;\n      var scrollTop = scrollBodyElem.scrollTop;\n      var scrollLeft = bodyElem.scrollLeft;\n      var isRollX = scrollLeft !== lastScrollLeft;\n      var isRollY = scrollTop !== lastScrollTop;\n      $xetable.lastScrollTop = scrollTop;\n      $xetable.lastScrollLeft = scrollLeft;\n      $xetable.lastScrollTime = Date.now();\n\n      if (highlightHoverRow) {\n        $xetable.clearHoverRow();\n      }\n\n      if (leftElem && fixedType === 'left') {\n        scrollTop = leftElem.scrollTop;\n        syncBodyScroll(scrollTop, bodyElem, rightElem);\n      } else if (rightElem && fixedType === 'right') {\n        scrollTop = rightElem.scrollTop;\n        syncBodyScroll(scrollTop, bodyElem, leftElem);\n      } else {\n        if (isRollX) {\n          if (headerElem) {\n            headerElem.scrollLeft = bodyElem.scrollLeft;\n          }\n\n          if (footerElem) {\n            footerElem.scrollLeft = bodyElem.scrollLeft;\n          }\n        }\n\n        if (leftElem || rightElem) {\n          $xetable.checkScrolling();\n\n          if (isRollY) {\n            syncBodyScroll(scrollTop, leftElem, rightElem);\n          }\n        }\n      }\n\n      if (scrollXLoad && isRollX) {\n        $xetable.triggerScrollXEvent(evnt);\n      }\n\n      if (scrollYLoad && isRollY) {\n        $xetable.triggerScrollYEvent(evnt);\n      }\n\n      if (isRollX && validTip && validTip.visible) {\n        validTip.updatePlacement();\n      }\n\n      $xetable.emitEvent('scroll', {\n        type: renderType,\n        fixed: fixedType,\n        scrollTop: scrollTop,\n        scrollLeft: scrollLeft,\n        isX: isRollX,\n        isY: isRollY\n      }, evnt);\n    },\n    handleWheel: function handleWheel(evnt, isTopWheel, deltaTop, isRollX, isRollY) {\n      var _this = this;\n\n      var $xetable = this.$parent;\n      var $refs = $xetable.$refs;\n      var tableBody = $refs.tableBody,\n          leftBody = $refs.leftBody,\n          rightBody = $refs.rightBody;\n      var bodyElem = tableBody.$el;\n      var leftElem = leftBody ? leftBody.$el : null;\n      var rightElem = rightBody ? rightBody.$el : null;\n      var remainSize = this.isPrevWheelTop === isTopWheel ? Math.max(0, this.wheelYSize - this.wheelYTotal) : 0;\n      this.isPrevWheelTop = isTopWheel;\n      this.wheelYSize = Math.abs(isTopWheel ? deltaTop - remainSize : deltaTop + remainSize);\n      this.wheelYInterval = 0;\n      this.wheelYTotal = 0;\n      clearTimeout(this.wheelTime);\n\n      var handleSmooth = function handleSmooth() {\n        var fixedType = _this.fixedType,\n            wheelYTotal = _this.wheelYTotal,\n            wheelYSize = _this.wheelYSize,\n            wheelYInterval = _this.wheelYInterval;\n\n        if (wheelYTotal < wheelYSize) {\n          wheelYInterval = Math.max(5, Math.floor(wheelYInterval * 1.5));\n          wheelYTotal = wheelYTotal + wheelYInterval;\n\n          if (wheelYTotal > wheelYSize) {\n            wheelYInterval = wheelYInterval - (wheelYTotal - wheelYSize);\n          }\n\n          var scrollTop = bodyElem.scrollTop,\n              clientHeight = bodyElem.clientHeight,\n              scrollHeight = bodyElem.scrollHeight;\n          var targerTop = scrollTop + wheelYInterval * (isTopWheel ? -1 : 1);\n          bodyElem.scrollTop = targerTop;\n\n          if (leftElem) {\n            leftElem.scrollTop = targerTop;\n          }\n\n          if (rightElem) {\n            rightElem.scrollTop = targerTop;\n          }\n\n          if (isTopWheel ? targerTop < scrollHeight - clientHeight : targerTop >= 0) {\n            _this.wheelTime = setTimeout(handleSmooth, 10);\n          }\n\n          _this.wheelYTotal = wheelYTotal;\n          _this.wheelYInterval = wheelYInterval;\n          $xetable.emitEvent('scroll', {\n            type: renderType,\n            fixed: fixedType,\n            scrollTop: bodyElem.scrollTop,\n            scrollLeft: bodyElem.scrollLeft,\n            isX: isRollX,\n            isY: isRollY\n          }, evnt);\n        }\n      };\n\n      handleSmooth();\n    },\n\n    /**\r\n     * 滚轮处理\r\n     */\n    wheelEvent: function wheelEvent(evnt) {\n      var deltaY = evnt.deltaY,\n          deltaX = evnt.deltaX;\n      var scrollBodyElem = this.$el,\n          $xetable = this.$parent;\n      var $refs = $xetable.$refs,\n          highlightHoverRow = $xetable.highlightHoverRow,\n          scrollYLoad = $xetable.scrollYLoad,\n          lastScrollTop = $xetable.lastScrollTop,\n          lastScrollLeft = $xetable.lastScrollLeft;\n      var tableBody = $refs.tableBody;\n      var bodyElem = tableBody.$el;\n      var deltaTop = browse.firefox ? deltaY * 40 : deltaY;\n      var deltaLeft = browse.firefox ? deltaX * 40 : deltaX;\n      var isTopWheel = deltaTop < 0; // 如果滚动位置已经是顶部或底部，则不需要触发\n\n      if (isTopWheel ? scrollBodyElem.scrollTop <= 0 : scrollBodyElem.scrollTop >= scrollBodyElem.scrollHeight - scrollBodyElem.clientHeight) {\n        return;\n      }\n\n      var scrollTop = scrollBodyElem.scrollTop + deltaTop;\n      var scrollLeft = bodyElem.scrollLeft + deltaLeft;\n      var isRollX = scrollLeft !== lastScrollLeft;\n      var isRollY = scrollTop !== lastScrollTop; // 用于鼠标纵向滚轮处理\n\n      if (isRollY) {\n        evnt.preventDefault();\n        $xetable.lastScrollTop = scrollTop;\n        $xetable.lastScrollLeft = scrollLeft;\n        $xetable.lastScrollTime = Date.now();\n\n        if (highlightHoverRow) {\n          $xetable.clearHoverRow();\n        }\n\n        this.handleWheel(evnt, isTopWheel, deltaTop, isRollX, isRollY);\n\n        if (scrollYLoad) {\n          $xetable.triggerScrollYEvent(evnt);\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\table\\src\\body.js"],"names":["renderType","$xetable","Date","column","params","treeOpts","treeConfig","slots","treeNode","h","class","style","height","calcTreeLine","left","rowLevel","getOffsetSize","tableListeners","afterFullData","tableData","columnKey","overflowX","scrollXLoad","scrollYLoad","highlightCurrentRow","allColumnOverflow","isAllOverflow","allAlign","currentColumn","cellClassName","cellStyle","mergeList","spanMethod","radioOpts","checkboxOpts","expandOpts","tooltipOpts","mouseConfig","editConfig","editOpts","editRules","validOpts","editStore","validStore","tooltipConfig","type","cellRender","editRender","align","showOverflow","className","actived","showAllTip","columnIndex","_columnIndex","isEdit","isEnableConf","fixedHiddenColumn","fixedType","cellOverflow","XEUtils","showEllipsis","showTitle","showTooltip","hasEllipsis","tdOns","cellAlign","hasValidError","showValidTip","attrs","colid","id","bindMouseenter","bindMouseleave","triggerDblclick","$table","$seq","seq","rowid","row","rowIndex","$rowIndex","_rowIndex","$columnIndex","fixed","isHidden","level","visibleData","data","items","isOperateMouse","DomTools","evnt","cell","currentTarget","spanRest","mergeBodyMethod","rowspan","colspan","isDirty","tdVNs","renderLine","title","width","columns","UtilTools","key","on","stripe","rowKey","highlightHoverRow","rowClassName","rowStyle","treeExpandeds","scrollYStore","rowExpandeds","expandColumn","hasFixedColumn","rows","trOn","isNewRow","renderColumn","paddingLeft","expandParams","tableColumn","length","rowChildren","renderRows","elem1","elem2","clearTimeout","scrollProcessTimeout","setTimeout","name","props","fixedColumn","size","String","wheelTime","wheelYSize","wheelYInterval","wheelYTotal","mounted","$el","$refs","elemStore","prefix","beforeDestroy","render","_e","$scopedSlots","tId","keyboardConfig","keyboardOpts","emptyOpts","mouseOpts","sYOpts","emptyContent","compConf","VXETable","renderEmpty","GlobalConfig","xid","wheel","wheelEvent","ref","cellspacing","cellpadding","border","mousedown","methods","scrollEvent","scrollBodyElem","lastScrollTop","lastScrollLeft","tableHeader","tableBody","leftBody","rightBody","tableFooter","validTip","headerElem","footerElem","bodyElem","leftElem","rightElem","scrollTop","scrollLeft","isRollX","isRollY","syncBodyScroll","isX","isY","handleWheel","remainSize","Math","isTopWheel","deltaTop","handleSmooth","clientHeight","scrollHeight","targerTop","deltaY","deltaX","browse","deltaLeft"],"mappings":"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","sourcesContent":["import XEUtils from 'xe-utils'\r\nimport GlobalConfig from '../../v-x-e-table/src/conf'\r\nimport VXETable from '../../v-x-e-table'\r\nimport { UtilTools, DomTools, isEnableConf } from '../../tools'\r\nimport { getOffsetSize, calcTreeLine, mergeBodyMethod } from './util'\r\nimport { browse } from '../../tools/src/dom'\r\n\r\nconst renderType = 'body'\r\n\r\n// 滚动、拖动过程中不需要触发\r\nfunction isOperateMouse ($xetable) {\r\n  return $xetable._isResize || ($xetable.lastScrollTime && Date.now() < $xetable.lastScrollTime + $xetable.delayHover)\r\n}\r\n\r\nfunction renderLine (h, _vm, $xetable, rowLevel, items, params) {\r\n  const column = params.column\r\n  const { treeOpts, treeConfig } = $xetable\r\n  const { slots, treeNode } = column\r\n  if (slots && slots.line) {\r\n    return $xetable.callSlot(slots.line, params, h)\r\n  }\r\n  if (treeConfig && treeNode && treeOpts.line) {\r\n    return [\r\n      h('div', {\r\n        class: 'vxe-tree--line-wrapper'\r\n      }, [\r\n        h('div', {\r\n          class: 'vxe-tree--line',\r\n          style: {\r\n            height: `${calcTreeLine(params, items)}px`,\r\n            left: `${(rowLevel * treeOpts.indent) + (rowLevel ? 2 - getOffsetSize($xetable) : 0) + 16}px`\r\n          }\r\n        })\r\n      ])\r\n    ]\r\n  }\r\n  return []\r\n}\r\n\r\n/**\r\n * 渲染列\r\n */\r\nfunction renderColumn (h, _vm, $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, columns, items) {\r\n  const {\r\n    $listeners: tableListeners,\r\n    afterFullData,\r\n    tableData,\r\n    height,\r\n    columnKey,\r\n    overflowX,\r\n    scrollXLoad,\r\n    scrollYLoad,\r\n    highlightCurrentRow,\r\n    showOverflow: allColumnOverflow,\r\n    isAllOverflow,\r\n    align: allAlign,\r\n    currentColumn,\r\n    cellClassName,\r\n    cellStyle,\r\n    mergeList,\r\n    spanMethod,\r\n    radioOpts,\r\n    checkboxOpts,\r\n    expandOpts,\r\n    treeOpts,\r\n    tooltipOpts,\r\n    mouseConfig,\r\n    editConfig,\r\n    editOpts,\r\n    editRules,\r\n    validOpts,\r\n    editStore,\r\n    validStore,\r\n    tooltipConfig\r\n  } = $xetable\r\n  const { type, cellRender, editRender, align, showOverflow, className, treeNode } = column\r\n  const { actived } = editStore\r\n  const showAllTip = tooltipOpts.showAll || tooltipOpts.enabled\r\n  const columnIndex = $xetable.getColumnIndex(column)\r\n  const _columnIndex = $xetable.getVTColumnIndex(column)\r\n  const isEdit = isEnableConf(editRender)\r\n  let fixedHiddenColumn = fixedType ? column.fixed !== fixedType : column.fixed && overflowX\r\n  const cellOverflow = (XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow)) ? allColumnOverflow : showOverflow\r\n  let showEllipsis = cellOverflow === 'ellipsis'\r\n  const showTitle = cellOverflow === 'title'\r\n  const showTooltip = cellOverflow === true || cellOverflow === 'tooltip'\r\n  let hasEllipsis = showTitle || showTooltip || showEllipsis\r\n  let isDirty\r\n  const tdOns = {}\r\n  const cellAlign = align || allAlign\r\n  const hasValidError = validStore.row === row && validStore.column === column\r\n  const showValidTip = editRules && validOpts.showMessage && (validOpts.message === 'default' ? (height || tableData.length > 1) : validOpts.message === 'inline')\r\n  const attrs = { colid: column.id }\r\n  const bindMouseenter = tableListeners['cell-mouseenter']\r\n  const bindMouseleave = tableListeners['cell-mouseleave']\r\n  const triggerDblclick = (editRender && editConfig && editOpts.trigger === 'dblclick')\r\n  const params = { $table: $xetable, $seq, seq, rowid, row, rowIndex, $rowIndex, _rowIndex, column, columnIndex, $columnIndex, _columnIndex, fixed: fixedType, type: renderType, isHidden: fixedHiddenColumn, level: rowLevel, visibleData: afterFullData, data: tableData, items }\r\n  // 虚拟滚动不支持动态高度\r\n  if ((scrollXLoad || scrollYLoad) && !hasEllipsis) {\r\n    showEllipsis = hasEllipsis = true\r\n  }\r\n  // hover 进入事件\r\n  if (showTitle || showTooltip || showAllTip || bindMouseenter || tooltipConfig) {\r\n    tdOns.mouseenter = evnt => {\r\n      if (isOperateMouse($xetable)) {\r\n        return\r\n      }\r\n      if (showTitle) {\r\n        DomTools.updateCellTitle(evnt.currentTarget, column)\r\n      } else if (showTooltip || showAllTip) {\r\n        // 如果配置了显示 tooltip\r\n        $xetable.triggerBodyTooltipEvent(evnt, params)\r\n      }\r\n      if (bindMouseenter) {\r\n        $xetable.emitEvent('cell-mouseenter', Object.assign({ cell: evnt.currentTarget }, params), evnt)\r\n      }\r\n    }\r\n  }\r\n  // hover 退出事件\r\n  if (showTooltip || showAllTip || bindMouseleave || tooltipConfig) {\r\n    tdOns.mouseleave = evnt => {\r\n      if (isOperateMouse($xetable)) {\r\n        return\r\n      }\r\n      if (showTooltip || showAllTip) {\r\n        $xetable.handleTargetLeaveEvent(evnt)\r\n      }\r\n      if (bindMouseleave) {\r\n        $xetable.emitEvent('cell-mouseleave', Object.assign({ cell: evnt.currentTarget }, params), evnt)\r\n      }\r\n    }\r\n  }\r\n  // 按下事件处理\r\n  if (checkboxOpts.range || mouseConfig) {\r\n    tdOns.mousedown = evnt => {\r\n      $xetable.triggerCellMousedownEvent(evnt, params)\r\n    }\r\n  }\r\n  // 点击事件处理\r\n  if (highlightCurrentRow ||\r\n    tableListeners['cell-click'] ||\r\n    (editRender && editConfig) ||\r\n    (expandOpts.trigger === 'row' || (expandOpts.trigger === 'cell')) ||\r\n    (radioOpts.trigger === 'row' || (column.type === 'radio' && radioOpts.trigger === 'cell')) ||\r\n    (checkboxOpts.trigger === 'row' || (column.type === 'checkbox' && checkboxOpts.trigger === 'cell')) ||\r\n    (treeOpts.trigger === 'row' || (column.treeNode && treeOpts.trigger === 'cell'))) {\r\n    tdOns.click = evnt => {\r\n      $xetable.triggerCellClickEvent(evnt, params)\r\n    }\r\n  }\r\n  // 双击事件处理\r\n  if (triggerDblclick || tableListeners['cell-dblclick']) {\r\n    tdOns.dblclick = evnt => {\r\n      $xetable.triggerCellDblclickEvent(evnt, params)\r\n    }\r\n  }\r\n  // 合并行或列\r\n  if (mergeList.length) {\r\n    const spanRest = mergeBodyMethod(mergeList, _rowIndex, _columnIndex)\r\n    if (spanRest) {\r\n      const { rowspan, colspan } = spanRest\r\n      if (!rowspan || !colspan) {\r\n        return null\r\n      }\r\n      if (rowspan > 1) {\r\n        attrs.rowspan = rowspan\r\n      }\r\n      if (colspan > 1) {\r\n        attrs.colspan = colspan\r\n      }\r\n    }\r\n  } else if (spanMethod) {\r\n    // 自定义合并行或列的方法\r\n    const { rowspan = 1, colspan = 1 } = spanMethod(params) || {}\r\n    if (!rowspan || !colspan) {\r\n      return null\r\n    }\r\n    if (rowspan > 1) {\r\n      attrs.rowspan = rowspan\r\n    }\r\n    if (colspan > 1) {\r\n      attrs.colspan = colspan\r\n    }\r\n  }\r\n  // 如果被合并不可隐藏\r\n  if (fixedHiddenColumn && mergeList) {\r\n    if (attrs.colspan > 1 || attrs.rowspan > 1) {\r\n      fixedHiddenColumn = false\r\n    }\r\n  }\r\n  // 如果编辑列开启显示状态\r\n  if (!fixedHiddenColumn && editConfig && (editRender || cellRender) && (editOpts.showStatus || editOpts.showUpdateStatus)) {\r\n    isDirty = $xetable.isUpdateByRow(row, column.property)\r\n  }\r\n  const tdVNs = []\r\n  if (fixedHiddenColumn && (allColumnOverflow ? isAllOverflow : allColumnOverflow)) {\r\n    tdVNs.push(\r\n      h('div', {\r\n        class: ['vxe-cell', {\r\n          'c--title': showTitle,\r\n          'c--tooltip': showTooltip,\r\n          'c--ellipsis': showEllipsis\r\n        }]\r\n      })\r\n    )\r\n  } else {\r\n    // 渲染单元格\r\n    tdVNs.push(\r\n      ...renderLine(h, _vm, $xetable, rowLevel, items, params),\r\n      h('div', {\r\n        class: ['vxe-cell', {\r\n          'c--title': showTitle,\r\n          'c--tooltip': showTooltip,\r\n          'c--ellipsis': showEllipsis\r\n        }],\r\n        attrs: {\r\n          title: showTitle ? $xetable.getCellLabel(row, column) : null\r\n        }\r\n      }, column.renderCell(h, params))\r\n    )\r\n    if (showValidTip && hasValidError) {\r\n      tdVNs.push(\r\n        h('div', {\r\n          class: 'vxe-cell--valid',\r\n          style: validStore.rule && validStore.rule.maxWidth ? {\r\n            width: `${validStore.rule.maxWidth}px`\r\n          } : null\r\n        }, [\r\n          h('span', {\r\n            class: 'vxe-cell--valid-msg'\r\n          }, validStore.content)\r\n        ])\r\n      )\r\n    }\r\n  }\r\n  return h('td', {\r\n    class: ['vxe-body--column', column.id, {\r\n      [`col--${cellAlign}`]: cellAlign,\r\n      [`col--${type}`]: type,\r\n      'col--last': $columnIndex === columns.length - 1,\r\n      'col--tree-node': treeNode,\r\n      'col--edit': isEdit,\r\n      'col--ellipsis': hasEllipsis,\r\n      'fixed--hidden': fixedHiddenColumn,\r\n      'col--dirty': isDirty,\r\n      'col--actived': editConfig && isEdit && (actived.row === row && (actived.column === column || editOpts.mode === 'row')),\r\n      'col--valid-error': hasValidError,\r\n      'col--current': currentColumn === column\r\n    }, UtilTools.getClass(className, params), UtilTools.getClass(cellClassName, params)],\r\n    key: columnKey ? column.id : $columnIndex,\r\n    attrs,\r\n    style: cellStyle ? (XEUtils.isFunction(cellStyle) ? cellStyle(params) : cellStyle) : null,\r\n    on: tdOns\r\n  }, tdVNs)\r\n}\r\n\r\nfunction renderRows (h, _vm, $xetable, $seq, rowLevel, fixedType, tableData, tableColumn) {\r\n  const {\r\n    stripe,\r\n    rowKey,\r\n    highlightHoverRow,\r\n    rowClassName,\r\n    rowStyle,\r\n    editConfig,\r\n    showOverflow: allColumnOverflow,\r\n    treeConfig,\r\n    treeOpts,\r\n    editOpts,\r\n    treeExpandeds,\r\n    scrollYLoad,\r\n    scrollYStore,\r\n    editStore,\r\n    rowExpandeds,\r\n    radioOpts,\r\n    checkboxOpts,\r\n    expandColumn,\r\n    hasFixedColumn\r\n  } = $xetable\r\n  const rows = []\r\n  tableData.forEach((row, $rowIndex) => {\r\n    const trOn = {}\r\n    let rowIndex = $rowIndex\r\n    let seq = rowIndex + 1\r\n    if (scrollYLoad) {\r\n      seq += scrollYStore.startIndex\r\n    }\r\n    const _rowIndex = $xetable.getVTRowIndex(row)\r\n    // 确保任何情况下 rowIndex 都精准指向真实 data 索引\r\n    rowIndex = $xetable.getRowIndex(row)\r\n    // 事件绑定\r\n    if (highlightHoverRow) {\r\n      trOn.mouseenter = evnt => {\r\n        if (isOperateMouse($xetable)) {\r\n          return\r\n        }\r\n        $xetable.triggerHoverEvent(evnt, { row, rowIndex })\r\n      }\r\n      trOn.mouseleave = () => {\r\n        if (isOperateMouse($xetable)) {\r\n          return\r\n        }\r\n        $xetable.clearHoverRow()\r\n      }\r\n    }\r\n    const rowid = UtilTools.getRowid($xetable, row)\r\n    const params = { $table: $xetable, $seq, seq, rowid, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex }\r\n    let isNewRow = false\r\n    if (editConfig) {\r\n      isNewRow = editStore.insertList.indexOf(row) > -1\r\n    }\r\n    rows.push(\r\n      h('tr', {\r\n        class: ['vxe-body--row', {\r\n          'row--stripe': stripe && ($xetable.getVTRowIndex(row) + 1) % 2 === 0,\r\n          'is--new': isNewRow,\r\n          'row--new': isNewRow && (editOpts.showStatus || editOpts.showInsertStatus),\r\n          'row--radio': radioOpts.highlight && $xetable.selectRow === row,\r\n          'row--checked': checkboxOpts.highlight && $xetable.isCheckedByCheckboxRow(row)\r\n        }, rowClassName ? (XEUtils.isFunction(rowClassName) ? rowClassName(params) : rowClassName) : ''],\r\n        attrs: {\r\n          rowid: rowid\r\n        },\r\n        style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(params) : rowStyle) : null,\r\n        key: rowKey || treeConfig ? rowid : $rowIndex,\r\n        on: trOn\r\n      }, tableColumn.map((column, $columnIndex) => {\r\n        return renderColumn(h, _vm, $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, tableColumn, tableData)\r\n      }))\r\n    )\r\n    // 如果行被展开了\r\n    if (expandColumn && rowExpandeds.length && rowExpandeds.indexOf(row) > -1) {\r\n      let cellStyle\r\n      if (treeConfig) {\r\n        cellStyle = {\r\n          paddingLeft: `${(rowLevel * treeOpts.indent) + 30}px`\r\n        }\r\n      }\r\n      const { showOverflow } = expandColumn\r\n      const hasEllipsis = (XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow)) ? allColumnOverflow : showOverflow\r\n      const expandParams = { $table: $xetable, $seq, seq, column: expandColumn, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex }\r\n      rows.push(\r\n        h('tr', {\r\n          class: 'vxe-body--expanded-row',\r\n          key: `expand_${rowid}`,\r\n          style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(expandParams) : rowStyle) : null,\r\n          on: trOn\r\n        }, [\r\n          h('td', {\r\n            class: ['vxe-body--expanded-column', {\r\n              'fixed--hidden': fixedType && !hasFixedColumn,\r\n              'col--ellipsis': hasEllipsis\r\n            }],\r\n            attrs: {\r\n              colspan: tableColumn.length\r\n            }\r\n          }, [\r\n            h('div', {\r\n              class: 'vxe-body--expanded-cell',\r\n              style: cellStyle\r\n            }, [\r\n              expandColumn.renderData(h, expandParams)\r\n            ])\r\n          ])\r\n        ])\r\n      )\r\n    }\r\n    // 如果是树形表格\r\n    if (treeConfig && treeExpandeds.length) {\r\n      const rowChildren = row[treeOpts.children]\r\n      if (rowChildren && rowChildren.length && treeExpandeds.indexOf(row) > -1) {\r\n        rows.push(...renderRows(h, _vm, $xetable, $seq ? `${$seq}.${seq}` : `${seq}`, rowLevel + 1, fixedType, rowChildren, tableColumn))\r\n      }\r\n    }\r\n  })\r\n  return rows\r\n}\r\n\r\n/**\r\n * 同步滚动条\r\n */\r\nlet scrollProcessTimeout\r\nfunction syncBodyScroll (scrollTop, elem1, elem2) {\r\n  if (elem1 || elem2) {\r\n    if (elem1) {\r\n      elem1.onscroll = null\r\n      elem1.scrollTop = scrollTop\r\n    }\r\n    if (elem2) {\r\n      elem2.onscroll = null\r\n      elem2.scrollTop = scrollTop\r\n    }\r\n    clearTimeout(scrollProcessTimeout)\r\n    scrollProcessTimeout = setTimeout(function () {\r\n      if (elem1) {\r\n        elem1.onscroll = elem1._onscroll\r\n      }\r\n      if (elem2) {\r\n        elem2.onscroll = elem2._onscroll\r\n      }\r\n    }, 300)\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'VxeTableBody',\r\n  props: {\r\n    tableData: Array,\r\n    tableColumn: Array,\r\n    fixedColumn: Array,\r\n    size: String,\r\n    fixedType: String\r\n  },\r\n  data () {\r\n    return {\r\n      wheelTime: null,\r\n      wheelYSize: 0,\r\n      wheelYInterval: 0,\r\n      wheelYTotal: 0\r\n    }\r\n  },\r\n  mounted () {\r\n    const { $parent: $xetable, $el, $refs, fixedType } = this\r\n    const { elemStore } = $xetable\r\n    const prefix = `${fixedType || 'main'}-body-`\r\n    elemStore[`${prefix}wrapper`] = $el\r\n    elemStore[`${prefix}table`] = $refs.table\r\n    elemStore[`${prefix}colgroup`] = $refs.colgroup\r\n    elemStore[`${prefix}list`] = $refs.tbody\r\n    elemStore[`${prefix}xSpace`] = $refs.xSpace\r\n    elemStore[`${prefix}ySpace`] = $refs.ySpace\r\n    elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock\r\n    this.$el.onscroll = this.scrollEvent\r\n    this.$el._onscroll = this.scrollEvent\r\n  },\r\n  beforeDestroy () {\r\n    clearTimeout(this.wheelTime)\r\n    this.$el._onscroll = null\r\n    this.$el.onscroll = null\r\n  },\r\n  render (h) {\r\n    const { _e, $parent: $xetable, fixedColumn, fixedType } = this\r\n    let { $scopedSlots, tId, tableData, tableColumn, showOverflow: allColumnOverflow, keyboardConfig, keyboardOpts, mergeList, spanMethod, scrollXLoad, scrollYLoad, isAllOverflow, emptyOpts, mouseConfig, mouseOpts, sYOpts } = $xetable\r\n    // 如果是使用优化模式\r\n    if (fixedType) {\r\n      if ((!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts.isMerge)) && (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow))) {\r\n        tableColumn = fixedColumn\r\n      }\r\n    }\r\n    let emptyContent\r\n    if ($scopedSlots.empty) {\r\n      emptyContent = $scopedSlots.empty.call(this, { $table: $xetable }, h)\r\n    } else {\r\n      const compConf = emptyOpts.name ? VXETable.renderer.get(emptyOpts.name) : null\r\n      const renderEmpty = compConf ? compConf.renderEmpty : null\r\n      if (renderEmpty) {\r\n        emptyContent = renderEmpty.call(this, h, emptyOpts, { $table: $xetable })\r\n      } else {\r\n        emptyContent = $xetable.emptyText || GlobalConfig.i18n('vxe.table.emptyText')\r\n      }\r\n    }\r\n    return h('div', {\r\n      class: ['vxe-table--body-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],\r\n      attrs: {\r\n        xid: tId\r\n      },\r\n      on: scrollYLoad && sYOpts.mode === 'wheel' ? {\r\n        wheel: this.wheelEvent\r\n      } : {}\r\n    }, [\r\n      fixedType ? _e() : h('div', {\r\n        class: 'vxe-body--x-space',\r\n        ref: 'xSpace'\r\n      }),\r\n      h('div', {\r\n        class: 'vxe-body--y-space',\r\n        ref: 'ySpace'\r\n      }),\r\n      h('table', {\r\n        class: 'vxe-table--body',\r\n        attrs: {\r\n          xid: tId,\r\n          cellspacing: 0,\r\n          cellpadding: 0,\r\n          border: 0\r\n        },\r\n        ref: 'table'\r\n      }, [\r\n        /**\r\n         * 列宽\r\n         */\r\n        h('colgroup', {\r\n          ref: 'colgroup'\r\n        }, tableColumn.map((column, $columnIndex) => {\r\n          return h('col', {\r\n            attrs: {\r\n              name: column.id\r\n            },\r\n            key: $columnIndex\r\n          })\r\n        })),\r\n        /**\r\n         * 内容\r\n         */\r\n        h('tbody', {\r\n          ref: 'tbody'\r\n        }, renderRows(h, this, $xetable, '', 0, fixedType, tableData, tableColumn))\r\n      ]),\r\n      h('div', {\r\n        class: 'vxe-table--checkbox-range'\r\n      }),\r\n      mouseConfig && mouseOpts.area ? h('div', {\r\n        class: 'vxe-table--cell-area'\r\n      }, [\r\n        h('span', {\r\n          class: 'vxe-table--cell-main-area'\r\n        }, mouseOpts.extension ? [\r\n          h('span', {\r\n            class: 'vxe-table--cell-main-area-btn',\r\n            on: {\r\n              mousedown (evnt) {\r\n                $xetable.triggerCellExtendMousedownEvent(evnt, { $table: $xetable, fixed: fixedType, type: renderType })\r\n              }\r\n            }\r\n          })\r\n        ] : null),\r\n        h('span', {\r\n          class: 'vxe-table--cell-copy-area'\r\n        }),\r\n        h('span', {\r\n          class: 'vxe-table--cell-extend-area'\r\n        }),\r\n        h('span', {\r\n          class: 'vxe-table--cell-multi-area'\r\n        }),\r\n        h('span', {\r\n          class: 'vxe-table--cell-active-area'\r\n        })\r\n      ]) : null,\r\n      !fixedType ? h('div', {\r\n        class: 'vxe-table--empty-block',\r\n        ref: 'emptyBlock'\r\n      }, [\r\n        h('div', {\r\n          class: 'vxe-table--empty-content'\r\n        }, emptyContent)\r\n      ]) : null\r\n    ])\r\n  },\r\n  methods: {\r\n    /**\r\n     * 滚动处理\r\n     * 如果存在列固定左侧，同步更新滚动状态\r\n     * 如果存在列固定右侧，同步更新滚动状态\r\n     */\r\n    scrollEvent (evnt) {\r\n      const { $el: scrollBodyElem, $parent: $xetable, fixedType } = this\r\n      const { $refs, highlightHoverRow, scrollXLoad, scrollYLoad, lastScrollTop, lastScrollLeft } = $xetable\r\n      const { tableHeader, tableBody, leftBody, rightBody, tableFooter, validTip } = $refs\r\n      const headerElem = tableHeader ? tableHeader.$el : null\r\n      const footerElem = tableFooter ? tableFooter.$el : null\r\n      const bodyElem = tableBody.$el\r\n      const leftElem = leftBody ? leftBody.$el : null\r\n      const rightElem = rightBody ? rightBody.$el : null\r\n      let scrollTop = scrollBodyElem.scrollTop\r\n      const scrollLeft = bodyElem.scrollLeft\r\n      const isRollX = scrollLeft !== lastScrollLeft\r\n      const isRollY = scrollTop !== lastScrollTop\r\n      $xetable.lastScrollTop = scrollTop\r\n      $xetable.lastScrollLeft = scrollLeft\r\n      $xetable.lastScrollTime = Date.now()\r\n      if (highlightHoverRow) {\r\n        $xetable.clearHoverRow()\r\n      }\r\n      if (leftElem && fixedType === 'left') {\r\n        scrollTop = leftElem.scrollTop\r\n        syncBodyScroll(scrollTop, bodyElem, rightElem)\r\n      } else if (rightElem && fixedType === 'right') {\r\n        scrollTop = rightElem.scrollTop\r\n        syncBodyScroll(scrollTop, bodyElem, leftElem)\r\n      } else {\r\n        if (isRollX) {\r\n          if (headerElem) {\r\n            headerElem.scrollLeft = bodyElem.scrollLeft\r\n          }\r\n          if (footerElem) {\r\n            footerElem.scrollLeft = bodyElem.scrollLeft\r\n          }\r\n        }\r\n        if (leftElem || rightElem) {\r\n          $xetable.checkScrolling()\r\n          if (isRollY) {\r\n            syncBodyScroll(scrollTop, leftElem, rightElem)\r\n          }\r\n        }\r\n      }\r\n      if (scrollXLoad && isRollX) {\r\n        $xetable.triggerScrollXEvent(evnt)\r\n      }\r\n      if (scrollYLoad && isRollY) {\r\n        $xetable.triggerScrollYEvent(evnt)\r\n      }\r\n      if (isRollX && validTip && validTip.visible) {\r\n        validTip.updatePlacement()\r\n      }\r\n      $xetable.emitEvent('scroll', { type: renderType, fixed: fixedType, scrollTop, scrollLeft, isX: isRollX, isY: isRollY }, evnt)\r\n    },\r\n    handleWheel (evnt, isTopWheel, deltaTop, isRollX, isRollY) {\r\n      const { $parent: $xetable } = this\r\n      const { $refs } = $xetable\r\n      const { tableBody, leftBody, rightBody } = $refs\r\n      const bodyElem = tableBody.$el\r\n      const leftElem = leftBody ? leftBody.$el : null\r\n      const rightElem = rightBody ? rightBody.$el : null\r\n      const remainSize = this.isPrevWheelTop === isTopWheel ? Math.max(0, this.wheelYSize - this.wheelYTotal) : 0\r\n      this.isPrevWheelTop = isTopWheel\r\n      this.wheelYSize = Math.abs(isTopWheel ? deltaTop - remainSize : deltaTop + remainSize)\r\n      this.wheelYInterval = 0\r\n      this.wheelYTotal = 0\r\n      clearTimeout(this.wheelTime)\r\n      const handleSmooth = () => {\r\n        let { fixedType, wheelYTotal, wheelYSize, wheelYInterval } = this\r\n        if (wheelYTotal < wheelYSize) {\r\n          wheelYInterval = Math.max(5, Math.floor(wheelYInterval * 1.5))\r\n          wheelYTotal = wheelYTotal + wheelYInterval\r\n          if (wheelYTotal > wheelYSize) {\r\n            wheelYInterval = wheelYInterval - (wheelYTotal - wheelYSize)\r\n          }\r\n          const { scrollTop, clientHeight, scrollHeight } = bodyElem\r\n          const targerTop = scrollTop + (wheelYInterval * (isTopWheel ? -1 : 1))\r\n          bodyElem.scrollTop = targerTop\r\n          if (leftElem) {\r\n            leftElem.scrollTop = targerTop\r\n          }\r\n          if (rightElem) {\r\n            rightElem.scrollTop = targerTop\r\n          }\r\n          if (isTopWheel ? targerTop < scrollHeight - clientHeight : targerTop >= 0) {\r\n            this.wheelTime = setTimeout(handleSmooth, 10)\r\n          }\r\n          this.wheelYTotal = wheelYTotal\r\n          this.wheelYInterval = wheelYInterval\r\n          $xetable.emitEvent('scroll', { type: renderType, fixed: fixedType, scrollTop: bodyElem.scrollTop, scrollLeft: bodyElem.scrollLeft, isX: isRollX, isY: isRollY }, evnt)\r\n        }\r\n      }\r\n      handleSmooth()\r\n    },\r\n    /**\r\n     * 滚轮处理\r\n     */\r\n    wheelEvent (evnt) {\r\n      const { deltaY, deltaX } = evnt\r\n      const { $el: scrollBodyElem, $parent: $xetable } = this\r\n      const { $refs, highlightHoverRow, scrollYLoad, lastScrollTop, lastScrollLeft } = $xetable\r\n      const { tableBody } = $refs\r\n      const bodyElem = tableBody.$el\r\n\r\n      const deltaTop = browse.firefox ? deltaY * 40 : deltaY\r\n      const deltaLeft = browse.firefox ? deltaX * 40 : deltaX\r\n      const isTopWheel = deltaTop < 0\r\n      // 如果滚动位置已经是顶部或底部，则不需要触发\r\n      if (isTopWheel ? scrollBodyElem.scrollTop <= 0 : scrollBodyElem.scrollTop >= scrollBodyElem.scrollHeight - scrollBodyElem.clientHeight) {\r\n        return\r\n      }\r\n\r\n      const scrollTop = scrollBodyElem.scrollTop + deltaTop\r\n      const scrollLeft = bodyElem.scrollLeft + deltaLeft\r\n      const isRollX = scrollLeft !== lastScrollLeft\r\n      const isRollY = scrollTop !== lastScrollTop\r\n\r\n      // 用于鼠标纵向滚轮处理\r\n      if (isRollY) {\r\n        evnt.preventDefault()\r\n        $xetable.lastScrollTop = scrollTop\r\n        $xetable.lastScrollLeft = scrollLeft\r\n        $xetable.lastScrollTime = Date.now()\r\n        if (highlightHoverRow) {\r\n          $xetable.clearHoverRow()\r\n        }\r\n        this.handleWheel(evnt, isTopWheel, deltaTop, isRollX, isRollY)\r\n        if (scrollYLoad) {\r\n          $xetable.triggerScrollYEvent(evnt)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}]}