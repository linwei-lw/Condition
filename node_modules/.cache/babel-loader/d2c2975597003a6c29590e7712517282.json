{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\edit\\src\\mixin.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\edit\\src\\mixin.js","mtime":1635230121610},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport XEUtils from 'xe-utils';\nimport VXETable from \"../../v-x-e-table\";\nimport { UtilTools, DomTools, isEnableConf } from \"../../tools\";\nimport { browse } from \"../../tools/src/dom\";\nexport default {\n  methods: {\n    /**\r\n     * 往表格中插入临时数据\r\n     *\r\n     * @param {*} records\r\n     */\n    _insert: function _insert(records) {\n      return this.insertAt(records);\n    },\n\n    /**\r\n     * 往表格指定行中插入临时数据\r\n     * 如果 row 为空则从插入到顶部\r\n     * 如果 row 为 -1 则从插入到底部\r\n     * 如果 row 为有效行则插入到该行的位置\r\n     * @param {Object/Array} records 新的数据\r\n     * @param {Row} row 指定行\r\n     */\n    _insertAt: function _insertAt(records, row) {\n      var _this = this,\n          _editStore$insertList;\n\n      var mergeList = this.mergeList,\n          afterFullData = this.afterFullData,\n          editStore = this.editStore,\n          sYOpts = this.sYOpts,\n          scrollYLoad = this.scrollYLoad,\n          tableFullData = this.tableFullData,\n          treeConfig = this.treeConfig;\n\n      if (!XEUtils.isArray(records)) {\n        records = [records];\n      }\n\n      var newRecords = records.map(function (record) {\n        return _this.defineField(Object.assign({}, record));\n      });\n\n      if (!row) {\n        afterFullData.unshift.apply(afterFullData, _toConsumableArray(newRecords));\n        tableFullData.unshift.apply(tableFullData, _toConsumableArray(newRecords)); // 刷新单元格合并\n\n        mergeList.forEach(function (mergeItem) {\n          var mergeRowIndex = mergeItem.row;\n\n          if (mergeRowIndex > 0) {\n            mergeItem.row = mergeRowIndex + newRecords.length;\n          }\n        });\n      } else {\n        if (row === -1) {\n          afterFullData.push.apply(afterFullData, _toConsumableArray(newRecords));\n          tableFullData.push.apply(tableFullData, _toConsumableArray(newRecords)); // 刷新单元格合并\n\n          mergeList.forEach(function (mergeItem) {\n            var mergeRowIndex = mergeItem.row,\n                mergeRowspan = mergeItem.rowspan;\n\n            if (mergeRowIndex + mergeRowspan > afterFullData.length) {\n              mergeItem.rowspan = mergeRowspan + newRecords.length;\n            }\n          });\n        } else {\n          if (treeConfig) {\n            throw new Error(UtilTools.getLog('vxe.error.noTree', ['insert']));\n          }\n\n          var afIndex = afterFullData.indexOf(row);\n\n          if (afIndex === -1) {\n            throw new Error(UtilTools.error('vxe.error.unableInsert'));\n          }\n\n          afterFullData.splice.apply(afterFullData, [afIndex, 0].concat(_toConsumableArray(newRecords)));\n          tableFullData.splice.apply(tableFullData, [tableFullData.indexOf(row), 0].concat(_toConsumableArray(newRecords))); // 刷新单元格合并\n\n          mergeList.forEach(function (mergeItem) {\n            var mergeRowIndex = mergeItem.row,\n                mergeRowspan = mergeItem.rowspan;\n\n            if (mergeRowIndex > afIndex) {\n              mergeItem.row = mergeRowIndex + newRecords.length;\n            } else if (mergeRowIndex + mergeRowspan > afIndex) {\n              mergeItem.rowspan = mergeRowspan + newRecords.length;\n            }\n          });\n        }\n      }\n\n      (_editStore$insertList = editStore.insertList).unshift.apply(_editStore$insertList, _toConsumableArray(newRecords));\n\n      this.scrollYLoad = !treeConfig && sYOpts.gt > -1 && sYOpts.gt < tableFullData.length;\n      this.handleTableData();\n      this.updateFooter();\n      this.updateCache();\n      this.checkSelectionStatus();\n\n      if (scrollYLoad) {\n        this.updateScrollYSpace();\n      }\n\n      return this.$nextTick().then(function () {\n        _this.updateCellAreas();\n\n        return _this.recalculate();\n      }).then(function () {\n        return {\n          row: newRecords.length ? newRecords[newRecords.length - 1] : null,\n          rows: newRecords\n        };\n      });\n    },\n\n    /**\r\n     * 删除指定行数据\r\n     * 如果传 row 则删除一行\r\n     * 如果传 rows 则删除多行\r\n     * 如果为空则删除所有\r\n     */\n    _remove: function _remove(rows) {\n      var _this2 = this;\n\n      var afterFullData = this.afterFullData,\n          tableFullData = this.tableFullData,\n          treeConfig = this.treeConfig,\n          mergeList = this.mergeList,\n          editStore = this.editStore,\n          checkboxOpts = this.checkboxOpts,\n          selection = this.selection,\n          isInsertByRow = this.isInsertByRow,\n          sYOpts = this.sYOpts,\n          scrollYLoad = this.scrollYLoad;\n      var actived = editStore.actived,\n          removeList = editStore.removeList,\n          insertList = editStore.insertList;\n      var property = checkboxOpts.checkField;\n      var rest = [];\n\n      if (!rows) {\n        rows = tableFullData;\n      } else if (!XEUtils.isArray(rows)) {\n        rows = [rows];\n      } // 如果是新增，则保存记录\n\n\n      rows.forEach(function (row) {\n        if (!isInsertByRow(row)) {\n          removeList.push(row);\n        }\n      }); // 如果绑定了多选属性，则更新状态\n\n      if (!property) {\n        rows.forEach(function (row) {\n          var sIndex = selection.indexOf(row);\n\n          if (sIndex > -1) {\n            selection.splice(sIndex, 1);\n          }\n        });\n      } // 从数据源中移除\n\n\n      if (tableFullData === rows) {\n        rows = rest = tableFullData.slice(0);\n        this.tableFullData = [];\n        this.afterFullData = [];\n        this.clearMergeCells();\n      } else {\n        rows.forEach(function (row) {\n          var tfIndex = tableFullData.indexOf(row);\n\n          if (tfIndex > -1) {\n            var rItems = tableFullData.splice(tfIndex, 1);\n            rest.push(rItems[0]);\n          }\n\n          var afIndex = afterFullData.indexOf(row);\n\n          if (afIndex > -1) {\n            // 刷新单元格合并\n            mergeList.forEach(function (mergeItem) {\n              var mergeRowIndex = mergeItem.row,\n                  mergeRowspan = mergeItem.rowspan;\n\n              if (mergeRowIndex > afIndex) {\n                mergeItem.row = mergeRowIndex - 1;\n              } else if (mergeRowIndex + mergeRowspan > afIndex) {\n                mergeItem.rowspan = mergeRowspan - 1;\n              }\n            });\n            afterFullData.splice(afIndex, 1);\n          }\n        });\n      } // 如果当前行被激活编辑，则清除激活状态\n\n\n      if (actived.row && rows.indexOf(actived.row) > -1) {\n        this.clearActived();\n      } // 从新增中移除已删除的数据\n\n\n      rows.forEach(function (row) {\n        var iIndex = insertList.indexOf(row);\n\n        if (iIndex > -1) {\n          insertList.splice(iIndex, 1);\n        }\n      });\n      this.scrollYLoad = !treeConfig && sYOpts.gt > -1 && sYOpts.gt < tableFullData.length;\n      this.handleTableData();\n      this.updateFooter();\n      this.updateCache();\n      this.checkSelectionStatus();\n\n      if (scrollYLoad) {\n        this.updateScrollYSpace();\n      }\n\n      return this.$nextTick().then(function () {\n        _this2.updateCellAreas();\n\n        return _this2.recalculate();\n      }).then(function () {\n        return {\n          row: rest.length ? rest[rest.length - 1] : null,\n          rows: rest\n        };\n      });\n    },\n\n    /**\r\n     * 删除复选框选中的数据\r\n     */\n    _removeCheckboxRow: function _removeCheckboxRow() {\n      var _this3 = this;\n\n      return this.remove(this.getCheckboxRecords()).then(function (params) {\n        _this3.clearCheckboxRow();\n\n        return params;\n      });\n    },\n\n    /**\r\n     * 删除单选框选中的数据\r\n     */\n    _removeRadioRow: function _removeRadioRow() {\n      var _this4 = this;\n\n      var radioRecord = this.getRadioRecord();\n      return this.remove(radioRecord || []).then(function (params) {\n        _this4.clearRadioRow();\n\n        return params;\n      });\n    },\n\n    /**\r\n     * 删除当前行选中的数据\r\n     */\n    _removeCurrentRow: function _removeCurrentRow() {\n      var _this5 = this;\n\n      var currentRecord = this.getCurrentRecord();\n      return this.remove(currentRecord || []).then(function (params) {\n        _this5.clearCurrentRow();\n\n        return params;\n      });\n    },\n\n    /**\r\n     * 获取表格数据集，包含新增、删除、修改\r\n     */\n    _getRecordset: function _getRecordset() {\n      return {\n        insertRecords: this.getInsertRecords(),\n        removeRecords: this.getRemoveRecords(),\n        updateRecords: this.getUpdateRecords()\n      };\n    },\n\n    /**\r\n     * 获取新增的临时数据\r\n     */\n    _getInsertRecords: function _getInsertRecords() {\n      var insertList = this.editStore.insertList;\n      var insertRecords = [];\n\n      if (insertList.length) {\n        this.tableFullData.forEach(function (row) {\n          if (insertList.indexOf(row) > -1) {\n            insertRecords.push(row);\n          }\n        });\n      }\n\n      return insertRecords;\n    },\n\n    /**\r\n     * 获取已删除的数据\r\n     */\n    _getRemoveRecords: function _getRemoveRecords() {\n      return this.editStore.removeList;\n    },\n\n    /**\r\n     * 获取更新数据\r\n     * 只精准匹配 row 的更改\r\n     * 如果是树表格，子节点更改状态不会影响父节点的更新状态\r\n     */\n    _getUpdateRecords: function _getUpdateRecords() {\n      var keepSource = this.keepSource,\n          tableFullData = this.tableFullData,\n          isUpdateByRow = this.isUpdateByRow,\n          treeConfig = this.treeConfig,\n          treeOpts = this.treeOpts,\n          editStore = this.editStore;\n\n      if (keepSource) {\n        var actived = editStore.actived;\n        var row = actived.row,\n            column = actived.column;\n\n        if (row || column) {\n          this._syncActivedCell();\n        }\n\n        if (treeConfig) {\n          return XEUtils.filterTree(tableFullData, function (row) {\n            return isUpdateByRow(row);\n          }, treeOpts);\n        }\n\n        return tableFullData.filter(function (row) {\n          return isUpdateByRow(row);\n        });\n      }\n\n      return [];\n    },\n\n    /**\r\n     * 处理激活编辑\r\n     */\n    handleActived: function handleActived(params, evnt) {\n      var _this6 = this;\n\n      var editStore = this.editStore,\n          editOpts = this.editOpts,\n          tableColumn = this.tableColumn,\n          mouseConfig = this.mouseConfig;\n      var mode = editOpts.mode,\n          activeMethod = editOpts.activeMethod;\n      var actived = editStore.actived;\n      var row = params.row,\n          column = params.column;\n      var editRender = column.editRender;\n      var cell = params.cell = params.cell || this.getCell(row, column);\n\n      if (isEnableConf(editRender) && cell) {\n        if (actived.row !== row || (mode === 'cell' ? actived.column !== column : false)) {\n          // 判断是否禁用编辑\n          var type = 'edit-disabled';\n\n          if (!activeMethod || activeMethod(params)) {\n            if (mouseConfig) {\n              this.clearSelected(evnt);\n              this.clearCellAreas(evnt);\n              this.clearCopyCellArea(evnt);\n            }\n\n            this.closeTooltip();\n            this.clearActived(evnt);\n            type = 'edit-actived';\n            column.renderHeight = cell.offsetHeight;\n            actived.args = params;\n            actived.row = row;\n            actived.column = column;\n\n            if (mode === 'row') {\n              tableColumn.forEach(function (column) {\n                return _this6._getColumnModel(row, column);\n              });\n            } else {\n              this._getColumnModel(row, column);\n            }\n\n            this.$nextTick(function () {\n              _this6.handleFocus(params, evnt);\n            });\n          }\n\n          this.emitEvent(type, {\n            row: row,\n            rowIndex: this.getRowIndex(row),\n            $rowIndex: this.getVMRowIndex(row),\n            column: column,\n            columnIndex: this.getColumnIndex(column),\n            $columnIndex: this.getVMColumnIndex(column)\n          }, evnt);\n        } else {\n          var oldColumn = actived.column;\n\n          if (mouseConfig) {\n            this.clearSelected(evnt);\n            this.clearCellAreas(evnt);\n            this.clearCopyCellArea(evnt);\n          }\n\n          if (oldColumn !== column) {\n            var oldModel = oldColumn.model;\n\n            if (oldModel.update) {\n              UtilTools.setCellValue(row, oldColumn, oldModel.value);\n            }\n\n            this.clearValidate();\n          }\n\n          column.renderHeight = cell.offsetHeight;\n          actived.args = params;\n          actived.column = column;\n          setTimeout(function () {\n            _this6.handleFocus(params, evnt);\n          });\n        }\n\n        this.focus();\n      }\n\n      return this.$nextTick();\n    },\n    _getColumnModel: function _getColumnModel(row, column) {\n      var model = column.model,\n          editRender = column.editRender;\n\n      if (editRender) {\n        model.value = UtilTools.getCellValue(row, column);\n        model.update = false;\n      }\n    },\n    _setColumnModel: function _setColumnModel(row, column) {\n      var model = column.model,\n          editRender = column.editRender;\n\n      if (editRender && model.update) {\n        UtilTools.setCellValue(row, column, model.value);\n        model.update = false;\n        model.value = null;\n      }\n    },\n    _syncActivedCell: function _syncActivedCell() {\n      var _this7 = this;\n\n      var tableColumn = this.tableColumn,\n          editStore = this.editStore,\n          editOpts = this.editOpts;\n      var actived = editStore.actived;\n      var row = actived.row,\n          column = actived.column;\n\n      if (row || column) {\n        if (editOpts.mode === 'row') {\n          tableColumn.forEach(function (column) {\n            return _this7._setColumnModel(row, column);\n          });\n        } else {\n          this._setColumnModel(row, column);\n        }\n      }\n    },\n\n    /**\r\n     * 清除激活的编辑\r\n     */\n    _clearActived: function _clearActived(evnt) {\n      var editStore = this.editStore;\n      var actived = editStore.actived;\n      var row = actived.row,\n          column = actived.column;\n\n      if (row || column) {\n        this._syncActivedCell();\n\n        actived.args = null;\n        actived.row = null;\n        actived.column = null;\n        this.updateFooter();\n        this.emitEvent('edit-closed', {\n          row: row,\n          rowIndex: this.getRowIndex(row),\n          $rowIndex: this.getVMRowIndex(row),\n          column: column,\n          columnIndex: this.getColumnIndex(column),\n          $columnIndex: this.getVMColumnIndex(column)\n        }, evnt);\n      }\n\n      return (VXETable._valid ? this.clearValidate() : this.$nextTick()).then(this.recalculate);\n    },\n    _getActiveRecord: function _getActiveRecord() {\n      var $el = this.$el,\n          editStore = this.editStore,\n          afterFullData = this.afterFullData;\n      var actived = editStore.actived;\n      var args = actived.args,\n          row = actived.row;\n\n      if (args && afterFullData.indexOf(row) > -1 && $el.querySelectorAll('.vxe-body--column.col--actived').length) {\n        return Object.assign({}, args);\n      }\n\n      return null;\n    },\n\n    /**\r\n     * 判断行是否为激活编辑状态\r\n     * @param {Row} row 行对象\r\n     */\n    _isActiveByRow: function _isActiveByRow(row) {\n      return this.editStore.actived.row === row;\n    },\n\n    /**\r\n     * 处理聚焦\r\n     */\n    handleFocus: function handleFocus(params) {\n      var row = params.row,\n          column = params.column,\n          cell = params.cell;\n      var editRender = column.editRender;\n\n      if (isEnableConf(editRender)) {\n        var compRender = VXETable.renderer.get(editRender.name);\n        var autofocus = editRender.autofocus,\n            autoselect = editRender.autoselect;\n        var inputElem; // 如果指定了聚焦 class\n\n        if (autofocus) {\n          inputElem = cell.querySelector(autofocus);\n        } // 渲染器的聚焦处理\n\n\n        if (!inputElem && compRender && compRender.autofocus) {\n          inputElem = cell.querySelector(compRender.autofocus);\n        }\n\n        if (inputElem) {\n          inputElem.focus();\n\n          if (autoselect) {\n            inputElem.select();\n          } else {\n            // 保持一致行为，光标移到末端\n            if (browse.msie) {\n              var textRange = inputElem.createTextRange();\n              textRange.collapse(false);\n              textRange.select();\n            }\n          }\n        } else {\n          // 显示到可视区中\n          this.scrollToRow(row, column);\n        }\n      }\n    },\n\n    /**\r\n     * 激活行编辑\r\n     */\n    _setActiveRow: function _setActiveRow(row) {\n      return this.setActiveCell(row, XEUtils.find(this.visibleColumn, function (column) {\n        return isEnableConf(column.editRender);\n      }));\n    },\n\n    /**\r\n     * 激活单元格编辑\r\n     */\n    _setActiveCell: function _setActiveCell(row, fieldOrColumn) {\n      var _this8 = this;\n\n      var column = XEUtils.isString(fieldOrColumn) ? this.getColumnByField(fieldOrColumn) : fieldOrColumn;\n\n      if (row && column && isEnableConf(column.editRender)) {\n        return this.scrollToRow(row, true).then(function () {\n          var cell = _this8.getCell(row, column);\n\n          if (cell) {\n            _this8.handleActived({\n              row: row,\n              rowIndex: _this8.getRowIndex(row),\n              column: column,\n              columnIndex: _this8.getColumnIndex(column),\n              cell: cell,\n              $table: _this8\n            });\n\n            _this8.lastCallTime = Date.now();\n          }\n        });\n      }\n\n      return this.$nextTick();\n    },\n\n    /**\r\n     * 只对 trigger=dblclick 有效，选中单元格\r\n     */\n    _setSelectCell: function _setSelectCell(row, fieldOrColumn) {\n      var tableData = this.tableData,\n          editOpts = this.editOpts,\n          visibleColumn = this.visibleColumn;\n      var column = XEUtils.isString(fieldOrColumn) ? this.getColumnByField(fieldOrColumn) : fieldOrColumn;\n\n      if (row && column && editOpts.trigger !== 'manual') {\n        var rowIndex = tableData.indexOf(row);\n\n        if (rowIndex > -1) {\n          var cell = this.getCell(row, column);\n          var params = {\n            row: row,\n            rowIndex: rowIndex,\n            column: column,\n            columnIndex: visibleColumn.indexOf(column),\n            cell: cell\n          };\n          this.handleSelected(params, {});\n        }\n      }\n\n      return this.$nextTick();\n    },\n\n    /**\r\n     * 处理选中源\r\n     */\n    handleSelected: function handleSelected(params, evnt) {\n      var _this9 = this;\n\n      var mouseConfig = this.mouseConfig,\n          mouseOpts = this.mouseOpts,\n          editOpts = this.editOpts,\n          editStore = this.editStore;\n      var actived = editStore.actived,\n          selected = editStore.selected;\n      var row = params.row,\n          column = params.column;\n      var isMouseSelected = mouseConfig && mouseOpts.selected;\n\n      var selectMethod = function selectMethod() {\n        if (isMouseSelected && (selected.row !== row || selected.column !== column)) {\n          if (actived.row !== row || (editOpts.mode === 'cell' ? actived.column !== column : false)) {\n            _this9.clearActived(evnt);\n\n            _this9.clearSelected(evnt);\n\n            _this9.clearCellAreas(evnt);\n\n            _this9.clearCopyCellArea(evnt);\n\n            selected.args = params;\n            selected.row = row;\n            selected.column = column;\n\n            if (isMouseSelected) {\n              _this9.addColSdCls();\n            }\n\n            _this9.focus();\n\n            if (evnt) {\n              _this9.emitEvent('cell-selected', params, evnt);\n            }\n          }\n        }\n\n        return _this9.$nextTick();\n      };\n\n      return selectMethod();\n    },\n\n    /**\r\n     * 获取选中的单元格\r\n     */\n    _getSelectedCell: function _getSelectedCell() {\n      var _this$editStore$selec = this.editStore.selected,\n          args = _this$editStore$selec.args,\n          column = _this$editStore$selec.column;\n\n      if (args && column) {\n        return Object.assign({}, args);\n      }\n\n      return null;\n    },\n\n    /**\r\n     * 清除所选中源状态\r\n     */\n    _clearSelected: function _clearSelected() {\n      var selected = this.editStore.selected;\n      selected.row = null;\n      selected.column = null;\n      this.reColTitleSdCls();\n      this.reColSdCls();\n      return this.$nextTick();\n    },\n    reColTitleSdCls: function reColTitleSdCls() {\n      var headerElem = this.elemStore['main-header-list'];\n\n      if (headerElem) {\n        XEUtils.arrayEach(headerElem.querySelectorAll('.col--title-selected'), function (elem) {\n          return DomTools.removeClass(elem, 'col--title-selected');\n        });\n      }\n    },\n    reColSdCls: function reColSdCls() {\n      var cell = this.$el.querySelector('.col--selected');\n\n      if (cell) {\n        DomTools.removeClass(cell, 'col--selected');\n      }\n    },\n    addColSdCls: function addColSdCls() {\n      var selected = this.editStore.selected;\n      var row = selected.row,\n          column = selected.column;\n      this.reColSdCls();\n\n      if (row && column) {\n        var cell = this.getCell(row, column);\n\n        if (cell) {\n          DomTools.addClass(cell, 'col--selected');\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\edit\\src\\mixin.js"],"names":["methods","_insert","_insertAt","mergeList","afterFullData","editStore","sYOpts","scrollYLoad","tableFullData","treeConfig","XEUtils","records","newRecords","Object","mergeRowIndex","mergeItem","row","mergeRowspan","UtilTools","afIndex","rows","_remove","checkboxOpts","selection","isInsertByRow","actived","removeList","insertList","property","rest","sIndex","tfIndex","rItems","iIndex","_removeCheckboxRow","_removeRadioRow","radioRecord","_removeCurrentRow","currentRecord","_getRecordset","insertRecords","removeRecords","updateRecords","_getInsertRecords","_getRemoveRecords","_getUpdateRecords","keepSource","isUpdateByRow","treeOpts","column","handleActived","editOpts","tableColumn","mouseConfig","mode","activeMethod","params","editRender","cell","isEnableConf","type","rowIndex","$rowIndex","columnIndex","$columnIndex","oldColumn","oldModel","setTimeout","_getColumnModel","model","_setColumnModel","_syncActivedCell","_clearActived","VXETable","_getActiveRecord","$el","args","_isActiveByRow","handleFocus","compRender","autofocus","autoselect","inputElem","browse","textRange","_setActiveRow","_setActiveCell","$table","Date","_setSelectCell","tableData","visibleColumn","handleSelected","mouseOpts","selected","isMouseSelected","selectMethod","_getSelectedCell","_clearSelected","reColTitleSdCls","headerElem","DomTools","reColSdCls","addColSdCls"],"mappings":"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","sourcesContent":["import XEUtils from 'xe-utils'\r\nimport VXETable from '../../v-x-e-table'\r\nimport { UtilTools, DomTools, isEnableConf } from '../../tools'\r\nimport { browse } from '../../tools/src/dom'\r\n\r\nexport default {\r\n  methods: {\r\n    /**\r\n     * 往表格中插入临时数据\r\n     *\r\n     * @param {*} records\r\n     */\r\n    _insert (records) {\r\n      return this.insertAt(records)\r\n    },\r\n    /**\r\n     * 往表格指定行中插入临时数据\r\n     * 如果 row 为空则从插入到顶部\r\n     * 如果 row 为 -1 则从插入到底部\r\n     * 如果 row 为有效行则插入到该行的位置\r\n     * @param {Object/Array} records 新的数据\r\n     * @param {Row} row 指定行\r\n     */\r\n    _insertAt (records, row) {\r\n      const { mergeList, afterFullData, editStore, sYOpts, scrollYLoad, tableFullData, treeConfig } = this\r\n      if (!XEUtils.isArray(records)) {\r\n        records = [records]\r\n      }\r\n      const newRecords = records.map(record => this.defineField(Object.assign({}, record)))\r\n      if (!row) {\r\n        afterFullData.unshift(...newRecords)\r\n        tableFullData.unshift(...newRecords)\r\n        // 刷新单元格合并\r\n        mergeList.forEach(mergeItem => {\r\n          const { row: mergeRowIndex } = mergeItem\r\n          if (mergeRowIndex > 0) {\r\n            mergeItem.row = mergeRowIndex + newRecords.length\r\n          }\r\n        })\r\n      } else {\r\n        if (row === -1) {\r\n          afterFullData.push(...newRecords)\r\n          tableFullData.push(...newRecords)\r\n          // 刷新单元格合并\r\n          mergeList.forEach(mergeItem => {\r\n            const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem\r\n            if (mergeRowIndex + mergeRowspan > afterFullData.length) {\r\n              mergeItem.rowspan = mergeRowspan + newRecords.length\r\n            }\r\n          })\r\n        } else {\r\n          if (treeConfig) {\r\n            throw new Error(UtilTools.getLog('vxe.error.noTree', ['insert']))\r\n          }\r\n          const afIndex = afterFullData.indexOf(row)\r\n          if (afIndex === -1) {\r\n            throw new Error(UtilTools.error('vxe.error.unableInsert'))\r\n          }\r\n          afterFullData.splice(afIndex, 0, ...newRecords)\r\n          tableFullData.splice(tableFullData.indexOf(row), 0, ...newRecords)\r\n          // 刷新单元格合并\r\n          mergeList.forEach(mergeItem => {\r\n            const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem\r\n            if (mergeRowIndex > afIndex) {\r\n              mergeItem.row = mergeRowIndex + newRecords.length\r\n            } else if (mergeRowIndex + mergeRowspan > afIndex) {\r\n              mergeItem.rowspan = mergeRowspan + newRecords.length\r\n            }\r\n          })\r\n        }\r\n      }\r\n      editStore.insertList.unshift(...newRecords)\r\n      this.scrollYLoad = !treeConfig && sYOpts.gt > -1 && sYOpts.gt < tableFullData.length\r\n      this.handleTableData()\r\n      this.updateFooter()\r\n      this.updateCache()\r\n      this.checkSelectionStatus()\r\n      if (scrollYLoad) {\r\n        this.updateScrollYSpace()\r\n      }\r\n      return this.$nextTick().then(() => {\r\n        this.updateCellAreas()\r\n        return this.recalculate()\r\n      }).then(() => {\r\n        return {\r\n          row: newRecords.length ? newRecords[newRecords.length - 1] : null,\r\n          rows: newRecords\r\n        }\r\n      })\r\n    },\r\n    /**\r\n     * 删除指定行数据\r\n     * 如果传 row 则删除一行\r\n     * 如果传 rows 则删除多行\r\n     * 如果为空则删除所有\r\n     */\r\n    _remove (rows) {\r\n      const { afterFullData, tableFullData, treeConfig, mergeList, editStore, checkboxOpts, selection, isInsertByRow, sYOpts, scrollYLoad } = this\r\n      const { actived, removeList, insertList } = editStore\r\n      const { checkField: property } = checkboxOpts\r\n      let rest = []\r\n      if (!rows) {\r\n        rows = tableFullData\r\n      } else if (!XEUtils.isArray(rows)) {\r\n        rows = [rows]\r\n      }\r\n      // 如果是新增，则保存记录\r\n      rows.forEach(row => {\r\n        if (!isInsertByRow(row)) {\r\n          removeList.push(row)\r\n        }\r\n      })\r\n      // 如果绑定了多选属性，则更新状态\r\n      if (!property) {\r\n        rows.forEach(row => {\r\n          const sIndex = selection.indexOf(row)\r\n          if (sIndex > -1) {\r\n            selection.splice(sIndex, 1)\r\n          }\r\n        })\r\n      }\r\n      // 从数据源中移除\r\n      if (tableFullData === rows) {\r\n        rows = rest = tableFullData.slice(0)\r\n        this.tableFullData = []\r\n        this.afterFullData = []\r\n        this.clearMergeCells()\r\n      } else {\r\n        rows.forEach(row => {\r\n          const tfIndex = tableFullData.indexOf(row)\r\n          if (tfIndex > -1) {\r\n            const rItems = tableFullData.splice(tfIndex, 1)\r\n            rest.push(rItems[0])\r\n          }\r\n          const afIndex = afterFullData.indexOf(row)\r\n          if (afIndex > -1) {\r\n            // 刷新单元格合并\r\n            mergeList.forEach(mergeItem => {\r\n              const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem\r\n              if (mergeRowIndex > afIndex) {\r\n                mergeItem.row = mergeRowIndex - 1\r\n              } else if (mergeRowIndex + mergeRowspan > afIndex) {\r\n                mergeItem.rowspan = mergeRowspan - 1\r\n              }\r\n            })\r\n            afterFullData.splice(afIndex, 1)\r\n          }\r\n        })\r\n      }\r\n      // 如果当前行被激活编辑，则清除激活状态\r\n      if (actived.row && rows.indexOf(actived.row) > -1) {\r\n        this.clearActived()\r\n      }\r\n      // 从新增中移除已删除的数据\r\n      rows.forEach(row => {\r\n        const iIndex = insertList.indexOf(row)\r\n        if (iIndex > -1) {\r\n          insertList.splice(iIndex, 1)\r\n        }\r\n      })\r\n      this.scrollYLoad = !treeConfig && sYOpts.gt > -1 && sYOpts.gt < tableFullData.length\r\n      this.handleTableData()\r\n      this.updateFooter()\r\n      this.updateCache()\r\n      this.checkSelectionStatus()\r\n      if (scrollYLoad) {\r\n        this.updateScrollYSpace()\r\n      }\r\n      return this.$nextTick().then(() => {\r\n        this.updateCellAreas()\r\n        return this.recalculate()\r\n      }).then(() => {\r\n        return { row: rest.length ? rest[rest.length - 1] : null, rows: rest }\r\n      })\r\n    },\r\n    /**\r\n     * 删除复选框选中的数据\r\n     */\r\n    _removeCheckboxRow () {\r\n      return this.remove(this.getCheckboxRecords()).then(params => {\r\n        this.clearCheckboxRow()\r\n        return params\r\n      })\r\n    },\r\n    /**\r\n     * 删除单选框选中的数据\r\n     */\r\n    _removeRadioRow () {\r\n      const radioRecord = this.getRadioRecord()\r\n      return this.remove(radioRecord || []).then(params => {\r\n        this.clearRadioRow()\r\n        return params\r\n      })\r\n    },\r\n    /**\r\n     * 删除当前行选中的数据\r\n     */\r\n    _removeCurrentRow () {\r\n      const currentRecord = this.getCurrentRecord()\r\n      return this.remove(currentRecord || []).then(params => {\r\n        this.clearCurrentRow()\r\n        return params\r\n      })\r\n    },\r\n    /**\r\n     * 获取表格数据集，包含新增、删除、修改\r\n     */\r\n    _getRecordset () {\r\n      return {\r\n        insertRecords: this.getInsertRecords(),\r\n        removeRecords: this.getRemoveRecords(),\r\n        updateRecords: this.getUpdateRecords()\r\n      }\r\n    },\r\n    /**\r\n     * 获取新增的临时数据\r\n     */\r\n    _getInsertRecords () {\r\n      const insertList = this.editStore.insertList\r\n      const insertRecords = []\r\n      if (insertList.length) {\r\n        this.tableFullData.forEach(row => {\r\n          if (insertList.indexOf(row) > -1) {\r\n            insertRecords.push(row)\r\n          }\r\n        })\r\n      }\r\n      return insertRecords\r\n    },\r\n    /**\r\n     * 获取已删除的数据\r\n     */\r\n    _getRemoveRecords () {\r\n      return this.editStore.removeList\r\n    },\r\n    /**\r\n     * 获取更新数据\r\n     * 只精准匹配 row 的更改\r\n     * 如果是树表格，子节点更改状态不会影响父节点的更新状态\r\n     */\r\n    _getUpdateRecords () {\r\n      const { keepSource, tableFullData, isUpdateByRow, treeConfig, treeOpts, editStore } = this\r\n      if (keepSource) {\r\n        const { actived } = editStore\r\n        const { row, column } = actived\r\n        if (row || column) {\r\n          this._syncActivedCell()\r\n        }\r\n        if (treeConfig) {\r\n          return XEUtils.filterTree(tableFullData, row => isUpdateByRow(row), treeOpts)\r\n        }\r\n        return tableFullData.filter(row => isUpdateByRow(row))\r\n      }\r\n      return []\r\n    },\r\n    /**\r\n     * 处理激活编辑\r\n     */\r\n    handleActived (params, evnt) {\r\n      const { editStore, editOpts, tableColumn, mouseConfig } = this\r\n      const { mode, activeMethod } = editOpts\r\n      const { actived } = editStore\r\n      const { row, column } = params\r\n      const { editRender } = column\r\n      const cell = params.cell = (params.cell || this.getCell(row, column))\r\n      if (isEnableConf(editRender) && cell) {\r\n        if (actived.row !== row || (mode === 'cell' ? actived.column !== column : false)) {\r\n          // 判断是否禁用编辑\r\n          let type = 'edit-disabled'\r\n          if (!activeMethod || activeMethod(params)) {\r\n            if (mouseConfig) {\r\n              this.clearSelected(evnt)\r\n              this.clearCellAreas(evnt)\r\n              this.clearCopyCellArea(evnt)\r\n            }\r\n            this.closeTooltip()\r\n            this.clearActived(evnt)\r\n            type = 'edit-actived'\r\n            column.renderHeight = cell.offsetHeight\r\n            actived.args = params\r\n            actived.row = row\r\n            actived.column = column\r\n            if (mode === 'row') {\r\n              tableColumn.forEach(column => this._getColumnModel(row, column))\r\n            } else {\r\n              this._getColumnModel(row, column)\r\n            }\r\n            this.$nextTick(() => {\r\n              this.handleFocus(params, evnt)\r\n            })\r\n          }\r\n          this.emitEvent(type, {\r\n            row,\r\n            rowIndex: this.getRowIndex(row),\r\n            $rowIndex: this.getVMRowIndex(row),\r\n            column,\r\n            columnIndex: this.getColumnIndex(column),\r\n            $columnIndex: this.getVMColumnIndex(column)\r\n          }, evnt)\r\n        } else {\r\n          const { column: oldColumn } = actived\r\n          if (mouseConfig) {\r\n            this.clearSelected(evnt)\r\n            this.clearCellAreas(evnt)\r\n            this.clearCopyCellArea(evnt)\r\n          }\r\n          if (oldColumn !== column) {\r\n            const { model: oldModel } = oldColumn\r\n            if (oldModel.update) {\r\n              UtilTools.setCellValue(row, oldColumn, oldModel.value)\r\n            }\r\n            this.clearValidate()\r\n          }\r\n          column.renderHeight = cell.offsetHeight\r\n          actived.args = params\r\n          actived.column = column\r\n          setTimeout(() => {\r\n            this.handleFocus(params, evnt)\r\n          })\r\n        }\r\n        this.focus()\r\n      }\r\n      return this.$nextTick()\r\n    },\r\n    _getColumnModel (row, column) {\r\n      const { model, editRender } = column\r\n      if (editRender) {\r\n        model.value = UtilTools.getCellValue(row, column)\r\n        model.update = false\r\n      }\r\n    },\r\n    _setColumnModel (row, column) {\r\n      const { model, editRender } = column\r\n      if (editRender && model.update) {\r\n        UtilTools.setCellValue(row, column, model.value)\r\n        model.update = false\r\n        model.value = null\r\n      }\r\n    },\r\n    _syncActivedCell () {\r\n      const { tableColumn, editStore, editOpts } = this\r\n      const { actived } = editStore\r\n      const { row, column } = actived\r\n      if (row || column) {\r\n        if (editOpts.mode === 'row') {\r\n          tableColumn.forEach(column => this._setColumnModel(row, column))\r\n        } else {\r\n          this._setColumnModel(row, column)\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * 清除激活的编辑\r\n     */\r\n    _clearActived (evnt) {\r\n      const { editStore } = this\r\n      const { actived } = editStore\r\n      const { row, column } = actived\r\n      if (row || column) {\r\n        this._syncActivedCell()\r\n        actived.args = null\r\n        actived.row = null\r\n        actived.column = null\r\n        this.updateFooter()\r\n        this.emitEvent('edit-closed', {\r\n          row,\r\n          rowIndex: this.getRowIndex(row),\r\n          $rowIndex: this.getVMRowIndex(row),\r\n          column,\r\n          columnIndex: this.getColumnIndex(column),\r\n          $columnIndex: this.getVMColumnIndex(column)\r\n        }, evnt)\r\n      }\r\n      return (VXETable._valid ? this.clearValidate() : this.$nextTick()).then(this.recalculate)\r\n    },\r\n    _getActiveRecord () {\r\n      const { $el, editStore, afterFullData } = this\r\n      const { actived } = editStore\r\n      const { args, row } = actived\r\n      if (args && afterFullData.indexOf(row) > -1 && $el.querySelectorAll('.vxe-body--column.col--actived').length) {\r\n        return Object.assign({}, args)\r\n      }\r\n      return null\r\n    },\r\n    /**\r\n     * 判断行是否为激活编辑状态\r\n     * @param {Row} row 行对象\r\n     */\r\n    _isActiveByRow (row) {\r\n      return this.editStore.actived.row === row\r\n    },\r\n    /**\r\n     * 处理聚焦\r\n     */\r\n    handleFocus (params) {\r\n      const { row, column, cell } = params\r\n      const { editRender } = column\r\n      if (isEnableConf(editRender)) {\r\n        const compRender = VXETable.renderer.get(editRender.name)\r\n        const { autofocus, autoselect } = editRender\r\n        let inputElem\r\n        // 如果指定了聚焦 class\r\n        if (autofocus) {\r\n          inputElem = cell.querySelector(autofocus)\r\n        }\r\n        // 渲染器的聚焦处理\r\n        if (!inputElem && compRender && compRender.autofocus) {\r\n          inputElem = cell.querySelector(compRender.autofocus)\r\n        }\r\n        if (inputElem) {\r\n          inputElem.focus()\r\n          if (autoselect) {\r\n            inputElem.select()\r\n          } else {\r\n            // 保持一致行为，光标移到末端\r\n            if (browse.msie) {\r\n              const textRange = inputElem.createTextRange()\r\n              textRange.collapse(false)\r\n              textRange.select()\r\n            }\r\n          }\r\n        } else {\r\n          // 显示到可视区中\r\n          this.scrollToRow(row, column)\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * 激活行编辑\r\n     */\r\n    _setActiveRow (row) {\r\n      return this.setActiveCell(row, XEUtils.find(this.visibleColumn, column => isEnableConf(column.editRender)))\r\n    },\r\n    /**\r\n     * 激活单元格编辑\r\n     */\r\n    _setActiveCell (row, fieldOrColumn) {\r\n      const column = XEUtils.isString(fieldOrColumn) ? this.getColumnByField(fieldOrColumn) : fieldOrColumn\r\n      if (row && column && isEnableConf(column.editRender)) {\r\n        return this.scrollToRow(row, true).then(() => {\r\n          const cell = this.getCell(row, column)\r\n          if (cell) {\r\n            this.handleActived({ row, rowIndex: this.getRowIndex(row), column, columnIndex: this.getColumnIndex(column), cell, $table: this })\r\n            this.lastCallTime = Date.now()\r\n          }\r\n        })\r\n      }\r\n      return this.$nextTick()\r\n    },\r\n    /**\r\n     * 只对 trigger=dblclick 有效，选中单元格\r\n     */\r\n    _setSelectCell (row, fieldOrColumn) {\r\n      const { tableData, editOpts, visibleColumn } = this\r\n      const column = XEUtils.isString(fieldOrColumn) ? this.getColumnByField(fieldOrColumn) : fieldOrColumn\r\n      if (row && column && editOpts.trigger !== 'manual') {\r\n        const rowIndex = tableData.indexOf(row)\r\n        if (rowIndex > -1) {\r\n          const cell = this.getCell(row, column)\r\n          const params = { row, rowIndex, column, columnIndex: visibleColumn.indexOf(column), cell }\r\n          this.handleSelected(params, {})\r\n        }\r\n      }\r\n      return this.$nextTick()\r\n    },\r\n    /**\r\n     * 处理选中源\r\n     */\r\n    handleSelected (params, evnt) {\r\n      const { mouseConfig, mouseOpts, editOpts, editStore } = this\r\n      const { actived, selected } = editStore\r\n      const { row, column } = params\r\n      const isMouseSelected = mouseConfig && mouseOpts.selected\r\n      const selectMethod = () => {\r\n        if (isMouseSelected && (selected.row !== row || selected.column !== column)) {\r\n          if (actived.row !== row || (editOpts.mode === 'cell' ? actived.column !== column : false)) {\r\n            this.clearActived(evnt)\r\n            this.clearSelected(evnt)\r\n            this.clearCellAreas(evnt)\r\n            this.clearCopyCellArea(evnt)\r\n            selected.args = params\r\n            selected.row = row\r\n            selected.column = column\r\n            if (isMouseSelected) {\r\n              this.addColSdCls()\r\n            }\r\n            this.focus()\r\n            if (evnt) {\r\n              this.emitEvent('cell-selected', params, evnt)\r\n            }\r\n          }\r\n        }\r\n        return this.$nextTick()\r\n      }\r\n      return selectMethod()\r\n    },\r\n    /**\r\n     * 获取选中的单元格\r\n     */\r\n    _getSelectedCell () {\r\n      const { args, column } = this.editStore.selected\r\n      if (args && column) {\r\n        return Object.assign({}, args)\r\n      }\r\n      return null\r\n    },\r\n    /**\r\n     * 清除所选中源状态\r\n     */\r\n    _clearSelected () {\r\n      const { selected } = this.editStore\r\n      selected.row = null\r\n      selected.column = null\r\n      this.reColTitleSdCls()\r\n      this.reColSdCls()\r\n      return this.$nextTick()\r\n    },\r\n    reColTitleSdCls () {\r\n      const headerElem = this.elemStore['main-header-list']\r\n      if (headerElem) {\r\n        XEUtils.arrayEach(headerElem.querySelectorAll('.col--title-selected'), elem => DomTools.removeClass(elem, 'col--title-selected'))\r\n      }\r\n    },\r\n    reColSdCls () {\r\n      const cell = this.$el.querySelector('.col--selected')\r\n      if (cell) {\r\n        DomTools.removeClass(cell, 'col--selected')\r\n      }\r\n    },\r\n    addColSdCls () {\r\n      const { selected } = this.editStore\r\n      const { row, column } = selected\r\n      this.reColSdCls()\r\n      if (row && column) {\r\n        const cell = this.getCell(row, column)\r\n        if (cell) {\r\n          DomTools.addClass(cell, 'col--selected')\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}]}