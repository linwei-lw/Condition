{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\header\\src\\header.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\header\\src\\header.js","mtime":1647229117814},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.fixed\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.string.fixed\";\nimport XEUtils from 'xe-utils';\nimport { UtilTools, DomTools } from \"../../tools\";\nimport { convertToRows } from \"./util\";\nimport { getColMinWidth } from \"../../table/src/util\";\nvar cellType = 'header';\nexport default {\n  name: 'VxeTableHeader',\n  props: {\n    tableData: Array,\n    tableColumn: Array,\n    tableGroupColumn: Array,\n    fixedColumn: Array,\n    size: String,\n    fixedType: String\n  },\n  data: function data() {\n    return {\n      headerColumn: []\n    };\n  },\n  watch: {\n    tableColumn: function tableColumn() {\n      this.uploadColumn();\n    }\n  },\n  created: function created() {\n    this.uploadColumn();\n  },\n  mounted: function mounted() {\n    var $xetable = this.$parent,\n        $el = this.$el,\n        $refs = this.$refs,\n        fixedType = this.fixedType;\n    var elemStore = $xetable.elemStore;\n    var prefix = \"\".concat(fixedType || 'main', \"-header-\");\n    elemStore[\"\".concat(prefix, \"wrapper\")] = $el;\n    elemStore[\"\".concat(prefix, \"table\")] = $refs.table;\n    elemStore[\"\".concat(prefix, \"colgroup\")] = $refs.colgroup;\n    elemStore[\"\".concat(prefix, \"list\")] = $refs.thead;\n    elemStore[\"\".concat(prefix, \"xSpace\")] = $refs.xSpace;\n    elemStore[\"\".concat(prefix, \"repair\")] = $refs.repair;\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var _e = this._e,\n        $xetable = this.$parent,\n        fixedType = this.fixedType,\n        headerColumn = this.headerColumn,\n        fixedColumn = this.fixedColumn;\n    var tableListeners = $xetable.$listeners,\n        tId = $xetable.tId,\n        isGroup = $xetable.isGroup,\n        resizable = $xetable.resizable,\n        border = $xetable.border,\n        columnKey = $xetable.columnKey,\n        headerRowClassName = $xetable.headerRowClassName,\n        headerCellClassName = $xetable.headerCellClassName,\n        headerRowStyle = $xetable.headerRowStyle,\n        headerCellStyle = $xetable.headerCellStyle,\n        allColumnHeaderOverflow = $xetable.showHeaderOverflow,\n        allHeaderAlign = $xetable.headerAlign,\n        allAlign = $xetable.align,\n        highlightCurrentColumn = $xetable.highlightCurrentColumn,\n        currentColumn = $xetable.currentColumn,\n        scrollXLoad = $xetable.scrollXLoad,\n        overflowX = $xetable.overflowX,\n        scrollbarWidth = $xetable.scrollbarWidth,\n        sortOpts = $xetable.sortOpts,\n        mouseConfig = $xetable.mouseConfig;\n    var tableColumn = this.tableColumn;\n    var headerGroups = headerColumn; // 如果是使用优化模式\n\n    if (!isGroup) {\n      if (fixedType) {\n        if (scrollXLoad || allColumnHeaderOverflow) {\n          tableColumn = fixedColumn;\n        }\n      }\n\n      headerGroups = [tableColumn];\n    }\n\n    return h('div', {\n      class: ['vxe-table--header-wrapper', fixedType ? \"fixed-\".concat(fixedType, \"--wrapper\") : 'body--wrapper'],\n      attrs: {\n        xid: tId\n      }\n    }, [fixedType ? _e() : h('div', {\n      class: 'vxe-body--x-space',\n      ref: 'xSpace'\n    }), h('table', {\n      class: 'vxe-table--header',\n      attrs: {\n        xid: tId,\n        cellspacing: 0,\n        cellpadding: 0,\n        border: 0\n      },\n      ref: 'table'\n    }, [\n    /**\r\n     * 列宽\r\n     */\n    h('colgroup', {\n      ref: 'colgroup'\n    }, tableColumn.map(function (column, $columnIndex) {\n      return h('col', {\n        attrs: {\n          name: column.id\n        },\n        key: $columnIndex\n      });\n    }).concat(scrollbarWidth ? [h('col', {\n      attrs: {\n        name: 'col_gutter'\n      }\n    })] : [])),\n    /**\r\n     * 头部\r\n     */\n    h('thead', {\n      ref: 'thead'\n    }, headerGroups.map(function (cols, $rowIndex) {\n      return h('tr', {\n        class: ['vxe-header--row', headerRowClassName ? XEUtils.isFunction(headerRowClassName) ? headerRowClassName({\n          $table: $xetable,\n          $rowIndex: $rowIndex,\n          fixed: fixedType,\n          type: cellType\n        }) : headerRowClassName : ''],\n        style: headerRowStyle ? XEUtils.isFunction(headerRowStyle) ? headerRowStyle({\n          $table: $xetable,\n          $rowIndex: $rowIndex,\n          fixed: fixedType,\n          type: cellType\n        }) : headerRowStyle : null\n      }, cols.map(function (column, $columnIndex) {\n        var _ref;\n\n        var type = column.type,\n            showHeaderOverflow = column.showHeaderOverflow,\n            headerAlign = column.headerAlign,\n            align = column.align,\n            headerClassName = column.headerClassName; // const { enabled } = tooltipOpts\n\n        var isColGroup = column.children && column.children.length;\n        var fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX;\n        var headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n        var headAlign = headerAlign || align || allHeaderAlign || allAlign;\n        var showEllipsis = headOverflow === 'ellipsis';\n        var showTitle = headOverflow === 'title';\n        var showTooltip = headOverflow === true || headOverflow === 'tooltip';\n        var hasEllipsis = showTitle || showTooltip || showEllipsis;\n        var thOns = {};\n        var hasFilter = column.filters && column.filters.some(function (item) {\n          return item.checked;\n        });\n        var columnIndex = $xetable.getColumnIndex(column);\n\n        var _columnIndex = $xetable.getVTColumnIndex(column);\n\n        var params = {\n          $table: $xetable,\n          $rowIndex: $rowIndex,\n          column: column,\n          columnIndex: columnIndex,\n          $columnIndex: $columnIndex,\n          _columnIndex: _columnIndex,\n          fixed: fixedType,\n          type: cellType,\n          isHidden: fixedHiddenColumn,\n          hasFilter: hasFilter // 虚拟滚动不支持动态高度\n\n        };\n\n        if (scrollXLoad && !hasEllipsis) {\n          showEllipsis = hasEllipsis = true;\n        }\n\n        if (highlightCurrentColumn || tableListeners['header-cell-click'] || sortOpts.trigger === 'cell') {\n          thOns.click = function (evnt) {\n            return $xetable.triggerHeaderCellClickEvent(evnt, params);\n          };\n        }\n\n        if (tableListeners['header-cell-dblclick']) {\n          thOns.dblclick = function (evnt) {\n            return $xetable.triggerHeaderCellDblclickEvent(evnt, params);\n          };\n        } // 按下事件处理\n\n\n        if (mouseConfig) {\n          thOns.mousedown = function (evnt) {\n            return $xetable.triggerHeaderCellMousedownEvent(evnt, params);\n          };\n        }\n\n        return h('th', {\n          class: ['vxe-header--column', column.id, (_ref = {}, _defineProperty(_ref, \"col--\".concat(headAlign), headAlign), _defineProperty(_ref, \"col--\".concat(type), type), _defineProperty(_ref, 'col--last', $columnIndex === cols.length - 1), _defineProperty(_ref, 'col--fixed', column.fixed), _defineProperty(_ref, 'col--group', isColGroup), _defineProperty(_ref, 'col--ellipsis', hasEllipsis), _defineProperty(_ref, 'fixed--hidden', fixedHiddenColumn), _defineProperty(_ref, 'is--sortable', column.sortable), _defineProperty(_ref, 'is--filter', !!column.filters), _defineProperty(_ref, 'filter--active', hasFilter), _defineProperty(_ref, 'col--current', currentColumn === column), _ref), UtilTools.getClass(headerClassName, params), UtilTools.getClass(headerCellClassName, params)],\n          attrs: {\n            colid: column.id,\n            colspan: column.colSpan > 1 ? column.colSpan : null,\n            rowspan: column.rowSpan > 1 ? column.rowSpan : null\n          },\n          style: headerCellStyle ? XEUtils.isFunction(headerCellStyle) ? headerCellStyle(params) : headerCellStyle : null,\n          on: thOns,\n          key: columnKey || isColGroup ? column.id : $columnIndex\n        }, [h('div', {\n          class: ['vxe-cell', {\n            'c--title': showTitle,\n            'c--tooltip': showTooltip,\n            'c--ellipsis': showEllipsis\n          }]\n        }, column.renderHeader(h, params)),\n        /**\r\n         * 列宽拖动\r\n         */\n        !fixedHiddenColumn && !isColGroup && (XEUtils.isBoolean(column.resizable) ? column.resizable : resizable) ? h('div', {\n          class: ['vxe-resizable', {\n            'is--line': !border || border === 'none'\n          }],\n          on: {\n            mousedown: function mousedown(evnt) {\n              return _this.resizeMousedown(evnt, params);\n            }\n          }\n        }) : null]);\n      }).concat(scrollbarWidth ? [h('th', {\n        class: 'vxe-header--gutter col--gutter'\n      })] : []));\n    }))]),\n    /**\r\n     * 其他\r\n     */\n    h('div', {\n      class: 'vxe-table--header-border-line',\n      ref: 'repair'\n    })]);\n  },\n  methods: {\n    uploadColumn: function uploadColumn() {\n      var $xetable = this.$parent;\n      this.headerColumn = $xetable.isGroup ? convertToRows(this.tableGroupColumn) : [];\n    },\n    resizeMousedown: function resizeMousedown(evnt, params) {\n      var column = params.column;\n      var $xetable = this.$parent,\n          $el = this.$el,\n          fixedType = this.fixedType;\n      var _$xetable$$refs = $xetable.$refs,\n          tableBody = _$xetable$$refs.tableBody,\n          leftContainer = _$xetable$$refs.leftContainer,\n          rightContainer = _$xetable$$refs.rightContainer,\n          resizeBarElem = _$xetable$$refs.resizeBar;\n      var dragBtnElem = evnt.target,\n          dragClientX = evnt.clientX;\n      var cell = params.cell = dragBtnElem.parentNode;\n      var dragLeft = 0;\n      var tableBodyElem = tableBody.$el;\n      var pos = DomTools.getOffsetPos(dragBtnElem, $el);\n      var dragBtnWidth = dragBtnElem.clientWidth;\n      var dragBtnOffsetWidth = Math.floor(dragBtnWidth / 2);\n      var minInterval = getColMinWidth(params) - dragBtnOffsetWidth; // 列之间的最小间距\n\n      var dragMinLeft = pos.left - cell.clientWidth + dragBtnWidth + minInterval;\n      var dragPosLeft = pos.left + dragBtnOffsetWidth;\n      var domMousemove = document.onmousemove;\n      var domMouseup = document.onmouseup;\n      var isLeftFixed = fixedType === 'left';\n      var isRightFixed = fixedType === 'right'; // 计算左右侧固定列偏移量\n\n      var fixedOffsetWidth = 0;\n\n      if (isLeftFixed || isRightFixed) {\n        var siblingProp = isLeftFixed ? 'nextElementSibling' : 'previousElementSibling';\n        var tempCellElem = cell[siblingProp];\n\n        while (tempCellElem) {\n          if (DomTools.hasClass(tempCellElem, 'fixed--hidden')) {\n            break;\n          } else if (!DomTools.hasClass(tempCellElem, 'col--group')) {\n            fixedOffsetWidth += tempCellElem.offsetWidth;\n          }\n\n          tempCellElem = tempCellElem[siblingProp];\n        }\n\n        if (isRightFixed && rightContainer) {\n          dragPosLeft = rightContainer.offsetLeft + fixedOffsetWidth;\n        }\n      } // 处理拖动事件\n\n\n      var updateEvent = function updateEvent(evnt) {\n        evnt.stopPropagation();\n        evnt.preventDefault();\n        var offsetX = evnt.clientX - dragClientX;\n        var left = dragPosLeft + offsetX;\n        var scrollLeft = fixedType ? 0 : tableBodyElem.scrollLeft;\n\n        if (isLeftFixed) {\n          // 左固定列（不允许超过右侧固定列、不允许超过右边距）\n          left = Math.min(left, (rightContainer ? rightContainer.offsetLeft : tableBodyElem.clientWidth) - fixedOffsetWidth - minInterval);\n        } else if (isRightFixed) {\n          // 右侧固定列（不允许超过左侧固定列、不允许超过左边距）\n          dragMinLeft = (leftContainer ? leftContainer.clientWidth : 0) + fixedOffsetWidth + minInterval;\n          left = Math.min(left, dragPosLeft + cell.clientWidth - minInterval);\n        } else {\n          dragMinLeft = Math.max(tableBodyElem.scrollLeft, dragMinLeft); // left = Math.min(left, tableBodyElem.clientWidth + tableBodyElem.scrollLeft - 40)\n        }\n\n        dragLeft = Math.max(left, dragMinLeft);\n        resizeBarElem.style.left = \"\".concat(dragLeft - scrollLeft, \"px\");\n      };\n\n      $xetable._isResize = true;\n      DomTools.addClass($xetable.$el, 'drag--resize');\n      resizeBarElem.style.display = 'block';\n      document.onmousemove = updateEvent;\n\n      document.onmouseup = function (evnt) {\n        document.onmousemove = domMousemove;\n        document.onmouseup = domMouseup;\n        column.resizeWidth = column.renderWidth + (isRightFixed ? dragPosLeft - dragLeft : dragLeft - dragPosLeft);\n        resizeBarElem.style.display = 'none';\n        $xetable._isResize = false;\n        $xetable._lastResizeTime = Date.now();\n        $xetable.analyColumnWidth();\n        $xetable.recalculate(true).then(function () {\n          $xetable.saveCustomResizable();\n          $xetable.updateCellAreas();\n          $xetable.emitEvent('resizable-change', params, evnt);\n        });\n        DomTools.removeClass($xetable.$el, 'drag--resize');\n      };\n\n      updateEvent(evnt);\n      $xetable.closeMenu();\n    }\n  }\n};",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\header\\src\\header.js"],"names":["cellType","name","props","tableData","tableColumn","tableGroupColumn","fixedColumn","size","fixedType","String","data","headerColumn","watch","created","mounted","$xetable","$el","$refs","elemStore","prefix","render","_e","tableListeners","tId","isGroup","resizable","border","columnKey","headerRowClassName","headerCellClassName","headerRowStyle","headerCellStyle","allColumnHeaderOverflow","allHeaderAlign","allAlign","highlightCurrentColumn","currentColumn","scrollXLoad","overflowX","scrollbarWidth","sortOpts","mouseConfig","headerGroups","h","class","attrs","xid","ref","cellspacing","cellpadding","column","id","key","$columnIndex","$table","$rowIndex","fixed","type","style","showHeaderOverflow","headerAlign","align","headerClassName","isColGroup","fixedHiddenColumn","headOverflow","XEUtils","headAlign","showEllipsis","showTitle","showTooltip","hasEllipsis","thOns","hasFilter","item","columnIndex","_columnIndex","params","isHidden","cols","UtilTools","colid","colspan","rowspan","on","mousedown","methods","uploadColumn","convertToRows","resizeMousedown","tableBody","leftContainer","rightContainer","resizeBarElem","dragBtnElem","dragClientX","evnt","cell","dragLeft","tableBodyElem","pos","DomTools","dragBtnWidth","dragBtnOffsetWidth","Math","minInterval","getColMinWidth","dragMinLeft","dragPosLeft","domMousemove","document","domMouseup","isLeftFixed","isRightFixed","fixedOffsetWidth","siblingProp","tempCellElem","updateEvent","offsetX","left","scrollLeft","Date"],"mappings":"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","sourcesContent":["import XEUtils from 'xe-utils'\r\nimport { UtilTools, DomTools } from '../../tools'\r\nimport { convertToRows } from './util'\r\nimport { getColMinWidth } from '../../table/src/util'\r\n\r\nconst cellType = 'header'\r\n\r\nexport default {\r\n  name: 'VxeTableHeader',\r\n  props: {\r\n    tableData: Array,\r\n    tableColumn: Array,\r\n    tableGroupColumn: Array,\r\n    fixedColumn: Array,\r\n    size: String,\r\n    fixedType: String\r\n  },\r\n  data () {\r\n    return {\r\n      headerColumn: []\r\n    }\r\n  },\r\n  watch: {\r\n    tableColumn () {\r\n      this.uploadColumn()\r\n    }\r\n  },\r\n  created () {\r\n    this.uploadColumn()\r\n  },\r\n  mounted () {\r\n    const { $parent: $xetable, $el, $refs, fixedType } = this\r\n    const { elemStore } = $xetable\r\n    const prefix = `${fixedType || 'main'}-header-`\r\n    elemStore[`${prefix}wrapper`] = $el\r\n    elemStore[`${prefix}table`] = $refs.table\r\n    elemStore[`${prefix}colgroup`] = $refs.colgroup\r\n    elemStore[`${prefix}list`] = $refs.thead\r\n    elemStore[`${prefix}xSpace`] = $refs.xSpace\r\n    elemStore[`${prefix}repair`] = $refs.repair\r\n  },\r\n  render (h) {\r\n    const { _e, $parent: $xetable, fixedType, headerColumn, fixedColumn } = this\r\n    const { $listeners: tableListeners, tId, isGroup, resizable, border, columnKey, headerRowClassName, headerCellClassName, headerRowStyle, headerCellStyle, showHeaderOverflow: allColumnHeaderOverflow, headerAlign: allHeaderAlign, align: allAlign, highlightCurrentColumn, currentColumn, scrollXLoad, overflowX, scrollbarWidth, sortOpts, mouseConfig } = $xetable\r\n    let { tableColumn } = this\r\n    let headerGroups = headerColumn\r\n    // 如果是使用优化模式\r\n    if (!isGroup) {\r\n      if (fixedType) {\r\n        if (scrollXLoad || allColumnHeaderOverflow) {\r\n          tableColumn = fixedColumn\r\n        }\r\n      }\r\n      headerGroups = [tableColumn]\r\n    }\r\n    return h('div', {\r\n      class: ['vxe-table--header-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],\r\n      attrs: {\r\n        xid: tId\r\n      }\r\n    }, [\r\n      fixedType ? _e() : h('div', {\r\n        class: 'vxe-body--x-space',\r\n        ref: 'xSpace'\r\n      }),\r\n      h('table', {\r\n        class: 'vxe-table--header',\r\n        attrs: {\r\n          xid: tId,\r\n          cellspacing: 0,\r\n          cellpadding: 0,\r\n          border: 0\r\n        },\r\n        ref: 'table'\r\n      }, [\r\n        /**\r\n         * 列宽\r\n         */\r\n        h('colgroup', {\r\n          ref: 'colgroup'\r\n        }, tableColumn.map((column, $columnIndex) => {\r\n          return h('col', {\r\n            attrs: {\r\n              name: column.id\r\n            },\r\n            key: $columnIndex\r\n          })\r\n        }).concat(scrollbarWidth ? [\r\n          h('col', {\r\n            attrs: {\r\n              name: 'col_gutter'\r\n            }\r\n          })\r\n        ] : [])),\r\n        /**\r\n         * 头部\r\n         */\r\n        h('thead', {\r\n          ref: 'thead'\r\n        }, headerGroups.map((cols, $rowIndex) => {\r\n          return h('tr', {\r\n            class: ['vxe-header--row', headerRowClassName ? XEUtils.isFunction(headerRowClassName) ? headerRowClassName({ $table: $xetable, $rowIndex, fixed: fixedType, type: cellType }) : headerRowClassName : ''],\r\n            style: headerRowStyle ? (XEUtils.isFunction(headerRowStyle) ? headerRowStyle({ $table: $xetable, $rowIndex, fixed: fixedType, type: cellType }) : headerRowStyle) : null\r\n          }, cols.map((column, $columnIndex) => {\r\n            const { type, showHeaderOverflow, headerAlign, align, headerClassName } = column\r\n            // const { enabled } = tooltipOpts\r\n            const isColGroup = column.children && column.children.length\r\n            const fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX\r\n            const headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow\r\n            const headAlign = headerAlign || align || allHeaderAlign || allAlign\r\n            let showEllipsis = headOverflow === 'ellipsis'\r\n            const showTitle = headOverflow === 'title'\r\n            const showTooltip = headOverflow === true || headOverflow === 'tooltip'\r\n            let hasEllipsis = showTitle || showTooltip || showEllipsis\r\n            const thOns = {}\r\n            const hasFilter = column.filters && column.filters.some(item => item.checked)\r\n            const columnIndex = $xetable.getColumnIndex(column)\r\n            const _columnIndex = $xetable.getVTColumnIndex(column)\r\n            const params = { $table: $xetable, $rowIndex, column, columnIndex, $columnIndex, _columnIndex, fixed: fixedType, type: cellType, isHidden: fixedHiddenColumn, hasFilter }\r\n            // 虚拟滚动不支持动态高度\r\n            if (scrollXLoad && !hasEllipsis) {\r\n              showEllipsis = hasEllipsis = true\r\n            }\r\n            if (highlightCurrentColumn || tableListeners['header-cell-click'] || sortOpts.trigger === 'cell') {\r\n              thOns.click = evnt => $xetable.triggerHeaderCellClickEvent(evnt, params)\r\n            }\r\n            if (tableListeners['header-cell-dblclick']) {\r\n              thOns.dblclick = evnt => $xetable.triggerHeaderCellDblclickEvent(evnt, params)\r\n            }\r\n            // 按下事件处理\r\n            if (mouseConfig) {\r\n              thOns.mousedown = evnt => $xetable.triggerHeaderCellMousedownEvent(evnt, params)\r\n            }\r\n            return h('th', {\r\n              class: ['vxe-header--column', column.id, {\r\n                [`col--${headAlign}`]: headAlign,\r\n                [`col--${type}`]: type,\r\n                'col--last': $columnIndex === cols.length - 1,\r\n                'col--fixed': column.fixed,\r\n                'col--group': isColGroup,\r\n                'col--ellipsis': hasEllipsis,\r\n                'fixed--hidden': fixedHiddenColumn,\r\n                'is--sortable': column.sortable,\r\n                'is--filter': !!column.filters,\r\n                'filter--active': hasFilter,\r\n                'col--current': currentColumn === column\r\n              }, UtilTools.getClass(headerClassName, params), UtilTools.getClass(headerCellClassName, params)],\r\n              attrs: {\r\n                colid: column.id,\r\n                colspan: column.colSpan > 1 ? column.colSpan : null,\r\n                rowspan: column.rowSpan > 1 ? column.rowSpan : null\r\n              },\r\n              style: headerCellStyle ? (XEUtils.isFunction(headerCellStyle) ? headerCellStyle(params) : headerCellStyle) : null,\r\n              on: thOns,\r\n              key: columnKey || isColGroup ? column.id : $columnIndex\r\n            }, [\r\n              h('div', {\r\n                class: ['vxe-cell', {\r\n                  'c--title': showTitle,\r\n                  'c--tooltip': showTooltip,\r\n                  'c--ellipsis': showEllipsis\r\n                }]\r\n              }, column.renderHeader(h, params)),\r\n              /**\r\n               * 列宽拖动\r\n               */\r\n              !fixedHiddenColumn && !isColGroup && (XEUtils.isBoolean(column.resizable) ? column.resizable : resizable) ? h('div', {\r\n                class: ['vxe-resizable', {\r\n                  'is--line': !border || border === 'none'\r\n                }],\r\n                on: {\r\n                  mousedown: evnt => this.resizeMousedown(evnt, params)\r\n                }\r\n              }) : null\r\n            ])\r\n          }).concat(scrollbarWidth ? [\r\n            h('th', {\r\n              class: 'vxe-header--gutter col--gutter'\r\n            })\r\n          ] : []))\r\n        }))\r\n      ]),\r\n      /**\r\n       * 其他\r\n       */\r\n      h('div', {\r\n        class: 'vxe-table--header-border-line',\r\n        ref: 'repair'\r\n      })\r\n    ])\r\n  },\r\n  methods: {\r\n    uploadColumn () {\r\n      const { $parent: $xetable } = this\r\n      this.headerColumn = $xetable.isGroup ? convertToRows(this.tableGroupColumn) : []\r\n    },\r\n    resizeMousedown (evnt, params) {\r\n      const { column } = params\r\n      const { $parent: $xetable, $el, fixedType } = this\r\n      const { tableBody, leftContainer, rightContainer, resizeBar: resizeBarElem } = $xetable.$refs\r\n      const { target: dragBtnElem, clientX: dragClientX } = evnt\r\n      const cell = params.cell = dragBtnElem.parentNode\r\n      let dragLeft = 0\r\n      const tableBodyElem = tableBody.$el\r\n      const pos = DomTools.getOffsetPos(dragBtnElem, $el)\r\n      const dragBtnWidth = dragBtnElem.clientWidth\r\n      const dragBtnOffsetWidth = Math.floor(dragBtnWidth / 2)\r\n      const minInterval = getColMinWidth(params) - dragBtnOffsetWidth // 列之间的最小间距\r\n      let dragMinLeft = pos.left - cell.clientWidth + dragBtnWidth + minInterval\r\n      let dragPosLeft = pos.left + dragBtnOffsetWidth\r\n      const domMousemove = document.onmousemove\r\n      const domMouseup = document.onmouseup\r\n      const isLeftFixed = fixedType === 'left'\r\n      const isRightFixed = fixedType === 'right'\r\n\r\n      // 计算左右侧固定列偏移量\r\n      let fixedOffsetWidth = 0\r\n      if (isLeftFixed || isRightFixed) {\r\n        const siblingProp = isLeftFixed ? 'nextElementSibling' : 'previousElementSibling'\r\n        let tempCellElem = cell[siblingProp]\r\n        while (tempCellElem) {\r\n          if (DomTools.hasClass(tempCellElem, 'fixed--hidden')) {\r\n            break\r\n          } else if (!DomTools.hasClass(tempCellElem, 'col--group')) {\r\n            fixedOffsetWidth += tempCellElem.offsetWidth\r\n          }\r\n          tempCellElem = tempCellElem[siblingProp]\r\n        }\r\n        if (isRightFixed && rightContainer) {\r\n          dragPosLeft = rightContainer.offsetLeft + fixedOffsetWidth\r\n        }\r\n      }\r\n\r\n      // 处理拖动事件\r\n      const updateEvent = function (evnt) {\r\n        evnt.stopPropagation()\r\n        evnt.preventDefault()\r\n        const offsetX = evnt.clientX - dragClientX\r\n        let left = dragPosLeft + offsetX\r\n        const scrollLeft = fixedType ? 0 : tableBodyElem.scrollLeft\r\n        if (isLeftFixed) {\r\n          // 左固定列（不允许超过右侧固定列、不允许超过右边距）\r\n          left = Math.min(left, (rightContainer ? rightContainer.offsetLeft : tableBodyElem.clientWidth) - fixedOffsetWidth - minInterval)\r\n        } else if (isRightFixed) {\r\n          // 右侧固定列（不允许超过左侧固定列、不允许超过左边距）\r\n          dragMinLeft = (leftContainer ? leftContainer.clientWidth : 0) + fixedOffsetWidth + minInterval\r\n          left = Math.min(left, dragPosLeft + cell.clientWidth - minInterval)\r\n        } else {\r\n          dragMinLeft = Math.max(tableBodyElem.scrollLeft, dragMinLeft)\r\n          // left = Math.min(left, tableBodyElem.clientWidth + tableBodyElem.scrollLeft - 40)\r\n        }\r\n        dragLeft = Math.max(left, dragMinLeft)\r\n        resizeBarElem.style.left = `${dragLeft - scrollLeft}px`\r\n      }\r\n\r\n      $xetable._isResize = true\r\n      DomTools.addClass($xetable.$el, 'drag--resize')\r\n      resizeBarElem.style.display = 'block'\r\n      document.onmousemove = updateEvent\r\n      document.onmouseup = function (evnt) {\r\n        document.onmousemove = domMousemove\r\n        document.onmouseup = domMouseup\r\n        column.resizeWidth = column.renderWidth + (isRightFixed ? dragPosLeft - dragLeft : dragLeft - dragPosLeft)\r\n        resizeBarElem.style.display = 'none'\r\n        $xetable._isResize = false\r\n        $xetable._lastResizeTime = Date.now()\r\n        $xetable.analyColumnWidth()\r\n        $xetable.recalculate(true).then(() => {\r\n          $xetable.saveCustomResizable()\r\n          $xetable.updateCellAreas()\r\n          $xetable.emitEvent('resizable-change', params, evnt)\r\n        })\r\n        DomTools.removeClass($xetable.$el, 'drag--resize')\r\n      }\r\n      updateEvent(evnt)\r\n      $xetable.closeMenu()\r\n    }\r\n  }\r\n}\r\n"]}]}