{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\common\\util\\Trees.js","dependencies":[{"path":"D:\\cdRule\\src\\common\\util\\Trees.js","mtime":1612227987785},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.function.name\";\nimport { arrayToMap } from '@/common/util/Arrays.js';\n/**\r\n * 复制树结构体\r\n * @param {Array|Object} tree 树的根结点\r\n * @param {Boolean} [setParent] 是否需要设置父结点\r\n * @param {String} [parentField] 父结点字段\r\n * @param {String} [childrenField] 孩子结点字段\r\n * @returns {Array|Object} 返回复制后的树结构\r\n */\n\nexport function copyTree(tree) {\n  var setParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var parentField = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'parent';\n  var childrenField = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'children';\n  var parent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var copys = [],\n      isarray = Array.isArray(tree);\n  tree = isarray ? tree : [tree];\n\n  for (var i = 0, len = tree.length, node, copy; i < len; i++) {\n    node = tree[i];\n    copy = {};\n\n    for (var key in node) {\n      if (key != parentField && key != childrenField) {\n        copy[key] = node[key];\n      }\n    }\n\n    if (node[childrenField]) {\n      copy[childrenField] = copyTree(node[childrenField], setParent, parentField, childrenField, copy);\n    }\n\n    setParent && (copy[parentField] = parent);\n    copys.push(copy);\n  }\n\n  return isarray ? copys : copys[0];\n}\n/**\r\n * 将数组转成 TREE 结构体\r\n * @param {Array} array 元素数组\r\n * @param {String} [id] 元素的id字段(默认值:id)\r\n * @param {String} [pid] 元素的父id字段(默认值:pid)\r\n * @param {Object} [map] 元素的map结构\r\n * @param {Object} [root] 元素的根节点\r\n * @param {String} [childrenKey] 保存子节点的字段\r\n * @returns {Array} 返回tree第一层数组\r\n */\n\nexport function arrayToTree(array) {\n  var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n  var pid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'pid';\n  var map = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var root = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var childrenKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'children';\n  if (!array || array.length == 0) return [];\n  map = map || arrayToMap(array, id);\n  var tree;\n\n  if (root) {\n    root[childrenKey] ? tree = root[childrenKey] : root[childrenKey] = tree = [];\n  } else {\n    tree = [];\n  }\n\n  for (var i = 0, len = array.length, item, parent, sons; i < len; i++) {\n    item = array[i];\n    parent = map[item[pid]];\n\n    if (parent) {\n      sons = parent[childrenKey];\n      !sons && (sons = parent[childrenKey] = []);\n      sons.push(item);\n      item.parent = parent;\n    } else {\n      item.parent = root || null;\n      tree.push(item);\n    }\n  }\n\n  return tree;\n}\n;\n/**\r\n * 从指定树结点nodes中查找符合条件的所有结点，查找规则是：结点属性field的值，等于数组values中其中一个\r\n * @param {Array} nodes 树结点\r\n * @param {Array} values 数组值\r\n * @param {String} field 结点属性\r\n * @param {String} [hasOwnField] 结点必须有该字段\r\n * @returns {Array} 返回符合的结点数组\r\n */\n\nexport function getNodesByValues(nodes, values) {\n  var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';\n  var hasOwnField = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  if (!nodes || !values || values.length == 0) return [];\n  var _values = {};\n\n  for (var i = 0, len = values.length; i < len; i++) {\n    _values[values[i]] = true;\n  }\n\n  nodes = Array.isArray(nodes) ? nodes : [nodes];\n  return _getNodesByValues(nodes, _values, field, hasOwnField, [], values.length);\n}\n\nfunction _getNodesByValues(nodes, values) {\n  var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';\n  var hasOwnField = arguments.length > 3 ? arguments[3] : undefined;\n  var array = arguments.length > 4 ? arguments[4] : undefined;\n  var left = arguments.length > 5 ? arguments[5] : undefined;\n  if (!nodes || nodes.length == 0) return array;\n\n  for (var i = 0, len = nodes.length, node; i < len; i++) {\n    node = nodes[i];\n\n    if (!hasOwnField || node.hasOwnProperty(hasOwnField)) {\n      if (values[node[field]] === true) {\n        array.push(node);\n        if (--left == 0) return array;\n      }\n    }\n\n    if (node.children && node.children.length > 0) {\n      _getNodesByValues(node.children, values, field, hasOwnField, array, left);\n    }\n  }\n\n  return array;\n}\n/**\r\n * 从指定树结点nodes中查找符合条件的一个结点，查找规则是：结点属性field的值等于value\r\n * @param {Array} nodes 树结点\r\n * @param {Object} value 数值\r\n * @param {String} field 结点属性\r\n * @param {String} [hasOwnField] 结点必须有该字段\r\n * @returns {Object} 返回符合的结点\r\n */\n\n\nexport function getNodeByValue(nodes, value) {\n  var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';\n  var hasOwnField = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  if (!nodes) return null;\n  nodes = Array.isArray(nodes) ? nodes : [nodes];\n  if (nodes.length == 0) return null;\n\n  for (var i = 0, len = nodes.length, node; i < len; i++) {\n    node = nodes[i];\n\n    if (!hasOwnField || node.hasOwnProperty(hasOwnField)) {\n      if (node[field] === value) {\n        return node;\n      }\n    }\n\n    if (node.children && node.children.length > 0) {\n      node = getNodeByValue(node.children, value, field, hasOwnField);\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n/**\r\n * 从指定树结点nodes中查找符合条件的结点，查找规则是：filter函数返回true\r\n * @param {Array} nodes 树结点\r\n * @param {Function} filter 过滤函数\r\n * @param {String} children children属性\r\n * @returns {Array} 返回结点集合\r\n */\n\nexport function getNodesByFilter(nodes, filter) {\n  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';\n  var result = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  if (!nodes) return [];\n  result = result || [];\n  nodes = Array.isArray(nodes) ? nodes : [nodes];\n\n  for (var i = 0, len = nodes.length, node; i < len; i++) {\n    node = nodes[i];\n    filter(node) === true && result.push(node);\n    node = node[children];\n\n    if (node && node.length > 0) {\n      getNodesByFilter(node, filter, children, result);\n    }\n  }\n\n  return result;\n}\n/**\r\n * 将树结点，转成MAP结构\r\n * @param {Array} nodes 树结点\r\n * @param {String} key key属性\r\n * @param {String} children children属性\r\n * @param {String} [hasOwnField] 结点必须有该字段\r\n * @param {Map} [map] 覆盖MAP对象\r\n * @returns {Map} 返回MAP结构对象\r\n */\n\nexport function treeToMap(nodes) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';\n  var hasOwnField = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var map = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  map = map || {};\n\n  if (!nodes || nodes.length == 0) {\n    return map;\n  }\n\n  for (var i = 0, len = nodes.length, node; i < len; i++) {\n    node = nodes[i];\n\n    if (!hasOwnField || node.hasOwnProperty(hasOwnField)) {\n      map[node[key]] = node;\n    }\n\n    node = node[children];\n\n    if (node && node.length > 0) {\n      treeToMap(node, key, children, hasOwnField, map);\n    }\n  }\n\n  return map;\n}\nexport function treeSearch(tree, text) {\n  var hasOwnField = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var searchFun = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var max = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 99999999;\n  var nodes = tree.getNodes();\n\n  if (nodes && nodes.length == 1) {\n    nodes = nodes[0][tree.setting.data.key.children];\n  }\n\n  if (!nodes || nodes.length == 0) return [];\n  return dgSearch([], nodes, text.toLowerCase(), hasOwnField, searchFun, tree.setting.view.nameFunction, tree.setting.view.hideFunction, tree.setting.data.key, max);\n}\n\nfunction dgSearch(results, nodes, text, hasOwnField, searchFun, nameFun, hideFun, keys, max) {\n  if (!nodes || nodes.length == 0) {\n    return results;\n  }\n\n  for (var i = 0, len = nodes.length, node, value; i < len; i++) {\n    node = nodes[i];\n    if (hideFun && hideFun(node) === true) continue;\n\n    if (!hasOwnField || node.hasOwnProperty(hasOwnField)) {\n      if (searchFun) {\n        if (searchFun(node, text) === true) {\n          results.push(node);\n          if (results.length >= max) return results;\n        }\n      } else {\n        value = nameFun ? nameFun(node) : node[keys.name];\n\n        if (value) {\n          value = value.toLowerCase();\n\n          if (value.indexOf(text) >= 0) {\n            results.push(node);\n            if (results.length >= max) return results;\n          }\n        }\n      }\n    }\n\n    dgSearch(results, node[keys.children], text, hasOwnField, searchFun, nameFun, hideFun, keys, max);\n  }\n\n  return results;\n}",{"version":3,"sources":["D:\\cdRule\\src\\common\\util\\Trees.js"],"names":["setParent","parentField","childrenField","parent","copys","isarray","Array","tree","i","len","node","copy","key","copyTree","id","pid","map","root","childrenKey","array","arrayToMap","item","sons","field","hasOwnField","values","_values","nodes","_getNodesByValues","left","getNodeByValue","children","result","filter","getNodesByFilter","treeToMap","searchFun","max","dgSearch","text","hideFun","results","value","nameFun","keys"],"mappings":"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","sourcesContent":["\r\nimport { arrayToMap } from '@/common/util/Arrays.js';\r\n\r\n/**\r\n * 复制树结构体\r\n * @param {Array|Object} tree 树的根结点\r\n * @param {Boolean} [setParent] 是否需要设置父结点\r\n * @param {String} [parentField] 父结点字段\r\n * @param {String} [childrenField] 孩子结点字段\r\n * @returns {Array|Object} 返回复制后的树结构\r\n */\r\nexport function copyTree(tree, setParent=false, parentField='parent', childrenField='children', parent=null) {\r\n  let copys = [], isarray = Array.isArray(tree);\r\n  tree = isarray ? tree : [tree];\r\n  for (let i=0,len=tree.length,node,copy; i<len; i++) {\r\n    node = tree[i]; copy = {};\r\n    for (let key in node) {\r\n      if (key != parentField && key != childrenField) {\r\n        copy[key] = node[key];\r\n      }\r\n    }\r\n    if (node[childrenField]) {\r\n      copy[childrenField] = copyTree(node[childrenField], setParent, parentField, childrenField, copy);\r\n    }\r\n    setParent && (copy[parentField] = parent);\r\n    copys.push(copy);\r\n  }\r\n  return isarray ? copys : copys[0];\r\n}\r\n\r\n/**\r\n * 将数组转成 TREE 结构体\r\n * @param {Array} array 元素数组\r\n * @param {String} [id] 元素的id字段(默认值:id)\r\n * @param {String} [pid] 元素的父id字段(默认值:pid)\r\n * @param {Object} [map] 元素的map结构\r\n * @param {Object} [root] 元素的根节点\r\n * @param {String} [childrenKey] 保存子节点的字段\r\n * @returns {Array} 返回tree第一层数组\r\n */\r\nexport function arrayToTree(array, id='id', pid='pid', map=null, root=null, childrenKey='children') {\r\n  if (!array || array.length == 0) return [];\r\n  map = map || arrayToMap(array, id);\r\n  let tree;\r\n  if (root) {\r\n\t  root[childrenKey] ? (tree = root[childrenKey]) : (root[childrenKey] = tree = []);\r\n  } else {\r\n\t  tree = [];\r\n  }\r\n  for (let i=0,len=array.length,item,parent,sons; i<len; i++) {\r\n    item = array[i];\r\n    parent = map[item[pid]];\r\n    if (parent) {\r\n      sons = parent[childrenKey];\r\n      !sons && (sons = parent[childrenKey] = []);\r\n      sons.push(item);\r\n      item.parent = parent;\r\n    } else {\r\n      item.parent = root || null;\r\n      tree.push(item);\r\n    }\r\n  }\r\n  return tree;\r\n};\r\n\r\n/**\r\n * 从指定树结点nodes中查找符合条件的所有结点，查找规则是：结点属性field的值，等于数组values中其中一个\r\n * @param {Array} nodes 树结点\r\n * @param {Array} values 数组值\r\n * @param {String} field 结点属性\r\n * @param {String} [hasOwnField] 结点必须有该字段\r\n * @returns {Array} 返回符合的结点数组\r\n */\r\nexport function getNodesByValues(nodes, values, field='id', hasOwnField=null) {\r\n  if (!nodes || !values || values.length == 0) return [];\r\n  let _values = {};\r\n  for (let i=0,len=values.length; i<len; i++) {\r\n    _values[values[i]] = true;\r\n  }\r\n  nodes = Array.isArray(nodes) ? nodes : [nodes];\r\n  return _getNodesByValues(nodes, _values, field, hasOwnField, [], values.length);\r\n}\r\n\r\nfunction _getNodesByValues(nodes, values, field='id', hasOwnField, array, left) {\r\n  if (!nodes || nodes.length == 0) return array;\r\n  for (let i=0,len=nodes.length,node; i<len; i++) {\r\n    node = nodes[i];\r\n    if (!hasOwnField || node.hasOwnProperty(hasOwnField)) {\r\n      if (values[node[field]] === true) {\r\n        array.push(node);\r\n        if (--left == 0) return array;\r\n      }\r\n    }\r\n    if (node.children && node.children.length > 0) {\r\n      _getNodesByValues(node.children, values, field, hasOwnField, array, left);\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * 从指定树结点nodes中查找符合条件的一个结点，查找规则是：结点属性field的值等于value\r\n * @param {Array} nodes 树结点\r\n * @param {Object} value 数值\r\n * @param {String} field 结点属性\r\n * @param {String} [hasOwnField] 结点必须有该字段\r\n * @returns {Object} 返回符合的结点\r\n */\r\nexport function getNodeByValue(nodes, value, field='id', hasOwnField=null) {\r\n  if (!nodes) return null;\r\n  nodes = Array.isArray(nodes) ? nodes : [nodes];\r\n  if (nodes.length == 0) return null;\r\n  for (let i=0,len=nodes.length,node; i<len; i++) {\r\n    node = nodes[i];\r\n    if (!hasOwnField || node.hasOwnProperty(hasOwnField)) {\r\n      if (node[field] === value) {\r\n        return node;\r\n      }\r\n    }\r\n    if (node.children && node.children.length > 0) {\r\n    \tnode = getNodeByValue(node.children, value, field, hasOwnField);\r\n    \tif (node) return node;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * 从指定树结点nodes中查找符合条件的结点，查找规则是：filter函数返回true\r\n * @param {Array} nodes 树结点\r\n * @param {Function} filter 过滤函数\r\n * @param {String} children children属性\r\n * @returns {Array} 返回结点集合\r\n */\r\nexport function getNodesByFilter(nodes, filter, children='children', result=null) {\r\n  if (!nodes) return [];\r\n  result = result || [];\r\n  nodes = Array.isArray(nodes) ? nodes : [nodes];\r\n  for (let i=0,len=nodes.length,node; i<len; i++) {\r\n    node = nodes[i];\r\n    filter(node) === true && result.push(node);\r\n    node = node[children];\r\n    if (node && node.length > 0) {\r\n      getNodesByFilter(node, filter, children, result);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * 将树结点，转成MAP结构\r\n * @param {Array} nodes 树结点\r\n * @param {String} key key属性\r\n * @param {String} children children属性\r\n * @param {String} [hasOwnField] 结点必须有该字段\r\n * @param {Map} [map] 覆盖MAP对象\r\n * @returns {Map} 返回MAP结构对象\r\n */\r\nexport function treeToMap(nodes, key='id', children='children', hasOwnField=null, map=null) {\r\n  map = map || {};\r\n  if (!nodes || nodes.length == 0) {\r\n    return map;\r\n  }\r\n  for (let i=0,len=nodes.length,node; i<len; i++) {\r\n    node = nodes[i];\r\n    if (!hasOwnField || node.hasOwnProperty(hasOwnField)) {\r\n      map[node[key]] = node;\r\n    }\r\n    node = node[children];\r\n    if (node && node.length > 0) {\r\n      treeToMap(node, key, children, hasOwnField, map);\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport function treeSearch(tree, text, hasOwnField=null, searchFun=null, max=99999999) {\r\n  let nodes = tree.getNodes();\r\n  if (nodes && nodes.length == 1) {\r\n    nodes = nodes[0][tree.setting.data.key.children];\r\n  }\r\n  if (!nodes || nodes.length == 0) return [];\r\n  return dgSearch([], nodes, text.toLowerCase(), hasOwnField, searchFun, tree.setting.view.nameFunction, tree.setting.view.hideFunction, tree.setting.data.key, max);\r\n}\r\n\r\nfunction dgSearch(results, nodes, text, hasOwnField, searchFun, nameFun, hideFun, keys, max){\r\n  if (!nodes || nodes.length == 0) {\r\n    return results;\r\n  }\r\n  for (let i=0,len=nodes.length,node,value; i<len; i++) {\r\n    node = nodes[i];\r\n    if (hideFun && hideFun(node) === true) continue;\r\n    if (!hasOwnField || node.hasOwnProperty(hasOwnField)) {\r\n      if (searchFun) {\r\n        if (searchFun(node, text) === true) {\r\n          results.push(node);\r\n          if (results.length >= max) return results;\r\n        }\r\n      } else {\r\n        value = nameFun ? nameFun(node) : node[keys.name];\r\n        if (value) {\r\n          value = value.toLowerCase();\r\n          if (value.indexOf(text) >= 0) {\r\n            results.push(node);\r\n            if (results.length >= max) return results;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    dgSearch(results, node[keys.children], text, hasOwnField, searchFun, nameFun, hideFun, keys, max);\r\n  }\r\n  return results;\r\n}\r\n"]}]}