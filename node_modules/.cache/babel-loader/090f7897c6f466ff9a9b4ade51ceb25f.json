{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\grid\\src\\grid.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\grid\\src\\grid.js","mtime":1635230121576},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport Table from \"../../table\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport vSize from \"../../mixins/size\";\nimport VXETable from \"../../v-x-e-table\";\nimport { UtilTools, DomTools, GlobalEvent, isEnableConf } from \"../../tools\";\nimport { getOffsetHeight, getPaddingTopBottomSize } from \"../../tools/src/dom\";\nvar methods = {};\nvar propKeys = Object.keys(Table.props);\n\nfunction renderDefaultForm(h, _vm) {\n  var $scopedSlots = _vm.$scopedSlots,\n      proxyConfig = _vm.proxyConfig,\n      proxyOpts = _vm.proxyOpts,\n      formData = _vm.formData,\n      formConfig = _vm.formConfig,\n      formOpts = _vm.formOpts;\n\n  if (isEnableConf(formConfig) && formOpts.items && formOpts.items.length) {\n    var formSlots = {};\n\n    if (!formOpts.inited) {\n      formOpts.inited = true;\n      var beforeItem = proxyOpts.beforeItem;\n\n      if (proxyOpts && beforeItem) {\n        formOpts.items.forEach(function (item) {\n          beforeItem.call(_vm, {\n            $grid: _vm,\n            item: item\n          });\n        });\n      }\n    } // 处理插槽\n\n\n    formOpts.items.forEach(function (item) {\n      XEUtils.each(item.slots, function (func) {\n        if (!XEUtils.isFunction(func)) {\n          if ($scopedSlots[func]) {\n            formSlots[func] = $scopedSlots[func];\n          }\n        }\n      });\n    });\n    return [h('vxe-form', {\n      props: Object.assign({}, formOpts, {\n        data: proxyConfig && proxyOpts.form ? formData : formOpts.data\n      }),\n      on: {\n        submit: _vm.submitEvent,\n        reset: _vm.resetEvent,\n        'submit-invalid': _vm.submitInvalidEvent,\n        'toggle-collapse': _vm.togglCollapseEvent\n      },\n      scopedSlots: formSlots\n    })];\n  }\n\n  return [];\n}\n\nfunction getFuncSlot(_vm, optSlots, slotKey) {\n  var $scopedSlots = _vm.$scopedSlots;\n  var funcSlot = optSlots[slotKey];\n\n  if (funcSlot) {\n    if (XEUtils.isString(funcSlot)) {\n      if ($scopedSlots[funcSlot]) {\n        return $scopedSlots[funcSlot];\n      } else {\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          UtilTools.error('vxe.error.notSlot', [funcSlot]);\n        }\n      }\n    } else {\n      return funcSlot;\n    }\n  }\n\n  return null;\n}\n\nfunction getToolbarSlots(_vm) {\n  var $scopedSlots = _vm.$scopedSlots,\n      toolbarOpts = _vm.toolbarOpts;\n  var toolbarOptSlots = toolbarOpts.slots;\n  var buttonsSlot;\n  var toolsSlot;\n  var slots = {};\n\n  if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n    if ($scopedSlots.buttons && (!toolbarOptSlots || toolbarOptSlots.buttons !== 'buttons')) {\n      UtilTools.warn('vxe.error.reqProp', ['toolbar-config.slots.buttons']);\n    }\n\n    if ($scopedSlots.tools && (!toolbarOptSlots || toolbarOptSlots.tools !== 'tools')) {\n      UtilTools.warn('vxe.error.reqProp', ['toolbar-config.slots.tools']);\n    }\n  }\n\n  if (toolbarOptSlots) {\n    buttonsSlot = getFuncSlot(_vm, toolbarOptSlots, 'buttons');\n    toolsSlot = getFuncSlot(_vm, toolbarOptSlots, 'tools');\n\n    if (buttonsSlot) {\n      slots.buttons = buttonsSlot;\n    }\n\n    if (toolsSlot) {\n      slots.tools = toolsSlot;\n    }\n  }\n\n  return slots;\n}\n\nfunction getPagerSlots(_vm) {\n  var pagerOpts = _vm.pagerOpts;\n  var pagerOptSlots = pagerOpts.slots;\n  var slots = {};\n  var leftSlot;\n  var rightSlot;\n\n  if (pagerOptSlots) {\n    leftSlot = getFuncSlot(_vm, pagerOptSlots, 'left');\n    rightSlot = getFuncSlot(_vm, pagerOptSlots, 'right');\n\n    if (leftSlot) {\n      slots.left = leftSlot;\n    }\n\n    if (rightSlot) {\n      slots.right = rightSlot;\n    }\n  }\n\n  return slots;\n}\n\nfunction getTableOns(_vm) {\n  var $listeners = _vm.$listeners,\n      proxyConfig = _vm.proxyConfig,\n      proxyOpts = _vm.proxyOpts;\n  var ons = {};\n  XEUtils.each($listeners, function (cb, type) {\n    ons[type] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _vm.$emit.apply(_vm, [type].concat(args));\n    };\n  });\n\n  if (proxyConfig) {\n    if (proxyOpts.sort) {\n      ons['sort-change'] = _vm.sortChangeEvent;\n    }\n\n    if (proxyOpts.filter) {\n      ons['filter-change'] = _vm.filterChangeEvent;\n    }\n  }\n\n  return ons;\n}\n\nObject.keys(Table.methods).forEach(function (name) {\n  methods[name] = function () {\n    var _this$$refs$xTable;\n\n    return this.$refs.xTable && (_this$$refs$xTable = this.$refs.xTable)[name].apply(_this$$refs$xTable, arguments);\n  };\n});\nexport default {\n  name: 'VxeGrid',\n  mixins: [vSize],\n  props: _objectSpread(_objectSpread({}, Table.props), {}, {\n    columns: Array,\n    pagerConfig: [Boolean, Object],\n    proxyConfig: Object,\n    toolbar: [Boolean, Object],\n    toolbarConfig: [Boolean, Object],\n    formConfig: [Boolean, Object],\n    zoomConfig: Object,\n    size: {\n      type: String,\n      default: function _default() {\n        return GlobalConfig.grid.size || GlobalConfig.size;\n      }\n    }\n  }),\n  provide: function provide() {\n    return {\n      $xegrid: this\n    };\n  },\n  data: function data() {\n    return {\n      tableLoading: false,\n      isZMax: false,\n      tableData: [],\n      pendingRecords: [],\n      filterData: [],\n      formData: {},\n      sortData: [],\n      tZindex: 0,\n      tablePage: {\n        total: 0,\n        pageSize: 10,\n        currentPage: 1\n      }\n    };\n  },\n  computed: {\n    isMsg: function isMsg() {\n      return this.proxyOpts.message !== false;\n    },\n    proxyOpts: function proxyOpts() {\n      return Object.assign({}, GlobalConfig.grid.proxyConfig, this.proxyConfig);\n    },\n    pagerOpts: function pagerOpts() {\n      return Object.assign({}, GlobalConfig.grid.pagerConfig, this.pagerConfig);\n    },\n    formOpts: function formOpts() {\n      return Object.assign({}, GlobalConfig.grid.formConfig, this.formConfig);\n    },\n    toolbarOpts: function toolbarOpts() {\n      return Object.assign({}, GlobalConfig.grid.toolbarConfig, this.toolbarConfig || this.toolbar);\n    },\n    zoomOpts: function zoomOpts() {\n      return Object.assign({}, GlobalConfig.grid.zoomConfig, this.zoomConfig);\n    },\n    renderStyle: function renderStyle() {\n      return this.isZMax ? {\n        zIndex: this.tZindex,\n        height: '100%'\n      } : {\n        height: '100%'\n      };\n    },\n    tableExtendProps: function tableExtendProps() {\n      var _this = this;\n\n      var rest = {};\n      propKeys.forEach(function (key) {\n        rest[key] = _this[key];\n      });\n      return rest;\n    },\n    tableProps: function tableProps() {\n      var isZMax = this.isZMax,\n          seqConfig = this.seqConfig,\n          pagerConfig = this.pagerConfig,\n          loading = this.loading,\n          editConfig = this.editConfig,\n          proxyConfig = this.proxyConfig,\n          proxyOpts = this.proxyOpts,\n          tableExtendProps = this.tableExtendProps,\n          tableLoading = this.tableLoading,\n          tablePage = this.tablePage,\n          tableData = this.tableData;\n      var tableProps = Object.assign({}, tableExtendProps);\n\n      if (isZMax) {\n        if (tableExtendProps.maxHeight) {\n          tableProps.maxHeight = 'auto';\n        } else {\n          tableProps.height = 'auto';\n        }\n      }\n\n      if (proxyConfig) {\n        tableProps.loading = loading || tableLoading;\n        tableProps.data = tableData;\n        tableProps.rowClassName = this.handleRowClassName;\n\n        if (proxyOpts.seq && isEnableConf(pagerConfig)) {\n          tableProps.seqConfig = Object.assign({}, seqConfig, {\n            startIndex: (tablePage.currentPage - 1) * tablePage.pageSize\n          });\n        }\n      }\n\n      if (editConfig) {\n        tableProps.editConfig = Object.assign({}, editConfig, {\n          activeMethod: this.handleActiveMethod\n        });\n      }\n\n      return tableProps;\n    }\n  },\n  watch: {\n    columns: function columns(value) {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        return _this2.loadColumn(value);\n      });\n    },\n    toolbar: function toolbar(value) {\n      if (value) {\n        this.initToolbar();\n      }\n    },\n    toolbarConfig: function toolbarConfig(value) {\n      if (value) {\n        this.initToolbar();\n      }\n    },\n    proxyConfig: function proxyConfig() {\n      this.initProxy();\n    },\n    pagerConfig: function pagerConfig() {\n      this.initPages();\n    }\n  },\n  created: function created() {\n    var data = this.data,\n        formOpts = this.formOpts,\n        proxyOpts = this.proxyOpts,\n        proxyConfig = this.proxyConfig;\n\n    if (proxyConfig && (data || proxyOpts.form && formOpts.data)) {\n      console.error('[vxe-grid] There is a conflict between the props proxy-config and data.');\n    }\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      if (this.toolbar) {\n        UtilTools.warn('vxe.error.delProp', ['grid.toolbar', 'grid.toolbar-config']);\n      }\n\n      if (this.toolbarConfig && !XEUtils.isObject(this.toolbarConfig)) {\n        UtilTools.warn('vxe.error.errProp', [\"grid.toolbar-config=\".concat(this.toolbarConfig), 'grid.toolbar-config={}']);\n      }\n    }\n\n    GlobalEvent.on(this, 'keydown', this.handleGlobalKeydownEvent);\n  },\n  mounted: function mounted() {\n    if (this.columns && this.columns.length) {\n      this.loadColumn(this.columns);\n    }\n\n    this.initToolbar();\n    this.initPages();\n    this.initProxy();\n  },\n  destroyed: function destroyed() {\n    GlobalEvent.off(this, 'keydown');\n  },\n  render: function render(h) {\n    var _ref;\n\n    var $scopedSlots = this.$scopedSlots,\n        vSize = this.vSize,\n        isZMax = this.isZMax;\n    var hasForm = !!($scopedSlots.form || isEnableConf(this.formConfig));\n    var hasToolbar = !!($scopedSlots.toolbar || isEnableConf(this.toolbarConfig) || this.toolbar);\n    var hasPager = !!($scopedSlots.pager || isEnableConf(this.pagerConfig));\n    return h('div', {\n      class: ['vxe-grid', (_ref = {}, _defineProperty(_ref, \"size--\".concat(vSize), vSize), _defineProperty(_ref, 'is--animat', !!this.animat), _defineProperty(_ref, 'is--round', this.round), _defineProperty(_ref, 'is--maximize', isZMax), _defineProperty(_ref, 'is--loading', this.loading || this.tableLoading), _ref)],\n      style: this.renderStyle\n    }, [\n    /**\r\n     * 渲染表单\r\n     */\n    hasForm ? h('div', {\n      ref: 'formWrapper',\n      class: 'vxe-grid--form-wrapper'\n    }, $scopedSlots.form ? $scopedSlots.form.call(this, {\n      $grid: this\n    }, h) : renderDefaultForm(h, this)) : null,\n    /**\r\n     * 渲染工具栏\r\n     */\n    hasToolbar ? h('div', {\n      ref: 'toolbarWrapper',\n      class: 'vxe-grid--toolbar-wrapper'\n    }, $scopedSlots.toolbar ? $scopedSlots.toolbar.call(this, {\n      $grid: this\n    }, h) : [h('vxe-toolbar', {\n      props: this.toolbarOpts,\n      ref: 'xToolbar',\n      scopedSlots: getToolbarSlots(this)\n    })]) : null,\n    /**\r\n     * 渲染表格顶部区域\r\n     */\n    $scopedSlots.top ? h('div', {\n      ref: 'topWrapper',\n      class: 'vxe-grid--top-wrapper'\n    }, $scopedSlots.top.call(this, {\n      $grid: this\n    }, h)) : null,\n    /**\r\n     * 渲染表格\r\n     */\n    h('vxe-table', {\n      props: this.tableProps,\n      on: getTableOns(this),\n      scopedSlots: $scopedSlots,\n      ref: 'xTable'\n    }),\n    /**\r\n     * 渲染表格底部区域\r\n     */\n    $scopedSlots.bottom ? h('div', {\n      ref: 'bottomWrapper',\n      class: 'vxe-grid--bottom-wrapper'\n    }, $scopedSlots.bottom.call(this, {\n      $grid: this\n    }, h)) : null,\n    /**\r\n     * 渲染分页\r\n     */\n    hasPager ? h('div', {\n      ref: 'pagerWrapper',\n      class: 'vxe-grid--pager-wrapper'\n    }, $scopedSlots.pager ? $scopedSlots.pager.call(this, {\n      $grid: this\n    }, h) : [h('vxe-pager', {\n      props: _objectSpread(_objectSpread({}, this.pagerOpts), this.proxyConfig ? this.tablePage : {}),\n      on: {\n        'page-change': this.pageChangeEvent\n      },\n      scopedSlots: getPagerSlots(this)\n    })]) : null]);\n  },\n  methods: _objectSpread(_objectSpread({}, methods), {}, {\n    callSlot: function callSlot(slotFunc, params, h, vNodes) {\n      if (slotFunc) {\n        var $scopedSlots = this.$scopedSlots;\n\n        if (XEUtils.isString(slotFunc)) {\n          slotFunc = $scopedSlots[slotFunc] || null;\n        }\n\n        if (XEUtils.isFunction(slotFunc)) {\n          return slotFunc.call(this, params, h, vNodes);\n        }\n      }\n\n      return [];\n    },\n    getParentHeight: function getParentHeight() {\n      var $el = this.$el,\n          isZMax = this.isZMax;\n      return (isZMax ? DomTools.getDomNode().visibleHeight : XEUtils.toNumber(getComputedStyle($el.parentNode).height)) - this.getExcludeHeight();\n    },\n\n    /**\r\n     * 获取需要排除的高度\r\n     */\n    getExcludeHeight: function getExcludeHeight() {\n      var $refs = this.$refs,\n          $el = this.$el,\n          isZMax = this.isZMax,\n          height = this.height;\n      var formWrapper = $refs.formWrapper,\n          toolbarWrapper = $refs.toolbarWrapper,\n          topWrapper = $refs.topWrapper,\n          bottomWrapper = $refs.bottomWrapper,\n          pagerWrapper = $refs.pagerWrapper;\n      var parentPaddingSize = isZMax || height !== 'auto' ? 0 : getPaddingTopBottomSize($el.parentNode);\n      return parentPaddingSize + getPaddingTopBottomSize($el) + getOffsetHeight(formWrapper) + getOffsetHeight(toolbarWrapper) + getOffsetHeight(topWrapper) + getOffsetHeight(bottomWrapper) + getOffsetHeight(pagerWrapper);\n    },\n    handleRowClassName: function handleRowClassName(params) {\n      var rowClassName = this.rowClassName;\n      var clss = [];\n\n      if (this.pendingRecords.some(function (item) {\n        return item === params.row;\n      })) {\n        clss.push('row--pending');\n      }\n\n      clss.push(rowClassName ? XEUtils.isFunction(rowClassName) ? rowClassName(params) : rowClassName : '');\n      return clss;\n    },\n    handleActiveMethod: function handleActiveMethod(params) {\n      var editConfig = this.editConfig;\n      var activeMethod = editConfig ? editConfig.activeMethod : null;\n      return this.pendingRecords.indexOf(params.row) === -1 && (!activeMethod || activeMethod(params));\n    },\n    initToolbar: function initToolbar() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        var _this3$$refs = _this3.$refs,\n            xTable = _this3$$refs.xTable,\n            xToolbar = _this3$$refs.xToolbar;\n\n        if (xTable && xToolbar) {\n          xTable.connect(xToolbar);\n        }\n      });\n    },\n    initPages: function initPages() {\n      var tablePage = this.tablePage,\n          pagerConfig = this.pagerConfig,\n          pagerOpts = this.pagerOpts;\n      var currentPage = pagerOpts.currentPage,\n          pageSize = pagerOpts.pageSize;\n\n      if (pagerConfig) {\n        if (currentPage) {\n          tablePage.currentPage = currentPage;\n        }\n\n        if (pageSize) {\n          tablePage.pageSize = pageSize;\n        }\n      }\n    },\n    initProxy: function initProxy() {\n      var _this4 = this;\n\n      var proxyInited = this.proxyInited,\n          proxyConfig = this.proxyConfig,\n          proxyOpts = this.proxyOpts,\n          formConfig = this.formConfig,\n          formOpts = this.formOpts;\n\n      if (proxyConfig) {\n        if (isEnableConf(formConfig) && proxyOpts.form && formOpts.items) {\n          var formData = {};\n          formOpts.items.forEach(function (_ref2) {\n            var field = _ref2.field,\n                itemRender = _ref2.itemRender;\n\n            if (field) {\n              formData[field] = itemRender && !XEUtils.isUndefined(itemRender.defaultValue) ? itemRender.defaultValue : undefined;\n            }\n          });\n          this.formData = formData;\n        }\n\n        if (!proxyInited && proxyOpts.autoLoad !== false) {\n          this.proxyInited = true;\n          this.$nextTick(function () {\n            return _this4.commitProxy('_init');\n          });\n        }\n      }\n    },\n    handleGlobalKeydownEvent: function handleGlobalKeydownEvent(evnt) {\n      var isEsc = evnt.keyCode === 27;\n\n      if (isEsc && this.isZMax && this.zoomOpts.escRestore !== false) {\n        this.triggerZoomEvent(evnt);\n      }\n    },\n\n    /**\r\n     * 提交指令，支持 code 或 button\r\n     * @param {String/Object} code 字符串或对象\r\n     */\n    commitProxy: function commitProxy(proxyTarget) {\n      var _this5 = this;\n\n      var $refs = this.$refs,\n          toolbar = this.toolbar,\n          toolbarConfig = this.toolbarConfig,\n          toolbarOpts = this.toolbarOpts,\n          proxyOpts = this.proxyOpts,\n          tablePage = this.tablePage,\n          pagerConfig = this.pagerConfig,\n          formData = this.formData,\n          isMsg = this.isMsg;\n      var beforeQuery = proxyOpts.beforeQuery,\n          afterQuery = proxyOpts.afterQuery,\n          beforeDelete = proxyOpts.beforeDelete,\n          afterDelete = proxyOpts.afterDelete,\n          beforeSave = proxyOpts.beforeSave,\n          afterSave = proxyOpts.afterSave,\n          _proxyOpts$ajax = proxyOpts.ajax,\n          ajax = _proxyOpts$ajax === void 0 ? {} : _proxyOpts$ajax,\n          _proxyOpts$props = proxyOpts.props,\n          proxyProps = _proxyOpts$props === void 0 ? {} : _proxyOpts$props;\n      var $xetable = $refs.xTable;\n      var button;\n      var code;\n\n      if (XEUtils.isString(proxyTarget)) {\n        var matchObj = toolbarConfig || toolbar ? XEUtils.findTree(toolbarOpts.buttons, function (item) {\n          return item.code === proxyTarget;\n        }, {\n          children: 'dropdowns'\n        }) : null;\n        code = proxyTarget;\n        button = matchObj ? matchObj.item : null;\n      } else {\n        button = proxyTarget;\n        code = button.code;\n      }\n\n      var btnParams = button ? button.params : null;\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      switch (code) {\n        case 'insert':\n          this.insert();\n          break;\n\n        case 'insert_actived':\n          this.insert().then(function (_ref3) {\n            var row = _ref3.row;\n            return _this5.setActiveRow(row);\n          });\n          break;\n\n        case 'mark_cancel':\n          this.triggerPendingEvent(code);\n          break;\n\n        case 'remove':\n          return this.handleDeleteRow(code, 'vxe.grid.removeSelectRecord', function () {\n            return _this5.removeCheckboxRow();\n          });\n\n        case 'import':\n          this.importData(btnParams);\n          break;\n\n        case 'open_import':\n          this.openImport(btnParams);\n          break;\n\n        case 'export':\n          this.exportData(btnParams);\n          break;\n\n        case 'open_export':\n          this.openExport(btnParams);\n          break;\n\n        case 'reset_custom':\n          this.resetColumn(true);\n          break;\n\n        case '_init':\n        case 'reload':\n        case 'query':\n          {\n            var ajaxMethods = ajax.query;\n\n            if (ajaxMethods) {\n              var isInited = code === '_init';\n              var isReload = code === 'reload';\n              var sortList = [];\n              var filterList = [];\n              var pageParams = {};\n\n              if (pagerConfig) {\n                if (isInited || isReload) {\n                  tablePage.currentPage = 1;\n                }\n\n                if (isEnableConf(pagerConfig)) {\n                  pageParams = _objectSpread({}, tablePage);\n                }\n              }\n\n              if (isInited) {\n                var sortOpts = $xetable.sortOpts;\n                var defaultSort = sortOpts.defaultSort; // 如果使用默认排序\n\n                if (defaultSort) {\n                  if (!XEUtils.isArray(defaultSort)) {\n                    defaultSort = [defaultSort];\n                  }\n\n                  sortList = defaultSort.map(function (item) {\n                    return {\n                      property: item.field,\n                      order: item.order\n                    };\n                  });\n                }\n\n                filterList = $xetable.getCheckedFilters();\n              } else {\n                if (isReload) {\n                  this.pendingRecords = [];\n                  $xetable.clearAll();\n                } else {\n                  sortList = $xetable.getSortColumns();\n                  filterList = $xetable.getCheckedFilters();\n                }\n              }\n\n              var params = {\n                code: code,\n                button: button,\n                $grid: this,\n                page: pageParams,\n                sort: sortList.length ? sortList[0] : {},\n                sorts: sortList,\n                filters: filterList,\n                form: formData,\n                options: ajaxMethods\n              };\n              this.sortData = sortList;\n              this.filterData = filterList;\n              this.tableLoading = true;\n              var applyArgs = [params].concat(args);\n              return Promise.resolve((beforeQuery || ajaxMethods).apply(void 0, _toConsumableArray(applyArgs))).catch(function (e) {\n                return e;\n              }).then(function (rest) {\n                _this5.tableLoading = false;\n\n                if (rest) {\n                  if (isEnableConf(pagerConfig)) {\n                    var total = XEUtils.get(rest, proxyProps.total || 'page.total') || 0;\n                    tablePage.total = total;\n                    _this5.tableData = XEUtils.get(rest, proxyProps.result || 'result') || []; // 检验当前页码，不能超出当前最大页数\n\n                    var pageCount = Math.max(Math.ceil(total / tablePage.pageSize), 1);\n\n                    if (tablePage.currentPage > pageCount) {\n                      tablePage.currentPage = pageCount;\n                    }\n                  } else {\n                    _this5.tableData = (proxyProps.list ? XEUtils.get(rest, proxyProps.list) : rest) || [];\n                  }\n                } else {\n                  _this5.tableData = [];\n                }\n\n                if (afterQuery) {\n                  afterQuery.apply(void 0, _toConsumableArray(applyArgs));\n                }\n              });\n            } else {\n              UtilTools.error('vxe.error.notFunc', ['query']);\n            }\n\n            break;\n          }\n\n        case 'delete':\n          {\n            var _ajaxMethods = ajax.delete;\n\n            if (_ajaxMethods) {\n              var removeRecords = this.getCheckboxRecords();\n              var body = {\n                removeRecords: removeRecords\n              };\n\n              var _applyArgs = [{\n                $grid: this,\n                code: code,\n                button: button,\n                body: body,\n                options: _ajaxMethods\n              }].concat(args);\n\n              if (removeRecords.length) {\n                return this.handleDeleteRow(code, 'vxe.grid.deleteSelectRecord', function () {\n                  _this5.tableLoading = true;\n                  return Promise.resolve((beforeDelete || _ajaxMethods).apply(void 0, _toConsumableArray(_applyArgs))).then(function (rest) {\n                    _this5.tableLoading = false;\n                    _this5.pendingRecords = _this5.pendingRecords.filter(function (row) {\n                      return removeRecords.indexOf(row) === -1;\n                    });\n\n                    if (isMsg) {\n                      VXETable.modal.message({\n                        content: _this5.getRespMsg(rest, 'vxe.grid.delSuccess'),\n                        status: 'success'\n                      });\n                    }\n\n                    if (afterDelete) {\n                      afterDelete.apply(void 0, _toConsumableArray(_applyArgs));\n                    } else {\n                      _this5.commitProxy('query');\n                    }\n                  }).catch(function (rest) {\n                    _this5.tableLoading = false;\n\n                    if (isMsg) {\n                      VXETable.modal.message({\n                        id: code,\n                        content: _this5.getRespMsg(rest, 'vxe.grid.operError'),\n                        status: 'error'\n                      });\n                    }\n                  });\n                });\n              } else {\n                if (isMsg) {\n                  VXETable.modal.message({\n                    id: code,\n                    content: GlobalConfig.i18n('vxe.grid.selectOneRecord'),\n                    status: 'warning'\n                  });\n                }\n              }\n            } else {\n              UtilTools.error('vxe.error.notFunc', [code]);\n            }\n\n            break;\n          }\n\n        case 'save':\n          {\n            var _ajaxMethods2 = ajax.save;\n\n            if (_ajaxMethods2) {\n              var _body = Object.assign({\n                pendingRecords: this.pendingRecords\n              }, this.getRecordset());\n\n              var insertRecords = _body.insertRecords,\n                  _removeRecords = _body.removeRecords,\n                  updateRecords = _body.updateRecords,\n                  pendingRecords = _body.pendingRecords;\n\n              var _applyArgs2 = [{\n                $grid: this,\n                code: code,\n                button: button,\n                body: _body,\n                options: _ajaxMethods2\n              }].concat(args); // 排除掉新增且标记为删除的数据\n\n\n              if (insertRecords.length) {\n                _body.pendingRecords = pendingRecords.filter(function (row) {\n                  return insertRecords.indexOf(row) === -1;\n                });\n              } // 排除已标记为删除的数据\n\n\n              if (pendingRecords.length) {\n                _body.insertRecords = insertRecords.filter(function (row) {\n                  return pendingRecords.indexOf(row) === -1;\n                });\n              } // 只校验新增和修改的数据\n\n\n              return this.validate(_body.insertRecords.concat(updateRecords)).then(function () {\n                if (_body.insertRecords.length || _removeRecords.length || updateRecords.length || _body.pendingRecords.length) {\n                  _this5.tableLoading = true;\n                  return Promise.resolve((beforeSave || _ajaxMethods2).apply(void 0, _toConsumableArray(_applyArgs2))).then(function (rest) {\n                    _this5.tableLoading = false;\n                    _this5.pendingRecords = [];\n\n                    if (isMsg) {\n                      VXETable.modal.message({\n                        content: _this5.getRespMsg(rest, 'vxe.grid.saveSuccess'),\n                        status: 'success'\n                      });\n                    }\n\n                    if (afterSave) {\n                      afterSave.apply(void 0, _toConsumableArray(_applyArgs2));\n                    } else {\n                      _this5.commitProxy('query');\n                    }\n                  }).catch(function (rest) {\n                    _this5.tableLoading = false;\n\n                    if (isMsg) {\n                      VXETable.modal.message({\n                        id: code,\n                        content: _this5.getRespMsg(rest, 'vxe.grid.operError'),\n                        status: 'error'\n                      });\n                    }\n                  });\n                } else {\n                  if (isMsg) {\n                    VXETable.modal.message({\n                      id: code,\n                      content: GlobalConfig.i18n('vxe.grid.dataUnchanged'),\n                      status: 'info'\n                    });\n                  }\n                }\n              }).catch(function (errMap) {\n                return errMap;\n              });\n            } else {\n              UtilTools.error('vxe.error.notFunc', [code]);\n            }\n\n            break;\n          }\n\n        default:\n          {\n            var btnMethod = VXETable.commands.get(code);\n\n            if (btnMethod) {\n              btnMethod.apply(void 0, [{\n                code: code,\n                button: button,\n                $grid: this,\n                $table: $xetable\n              }].concat(args));\n            }\n          }\n      }\n\n      return this.$nextTick();\n    },\n    getRespMsg: function getRespMsg(rest, defaultMsg) {\n      var _this$proxyOpts$props = this.proxyOpts.props,\n          proxyProps = _this$proxyOpts$props === void 0 ? {} : _this$proxyOpts$props;\n      var msg;\n\n      if (rest && proxyProps.message) {\n        msg = XEUtils.get(rest, proxyProps.message);\n      }\n\n      return msg || GlobalConfig.i18n(defaultMsg);\n    },\n    handleDeleteRow: function handleDeleteRow(code, alertKey, callback) {\n      var selectRecords = this.getCheckboxRecords();\n\n      if (this.isMsg) {\n        if (selectRecords.length) {\n          return VXETable.modal.confirm({\n            id: \"cfm_\".concat(code),\n            content: GlobalConfig.i18n(alertKey),\n            escClosable: true\n          }).then(function (type) {\n            if (type === 'confirm') {\n              callback();\n            }\n          });\n        } else {\n          VXETable.modal.message({\n            id: \"msg_\".concat(code),\n            content: GlobalConfig.i18n('vxe.grid.selectOneRecord'),\n            status: 'warning'\n          });\n        }\n      } else {\n        if (selectRecords.length) {\n          callback();\n        }\n      }\n\n      return Promise.resolve();\n    },\n    getFormItems: function getFormItems(itemIndex) {\n      var formConfig = this.formConfig,\n          formOpts = this.formOpts;\n      var itemList = [];\n      XEUtils.eachTree(isEnableConf(formConfig) && formOpts.items ? formOpts.items : [], function (item) {\n        itemList.push(item);\n      }, {\n        children: 'children'\n      });\n      return XEUtils.isUndefined(itemIndex) ? itemList : itemList[itemIndex];\n    },\n    getPendingRecords: function getPendingRecords() {\n      return this.pendingRecords;\n    },\n    triggerToolbarBtnEvent: function triggerToolbarBtnEvent(button, evnt) {\n      this.commitProxy(button, evnt);\n      this.$emit('toolbar-button-click', {\n        code: button.code,\n        button: button,\n        $grid: this,\n        $event: evnt\n      });\n    },\n    triggerToolbarTolEvent: function triggerToolbarTolEvent(tool, evnt) {\n      this.commitProxy(tool, evnt);\n      this.$emit('toolbar-tool-click', {\n        code: tool.code,\n        tool: tool,\n        $grid: this,\n        $event: evnt\n      });\n    },\n    triggerPendingEvent: function triggerPendingEvent(code) {\n      var pendingRecords = this.pendingRecords,\n          isMsg = this.isMsg;\n      var selectRecords = this.getCheckboxRecords();\n\n      if (selectRecords.length) {\n        var plus = [];\n        var minus = [];\n        selectRecords.forEach(function (data) {\n          if (pendingRecords.some(function (item) {\n            return data === item;\n          })) {\n            minus.push(data);\n          } else {\n            plus.push(data);\n          }\n        });\n\n        if (minus.length) {\n          this.pendingRecords = pendingRecords.filter(function (item) {\n            return minus.indexOf(item) === -1;\n          }).concat(plus);\n        } else if (plus.length) {\n          this.pendingRecords = pendingRecords.concat(plus);\n        }\n\n        this.clearCheckboxRow();\n      } else {\n        if (isMsg) {\n          VXETable.modal.message({\n            id: code,\n            content: GlobalConfig.i18n('vxe.grid.selectOneRecord'),\n            status: 'warning'\n          });\n        }\n      }\n    },\n    pageChangeEvent: function pageChangeEvent(params) {\n      var proxyConfig = this.proxyConfig,\n          tablePage = this.tablePage;\n      var currentPage = params.currentPage,\n          pageSize = params.pageSize;\n      tablePage.currentPage = currentPage;\n      tablePage.pageSize = pageSize;\n      this.$emit('page-change', Object.assign({\n        $grid: this\n      }, params));\n\n      if (proxyConfig) {\n        this.commitProxy('query');\n      }\n    },\n    sortChangeEvent: function sortChangeEvent(params) {\n      var $table = params.$table,\n          column = params.column,\n          sortList = params.sortList;\n      var isRemote = XEUtils.isBoolean(column.remoteSort) ? column.remoteSort : $table.sortOpts.remote; // 如果是服务端排序\n\n      if (isRemote) {\n        this.sortData = sortList;\n\n        if (this.proxyConfig) {\n          this.tablePage.currentPage = 1;\n          this.commitProxy('query');\n        }\n      }\n\n      this.$emit('sort-change', Object.assign({\n        $grid: this\n      }, params));\n    },\n    filterChangeEvent: function filterChangeEvent(params) {\n      var $table = params.$table,\n          filterList = params.filterList; // 如果是服务端过滤\n\n      if ($table.filterOpts.remote) {\n        this.filterData = filterList;\n\n        if (this.proxyConfig) {\n          this.tablePage.currentPage = 1;\n          this.commitProxy('query');\n        }\n      }\n\n      this.$emit('filter-change', Object.assign({\n        $grid: this\n      }, params));\n    },\n    submitEvent: function submitEvent(params) {\n      var proxyConfig = this.proxyConfig;\n\n      if (proxyConfig) {\n        this.commitProxy('reload');\n      }\n\n      this.$emit('form-submit', Object.assign({\n        $grid: this\n      }, params));\n    },\n    resetEvent: function resetEvent(params) {\n      var proxyConfig = this.proxyConfig;\n\n      if (proxyConfig) {\n        this.commitProxy('reload');\n      }\n\n      this.$emit('form-reset', Object.assign({\n        $grid: this\n      }, params));\n    },\n    submitInvalidEvent: function submitInvalidEvent(params) {\n      this.$emit('form-submit-invalid', Object.assign({\n        $grid: this\n      }, params));\n    },\n    togglCollapseEvent: function togglCollapseEvent(params) {\n      var _this6 = this;\n\n      this.$nextTick(function () {\n        return _this6.recalculate(true);\n      });\n      this.$emit('form-toggle-collapse', Object.assign({\n        $grid: this\n      }, params));\n    },\n    triggerZoomEvent: function triggerZoomEvent(evnt) {\n      this.zoom();\n      this.$emit('zoom', {\n        $grid: this,\n        type: this.isZMax ? 'max' : 'revert',\n        $event: evnt\n      });\n    },\n    zoom: function zoom() {\n      return this[this.isZMax ? 'revert' : 'maximize']();\n    },\n    isMaximized: function isMaximized() {\n      return this.isZMax;\n    },\n    maximize: function maximize() {\n      return this.handleZoom(true);\n    },\n    revert: function revert() {\n      return this.handleZoom();\n    },\n    handleZoom: function handleZoom(isMax) {\n      var _this7 = this;\n\n      var isZMax = this.isZMax;\n\n      if (isMax ? !isZMax : isZMax) {\n        this.isZMax = !isZMax;\n\n        if (this.tZindex < UtilTools.getLastZIndex()) {\n          this.tZindex = UtilTools.nextZIndex();\n        }\n      }\n\n      return this.$nextTick().then(function () {\n        return _this7.recalculate(true);\n      }).then(function () {\n        return _this7.isZMax;\n      });\n    },\n    getProxyInfo: function getProxyInfo() {\n      var sortData = this.sortData,\n          proxyConfig = this.proxyConfig;\n\n      if (proxyConfig) {\n        return {\n          data: this.tableData,\n          filter: this.filterData,\n          form: this.formData,\n          sort: sortData.length ? sortData[0] : {},\n          sorts: sortData,\n          pager: this.tablePage,\n          pendingRecords: this.pendingRecords\n        };\n      }\n\n      return null;\n    }\n  }, process.env.VUE_APP_VXE_TABLE_ENV === 'development' ? {\n    loadColumn: function loadColumn(columns) {\n      var $scopedSlots = this.$scopedSlots;\n      XEUtils.eachTree(columns, function (column) {\n        if (column.slots) {\n          XEUtils.each(column.slots, function (func) {\n            if (!XEUtils.isFunction(func)) {\n              if (!$scopedSlots[func]) {\n                UtilTools.error('vxe.error.notSlot', [func]);\n              }\n            }\n          });\n        }\n      });\n      return this.$refs.xTable.loadColumn(columns);\n    },\n    reloadColumn: function reloadColumn(columns) {\n      this.clearAll();\n      return this.loadColumn(columns);\n    }\n  } : null)\n};",null]}