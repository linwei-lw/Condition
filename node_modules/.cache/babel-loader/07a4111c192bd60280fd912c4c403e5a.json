{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\menu\\src\\mixin.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\menu\\src\\mixin.js","mtime":1635230121403},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import XEUtils from 'xe-utils';\nimport { UtilTools, DomTools } from '../../tools';\nimport VXETable from '../../v-x-e-table';\nexport default {\n  methods: {\n    /**\r\n     * 关闭快捷菜单\r\n     */\n    _closeMenu() {\n      Object.assign(this.ctxMenuStore, {\n        visible: false,\n        selected: null,\n        selectChild: null,\n        showChild: false\n      });\n      return this.$nextTick();\n    },\n\n    // 处理菜单的移动\n    moveCtxMenu(evnt, keyCode, ctxMenuStore, property, operKey, operRest, menuList) {\n      let selectItem;\n      const selectIndex = XEUtils.findIndexOf(menuList, item => ctxMenuStore[property] === item);\n\n      if (keyCode === operKey) {\n        if (operRest && UtilTools.hasChildrenList(ctxMenuStore.selected)) {\n          ctxMenuStore.showChild = true;\n        } else {\n          ctxMenuStore.showChild = false;\n          ctxMenuStore.selectChild = null;\n        }\n      } else if (keyCode === 38) {\n        for (let len = selectIndex - 1; len >= 0; len--) {\n          if (menuList[len].visible !== false) {\n            selectItem = menuList[len];\n            break;\n          }\n        }\n\n        ctxMenuStore[property] = selectItem || menuList[menuList.length - 1];\n      } else if (keyCode === 40) {\n        for (let index = selectIndex + 1; index < menuList.length; index++) {\n          if (menuList[index].visible !== false) {\n            selectItem = menuList[index];\n            break;\n          }\n        }\n\n        ctxMenuStore[property] = selectItem || menuList[0];\n      } else if (ctxMenuStore[property] && (keyCode === 13 || keyCode === 32)) {\n        this.ctxMenuLinkEvent(evnt, ctxMenuStore[property]);\n      }\n    },\n\n    /**\r\n     * 快捷菜单事件处理\r\n     */\n    handleGlobalContextmenuEvent(evnt) {\n      const $refs = this.$refs,\n            tId = this.tId,\n            editStore = this.editStore,\n            menuConfig = this.menuConfig,\n            contextMenu = this.contextMenu,\n            ctxMenuStore = this.ctxMenuStore,\n            ctxMenuOpts = this.ctxMenuOpts,\n            mouseConfig = this.mouseConfig,\n            mouseOpts = this.mouseOpts;\n      const selected = editStore.selected;\n      const layoutList = ['header', 'body', 'footer'];\n\n      if (menuConfig || contextMenu) {\n        if (ctxMenuStore.visible && $refs.ctxWrapper && DomTools.getEventTargetNode(evnt, $refs.ctxWrapper.$el).flag) {\n          evnt.preventDefault();\n          return;\n        }\n\n        if (this._keyCtx) {\n          const type = 'body';\n          const params = {\n            type,\n            $grid: this.$xegrid,\n            $table: this,\n            keyboard: true,\n            columns: this.visibleColumn.slice(0),\n            $event: evnt // 如果开启单元格区域\n\n          };\n\n          if (mouseConfig && mouseOpts.area) {\n            const activeArea = this.getActiveCellArea();\n\n            if (activeArea && activeArea.row && activeArea.column) {\n              params.row = activeArea.row;\n              params.column = activeArea.column;\n              this.openContextMenu(evnt, type, params);\n              return;\n            }\n          } else if (mouseConfig && mouseOpts.selected) {\n            // 如果启用键盘导航且已选中单元格\n            if (selected.row && selected.column) {\n              params.row = selected.row;\n              params.column = selected.column;\n              this.openContextMenu(evnt, type, params);\n              return;\n            }\n          }\n        } // 分别匹配表尾、内容、表尾的快捷菜单\n\n\n        for (let index = 0; index < layoutList.length; index++) {\n          const layout = layoutList[index];\n          const columnTargetNode = DomTools.getEventTargetNode(evnt, this.$el, `vxe-${layout}--column`, target => {\n            // target=td|th，直接向上找 table 去匹配即可\n            return target.parentNode.parentNode.parentNode.getAttribute('xid') === tId;\n          });\n          const params = {\n            type: layout,\n            $grid: this.$xegrid,\n            $table: this,\n            columns: this.visibleColumn.slice(0),\n            $event: evnt\n          };\n\n          if (columnTargetNode.flag) {\n            const cell = columnTargetNode.targetElem;\n            const column = this.getColumnNode(cell).item;\n            let typePrefix = `${layout}-`;\n            Object.assign(params, {\n              column,\n              columnIndex: this.getColumnIndex(column),\n              cell\n            });\n\n            if (layout === 'body') {\n              const row = this.getRowNode(cell.parentNode).item;\n              typePrefix = '';\n              params.row = row;\n              params.rowIndex = this.getRowIndex(row);\n            }\n\n            this.openContextMenu(evnt, layout, params); // 在 v4 中废弃事件 cell-context-menu、header-cell-context-menu、footer-cell-context-menu\n\n            if (this.$listeners[`${typePrefix}cell-context-menu`]) {\n              if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n                UtilTools.warn('vxe.error.delEvent', [`${typePrefix}cell-context-menu`, `${typePrefix}cell-menu`]);\n              }\n\n              this.emitEvent(`${typePrefix}cell-context-menu`, params, evnt);\n            } else {\n              this.emitEvent(`${typePrefix}cell-menu`, params, evnt);\n            }\n\n            return;\n          } else if (DomTools.getEventTargetNode(evnt, this.$el, `vxe-table--${layout}-wrapper`, target => target.getAttribute('xid') === tId).flag) {\n            if (ctxMenuOpts.trigger === 'cell') {\n              evnt.preventDefault();\n            } else {\n              this.openContextMenu(evnt, layout, params);\n            }\n\n            return;\n          }\n        }\n      }\n\n      if ($refs.filterWrapper && !DomTools.getEventTargetNode(evnt, $refs.filterWrapper.$el).flag) {\n        this.closeFilter();\n      }\n\n      this.closeMenu();\n    },\n\n    /**\r\n     * 显示快捷菜单\r\n     */\n    openContextMenu(evnt, type, params) {\n      const isCtxMenu = this.isCtxMenu,\n            ctxMenuStore = this.ctxMenuStore,\n            ctxMenuOpts = this.ctxMenuOpts;\n      const config = ctxMenuOpts[type];\n      const visibleMethod = ctxMenuOpts.visibleMethod;\n\n      if (config) {\n        const options = config.options,\n              disabled = config.disabled;\n\n        if (disabled) {\n          evnt.preventDefault();\n        } else if (isCtxMenu && options && options.length) {\n          params.options = options;\n          this.preventEvent(evnt, 'event.showMenu', params, () => {\n            if (!visibleMethod || visibleMethod(params)) {\n              evnt.preventDefault();\n              this.updateZindex();\n\n              const _DomTools$getDomNode = DomTools.getDomNode(),\n                    scrollTop = _DomTools$getDomNode.scrollTop,\n                    scrollLeft = _DomTools$getDomNode.scrollLeft,\n                    visibleHeight = _DomTools$getDomNode.visibleHeight,\n                    visibleWidth = _DomTools$getDomNode.visibleWidth;\n\n              let top = evnt.clientY + scrollTop;\n              let left = evnt.clientX + scrollLeft;\n\n              const handleVisible = () => {\n                Object.assign(ctxMenuStore, {\n                  args: params,\n                  visible: true,\n                  list: options,\n                  selected: null,\n                  selectChild: null,\n                  showChild: false,\n                  style: {\n                    zIndex: this.tZindex,\n                    top: `${top}px`,\n                    left: `${left}px`\n                  }\n                });\n                this.$nextTick(() => {\n                  const ctxElem = this.$refs.ctxWrapper.$el;\n                  const clientHeight = ctxElem.clientHeight;\n                  const clientWidth = ctxElem.clientWidth;\n\n                  const _DomTools$getAbsolute = DomTools.getAbsolutePos(ctxElem),\n                        boundingTop = _DomTools$getAbsolute.boundingTop,\n                        boundingLeft = _DomTools$getAbsolute.boundingLeft;\n\n                  const offsetTop = boundingTop + clientHeight - visibleHeight;\n                  const offsetLeft = boundingLeft + clientWidth - visibleWidth;\n\n                  if (offsetTop > -10) {\n                    ctxMenuStore.style.top = `${Math.max(scrollTop + 2, top - clientHeight - 2)}px`;\n                  }\n\n                  if (offsetLeft > -10) {\n                    ctxMenuStore.style.left = `${Math.max(scrollLeft + 2, left - clientWidth - 2)}px`;\n                  }\n                });\n              };\n\n              const keyboard = params.keyboard,\n                    row = params.row,\n                    column = params.column;\n\n              if (keyboard && row && column) {\n                this.scrollToRow(row, column).then(() => {\n                  const cell = this.getCell(row, column);\n\n                  const _DomTools$getAbsolute2 = DomTools.getAbsolutePos(cell),\n                        boundingTop = _DomTools$getAbsolute2.boundingTop,\n                        boundingLeft = _DomTools$getAbsolute2.boundingLeft;\n\n                  top = boundingTop + scrollTop + Math.floor(cell.offsetHeight / 2);\n                  left = boundingLeft + scrollLeft + Math.floor(cell.offsetWidth / 2);\n                  handleVisible();\n                });\n              } else {\n                handleVisible();\n              }\n            } else {\n              this.closeMenu();\n            }\n          });\n        }\n      }\n\n      this.closeFilter();\n    },\n\n    ctxMenuMouseoverEvent(evnt, item, child) {\n      const menuElem = evnt.currentTarget;\n      const ctxMenuStore = this.ctxMenuStore;\n      evnt.preventDefault();\n      evnt.stopPropagation();\n      ctxMenuStore.selected = item;\n      ctxMenuStore.selectChild = child;\n\n      if (!child) {\n        ctxMenuStore.showChild = UtilTools.hasChildrenList(item);\n\n        if (ctxMenuStore.showChild) {\n          this.$nextTick(() => {\n            const childWrapperElem = menuElem.nextElementSibling;\n\n            if (childWrapperElem) {\n              const _DomTools$getAbsolute3 = DomTools.getAbsolutePos(menuElem),\n                    boundingTop = _DomTools$getAbsolute3.boundingTop,\n                    boundingLeft = _DomTools$getAbsolute3.boundingLeft,\n                    visibleHeight = _DomTools$getAbsolute3.visibleHeight,\n                    visibleWidth = _DomTools$getAbsolute3.visibleWidth;\n\n              const posTop = boundingTop + menuElem.offsetHeight;\n              const posLeft = boundingLeft + menuElem.offsetWidth;\n              let left = '';\n              let right = ''; // 是否超出右侧\n\n              if (posLeft + childWrapperElem.offsetWidth > visibleWidth - 10) {\n                left = 'auto';\n                right = `${menuElem.offsetWidth}px`;\n              } // 是否超出底部\n\n\n              let top = '';\n              let bottom = '';\n\n              if (posTop + childWrapperElem.offsetHeight > visibleHeight - 10) {\n                top = 'auto';\n                bottom = '0';\n              }\n\n              childWrapperElem.style.left = left;\n              childWrapperElem.style.right = right;\n              childWrapperElem.style.top = top;\n              childWrapperElem.style.bottom = bottom;\n            }\n          });\n        }\n      }\n    },\n\n    ctxMenuMouseoutEvent(evnt, item) {\n      const ctxMenuStore = this.ctxMenuStore;\n\n      if (!item.children) {\n        ctxMenuStore.selected = null;\n      }\n\n      ctxMenuStore.selectChild = null;\n    },\n\n    /**\r\n     * 快捷菜单点击事件\r\n     */\n    ctxMenuLinkEvent(evnt, menu) {\n      // 如果一级菜单有配置 code 则允许点击，否则不能点击\n      if (!menu.disabled && (menu.code || !menu.children || !menu.children.length)) {\n        const ctxMenuMethod = VXETable.menus.get(menu.code);\n        const params = Object.assign({\n          menu,\n          $grid: this.$xegrid,\n          $table: this,\n          $event: evnt\n        }, this.ctxMenuStore.args);\n\n        if (ctxMenuMethod) {\n          ctxMenuMethod.call(this, params, evnt);\n        } // 在 v4 中废弃事件 context-menu-click\n\n\n        if (this.$listeners['context-menu-click']) {\n          if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n            UtilTools.warn('vxe.error.delEvent', ['context-menu-click', 'menu-click']);\n          }\n\n          this.emitEvent('context-menu-click', params, evnt);\n        } else {\n          this.emitEvent('menu-click', params, evnt);\n        }\n\n        this.closeMenu();\n      }\n    }\n\n  }\n};",null]}