{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\Slider.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\Slider.vue","mtime":1638496827581},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 使用例子\n* <Slider tooltip=\"{}秒\" :min=\"0\" :max=\"59\" :signs=\"[0,30,59]\" v-model=\"second\" @change=\"onSecondChg()\"/>  \n* \n*  data: {second: 0},\n*  methods: {\n*    onSecondChg(second) {\n*    }\n*  }\n*/\nexport default {\n  name: \"Slider\",\n  props: {\n    value: {\n      type: [String, Number],\n      default: 0\n    },\n    // 当前值(v-model)\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    signs: Array,\n    showtip: {\n      type: Boolean,\n      default: true\n    },\n    tooltip: {\n      type: String,\n      default: '{}'\n    },\n    getTooltip: Function,\n    barColor: {\n      type: String,\n      default: null\n    },\n    valueColor: {\n      type: String,\n      default: null\n    },\n    disabled: Boolean,\n    // 是否可操作\n    showValueBar: {\n      type: Boolean,\n      default: true\n    } //\n\n  },\n  data: function data() {\n    return {\n      buttonTipWidth: 0,\n      showButtonTip: false,\n      buttonValue: 0,\n      mouseTipWidth: 0,\n      showMouseTip: false,\n      mouseValue: 0,\n      draging: false,\n      reg: new RegExp(\"\\\\{\\\\}\", \"g\")\n    };\n  },\n  mounted: function mounted() {\n    this.buttonValue = this.validValue(Number(this.value || this.min));\n  },\n  watch: {\n    value: function value(v) {\n      this.buttonValue = this.validValue(v);\n    },\n    buttonValue: function buttonValue(v) {\n      this.$nextTick(this.setButtonTipWidth);\n    },\n    showButtonTip: function showButtonTip(v) {\n      v && this.$nextTick(this.setButtonTipWidth);\n    },\n    mouseValue: function mouseValue(v) {\n      this.$nextTick(this.setMouseTipWidth);\n    },\n    showMouseTip: function showMouseTip(v) {\n      v && this.$nextTick(this.setMouseTipWidth);\n    }\n  },\n  methods: {\n    onSignClick: function onSignClick(v) {\n      var oldValue = this.buttonValue;\n      this.buttonValue = this.validValue(v);\n      this.$emit('input', this.buttonValue);\n      this.$emit('change', this.buttonValue, oldValue);\n    },\n    wheelBar: function wheelBar(event) {\n      this.showButtonTip = true;\n      this.showMouseTip = false;\n      var oldValue = this.buttonValue;\n      this.buttonValue = this.validValue(event.deltaY < 0 ? this.buttonValue - this.step : this.buttonValue + this.step);\n\n      if (oldValue != this.buttonValue) {\n        this.$emit('input', this.buttonValue);\n        this.$emit('change', this.buttonValue, oldValue);\n      }\n    },\n    onDragStart: function onDragStart(event) {\n      this.draging = true;\n      document.addEventListener('mousemove', this.onDragging);\n      document.addEventListener('mouseup', this.onDragEnd);\n      this.$emit('dragstart', this._oldValue = this.buttonValue);\n    },\n    onDragging: function onDragging(event) {\n      var w = event.clientX - this.$refs.bar.getBoundingClientRect().left;\n      this.buttonValue = this.validValue(Math.round((w * this.rang / this.$refs.bar.clientWidth + this.min) / this.step) * this.step);\n      this.$emit('dragging', this.buttonValue);\n    },\n    onDragEnd: function onDragEnd(event) {\n      this.draging = this.showButtonTip = false;\n      document.removeEventListener('mousemove', this.onDragging);\n      document.removeEventListener('mouseup', this.onDragEnd);\n      this.$emit('input', this.buttonValue);\n      this.$emit('change', this.buttonValue, this._oldValue);\n      this.$emit('dragend', this.buttonValue, this._oldValue);\n    },\n    onBarClick: function onBarClick(event) {\n      var oldValue = this.buttonValue;\n      var w = event.clientX - this.$refs.bar.getBoundingClientRect().left;\n      this.buttonValue = this.validValue(Math.round((w * this.rang / this.$refs.bar.clientWidth + this.min) / this.step) * this.step);\n      this.$emit('input', this.buttonValue);\n      this.$emit('change', this.buttonValue, oldValue);\n    },\n    onMouseMove: function onMouseMove(event) {\n      if (this.showButtonTip) return;\n      var w = event.clientX - this.$refs.bar.getBoundingClientRect().left;\n      this.mouseValue = this.validValue(Math.round((w * this.rang / this.$refs.bar.clientWidth + this.min) / this.step) * this.step);\n      this.showMouseTip = true;\n    },\n    setButtonTipWidth: function setButtonTipWidth() {\n      this.buttonTipWidth = this.$refs.buttonTip.clientWidth;\n    },\n    setMouseTipWidth: function setMouseTipWidth() {\n      this.mouseTipWidth = this.$refs.mouseTip.clientWidth;\n    },\n    validValue: function validValue(v) {\n      v = Number(v.toFixed(5));\n      return v < this.min ? this.min : v > this.max ? this.max : v;\n    }\n  },\n  computed: {\n    brate: function brate() {\n      return this.rang == 0 ? 0 : (this.buttonValue - this.min) * 100 / this.rang;\n    },\n    mrate: function mrate() {\n      return this.rang == 0 ? 0 : (this.mouseValue - this.min) * 100 / this.rang;\n    },\n    rang: function rang() {\n      return this.max - this.min;\n    }\n  }\n};",null]}