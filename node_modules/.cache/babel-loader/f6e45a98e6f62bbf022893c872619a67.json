{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\textarea\\src\\textarea.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\textarea\\src\\textarea.js","mtime":1635230121506},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport vSize from '../../mixins/size';\nimport { UtilTools } from '../../tools';\nlet autoTxtElem;\nexport default {\n  name: 'VxeTextarea',\n  mixins: [vSize],\n  model: {\n    prop: 'value',\n    event: 'modelValue'\n  },\n  props: {\n    value: [String, Number],\n    immediate: {\n      type: Boolean,\n      default: true\n    },\n    name: String,\n    readonly: Boolean,\n    disabled: Boolean,\n    placeholder: String,\n    maxlength: [String, Number],\n    rows: {\n      type: [String, Number],\n      default: 2\n    },\n    showWordCount: Boolean,\n    autosize: [Boolean, Object],\n    form: String,\n    resize: {\n      type: String,\n      default: () => GlobalConfig.textarea.resize\n    },\n    className: String,\n    size: {\n      type: String,\n      default: () => GlobalConfig.textarea.size || GlobalConfig.size\n    }\n  },\n\n  data() {\n    return {\n      inputValue: this.value\n    };\n  },\n\n  computed: {\n    inputCount() {\n      return XEUtils.getSize(this.inputValue);\n    },\n\n    isCountError() {\n      return this.maxlength && this.inputCount > XEUtils.toNumber(this.maxlength);\n    },\n\n    defaultEvents() {\n      const evnts = {};\n      XEUtils.each(this.$listeners, (cb, name) => {\n        if (['input', 'change', 'blur'].indexOf(name) === -1) {\n          evnts[name] = this.triggerEvent;\n        }\n      });\n      evnts.input = this.inputEvent;\n      evnts.change = this.changeEvent;\n      evnts.blur = this.blurEvent;\n      return evnts;\n    },\n\n    sizeOpts() {\n      return Object.assign({\n        minRows: 1,\n        maxRows: 10\n      }, GlobalConfig.textarea.autosize, this.autosize);\n    }\n\n  },\n  watch: {\n    value(val) {\n      this.inputValue = val;\n      this.updateAutoTxt();\n    }\n\n  },\n\n  mounted() {\n    const autosize = this.autosize;\n\n    if (autosize) {\n      this.updateAutoTxt();\n      this.handleResize();\n    }\n  },\n\n  render(h) {\n    const className = this.className,\n          defaultEvents = this.defaultEvents,\n          inputValue = this.inputValue,\n          vSize = this.vSize,\n          name = this.name,\n          form = this.form,\n          resize = this.resize,\n          placeholder = this.placeholder,\n          readonly = this.readonly,\n          disabled = this.disabled,\n          maxlength = this.maxlength,\n          autosize = this.autosize,\n          showWordCount = this.showWordCount;\n    const attrs = {\n      name,\n      form,\n      placeholder,\n      maxlength,\n      readonly,\n      disabled\n    };\n\n    if (placeholder) {\n      attrs.placeholder = UtilTools.getFuncText(placeholder);\n    }\n\n    return h('div', {\n      class: ['vxe-textarea', className, {\n        [`size--${vSize}`]: vSize,\n        'is--autosize': autosize,\n        'is--disabled': disabled\n      }]\n    }, [h('textarea', {\n      ref: 'textarea',\n      class: 'vxe-textarea--inner',\n      domProps: {\n        value: inputValue\n      },\n      attrs,\n      style: resize ? {\n        resize\n      } : null,\n      on: defaultEvents\n    }), showWordCount ? h('span', {\n      class: ['vxe-textarea--count', {\n        'is--error': this.isCountError\n      }]\n    }, `${this.inputCount}${maxlength ? `/${maxlength}` : ''}`) : null]);\n  },\n\n  methods: {\n    focus() {\n      this.$refs.textarea.focus();\n      return this.$nextTick();\n    },\n\n    blur() {\n      this.$refs.textarea.blur();\n      return this.$nextTick();\n    },\n\n    triggerEvent(evnt) {\n      const inputValue = this.inputValue;\n      this.$emit(evnt.type, {\n        value: inputValue,\n        $event: evnt\n      });\n    },\n\n    emitUpdate(value, evnt) {\n      this.inputValue = value;\n      this.$emit('modelValue', value);\n\n      if (this.value !== value) {\n        this.$emit('change', {\n          value,\n          $event: evnt\n        });\n      }\n    },\n\n    inputEvent(evnt) {\n      const immediate = this.immediate;\n      const value = evnt.target.value;\n      this.inputValue = value;\n\n      if (immediate) {\n        this.emitUpdate(value, evnt);\n      }\n\n      this.handleResize();\n      this.triggerEvent(evnt);\n    },\n\n    changeEvent(evnt) {\n      const immediate = this.immediate;\n\n      if (immediate) {\n        this.triggerEvent(evnt);\n      } else {\n        this.emitUpdate(this.inputValue, evnt);\n      }\n    },\n\n    blurEvent(evnt) {\n      const inputValue = this.inputValue,\n            immediate = this.immediate;\n\n      if (!immediate) {\n        this.emitUpdate(inputValue, evnt);\n      }\n\n      this.$emit('blur', {\n        value: inputValue,\n        $event: evnt\n      });\n    },\n\n    updateAutoTxt() {\n      const $refs = this.$refs,\n            inputValue = this.inputValue,\n            size = this.size,\n            autosize = this.autosize;\n\n      if (autosize) {\n        if (!autoTxtElem) {\n          autoTxtElem = document.createElement('div');\n        }\n\n        if (!autoTxtElem.parentNode) {\n          document.body.appendChild(autoTxtElem);\n        }\n\n        const textElem = $refs.textarea;\n        const textStyle = getComputedStyle(textElem);\n        autoTxtElem.className = ['vxe-textarea--autosize', size ? `size--${size}` : ''].join(' ');\n        autoTxtElem.style.width = `${textElem.clientWidth}px`;\n        autoTxtElem.style.padding = textStyle.padding;\n        autoTxtElem.innerHTML = ('' + (inputValue || '　')).replace(/\\n$/, '\\n　');\n      }\n    },\n\n    handleResize() {\n      if (this.autosize) {\n        this.$nextTick(() => {\n          const $refs = this.$refs,\n                sizeOpts = this.sizeOpts;\n          const minRows = sizeOpts.minRows,\n                maxRows = sizeOpts.maxRows;\n          const textElem = $refs.textarea;\n          const sizeHeight = autoTxtElem.clientHeight;\n          const textStyle = getComputedStyle(textElem);\n          const lineHeight = XEUtils.toNumber(textStyle.lineHeight);\n          const paddingTop = XEUtils.toNumber(textStyle.paddingTop);\n          const paddingBottom = XEUtils.toNumber(textStyle.paddingBottom);\n          const borderTopWidth = XEUtils.toNumber(textStyle.borderTopWidth);\n          const borderBottomWidth = XEUtils.toNumber(textStyle.borderBottomWidth);\n          const intervalHeight = paddingTop + paddingBottom + borderTopWidth + borderBottomWidth;\n          const rowNum = (sizeHeight - intervalHeight) / lineHeight;\n          const textRows = rowNum && /[0-9]/.test(rowNum) ? rowNum : Math.floor(rowNum) + 1;\n          let vaildRows = textRows;\n\n          if (textRows < minRows) {\n            vaildRows = minRows;\n          } else if (textRows > maxRows) {\n            vaildRows = maxRows;\n          }\n\n          textElem.style.height = `${vaildRows * lineHeight + intervalHeight}px`;\n        });\n      }\n    }\n\n  }\n};",null]}