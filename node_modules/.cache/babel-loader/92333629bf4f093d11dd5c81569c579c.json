{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\body\\src\\body.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\body\\src\\body.js","mtime":1612227987442},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.string.fixed\";\nimport XEUtils from 'xe-utils/methods/xe-utils';\nimport GlobalConfig from \"../../conf\";\nimport VXETable from \"../../v-x-e-table\";\nimport { UtilTools, DomTools } from \"../../tools\"; // 滚动、拖动过程中不需要触发\n\nfunction isOperateMouse($xetable) {\n  return $xetable._isResize || $xetable.lastScrollTime && Date.now() < $xetable.lastScrollTime + $xetable.optimizeOpts.delayHover;\n}\n\nfunction countTreeExpand(prevRow, params) {\n  var $table = params.$table;\n  var rowChildren = prevRow[$table.treeOpts.children];\n  var count = 1;\n\n  if ($table.isTreeExpandByRow(prevRow)) {\n    for (var index = 0; index < rowChildren.length; index++) {\n      count += countTreeExpand(rowChildren[index], params);\n    }\n  }\n\n  return count;\n}\n\nfunction getOffsetSize($xetable) {\n  switch ($xetable.vSize) {\n    case 'mini':\n      return 3;\n\n    case 'small':\n      return 2;\n\n    case 'medium':\n      return 1;\n  }\n\n  return 0;\n}\n\nfunction calcTreeLine(params, items) {\n  var $table = params.$table,\n      $rowIndex = params.$rowIndex;\n  var expandSize = 1;\n\n  if ($rowIndex) {\n    expandSize = countTreeExpand(items[$rowIndex - 1], params);\n  }\n\n  return $table.rowHeight * expandSize - ($rowIndex ? 1 : 12 - getOffsetSize($table));\n}\n\nfunction renderLine(h, _vm, $xetable, rowLevel, items, params) {\n  var column = params.column;\n  var treeOpts = $xetable.treeOpts,\n      treeConfig = $xetable.treeConfig;\n  return column.slots && column.slots.line ? column.slots.line.call($xetable, params, h) : column.treeNode && treeConfig && treeOpts.line ? [h('div', {\n    class: 'vxe-tree--line-wrapper'\n  }, [h('div', {\n    class: 'vxe-tree--line',\n    style: {\n      height: \"\".concat(calcTreeLine(params, items), \"px\"),\n      left: \"\".concat(rowLevel * treeOpts.indent + (rowLevel ? 2 - getOffsetSize($xetable) : 0) + 16, \"px\")\n    }\n  })])] : [];\n}\n\nfunction renderBorder(h, type) {\n  return h('div', {\n    class: \"vxe-table-\".concat(type, \"ed-borders\"),\n    ref: \"\".concat(type, \"Borders\")\n  }, [h('span', {\n    class: 'vxe-table-border-top',\n    ref: \"\".concat(type, \"Top\")\n  }), h('span', {\n    class: 'vxe-table-border-right',\n    ref: \"\".concat(type, \"Right\")\n  }), h('span', {\n    class: 'vxe-table-border-bottom',\n    ref: \"\".concat(type, \"Bottom\")\n  }), h('span', {\n    class: 'vxe-table-border-left',\n    ref: \"\".concat(type, \"Left\")\n  })]);\n}\n/**\r\n * 渲染列\r\n */\n\n\nfunction renderColumn(h, _vm, $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, columns, items) {\n  var _ref2;\n\n  var _e = $xetable._e,\n      tableListeners = $xetable.$listeners,\n      tableData = $xetable.tableData,\n      height = $xetable.height,\n      columnKey = $xetable.columnKey,\n      overflowX = $xetable.overflowX,\n      scrollXLoad = $xetable.scrollXLoad,\n      scrollYLoad = $xetable.scrollYLoad,\n      highlightCurrentRow = $xetable.highlightCurrentRow,\n      allColumnOverflow = $xetable.showOverflow,\n      allAlign = $xetable.align,\n      currentColumn = $xetable.currentColumn,\n      cellClassName = $xetable.cellClassName,\n      cellStyle = $xetable.cellStyle,\n      spanMethod = $xetable.spanMethod,\n      radioOpts = $xetable.radioOpts,\n      checkboxOpts = $xetable.checkboxOpts,\n      expandOpts = $xetable.expandOpts,\n      treeOpts = $xetable.treeOpts,\n      mouseConfig = $xetable.mouseConfig,\n      mouseOpts = $xetable.mouseOpts,\n      editConfig = $xetable.editConfig,\n      editOpts = $xetable.editOpts,\n      editRules = $xetable.editRules,\n      validOpts = $xetable.validOpts,\n      editStore = $xetable.editStore,\n      validStore = $xetable.validStore;\n  var editRender = column.editRender,\n      align = column.align,\n      showOverflow = column.showOverflow,\n      className = column.className,\n      treeNode = column.treeNode;\n  var actived = editStore.actived;\n  var isMouseSelected = mouseConfig && mouseOpts.selected; // 在 v3.0 中废弃 mouse-config.checked\n\n  var isMouseChecked = mouseConfig && (mouseOpts.range || mouseOpts.checked);\n  var fixedHiddenColumn = fixedType ? column.fixed !== fixedType : column.fixed && overflowX;\n  var cellOverflow = XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow) ? allColumnOverflow : showOverflow;\n  var showEllipsis = cellOverflow === 'ellipsis';\n  var showTitle = cellOverflow === 'title';\n  var showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n  var hasEllipsis = showTitle || showTooltip || showEllipsis;\n  var isDirty;\n  var tdOns = {};\n  var cellAlign = align || allAlign;\n  var hasValidError = validStore.row === row && validStore.column === column;\n  var hasDefaultTip = editRules && (validOpts.message === 'default' ? height || tableData.length > 1 : validOpts.message === 'inline');\n  var attrs = {\n    'data-colid': column.id\n  };\n  var triggerDblclick = editRender && editConfig && editOpts.trigger === 'dblclick';\n  var params = {\n    $table: $xetable,\n    $seq: $seq,\n    seq: seq,\n    rowid: rowid,\n    row: row,\n    rowIndex: rowIndex,\n    $rowIndex: $rowIndex,\n    column: column,\n    columnIndex: columnIndex,\n    $columnIndex: $columnIndex,\n    fixed: fixedType,\n    isHidden: fixedHiddenColumn,\n    level: rowLevel,\n    data: tableData,\n    items: items // 虚拟滚动不支持动态高度\n\n  };\n\n  if ((scrollXLoad || scrollYLoad) && !hasEllipsis) {\n    showEllipsis = hasEllipsis = true;\n  } // hover 进入事件\n\n\n  if (showTitle || showTooltip || tableListeners['cell-mouseenter']) {\n    tdOns.mouseenter = function (evnt) {\n      if (isOperateMouse($xetable)) {\n        return;\n      }\n\n      var evntParams = {\n        $table: $xetable,\n        $seq: $seq,\n        seq: seq,\n        rowid: rowid,\n        row: row,\n        rowIndex: rowIndex,\n        $rowIndex: $rowIndex,\n        column: column,\n        columnIndex: columnIndex,\n        $columnIndex: $columnIndex,\n        fixed: fixedType,\n        isHidden: fixedHiddenColumn,\n        level: rowLevel,\n        cell: evnt.currentTarget\n      };\n\n      if (showTitle) {\n        DomTools.updateCellTitle(evnt);\n      } else if (showTooltip) {\n        // 如果配置了显示 tooltip\n        $xetable.triggerTooltipEvent(evnt, evntParams);\n      }\n\n      UtilTools.emitEvent($xetable, 'cell-mouseenter', [evntParams, evnt]);\n    };\n  } // hover 退出事件\n\n\n  if (showTooltip || tableListeners['cell-mouseleave']) {\n    tdOns.mouseleave = function (evnt) {\n      if (isOperateMouse($xetable)) {\n        return;\n      }\n\n      if (showTooltip) {\n        $xetable.handleTargetLeaveEvent(evnt);\n      }\n\n      UtilTools.emitEvent($xetable, 'cell-mouseleave', [{\n        $table: $xetable,\n        $seq: $seq,\n        seq: seq,\n        rowid: rowid,\n        row: row,\n        rowIndex: rowIndex,\n        $rowIndex: $rowIndex,\n        column: column,\n        columnIndex: columnIndex,\n        $columnIndex: $columnIndex,\n        fixed: fixedType,\n        isHidden: fixedHiddenColumn,\n        level: rowLevel,\n        cell: evnt.currentTarget\n      }, evnt]);\n    };\n  } // 按下事件处理\n\n\n  if (checkboxOpts.range || isMouseChecked || isMouseSelected) {\n    tdOns.mousedown = function (evnt) {\n      $xetable.triggerCellMousedownEvent(evnt, {\n        $table: $xetable,\n        $seq: $seq,\n        seq: seq,\n        rowid: rowid,\n        row: row,\n        rowIndex: rowIndex,\n        $rowIndex: $rowIndex,\n        column: column,\n        columnIndex: columnIndex,\n        $columnIndex: $columnIndex,\n        fixed: fixedType,\n        isHidden: fixedHiddenColumn,\n        level: rowLevel,\n        cell: evnt.currentTarget\n      });\n    };\n  } // 点击事件处理\n\n\n  if (highlightCurrentRow || tableListeners['cell-click'] || isMouseChecked || editRender && editConfig || expandOpts.trigger === 'row' || expandOpts.trigger === 'cell' || radioOpts.trigger === 'row' || column.type === 'radio' && radioOpts.trigger === 'cell' || // 在 v3.0 中废弃 type=selection\n  checkboxOpts.trigger === 'row' || (column.type === 'checkbox' || column.type === 'selection') && checkboxOpts.trigger === 'cell' || treeOpts.trigger === 'row' || column.treeNode && treeOpts.trigger === 'cell') {\n    tdOns.click = function (evnt) {\n      $xetable.triggerCellClickEvent(evnt, {\n        $table: $xetable,\n        $seq: $seq,\n        seq: seq,\n        rowid: rowid,\n        row: row,\n        rowIndex: rowIndex,\n        $rowIndex: $rowIndex,\n        column: column,\n        columnIndex: columnIndex,\n        $columnIndex: $columnIndex,\n        fixed: fixedType,\n        isHidden: fixedHiddenColumn,\n        level: rowLevel,\n        cell: evnt.currentTarget\n      });\n    };\n  } // 双击事件处理\n\n\n  if (triggerDblclick || tableListeners['cell-dblclick']) {\n    tdOns.dblclick = function (evnt) {\n      $xetable.triggerCellDBLClickEvent(evnt, {\n        $table: $xetable,\n        $seq: $seq,\n        seq: seq,\n        row: row,\n        rowIndex: rowIndex,\n        $rowIndex: $rowIndex,\n        column: column,\n        columnIndex: columnIndex,\n        $columnIndex: $columnIndex,\n        fixed: fixedType,\n        isHidden: fixedHiddenColumn,\n        level: rowLevel,\n        cell: evnt.currentTarget\n      });\n    };\n  } // 合并行或列\n\n\n  if (spanMethod) {\n    var _ref = spanMethod(params) || {},\n        _ref$rowspan = _ref.rowspan,\n        rowspan = _ref$rowspan === void 0 ? 1 : _ref$rowspan,\n        _ref$colspan = _ref.colspan,\n        colspan = _ref$colspan === void 0 ? 1 : _ref$colspan;\n\n    if (!rowspan || !colspan) {\n      return null;\n    }\n\n    attrs.rowspan = rowspan;\n    attrs.colspan = colspan;\n  } // 如果编辑列开启显示状态\n\n\n  if (!fixedHiddenColumn && editRender && editConfig && editOpts.showStatus) {\n    isDirty = $xetable.isUpdateByRow(row, column.property);\n  }\n\n  var type = column.type === 'seq' || column.type === 'index' ? 'seq' : column.type;\n  return h('td', {\n    class: ['vxe-body--column', column.id, (_ref2 = {}, _defineProperty(_ref2, \"col--\".concat(cellAlign), cellAlign), _defineProperty(_ref2, \"col--\".concat(type), type), _defineProperty(_ref2, 'col--last', $columnIndex === columns.length - 1), _defineProperty(_ref2, 'col--tree-node', treeNode), _defineProperty(_ref2, 'col--edit', !!editRender), _defineProperty(_ref2, 'col--ellipsis', hasEllipsis), _defineProperty(_ref2, 'edit--visible', editRender && editRender.type === 'visible'), _defineProperty(_ref2, 'fixed--hidden', fixedHiddenColumn), _defineProperty(_ref2, 'col--dirty', isDirty), _defineProperty(_ref2, 'col--actived', editConfig && editRender && actived.row === row && (actived.column === column || editOpts.mode === 'row')), _defineProperty(_ref2, 'col--valid-error', hasValidError), _defineProperty(_ref2, 'col--current', currentColumn === column), _ref2), UtilTools.getClass(className, params), UtilTools.getClass(cellClassName, params)],\n    key: columnKey ? column.id : columnIndex,\n    attrs: attrs,\n    style: cellStyle ? XEUtils.isFunction(cellStyle) ? cellStyle(params) : cellStyle : null,\n    on: tdOns\n  }, allColumnOverflow && fixedHiddenColumn ? [h('div', {\n    class: ['vxe-cell', {\n      'c--title': showTitle,\n      'c--tooltip': showTooltip,\n      'c--ellipsis': showEllipsis\n    }]\n  })] : renderLine(h, _vm, $xetable, rowLevel, items, params).concat([h('div', {\n    class: ['vxe-cell', {\n      'c--title': showTitle,\n      'c--tooltip': showTooltip,\n      'c--ellipsis': showEllipsis\n    }],\n    attrs: {\n      title: showTitle ? UtilTools.getCellLabel(row, column, params) : null\n    }\n  }, column.renderCell(h, params)), hasDefaultTip ? hasValidError ? h('div', {\n    class: 'vxe-cell--valid',\n    style: validStore.rule && validStore.rule.maxWidth ? {\n      width: \"\".concat(validStore.rule.maxWidth, \"px\")\n    } : null\n  }, [h('span', {\n    class: 'vxe-cell--valid-msg'\n  }, validStore.content)]) : _e() : null]));\n}\n\nfunction renderRows(h, _vm, $xetable, $seq, rowLevel, fixedType, tableData, tableColumn) {\n  var stripe = $xetable.stripe,\n      rowKey = $xetable.rowKey,\n      highlightHoverRow = $xetable.highlightHoverRow,\n      rowClassName = $xetable.rowClassName,\n      rowStyle = $xetable.rowStyle,\n      allColumnOverflow = $xetable.showOverflow,\n      treeConfig = $xetable.treeConfig,\n      treeOpts = $xetable.treeOpts,\n      treeExpandeds = $xetable.treeExpandeds,\n      scrollYLoad = $xetable.scrollYLoad,\n      scrollYStore = $xetable.scrollYStore,\n      editStore = $xetable.editStore,\n      rowExpandeds = $xetable.rowExpandeds,\n      radioOpts = $xetable.radioOpts,\n      checkboxOpts = $xetable.checkboxOpts,\n      expandColumn = $xetable.expandColumn,\n      getColumnIndex = $xetable.getColumnIndex;\n  var rows = [];\n  tableData.forEach(function (row, $rowIndex) {\n    var trOn = {};\n    var rowIndex = $rowIndex;\n    var seq = rowIndex + 1;\n\n    if (scrollYLoad) {\n      seq += scrollYStore.startIndex;\n    } // 确保任何情况下 rowIndex 都精准指向真实 data 索引\n\n\n    rowIndex = $xetable.getRowIndex(row); // 事件绑定\n\n    if (highlightHoverRow) {\n      trOn.mouseenter = function (evnt) {\n        if (isOperateMouse($xetable)) {\n          return;\n        }\n\n        $xetable.triggerHoverEvent(evnt, {\n          row: row,\n          rowIndex: rowIndex\n        });\n      };\n\n      trOn.mouseleave = function () {\n        if (isOperateMouse($xetable)) {\n          return;\n        }\n\n        $xetable.clearHoverRow();\n      };\n    }\n\n    var rowid = UtilTools.getRowid($xetable, row);\n    rows.push(h('tr', {\n      class: ['vxe-body--row', {\n        'row--stripe': stripe && ($xetable._getRowIndex(row) + 1) % 2 === 0,\n        'is--new': editStore.insertList.indexOf(row) > -1,\n        'row--radio': radioOpts.highlight && $xetable.selectRow === row,\n        'row--cheched': checkboxOpts.highlight && $xetable.isCheckedByCheckboxRow(row)\n      }, rowClassName ? XEUtils.isFunction(rowClassName) ? rowClassName({\n        $table: $xetable,\n        $seq: $seq,\n        seq: seq,\n        rowid: rowid,\n        fixedType: fixedType,\n        rowLevel: rowLevel,\n        row: row,\n        rowIndex: rowIndex,\n        $rowIndex: $rowIndex\n      }) : rowClassName : ''],\n      attrs: {\n        'data-rowid': rowid\n      },\n      style: rowStyle ? XEUtils.isFunction(rowStyle) ? rowStyle({\n        $table: $xetable,\n        $seq: $seq,\n        seq: seq,\n        rowid: rowid,\n        fixedType: fixedType,\n        rowLevel: rowLevel,\n        row: row,\n        rowIndex: rowIndex,\n        $rowIndex: $rowIndex\n      }) : rowStyle : null,\n      key: rowKey || treeConfig ? rowid : $rowIndex,\n      on: trOn\n    }, tableColumn.map(function (column, $columnIndex) {\n      var columnIndex = getColumnIndex(column);\n      return renderColumn(h, _vm, $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, tableColumn, tableData);\n    }))); // 如果行被展开了\n\n    if (rowExpandeds.length && rowExpandeds.indexOf(row) > -1) {\n      var expandColumnIndex = getColumnIndex(expandColumn);\n      var cellStyle;\n\n      if (treeConfig) {\n        cellStyle = {\n          paddingLeft: \"\".concat(rowLevel * treeOpts.indent + 30, \"px\")\n        };\n      }\n\n      if (expandColumn) {\n        var showOverflow = expandColumn.showOverflow;\n        var hasEllipsis = XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow) ? allColumnOverflow : showOverflow;\n        rows.push(h('tr', {\n          class: 'vxe-body--expanded-row',\n          key: \"expand_\".concat(rowid),\n          style: rowStyle ? XEUtils.isFunction(rowStyle) ? rowStyle({\n            $table: $xetable,\n            $seq: $seq,\n            seq: seq,\n            rowid: rowid,\n            fixedType: fixedType,\n            rowLevel: rowLevel,\n            row: row,\n            rowIndex: rowIndex,\n            $rowIndex: $rowIndex,\n            isExpanded: true\n          }) : rowStyle : null,\n          on: trOn\n        }, [h('td', {\n          class: ['vxe-body--expanded-column', {\n            'fixed--hidden': fixedType,\n            'col--ellipsis': hasEllipsis\n          }],\n          attrs: {\n            colspan: tableColumn.length\n          }\n        }, [h('div', {\n          class: 'vxe-body--expanded-cell',\n          style: cellStyle\n        }, [expandColumn.renderData(h, {\n          $table: $xetable,\n          seq: seq,\n          rowid: rowid,\n          row: row,\n          rowIndex: rowIndex,\n          column: expandColumn,\n          columnIndex: expandColumnIndex,\n          fixed: fixedType,\n          level: rowLevel\n        })])])]));\n      }\n    } // 如果是树形表格\n\n\n    if (treeConfig && treeExpandeds.length) {\n      var rowChildren = row[treeOpts.children];\n\n      if (rowChildren && rowChildren.length && treeExpandeds.indexOf(row) > -1) {\n        rows.push.apply(rows, _toConsumableArray(renderRows(h, _vm, $xetable, $seq ? \"\".concat($seq, \".\").concat(seq) : \"\".concat(seq), rowLevel + 1, fixedType, rowChildren, tableColumn)));\n      }\n    }\n  });\n  return rows;\n}\n/**\r\n * 同步滚动条\r\n * scroll 方式：可以使固定列与内容保持一致的滚动效果，实现相对麻烦\r\n * mousewheel 方式：对于同步滚动效果就略差了，左右滚动，内容跟随即可\r\n * css3 translate 方式：对于同步滚动效果会有产生卡顿感觉，虽然可以利用硬件加速，渲染性能略优，但失去table布局能力\r\n */\n\n\nvar scrollProcessTimeout;\n\nfunction syncBodyScroll(scrollTop, elem1, elem2) {\n  if (elem1 || elem2) {\n    if (elem1) {\n      elem1.onscroll = null;\n      elem1.scrollTop = scrollTop;\n    }\n\n    if (elem2) {\n      elem2.onscroll = null;\n      elem2.scrollTop = scrollTop;\n    }\n\n    clearTimeout(scrollProcessTimeout);\n    scrollProcessTimeout = setTimeout(function () {\n      if (elem1) {\n        elem1.onscroll = elem1._onscroll;\n      }\n\n      if (elem2) {\n        elem2.onscroll = elem2._onscroll;\n      }\n    }, 100);\n  }\n}\n\nexport default {\n  name: 'VxeTableBody',\n  props: {\n    tableData: Array,\n    tableColumn: Array,\n    visibleColumn: Array,\n    collectColumn: Array,\n    fixedColumn: Array,\n    size: String,\n    fixedType: String,\n    isGroup: Boolean\n  },\n  mounted: function mounted() {\n    var $xetable = this.$parent,\n        $el = this.$el,\n        $refs = this.$refs,\n        fixedType = this.fixedType;\n    var elemStore = $xetable.elemStore;\n    var prefix = \"\".concat(fixedType || 'main', \"-body-\");\n    elemStore[\"\".concat(prefix, \"wrapper\")] = $el;\n    elemStore[\"\".concat(prefix, \"table\")] = $refs.table;\n    elemStore[\"\".concat(prefix, \"colgroup\")] = $refs.colgroup;\n    elemStore[\"\".concat(prefix, \"list\")] = $refs.tbody;\n    elemStore[\"\".concat(prefix, \"xSpace\")] = $refs.xSpace;\n    elemStore[\"\".concat(prefix, \"ySpace\")] = $refs.ySpace;\n    elemStore[\"\".concat(prefix, \"emptyBlock\")] = $refs.emptyBlock;\n    this.$el.onscroll = this.scrollEvent;\n    this.$el._onscroll = this.scrollEvent;\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$el._onscroll = null;\n    this.$el.onscroll = null;\n  },\n  render: function render(h) {\n    var _e = this._e,\n        $xetable = this.$parent,\n        fixedColumn = this.fixedColumn,\n        fixedType = this.fixedType;\n    var $scopedSlots = $xetable.$scopedSlots,\n        id = $xetable.id,\n        tableData = $xetable.tableData,\n        tableColumn = $xetable.tableColumn,\n        allColumnOverflow = $xetable.showOverflow,\n        spanMethod = $xetable.spanMethod,\n        scrollXLoad = $xetable.scrollXLoad,\n        mouseConfig = $xetable.mouseConfig,\n        mouseOpts = $xetable.mouseOpts,\n        emptyRender = $xetable.emptyRender,\n        emptyOpts = $xetable.emptyOpts,\n        _$xetable$keyboardCon = $xetable.keyboardConfig,\n        keyboardConfig = _$xetable$keyboardCon === void 0 ? {} : _$xetable$keyboardCon; // 在 v3.0 中废弃 mouse-config.checked\n\n    var isMouseChecked = mouseConfig && (mouseOpts.range || mouseOpts.checked); // 如果是固定列与设置了超出隐藏\n\n    if (!spanMethod) {\n      if (fixedType && allColumnOverflow) {\n        tableColumn = fixedColumn;\n      } else if (scrollXLoad) {\n        if (fixedType) {\n          tableColumn = fixedColumn;\n        }\n      }\n    }\n\n    var emptyContent;\n\n    if ($scopedSlots.empty) {\n      emptyContent = $scopedSlots.empty.call(this, {\n        $table: this\n      }, h);\n    } else {\n      var compConf = emptyRender ? VXETable.renderer.get(emptyOpts.name) : null;\n\n      if (compConf && compConf.renderEmpty) {\n        emptyContent = compConf.renderEmpty.call(this, h, emptyOpts, {\n          $table: this\n        }, {\n          $table: this\n        });\n      } else {\n        emptyContent = GlobalConfig.i18n('vxe.table.emptyText');\n      }\n    }\n\n    return h('div', {\n      class: ['vxe-table--body-wrapper', fixedType ? \"fixed-\".concat(fixedType, \"--wrapper\") : 'body--wrapper'],\n      attrs: {\n        'data-tid': id\n      }\n    }, [fixedType ? _e() : h('div', {\n      class: 'vxe-body--x-space',\n      ref: 'xSpace'\n    }), h('div', {\n      class: 'vxe-body--y-space',\n      ref: 'ySpace'\n    }), h('table', {\n      class: 'vxe-table--body',\n      attrs: {\n        'data-tid': id,\n        cellspacing: 0,\n        cellpadding: 0,\n        border: 0\n      },\n      ref: 'table'\n    }, [\n    /**\r\n     * 列宽\r\n     */\n    h('colgroup', {\n      ref: 'colgroup'\n    }, tableColumn.map(function (column, columnIndex) {\n      return h('col', {\n        attrs: {\n          name: column.id\n        },\n        key: columnIndex\n      });\n    })),\n    /**\r\n     * 内容\r\n     */\n    h('tbody', {\n      ref: 'tbody'\n    }, renderRows(h, this, $xetable, '', 0, fixedType, tableData, tableColumn))]),\n    /**\r\n     * 选中边框线\r\n     */\n    !fixedType && (isMouseChecked || keyboardConfig.isCut) ? h('div', {\n      class: 'vxe-table--borders'\n    }, [isMouseChecked ? renderBorder(h, 'check') : null, keyboardConfig.isCut ? renderBorder(h, 'copy') : null]) : null, !fixedType ? h('div', {\n      class: 'vxe-table--empty-block',\n      ref: 'emptyBlock'\n    }, [h('div', {\n      class: 'vxe-table--empty-content'\n    }, emptyContent)]) : null]);\n  },\n  methods: {\n    /**\r\n     * 滚动处理\r\n     * 如果存在列固定左侧，同步更新滚动状态\r\n     * 如果存在列固定右侧，同步更新滚动状态\r\n     */\n    scrollEvent: function scrollEvent(evnt) {\n      var $xetable = this.$parent,\n          fixedType = this.fixedType;\n      var $refs = $xetable.$refs,\n          highlightHoverRow = $xetable.highlightHoverRow,\n          scrollXLoad = $xetable.scrollXLoad,\n          scrollYLoad = $xetable.scrollYLoad,\n          lastScrollTop = $xetable.lastScrollTop,\n          lastScrollLeft = $xetable.lastScrollLeft;\n      var tableHeader = $refs.tableHeader,\n          tableBody = $refs.tableBody,\n          leftBody = $refs.leftBody,\n          rightBody = $refs.rightBody,\n          tableFooter = $refs.tableFooter;\n      var headerElem = tableHeader ? tableHeader.$el : null;\n      var footerElem = tableFooter ? tableFooter.$el : null;\n      var bodyElem = tableBody.$el;\n      var leftElem = leftBody ? leftBody.$el : null;\n      var rightElem = rightBody ? rightBody.$el : null;\n      var scrollTop = bodyElem.scrollTop = this.$el.scrollTop; //加\n      //      let scrollTop = bodyElem.scrollTop;//去掉\n\n      var scrollLeft = bodyElem.scrollLeft;\n      var isX = scrollLeft !== lastScrollLeft;\n      var isY = scrollTop !== lastScrollTop;\n      $xetable.lastScrollTop = scrollTop;\n      $xetable.lastScrollLeft = scrollLeft;\n      $xetable.lastScrollTime = Date.now();\n\n      if (highlightHoverRow) {\n        $xetable.clearHoverRow();\n      }\n\n      if (leftElem && fixedType === 'left') {\n        leftElem.scrollTop = scrollTop; //加\n        //        scrollTop = leftElem.scrollTop//去掉\n        //        syncBodyScroll(scrollTop, bodyElem, rightElem)//去掉\n      } else if (rightElem && fixedType === 'right') {\n        rightElem.scrollTop = scrollTop; //加\n        //        scrollTop = rightElem.scrollTop//去掉\n        //        syncBodyScroll(scrollTop, bodyElem, leftElem)//去掉\n      } else {\n        if (isX) {\n          if (headerElem) {\n            headerElem.scrollLeft = bodyElem.scrollLeft;\n          }\n\n          if (footerElem) {\n            footerElem.scrollLeft = bodyElem.scrollLeft;\n          }\n        }\n\n        if (leftElem || rightElem) {\n          $xetable.checkScrolling();\n\n          if (isY) {\n            syncBodyScroll(scrollTop, leftElem, rightElem);\n          }\n        }\n      }\n\n      if (scrollXLoad && isX) {\n        $xetable.triggerScrollXEvent(evnt);\n\n        if (headerElem && scrollLeft + bodyElem.clientWidth >= bodyElem.scrollWidth - 80) {\n          // 修复拖动滚动条时可能存在不同步问题\n          this.$nextTick(function () {\n            if (bodyElem.scrollLeft !== headerElem.scrollLeft) {\n              headerElem.scrollLeft = bodyElem.scrollLeft;\n            }\n          });\n        }\n      }\n\n      if (scrollYLoad && isY) {\n        $xetable.triggerScrollYEvent(evnt);\n      }\n\n      UtilTools.emitEvent($xetable, 'scroll', [{\n        type: 'body',\n        fixed: fixedType,\n        scrollTop: scrollTop,\n        scrollLeft: scrollLeft,\n        isX: isX,\n        isY: isY,\n        $table: $xetable\n      }, evnt]);\n    }\n  }\n};",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\body\\src\\body.js"],"names":["$xetable","Date","$table","params","rowChildren","prevRow","count","index","countTreeExpand","$rowIndex","expandSize","items","getOffsetSize","column","treeOpts","treeConfig","h","class","style","height","calcTreeLine","left","rowLevel","ref","_e","tableListeners","tableData","columnKey","overflowX","scrollXLoad","scrollYLoad","highlightCurrentRow","allColumnOverflow","allAlign","currentColumn","cellClassName","cellStyle","spanMethod","radioOpts","checkboxOpts","expandOpts","mouseConfig","mouseOpts","editConfig","editOpts","editRules","validOpts","editStore","validStore","editRender","align","showOverflow","className","treeNode","actived","isMouseSelected","isMouseChecked","fixedHiddenColumn","fixedType","cellOverflow","XEUtils","showEllipsis","showTitle","showTooltip","hasEllipsis","tdOns","cellAlign","hasValidError","hasDefaultTip","attrs","id","triggerDblclick","$seq","seq","rowid","row","rowIndex","columnIndex","$columnIndex","fixed","isHidden","level","data","isOperateMouse","evntParams","cell","evnt","currentTarget","DomTools","UtilTools","rowspan","colspan","isDirty","type","columns","key","on","renderLine","title","width","stripe","rowKey","highlightHoverRow","rowClassName","rowStyle","treeExpandeds","scrollYStore","rowExpandeds","expandColumn","getColumnIndex","rows","trOn","renderColumn","expandColumnIndex","paddingLeft","isExpanded","tableColumn","length","renderRows","elem1","elem2","clearTimeout","scrollProcessTimeout","setTimeout","name","props","visibleColumn","collectColumn","fixedColumn","size","isGroup","Boolean","mounted","$el","$refs","elemStore","prefix","beforeDestroy","render","$scopedSlots","emptyRender","emptyOpts","keyboardConfig","emptyContent","compConf","VXETable","GlobalConfig","cellspacing","cellpadding","border","renderBorder","methods","scrollEvent","lastScrollTop","lastScrollLeft","tableHeader","tableBody","leftBody","rightBody","tableFooter","headerElem","footerElem","bodyElem","leftElem","rightElem","scrollTop","scrollLeft","isX","isY","syncBodyScroll"],"mappings":"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","sourcesContent":["import XEUtils from 'xe-utils/methods/xe-utils'\r\nimport GlobalConfig from '../../conf'\r\nimport VXETable from '../../v-x-e-table'\r\nimport { UtilTools, DomTools } from '../../tools'\r\n\r\n// 滚动、拖动过程中不需要触发\r\nfunction isOperateMouse ($xetable) {\r\n  return $xetable._isResize || ($xetable.lastScrollTime && Date.now() < $xetable.lastScrollTime + $xetable.optimizeOpts.delayHover)\r\n}\r\n\r\nfunction countTreeExpand (prevRow, params) {\r\n  const { $table } = params\r\n  const rowChildren = prevRow[$table.treeOpts.children]\r\n  let count = 1\r\n  if ($table.isTreeExpandByRow(prevRow)) {\r\n    for (let index = 0; index < rowChildren.length; index++) {\r\n      count += countTreeExpand(rowChildren[index], params)\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\nfunction getOffsetSize ($xetable) {\r\n  switch ($xetable.vSize) {\r\n    case 'mini':\r\n      return 3\r\n    case 'small':\r\n      return 2\r\n    case 'medium':\r\n      return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction calcTreeLine (params, items) {\r\n  const { $table, $rowIndex } = params\r\n  let expandSize = 1\r\n  if ($rowIndex) {\r\n    expandSize = countTreeExpand(items[$rowIndex - 1], params)\r\n  }\r\n  return $table.rowHeight * expandSize - ($rowIndex ? 1 : (12 - getOffsetSize($table)))\r\n}\r\n\r\nfunction renderLine (h, _vm, $xetable, rowLevel, items, params) {\r\n  const column = params.column\r\n  const { treeOpts, treeConfig } = $xetable\r\n  return column.slots && column.slots.line\r\n    ? column.slots.line.call($xetable, params, h)\r\n    : column.treeNode && treeConfig && treeOpts.line ? [\r\n      h('div', {\r\n        class: 'vxe-tree--line-wrapper'\r\n      }, [\r\n        h('div', {\r\n          class: 'vxe-tree--line',\r\n          style: {\r\n            height: `${calcTreeLine(params, items)}px`,\r\n            left: `${(rowLevel * treeOpts.indent) + (rowLevel ? 2 - getOffsetSize($xetable) : 0) + 16}px`\r\n          }\r\n        })\r\n      ])\r\n    ] : []\r\n}\r\n\r\nfunction renderBorder (h, type) {\r\n  return h('div', {\r\n    class: `vxe-table-${type}ed-borders`,\r\n    ref: `${type}Borders`\r\n  }, [\r\n    h('span', {\r\n      class: 'vxe-table-border-top',\r\n      ref: `${type}Top`\r\n    }),\r\n    h('span', {\r\n      class: 'vxe-table-border-right',\r\n      ref: `${type}Right`\r\n    }),\r\n    h('span', {\r\n      class: 'vxe-table-border-bottom',\r\n      ref: `${type}Bottom`\r\n    }),\r\n    h('span', {\r\n      class: 'vxe-table-border-left',\r\n      ref: `${type}Left`\r\n    })\r\n  ])\r\n}\r\n\r\n/**\r\n * 渲染列\r\n */\r\nfunction renderColumn (h, _vm, $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, columns, items) {\r\n  const {\r\n    _e,\r\n    $listeners: tableListeners,\r\n    tableData,\r\n    height,\r\n    columnKey,\r\n    overflowX,\r\n    scrollXLoad,\r\n    scrollYLoad,\r\n    highlightCurrentRow,\r\n    showOverflow: allColumnOverflow,\r\n    align: allAlign,\r\n    currentColumn,\r\n    cellClassName,\r\n    cellStyle,\r\n    spanMethod,\r\n    radioOpts,\r\n    checkboxOpts,\r\n    expandOpts,\r\n    treeOpts,\r\n    mouseConfig,\r\n    mouseOpts,\r\n    editConfig,\r\n    editOpts,\r\n    editRules,\r\n    validOpts,\r\n    editStore,\r\n    validStore\r\n  } = $xetable\r\n  const { editRender, align, showOverflow, className, treeNode } = column\r\n  const { actived } = editStore\r\n  const isMouseSelected = mouseConfig && mouseOpts.selected\r\n  // 在 v3.0 中废弃 mouse-config.checked\r\n  const isMouseChecked = mouseConfig && (mouseOpts.range || mouseOpts.checked)\r\n  const fixedHiddenColumn = fixedType ? column.fixed !== fixedType : column.fixed && overflowX\r\n  const cellOverflow = (XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow)) ? allColumnOverflow : showOverflow\r\n  let showEllipsis = cellOverflow === 'ellipsis'\r\n  const showTitle = cellOverflow === 'title'\r\n  const showTooltip = cellOverflow === true || cellOverflow === 'tooltip'\r\n  let hasEllipsis = showTitle || showTooltip || showEllipsis\r\n  let isDirty\r\n  const tdOns = {}\r\n  const cellAlign = align || allAlign\r\n  const hasValidError = validStore.row === row && validStore.column === column\r\n  const hasDefaultTip = editRules && (validOpts.message === 'default' ? (height || tableData.length > 1) : validOpts.message === 'inline')\r\n  const attrs = { 'data-colid': column.id }\r\n  const triggerDblclick = (editRender && editConfig && editOpts.trigger === 'dblclick')\r\n  const params = { $table: $xetable, $seq, seq, rowid, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, fixed: fixedType, isHidden: fixedHiddenColumn, level: rowLevel, data: tableData, items }\r\n  // 虚拟滚动不支持动态高度\r\n  if ((scrollXLoad || scrollYLoad) && !hasEllipsis) {\r\n    showEllipsis = hasEllipsis = true\r\n  }\r\n  // hover 进入事件\r\n  if (showTitle || showTooltip || tableListeners['cell-mouseenter']) {\r\n    tdOns.mouseenter = evnt => {\r\n      if (isOperateMouse($xetable)) {\r\n        return\r\n      }\r\n      const evntParams = { $table: $xetable, $seq, seq, rowid, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, fixed: fixedType, isHidden: fixedHiddenColumn, level: rowLevel, cell: evnt.currentTarget }\r\n      if (showTitle) {\r\n        DomTools.updateCellTitle(evnt)\r\n      } else if (showTooltip) {\r\n        // 如果配置了显示 tooltip\r\n        $xetable.triggerTooltipEvent(evnt, evntParams)\r\n      }\r\n      UtilTools.emitEvent($xetable, 'cell-mouseenter', [evntParams, evnt])\r\n    }\r\n  }\r\n  // hover 退出事件\r\n  if (showTooltip || tableListeners['cell-mouseleave']) {\r\n    tdOns.mouseleave = evnt => {\r\n      if (isOperateMouse($xetable)) {\r\n        return\r\n      }\r\n      if (showTooltip) {\r\n        $xetable.handleTargetLeaveEvent(evnt)\r\n      }\r\n      UtilTools.emitEvent($xetable, 'cell-mouseleave', [{ $table: $xetable, $seq, seq, rowid, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, fixed: fixedType, isHidden: fixedHiddenColumn, level: rowLevel, cell: evnt.currentTarget }, evnt])\r\n    }\r\n  }\r\n  // 按下事件处理\r\n  if (checkboxOpts.range || isMouseChecked || isMouseSelected) {\r\n    tdOns.mousedown = evnt => {\r\n      $xetable.triggerCellMousedownEvent(evnt, { $table: $xetable, $seq, seq, rowid, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, fixed: fixedType, isHidden: fixedHiddenColumn, level: rowLevel, cell: evnt.currentTarget })\r\n    }\r\n  }\r\n  // 点击事件处理\r\n  if (highlightCurrentRow ||\r\n    tableListeners['cell-click'] ||\r\n    isMouseChecked ||\r\n    (editRender && editConfig) ||\r\n    (expandOpts.trigger === 'row' || (expandOpts.trigger === 'cell')) ||\r\n    (radioOpts.trigger === 'row' || (column.type === 'radio' && radioOpts.trigger === 'cell')) ||\r\n    // 在 v3.0 中废弃 type=selection\r\n    (checkboxOpts.trigger === 'row' || ((column.type === 'checkbox' || column.type === 'selection') && checkboxOpts.trigger === 'cell')) ||\r\n    (treeOpts.trigger === 'row' || (column.treeNode && treeOpts.trigger === 'cell'))) {\r\n    tdOns.click = evnt => {\r\n      $xetable.triggerCellClickEvent(evnt, { $table: $xetable, $seq, seq, rowid, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, fixed: fixedType, isHidden: fixedHiddenColumn, level: rowLevel, cell: evnt.currentTarget })\r\n    }\r\n  }\r\n  // 双击事件处理\r\n  if (triggerDblclick || tableListeners['cell-dblclick']) {\r\n    tdOns.dblclick = evnt => {\r\n      $xetable.triggerCellDBLClickEvent(evnt, { $table: $xetable, $seq, seq, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, fixed: fixedType, isHidden: fixedHiddenColumn, level: rowLevel, cell: evnt.currentTarget })\r\n    }\r\n  }\r\n  // 合并行或列\r\n  if (spanMethod) {\r\n    const { rowspan = 1, colspan = 1 } = spanMethod(params) || {}\r\n    if (!rowspan || !colspan) {\r\n      return null\r\n    }\r\n    attrs.rowspan = rowspan\r\n    attrs.colspan = colspan\r\n  }\r\n  // 如果编辑列开启显示状态\r\n  if (!fixedHiddenColumn && editRender && editConfig && editOpts.showStatus) {\r\n    isDirty = $xetable.isUpdateByRow(row, column.property)\r\n  }\r\n  const type = column.type === 'seq' || column.type === 'index' ? 'seq' : column.type\r\n  return h('td', {\r\n    class: ['vxe-body--column', column.id, {\r\n      [`col--${cellAlign}`]: cellAlign,\r\n      [`col--${type}`]: type,\r\n      'col--last': $columnIndex === columns.length - 1,\r\n      'col--tree-node': treeNode,\r\n      'col--edit': !!editRender,\r\n      'col--ellipsis': hasEllipsis,\r\n      'edit--visible': editRender && editRender.type === 'visible',\r\n      'fixed--hidden': fixedHiddenColumn,\r\n      'col--dirty': isDirty,\r\n      'col--actived': editConfig && editRender && (actived.row === row && (actived.column === column || editOpts.mode === 'row')),\r\n      'col--valid-error': hasValidError,\r\n      'col--current': currentColumn === column\r\n    }, UtilTools.getClass(className, params), UtilTools.getClass(cellClassName, params)],\r\n    key: columnKey ? column.id : columnIndex,\r\n    attrs,\r\n    style: cellStyle ? (XEUtils.isFunction(cellStyle) ? cellStyle(params) : cellStyle) : null,\r\n    on: tdOns\r\n  }, allColumnOverflow && fixedHiddenColumn\r\n    ? [\r\n      h('div', {\r\n        class: ['vxe-cell', {\r\n          'c--title': showTitle,\r\n          'c--tooltip': showTooltip,\r\n          'c--ellipsis': showEllipsis\r\n        }]\r\n      })\r\n    ]\r\n    : renderLine(h, _vm, $xetable, rowLevel, items, params).concat([\r\n      h('div', {\r\n        class: ['vxe-cell', {\r\n          'c--title': showTitle,\r\n          'c--tooltip': showTooltip,\r\n          'c--ellipsis': showEllipsis\r\n        }],\r\n        attrs: {\r\n          title: showTitle ? UtilTools.getCellLabel(row, column, params) : null\r\n        }\r\n      }, column.renderCell(h, params)),\r\n      hasDefaultTip ? hasValidError ? h('div', {\r\n        class: 'vxe-cell--valid',\r\n        style: validStore.rule && validStore.rule.maxWidth ? {\r\n          width: `${validStore.rule.maxWidth}px`\r\n        } : null\r\n      }, [\r\n        h('span', {\r\n          class: 'vxe-cell--valid-msg'\r\n        }, validStore.content)\r\n      ]) : _e() : null\r\n    ]))\r\n}\r\n\r\nfunction renderRows (h, _vm, $xetable, $seq, rowLevel, fixedType, tableData, tableColumn) {\r\n  const {\r\n    stripe,\r\n    rowKey,\r\n    highlightHoverRow,\r\n    rowClassName,\r\n    rowStyle,\r\n    showOverflow: allColumnOverflow,\r\n    treeConfig,\r\n    treeOpts,\r\n    treeExpandeds,\r\n    scrollYLoad,\r\n    scrollYStore,\r\n    editStore,\r\n    rowExpandeds,\r\n    radioOpts,\r\n    checkboxOpts,\r\n    expandColumn,\r\n    getColumnIndex\r\n  } = $xetable\r\n  const rows = []\r\n  tableData.forEach((row, $rowIndex) => {\r\n    const trOn = {}\r\n    let rowIndex = $rowIndex\r\n    let seq = rowIndex + 1\r\n    if (scrollYLoad) {\r\n      seq += scrollYStore.startIndex\r\n    }\r\n    // 确保任何情况下 rowIndex 都精准指向真实 data 索引\r\n    rowIndex = $xetable.getRowIndex(row)\r\n    // 事件绑定\r\n    if (highlightHoverRow) {\r\n      trOn.mouseenter = evnt => {\r\n        if (isOperateMouse($xetable)) {\r\n          return\r\n        }\r\n        $xetable.triggerHoverEvent(evnt, { row, rowIndex })\r\n      }\r\n      trOn.mouseleave = () => {\r\n        if (isOperateMouse($xetable)) {\r\n          return\r\n        }\r\n        $xetable.clearHoverRow()\r\n      }\r\n    }\r\n    const rowid = UtilTools.getRowid($xetable, row)\r\n    rows.push(\r\n      h('tr', {\r\n        class: ['vxe-body--row', {\r\n          'row--stripe': stripe && ($xetable._getRowIndex(row) + 1) % 2 === 0,\r\n          'is--new': editStore.insertList.indexOf(row) > -1,\r\n          'row--radio': radioOpts.highlight && $xetable.selectRow === row,\r\n          'row--cheched': checkboxOpts.highlight && $xetable.isCheckedByCheckboxRow(row)\r\n        }, rowClassName ? XEUtils.isFunction(rowClassName) ? rowClassName({ $table: $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex }) : rowClassName : ''],\r\n        attrs: {\r\n          'data-rowid': rowid\r\n        },\r\n        style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle({ $table: $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex }) : rowStyle) : null,\r\n        key: rowKey || treeConfig ? rowid : $rowIndex,\r\n        on: trOn\r\n      }, tableColumn.map((column, $columnIndex) => {\r\n        const columnIndex = getColumnIndex(column)\r\n        return renderColumn(h, _vm, $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, tableColumn, tableData)\r\n      }))\r\n    )\r\n    // 如果行被展开了\r\n    if (rowExpandeds.length && rowExpandeds.indexOf(row) > -1) {\r\n      const expandColumnIndex = getColumnIndex(expandColumn)\r\n      let cellStyle\r\n      if (treeConfig) {\r\n        cellStyle = {\r\n          paddingLeft: `${(rowLevel * treeOpts.indent) + 30}px`\r\n        }\r\n      }\r\n      if (expandColumn) {\r\n        const { showOverflow } = expandColumn\r\n        const hasEllipsis = (XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow)) ? allColumnOverflow : showOverflow\r\n        rows.push(\r\n          h('tr', {\r\n            class: 'vxe-body--expanded-row',\r\n            key: `expand_${rowid}`,\r\n            style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle({ $table: $xetable, $seq, seq, rowid, fixedType, rowLevel, row, rowIndex, $rowIndex, isExpanded: true }) : rowStyle) : null,\r\n            on: trOn\r\n          }, [\r\n            h('td', {\r\n              class: ['vxe-body--expanded-column', {\r\n                'fixed--hidden': fixedType,\r\n                'col--ellipsis': hasEllipsis\r\n              }],\r\n              attrs: {\r\n                colspan: tableColumn.length\r\n              }\r\n            }, [\r\n              h('div', {\r\n                class: 'vxe-body--expanded-cell',\r\n                style: cellStyle\r\n              }, [\r\n                expandColumn.renderData(h, { $table: $xetable, seq, rowid, row, rowIndex, column: expandColumn, columnIndex: expandColumnIndex, fixed: fixedType, level: rowLevel })\r\n              ])\r\n            ])\r\n          ])\r\n        )\r\n      }\r\n    }\r\n    // 如果是树形表格\r\n    if (treeConfig && treeExpandeds.length) {\r\n      const rowChildren = row[treeOpts.children]\r\n      if (rowChildren && rowChildren.length && treeExpandeds.indexOf(row) > -1) {\r\n        rows.push(...renderRows(h, _vm, $xetable, $seq ? `${$seq}.${seq}` : `${seq}`, rowLevel + 1, fixedType, rowChildren, tableColumn))\r\n      }\r\n    }\r\n  })\r\n  return rows\r\n}\r\n\r\n/**\r\n * 同步滚动条\r\n * scroll 方式：可以使固定列与内容保持一致的滚动效果，实现相对麻烦\r\n * mousewheel 方式：对于同步滚动效果就略差了，左右滚动，内容跟随即可\r\n * css3 translate 方式：对于同步滚动效果会有产生卡顿感觉，虽然可以利用硬件加速，渲染性能略优，但失去table布局能力\r\n */\r\nlet scrollProcessTimeout\r\nfunction syncBodyScroll (scrollTop, elem1, elem2) {\r\n  if (elem1 || elem2) {\r\n    if (elem1) {\r\n      elem1.onscroll = null\r\n      elem1.scrollTop = scrollTop\r\n    }\r\n    if (elem2) {\r\n      elem2.onscroll = null\r\n      elem2.scrollTop = scrollTop\r\n    }\r\n    clearTimeout(scrollProcessTimeout)\r\n    scrollProcessTimeout = setTimeout(function () {\r\n      if (elem1) {\r\n        elem1.onscroll = elem1._onscroll\r\n      }\r\n      if (elem2) {\r\n        elem2.onscroll = elem2._onscroll\r\n      }\r\n    }, 100)\r\n  }\r\n}\r\n\r\n\r\nexport default {\r\n  name: 'VxeTableBody',\r\n  props: {\r\n    tableData: Array,\r\n    tableColumn: Array,\r\n    visibleColumn: Array,\r\n    collectColumn: Array,\r\n    fixedColumn: Array,\r\n    size: String,\r\n    fixedType: String,\r\n    isGroup: Boolean\r\n  },\r\n  mounted () {\r\n    const { $parent: $xetable, $el, $refs, fixedType } = this\r\n    const { elemStore } = $xetable\r\n    const prefix = `${fixedType || 'main'}-body-`\r\n    elemStore[`${prefix}wrapper`] = $el\r\n    elemStore[`${prefix}table`] = $refs.table\r\n    elemStore[`${prefix}colgroup`] = $refs.colgroup\r\n    elemStore[`${prefix}list`] = $refs.tbody\r\n    elemStore[`${prefix}xSpace`] = $refs.xSpace\r\n    elemStore[`${prefix}ySpace`] = $refs.ySpace\r\n    elemStore[`${prefix}emptyBlock`] = $refs.emptyBlock\r\n    this.$el.onscroll = this.scrollEvent\r\n    this.$el._onscroll = this.scrollEvent\r\n  },\r\n  beforeDestroy () {\r\n    this.$el._onscroll = null\r\n    this.$el.onscroll = null\r\n  },\r\n  render (h) {\r\n    const { _e, $parent: $xetable, fixedColumn, fixedType } = this\r\n    let {\r\n      $scopedSlots,\r\n      id,\r\n      tableData,\r\n      tableColumn,\r\n      showOverflow: allColumnOverflow,\r\n      spanMethod,\r\n      scrollXLoad,\r\n      mouseConfig,\r\n      mouseOpts,\r\n      emptyRender,\r\n      emptyOpts,\r\n      keyboardConfig = {}\r\n    } = $xetable\r\n    // 在 v3.0 中废弃 mouse-config.checked\r\n    const isMouseChecked = mouseConfig && (mouseOpts.range || mouseOpts.checked)\r\n    // 如果是固定列与设置了超出隐藏\r\n    if (!spanMethod) {\r\n      if (fixedType && allColumnOverflow) {\r\n        tableColumn = fixedColumn\r\n      } else if (scrollXLoad) {\r\n        if (fixedType) {\r\n          tableColumn = fixedColumn\r\n        }\r\n      }\r\n    }\r\n    let emptyContent\r\n    if ($scopedSlots.empty) {\r\n      emptyContent = $scopedSlots.empty.call(this, { $table: this }, h)\r\n    } else {\r\n      const compConf = emptyRender ? VXETable.renderer.get(emptyOpts.name) : null\r\n      if (compConf && compConf.renderEmpty) {\r\n        emptyContent = compConf.renderEmpty.call(this, h, emptyOpts, { $table: this }, { $table: this })\r\n      } else {\r\n        emptyContent = GlobalConfig.i18n('vxe.table.emptyText')\r\n      }\r\n    }\r\n    return h('div', {\r\n      class: ['vxe-table--body-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],\r\n      attrs: {\r\n        'data-tid': id\r\n      }\r\n    }, [\r\n      fixedType ? _e() : h('div', {\r\n        class: 'vxe-body--x-space',\r\n        ref: 'xSpace'\r\n      }),\r\n      h('div', {\r\n        class: 'vxe-body--y-space',\r\n        ref: 'ySpace'\r\n      }),\r\n      h('table', {\r\n        class: 'vxe-table--body',\r\n        attrs: {\r\n          'data-tid': id,\r\n          cellspacing: 0,\r\n          cellpadding: 0,\r\n          border: 0\r\n        },\r\n        ref: 'table'\r\n      }, [\r\n        /**\r\n         * 列宽\r\n         */\r\n        h('colgroup', {\r\n          ref: 'colgroup'\r\n        }, tableColumn.map((column, columnIndex) => {\r\n          return h('col', {\r\n            attrs: {\r\n              name: column.id\r\n            },\r\n            key: columnIndex\r\n          })\r\n        })),\r\n        /**\r\n         * 内容\r\n         */\r\n        h('tbody', {\r\n          ref: 'tbody'\r\n        }, renderRows(h, this, $xetable, '', 0, fixedType, tableData, tableColumn))\r\n      ]),\r\n      /**\r\n       * 选中边框线\r\n       */\r\n      !fixedType && (isMouseChecked || keyboardConfig.isCut) ? h('div', {\r\n        class: 'vxe-table--borders'\r\n      }, [\r\n        isMouseChecked ? renderBorder(h, 'check') : null,\r\n        keyboardConfig.isCut ? renderBorder(h, 'copy') : null\r\n      ]) : null,\r\n      !fixedType ? h('div', {\r\n        class: 'vxe-table--empty-block',\r\n        ref: 'emptyBlock'\r\n      }, [\r\n        h('div', {\r\n          class: 'vxe-table--empty-content'\r\n        }, emptyContent)\r\n      ]) : null\r\n    ])\r\n  },\r\n  methods: {\r\n    /**\r\n     * 滚动处理\r\n     * 如果存在列固定左侧，同步更新滚动状态\r\n     * 如果存在列固定右侧，同步更新滚动状态\r\n     */\r\n    scrollEvent (evnt) {\r\n      const { $parent: $xetable, fixedType } = this\r\n      const { $refs, highlightHoverRow, scrollXLoad, scrollYLoad, lastScrollTop, lastScrollLeft } = $xetable\r\n      const { tableHeader, tableBody, leftBody, rightBody, tableFooter } = $refs\r\n      const headerElem = tableHeader ? tableHeader.$el : null\r\n      const footerElem = tableFooter ? tableFooter.$el : null\r\n      const bodyElem = tableBody.$el\r\n      const leftElem = leftBody ? leftBody.$el : null\r\n      const rightElem = rightBody ? rightBody.$el : null\r\n      let scrollTop = bodyElem.scrollTop = this.$el.scrollTop//加\r\n//      let scrollTop = bodyElem.scrollTop;//去掉\r\n      const scrollLeft = bodyElem.scrollLeft\r\n      const isX = scrollLeft !== lastScrollLeft\r\n      const isY = scrollTop !== lastScrollTop\r\n      $xetable.lastScrollTop = scrollTop\r\n      $xetable.lastScrollLeft = scrollLeft\r\n      $xetable.lastScrollTime = Date.now()\r\n      if (highlightHoverRow) {\r\n        $xetable.clearHoverRow()\r\n      }\r\n      if (leftElem && fixedType === 'left') {\r\n    \t  leftElem.scrollTop = scrollTop;//加\r\n//        scrollTop = leftElem.scrollTop//去掉\r\n//        syncBodyScroll(scrollTop, bodyElem, rightElem)//去掉\r\n      } else if (rightElem && fixedType === 'right') {\r\n    \t  rightElem.scrollTop = scrollTop;//加\r\n//        scrollTop = rightElem.scrollTop//去掉\r\n//        syncBodyScroll(scrollTop, bodyElem, leftElem)//去掉\r\n      } else {\r\n        if (isX) {\r\n          if (headerElem) {\r\n            headerElem.scrollLeft = bodyElem.scrollLeft\r\n          }\r\n          if (footerElem) {\r\n            footerElem.scrollLeft = bodyElem.scrollLeft\r\n          }\r\n        }\r\n        if (leftElem || rightElem) {\r\n          $xetable.checkScrolling()\r\n          if (isY) {\r\n            syncBodyScroll(scrollTop, leftElem, rightElem)\r\n          }\r\n        }\r\n      }\r\n      if (scrollXLoad && isX) {\r\n        $xetable.triggerScrollXEvent(evnt)\r\n        if (headerElem && scrollLeft + bodyElem.clientWidth >= bodyElem.scrollWidth - 80) {\r\n          // 修复拖动滚动条时可能存在不同步问题\r\n          this.$nextTick(() => {\r\n            if (bodyElem.scrollLeft !== headerElem.scrollLeft) {\r\n              headerElem.scrollLeft = bodyElem.scrollLeft\r\n            }\r\n          })\r\n        }\r\n      }\r\n      if (scrollYLoad && isY) {\r\n        $xetable.triggerScrollYEvent(evnt)\r\n      }\r\n      UtilTools.emitEvent($xetable, 'scroll', [{ type: 'body', fixed: fixedType, scrollTop, scrollLeft, isX, isY, $table: $xetable }, evnt])\r\n    }\r\n  }\r\n}\r\n"]}]}