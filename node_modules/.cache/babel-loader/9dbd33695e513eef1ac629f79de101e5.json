{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\table\\src\\util.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\table\\src\\util.js","mtime":1635230121673},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import VXETable from \"../../v-x-e-table\";\nimport XEUtils from 'xe-utils';\nimport { DomTools } from \"../../tools\";\nvar lineOffsetSizes = {\n  mini: 3,\n  small: 2,\n  medium: 1\n};\n\nfunction getPaddingLeftRightSize(elem) {\n  if (elem) {\n    var computedStyle = getComputedStyle(elem);\n    var paddingLeft = XEUtils.toNumber(computedStyle.paddingLeft);\n    var paddingRight = XEUtils.toNumber(computedStyle.paddingRight);\n    return paddingLeft + paddingRight;\n  }\n\n  return 0;\n}\n\nfunction getElemenMarginWidth(elem) {\n  if (elem) {\n    var computedStyle = getComputedStyle(elem);\n    var marginLeft = XEUtils.toNumber(computedStyle.marginLeft);\n    var marginRight = XEUtils.toNumber(computedStyle.marginRight);\n    return elem.offsetWidth + marginLeft + marginRight;\n  }\n\n  return 0;\n}\n\nexport function handleFieldOrColumn(_vm, fieldOrColumn) {\n  if (fieldOrColumn) {\n    return XEUtils.isString(fieldOrColumn) ? _vm.getColumnByField(fieldOrColumn) : fieldOrColumn;\n  }\n\n  return null;\n}\n\nfunction queryCellElement(cell, selector) {\n  return cell.querySelector('.vxe-cell' + selector);\n}\n\nexport function getColMinWidth(params) {\n  var $table = params.$table,\n      column = params.column,\n      cell = params.cell;\n  var allColumnHeaderOverflow = $table.showHeaderOverflow,\n      resizableOpts = $table.resizableOpts;\n  var minWidth = resizableOpts.minWidth; // 如果自定义调整宽度逻辑\n\n  if (minWidth) {\n    var customMinWidth = XEUtils.isFunction(minWidth) ? minWidth(params) : minWidth;\n\n    if (customMinWidth !== 'auto') {\n      return Math.max(1, XEUtils.toNumber(customMinWidth));\n    }\n  }\n\n  var showHeaderOverflow = column.showHeaderOverflow,\n      colMinWidth = column.minWidth;\n  var headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n  var showEllipsis = headOverflow === 'ellipsis';\n  var showTitle = headOverflow === 'title';\n  var showTooltip = headOverflow === true || headOverflow === 'tooltip';\n  var hasEllipsis = showTitle || showTooltip || showEllipsis;\n  var minTitleWidth = XEUtils.floor((XEUtils.toNumber(getComputedStyle(cell).fontSize) || 14) * 1.6);\n  var paddingLeftRight = getPaddingLeftRightSize(cell) + getPaddingLeftRightSize(queryCellElement(cell, ''));\n  var mWidth = minTitleWidth + paddingLeftRight; // 默认最小宽处理\n\n  if (hasEllipsis) {\n    var checkboxIconWidth = getPaddingLeftRightSize(queryCellElement(cell, '--title>.vxe-cell--checkbox'));\n    var requiredIconWidth = getElemenMarginWidth(queryCellElement(cell, '>.vxe-cell--required-icon'));\n    var editIconWidth = getElemenMarginWidth(queryCellElement(cell, '>.vxe-cell--edit-icon'));\n    var helpIconWidth = getElemenMarginWidth(queryCellElement(cell, '>.vxe-cell-help-icon'));\n    var sortIconWidth = getElemenMarginWidth(queryCellElement(cell, '>.vxe-cell--sort'));\n    var filterIconWidth = getElemenMarginWidth(queryCellElement(cell, '>.vxe-cell--filter'));\n    mWidth += checkboxIconWidth + requiredIconWidth + editIconWidth + helpIconWidth + filterIconWidth + sortIconWidth;\n  } // 如果设置最小宽\n\n\n  if (colMinWidth) {\n    var tableBody = $table.$refs.tableBody;\n    var bodyElem = tableBody ? tableBody.$el : null;\n\n    if (bodyElem) {\n      if (DomTools.isScale(colMinWidth)) {\n        var bodyWidth = bodyElem.clientWidth - 1;\n        var meanWidth = bodyWidth / 100;\n        return Math.max(mWidth, Math.floor(XEUtils.toInteger(colMinWidth) * meanWidth));\n      } else if (DomTools.isPx(colMinWidth)) {\n        return Math.max(mWidth, XEUtils.toInteger(colMinWidth));\n      }\n    }\n  }\n\n  return mWidth;\n}\n\nfunction countTreeExpand(prevRow, params) {\n  var $table = params.$table;\n  var rowChildren = prevRow[$table.treeOpts.children];\n  var count = 1;\n\n  if ($table.isTreeExpandByRow(prevRow)) {\n    for (var index = 0; index < rowChildren.length; index++) {\n      count += countTreeExpand(rowChildren[index], params);\n    }\n  }\n\n  return count;\n}\n\nexport function getOffsetSize($xetable) {\n  return lineOffsetSizes[$xetable.vSize] || 0;\n}\nexport function calcTreeLine(params, items) {\n  var $table = params.$table,\n      $rowIndex = params.$rowIndex;\n  var expandSize = 1;\n\n  if ($rowIndex) {\n    expandSize = countTreeExpand(items[$rowIndex - 1], params);\n  }\n\n  return $table.rowHeight * expandSize - ($rowIndex ? 1 : 12 - getOffsetSize($table));\n}\nexport function mergeBodyMethod(mergeList, _rowIndex, _columnIndex) {\n  for (var mIndex = 0; mIndex < mergeList.length; mIndex++) {\n    var _mergeList$mIndex = mergeList[mIndex],\n        mergeRowIndex = _mergeList$mIndex.row,\n        mergeColIndex = _mergeList$mIndex.col,\n        mergeRowspan = _mergeList$mIndex.rowspan,\n        mergeColspan = _mergeList$mIndex.colspan;\n\n    if (mergeColIndex > -1 && mergeRowIndex > -1 && mergeRowspan && mergeColspan) {\n      if (mergeRowIndex === _rowIndex && mergeColIndex === _columnIndex) {\n        return {\n          rowspan: mergeRowspan,\n          colspan: mergeColspan\n        };\n      }\n\n      if (_rowIndex >= mergeRowIndex && _rowIndex < mergeRowIndex + mergeRowspan && _columnIndex >= mergeColIndex && _columnIndex < mergeColIndex + mergeColspan) {\n        return {\n          rowspan: 0,\n          colspan: 0\n        };\n      }\n    }\n  }\n}\nexport function clearTableDefaultStatus(_vm) {\n  _vm.initStatus = false;\n\n  _vm.clearSort();\n\n  _vm.clearCurrentRow();\n\n  _vm.clearCurrentColumn();\n\n  _vm.clearRadioRow();\n\n  _vm.clearRadioReserve();\n\n  _vm.clearCheckboxRow();\n\n  _vm.clearCheckboxReserve();\n\n  _vm.clearRowExpand();\n\n  _vm.clearTreeExpand();\n\n  _vm.clearTreeExpandReserve();\n\n  if (_vm.clearActived && VXETable._edit) {\n    _vm.clearActived();\n  }\n\n  if (_vm.clearSelected && (_vm.keyboardConfig || _vm.mouseConfig)) {\n    _vm.clearSelected();\n  }\n\n  if (_vm.clearCellAreas && _vm.mouseConfig) {\n    _vm.clearCellAreas();\n\n    _vm.clearCopyCellArea();\n  }\n\n  return _vm.clearScroll();\n}\nexport function clearTableAllStatus(_vm) {\n  if (_vm.clearFilter && VXETable._filter) {\n    _vm.clearFilter();\n  }\n\n  return clearTableDefaultStatus(_vm);\n}",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\table\\src\\util.js"],"names":["lineOffsetSizes","mini","small","medium","computedStyle","getComputedStyle","paddingLeft","XEUtils","paddingRight","marginLeft","marginRight","elem","_vm","cell","$table","column","params","allColumnHeaderOverflow","resizableOpts","minWidth","customMinWidth","Math","showHeaderOverflow","colMinWidth","headOverflow","showEllipsis","showTitle","showTooltip","hasEllipsis","minTitleWidth","paddingLeftRight","getPaddingLeftRightSize","queryCellElement","mWidth","checkboxIconWidth","requiredIconWidth","getElemenMarginWidth","editIconWidth","helpIconWidth","sortIconWidth","filterIconWidth","tableBody","bodyElem","DomTools","bodyWidth","meanWidth","rowChildren","prevRow","count","index","countTreeExpand","$xetable","$rowIndex","expandSize","items","getOffsetSize","mIndex","mergeList","mergeRowIndex","mergeColIndex","mergeRowspan","mergeColspan","rowspan","colspan","_rowIndex","_columnIndex","VXETable","clearTableDefaultStatus"],"mappings":"AAAA,OAAA,QAAA;AACA,OAAA,OAAA,MAAA,UAAA;AACA,SAAA,QAAA;AAEA,IAAMA,eAAe,GAAG;AACtBC,EAAAA,IAAI,EADkB,CAAA;AAEtBC,EAAAA,KAAK,EAFiB,CAAA;AAGtBC,EAAAA,MAAM,EAAE;AAHc,CAAxB;;AAMA,SAAA,uBAAA,CAAA,IAAA,EAAwC;AACtC,MAAA,IAAA,EAAU;AACR,QAAMC,aAAa,GAAGC,gBAAgB,CAAtC,IAAsC,CAAtC;AACA,QAAMC,WAAW,GAAGC,OAAO,CAAPA,QAAAA,CAAiBH,aAAa,CAAlD,WAAoBG,CAApB;AACA,QAAMC,YAAY,GAAGD,OAAO,CAAPA,QAAAA,CAAiBH,aAAa,CAAnD,YAAqBG,CAArB;AACA,WAAOD,WAAW,GAAlB,YAAA;AACD;;AACD,SAAA,CAAA;AACD;;AAED,SAAA,oBAAA,CAAA,IAAA,EAAqC;AACnC,MAAA,IAAA,EAAU;AACR,QAAMF,aAAa,GAAGC,gBAAgB,CAAtC,IAAsC,CAAtC;AACA,QAAMI,UAAU,GAAGF,OAAO,CAAPA,QAAAA,CAAiBH,aAAa,CAAjD,UAAmBG,CAAnB;AACA,QAAMG,WAAW,GAAGH,OAAO,CAAPA,QAAAA,CAAiBH,aAAa,CAAlD,WAAoBG,CAApB;AACA,WAAOI,IAAI,CAAJA,WAAAA,GAAAA,UAAAA,GAAP,WAAA;AACD;;AACD,SAAA,CAAA;AACD;;AAED,OAAO,SAAA,mBAAA,CAAA,GAAA,EAAA,aAAA,EAAkD;AACvD,MAAA,aAAA,EAAmB;AACjB,WAAOJ,OAAO,CAAPA,QAAAA,CAAAA,aAAAA,IAAkCK,GAAG,CAAHA,gBAAAA,CAAlCL,aAAkCK,CAAlCL,GAAP,aAAA;AACD;;AACD,SAAA,IAAA;AACD;;AAED,SAAA,gBAAA,CAAA,IAAA,EAAA,QAAA,EAA2C;AACzC,SAAOM,IAAI,CAAJA,aAAAA,CAAmB,cAA1B,QAAOA,CAAP;AACD;;AAED,OAAO,SAAA,cAAA,CAAA,MAAA,EAAiC;AAAA,MAC9BC,MAD8B,GACLE,MADK,CAAA,MAAA;AAAA,MACtBD,MADsB,GACLC,MADK,CAAA,MAAA;AAAA,MACdH,IADc,GACLG,MADK,CAAA,IAAA;AAAA,MAEVC,uBAFU,GAEiCH,MAFjC,CAAA,kBAAA;AAAA,MAEeI,aAFf,GAEiCJ,MAFjC,CAAA,aAAA;AAAA,MAG9BK,QAH8B,GAGjBD,aAHiB,CAAA,QAAA,CAAA,CAItC;;AACA,MAAA,QAAA,EAAc;AACZ,QAAME,cAAc,GAAGb,OAAO,CAAPA,UAAAA,CAAAA,QAAAA,IAA+BY,QAAQ,CAAvCZ,MAAuC,CAAvCA,GAAvB,QAAA;;AACA,QAAIa,cAAc,KAAlB,MAAA,EAA+B;AAC7B,aAAOC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYd,OAAO,CAAPA,QAAAA,CAAnB,cAAmBA,CAAZc,CAAP;AACD;AACF;;AAVqC,MAW9BC,kBAX8B,GAWgBP,MAXhB,CAAA,kBAAA;AAAA,MAWAQ,WAXA,GAWgBR,MAXhB,CAAA,QAAA;AAYtC,MAAMS,YAAY,GAAGjB,OAAO,CAAPA,WAAAA,CAAAA,kBAAAA,KAA2CA,OAAO,CAAPA,MAAAA,CAA3CA,kBAA2CA,CAA3CA,GAAAA,uBAAAA,GAArB,kBAAA;AACA,MAAMkB,YAAY,GAAGD,YAAY,KAAjC,UAAA;AACA,MAAME,SAAS,GAAGF,YAAY,KAA9B,OAAA;AACA,MAAMG,WAAW,GAAGH,YAAY,KAAZA,IAAAA,IAAyBA,YAAY,KAAzD,SAAA;AACA,MAAMI,WAAW,GAAGF,SAAS,IAATA,WAAAA,IAApB,YAAA;AACA,MAAMG,aAAa,GAAGtB,OAAO,CAAPA,KAAAA,CAAc,CAACA,OAAO,CAAPA,QAAAA,CAAiBF,gBAAgB,CAAhBA,IAAgB,CAAhBA,CAAjBE,QAAAA,KAAD,EAAA,IAApC,GAAsBA,CAAtB;AACA,MAAMuB,gBAAgB,GAAGC,uBAAuB,CAAvBA,IAAuB,CAAvBA,GAAgCA,uBAAuB,CAACC,gBAAgB,CAAA,IAAA,EAAjG,EAAiG,CAAjB,CAAhF;AACA,MAAIC,MAAM,GAAGJ,aAAa,GAnBY,gBAmBtC,CAnBsC,CAoBtC;;AACA,MAAA,WAAA,EAAiB;AACf,QAAMK,iBAAiB,GAAGH,uBAAuB,CAACC,gBAAgB,CAAA,IAAA,EAAlE,6BAAkE,CAAjB,CAAjD;AACA,QAAMG,iBAAiB,GAAGC,oBAAoB,CAACJ,gBAAgB,CAAA,IAAA,EAA/D,2BAA+D,CAAjB,CAA9C;AACA,QAAMK,aAAa,GAAGD,oBAAoB,CAACJ,gBAAgB,CAAA,IAAA,EAA3D,uBAA2D,CAAjB,CAA1C;AACA,QAAMM,aAAa,GAAGF,oBAAoB,CAACJ,gBAAgB,CAAA,IAAA,EAA3D,sBAA2D,CAAjB,CAA1C;AACA,QAAMO,aAAa,GAAGH,oBAAoB,CAACJ,gBAAgB,CAAA,IAAA,EAA3D,kBAA2D,CAAjB,CAA1C;AACA,QAAMQ,eAAe,GAAGJ,oBAAoB,CAACJ,gBAAgB,CAAA,IAAA,EAA7D,oBAA6D,CAAjB,CAA5C;AACAC,IAAAA,MAAM,IAAIC,iBAAiB,GAAjBA,iBAAAA,GAAAA,aAAAA,GAAAA,aAAAA,GAAAA,eAAAA,GAAVD,aAAAA;AA5BoC,GAAA,CA8BtC;;;AACA,MAAA,WAAA,EAAiB;AAAA,QACPQ,SADO,GACO3B,MAAM,CADb,KACOA,CADP,SAAA;AAEf,QAAM4B,QAAQ,GAAGD,SAAS,GAAGA,SAAS,CAAZ,GAAA,GAA1B,IAAA;;AACA,QAAA,QAAA,EAAc;AACZ,UAAIE,QAAQ,CAARA,OAAAA,CAAJ,WAAIA,CAAJ,EAAmC;AACjC,YAAMC,SAAS,GAAGF,QAAQ,CAARA,WAAAA,GAAlB,CAAA;AACA,YAAMG,SAAS,GAAGD,SAAS,GAA3B,GAAA;AACA,eAAOvB,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAiBA,IAAI,CAAJA,KAAAA,CAAWd,OAAO,CAAPA,SAAAA,CAAAA,WAAAA,IAAnC,SAAwBc,CAAjBA,CAAP;AAHF,OAAA,MAIO,IAAIsB,QAAQ,CAARA,IAAAA,CAAJ,WAAIA,CAAJ,EAAgC;AACrC,eAAOtB,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAiBd,OAAO,CAAPA,SAAAA,CAAxB,WAAwBA,CAAjBc,CAAP;AACD;AACF;AACF;;AACD,SAAA,MAAA;AACD;;AAED,SAAA,eAAA,CAAA,OAAA,EAAA,MAAA,EAA2C;AAAA,MACjCP,MADiC,GACtBE,MADsB,CAAA,MAAA;AAEzC,MAAM8B,WAAW,GAAGC,OAAO,CAACjC,MAAM,CAANA,QAAAA,CAA5B,QAA2B,CAA3B;AACA,MAAIkC,KAAK,GAAT,CAAA;;AACA,MAAIlC,MAAM,CAANA,iBAAAA,CAAJ,OAAIA,CAAJ,EAAuC;AACrC,SAAK,IAAImC,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAGH,WAAW,CAAvC,MAAA,EAAgDG,KAAhD,EAAA,EAAyD;AACvDD,MAAAA,KAAK,IAAIE,eAAe,CAACJ,WAAW,CAAZ,KAAY,CAAZ,EAAxBE,MAAwB,CAAxBA;AACD;AACF;;AACD,SAAA,KAAA;AACD;;AAED,OAAO,SAAA,aAAA,CAAA,QAAA,EAAkC;AACvC,SAAOhD,eAAe,CAACmD,QAAQ,CAAxBnD,KAAe,CAAfA,IAAP,CAAA;AACD;AAED,OAAO,SAAA,YAAA,CAAA,MAAA,EAAA,KAAA,EAAsC;AAAA,MACnCc,MADmC,GACbE,MADa,CAAA,MAAA;AAAA,MAC3BoC,SAD2B,GACbpC,MADa,CAAA,SAAA;AAE3C,MAAIqC,UAAU,GAAd,CAAA;;AACA,MAAA,SAAA,EAAe;AACbA,IAAAA,UAAU,GAAGH,eAAe,CAACI,KAAK,CAACF,SAAS,GAAhB,CAAM,CAAN,EAA5BC,MAA4B,CAA5BA;AACD;;AACD,SAAOvC,MAAM,CAANA,SAAAA,GAAAA,UAAAA,IAAiCsC,SAAS,GAAA,CAAA,GAAQ,KAAKG,aAAa,CAA3E,MAA2E,CAApEzC,CAAP;AACD;AAED,OAAO,SAAA,eAAA,CAAA,SAAA,EAAA,SAAA,EAAA,YAAA,EAA8D;AACnE,OAAK,IAAI0C,MAAM,GAAf,CAAA,EAAqBA,MAAM,GAAGC,SAAS,CAAvC,MAAA,EAAgDD,MAAhD,EAAA,EAA0D;AAAA,QAAA,iBAAA,GACyCC,SAAS,CADlD,MACkD,CADlD;AAAA,QAC3CC,aAD2C,GAAA,iBAAA,CAAA,GAAA;AAAA,QACvBC,aADuB,GAAA,iBAAA,CAAA,GAAA;AAAA,QACCC,YADD,GAAA,iBAAA,CAAA,OAAA;AAAA,QACwBC,YADxB,GAAA,iBAAA,CAAA,OAAA;;AAExD,QAAIF,aAAa,GAAG,CAAhBA,CAAAA,IAAsBD,aAAa,GAAG,CAAtCC,CAAAA,IAAAA,YAAAA,IAAJ,YAAA,EAA8E;AAC5E,UAAID,aAAa,KAAbA,SAAAA,IAA+BC,aAAa,KAAhD,YAAA,EAAmE;AACjE,eAAO;AAAEG,UAAAA,OAAO,EAAT,YAAA;AAAyBC,UAAAA,OAAO,EAAEF;AAAlC,SAAP;AACD;;AACD,UAAIG,SAAS,IAATA,aAAAA,IAA8BA,SAAS,GAAGN,aAAa,GAAvDM,YAAAA,IAA0EC,YAAY,IAAtFD,aAAAA,IAA2GC,YAAY,GAAGN,aAAa,GAA3I,YAAA,EAA4J;AAC1J,eAAO;AAAEG,UAAAA,OAAO,EAAT,CAAA;AAAcC,UAAAA,OAAO,EAAE;AAAvB,SAAP;AACD;AACF;AACF;AACF;AAED,OAAO,SAAA,uBAAA,CAAA,GAAA,EAAuC;AAC5CnD,EAAAA,GAAG,CAAHA,UAAAA,GAAAA,KAAAA;;AACAA,EAAAA,GAAG,CAAHA,SAAAA;;AACAA,EAAAA,GAAG,CAAHA,eAAAA;;AACAA,EAAAA,GAAG,CAAHA,kBAAAA;;AACAA,EAAAA,GAAG,CAAHA,aAAAA;;AACAA,EAAAA,GAAG,CAAHA,iBAAAA;;AACAA,EAAAA,GAAG,CAAHA,gBAAAA;;AACAA,EAAAA,GAAG,CAAHA,oBAAAA;;AACAA,EAAAA,GAAG,CAAHA,cAAAA;;AACAA,EAAAA,GAAG,CAAHA,eAAAA;;AACAA,EAAAA,GAAG,CAAHA,sBAAAA;;AACA,MAAIA,GAAG,CAAHA,YAAAA,IAAoBsD,QAAQ,CAAhC,KAAA,EAAwC;AACtCtD,IAAAA,GAAG,CAAHA,YAAAA;AACD;;AACD,MAAIA,GAAG,CAAHA,aAAAA,KAAsBA,GAAG,CAAHA,cAAAA,IAAsBA,GAAG,CAAnD,WAAIA,CAAJ,EAAkE;AAChEA,IAAAA,GAAG,CAAHA,aAAAA;AACD;;AACD,MAAIA,GAAG,CAAHA,cAAAA,IAAsBA,GAAG,CAA7B,WAAA,EAA2C;AACzCA,IAAAA,GAAG,CAAHA,cAAAA;;AACAA,IAAAA,GAAG,CAAHA,iBAAAA;AACD;;AACD,SAAOA,GAAG,CAAV,WAAOA,EAAP;AACD;AAED,OAAO,SAAA,mBAAA,CAAA,GAAA,EAAmC;AACxC,MAAIA,GAAG,CAAHA,WAAAA,IAAmBsD,QAAQ,CAA/B,OAAA,EAAyC;AACvCtD,IAAAA,GAAG,CAAHA,WAAAA;AACD;;AACD,SAAOuD,uBAAuB,CAA9B,GAA8B,CAA9B;AACD","sourcesContent":["import VXETable from '../../v-x-e-table'\r\nimport XEUtils from 'xe-utils'\r\nimport { DomTools } from '../../tools'\r\n\r\nconst lineOffsetSizes = {\r\n  mini: 3,\r\n  small: 2,\r\n  medium: 1\r\n}\r\n\r\nfunction getPaddingLeftRightSize (elem) {\r\n  if (elem) {\r\n    const computedStyle = getComputedStyle(elem)\r\n    const paddingLeft = XEUtils.toNumber(computedStyle.paddingLeft)\r\n    const paddingRight = XEUtils.toNumber(computedStyle.paddingRight)\r\n    return paddingLeft + paddingRight\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getElemenMarginWidth (elem) {\r\n  if (elem) {\r\n    const computedStyle = getComputedStyle(elem)\r\n    const marginLeft = XEUtils.toNumber(computedStyle.marginLeft)\r\n    const marginRight = XEUtils.toNumber(computedStyle.marginRight)\r\n    return elem.offsetWidth + marginLeft + marginRight\r\n  }\r\n  return 0\r\n}\r\n\r\nexport function handleFieldOrColumn (_vm, fieldOrColumn) {\r\n  if (fieldOrColumn) {\r\n    return XEUtils.isString(fieldOrColumn) ? _vm.getColumnByField(fieldOrColumn) : fieldOrColumn\r\n  }\r\n  return null\r\n}\r\n\r\nfunction queryCellElement (cell, selector) {\r\n  return cell.querySelector('.vxe-cell' + selector)\r\n}\r\n\r\nexport function getColMinWidth (params) {\r\n  const { $table, column, cell } = params\r\n  const { showHeaderOverflow: allColumnHeaderOverflow, resizableOpts } = $table\r\n  const { minWidth } = resizableOpts\r\n  // 如果自定义调整宽度逻辑\r\n  if (minWidth) {\r\n    const customMinWidth = XEUtils.isFunction(minWidth) ? minWidth(params) : minWidth\r\n    if (customMinWidth !== 'auto') {\r\n      return Math.max(1, XEUtils.toNumber(customMinWidth))\r\n    }\r\n  }\r\n  const { showHeaderOverflow, minWidth: colMinWidth } = column\r\n  const headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow\r\n  const showEllipsis = headOverflow === 'ellipsis'\r\n  const showTitle = headOverflow === 'title'\r\n  const showTooltip = headOverflow === true || headOverflow === 'tooltip'\r\n  const hasEllipsis = showTitle || showTooltip || showEllipsis\r\n  const minTitleWidth = XEUtils.floor((XEUtils.toNumber(getComputedStyle(cell).fontSize) || 14) * 1.6)\r\n  const paddingLeftRight = getPaddingLeftRightSize(cell) + getPaddingLeftRightSize(queryCellElement(cell, ''))\r\n  let mWidth = minTitleWidth + paddingLeftRight\r\n  // 默认最小宽处理\r\n  if (hasEllipsis) {\r\n    const checkboxIconWidth = getPaddingLeftRightSize(queryCellElement(cell, '--title>.vxe-cell--checkbox'))\r\n    const requiredIconWidth = getElemenMarginWidth(queryCellElement(cell, '>.vxe-cell--required-icon'))\r\n    const editIconWidth = getElemenMarginWidth(queryCellElement(cell, '>.vxe-cell--edit-icon'))\r\n    const helpIconWidth = getElemenMarginWidth(queryCellElement(cell, '>.vxe-cell-help-icon'))\r\n    const sortIconWidth = getElemenMarginWidth(queryCellElement(cell, '>.vxe-cell--sort'))\r\n    const filterIconWidth = getElemenMarginWidth(queryCellElement(cell, '>.vxe-cell--filter'))\r\n    mWidth += checkboxIconWidth + requiredIconWidth + editIconWidth + helpIconWidth + filterIconWidth + sortIconWidth\r\n  }\r\n  // 如果设置最小宽\r\n  if (colMinWidth) {\r\n    const { tableBody } = $table.$refs\r\n    const bodyElem = tableBody ? tableBody.$el : null\r\n    if (bodyElem) {\r\n      if (DomTools.isScale(colMinWidth)) {\r\n        const bodyWidth = bodyElem.clientWidth - 1\r\n        const meanWidth = bodyWidth / 100\r\n        return Math.max(mWidth, Math.floor(XEUtils.toInteger(colMinWidth) * meanWidth))\r\n      } else if (DomTools.isPx(colMinWidth)) {\r\n        return Math.max(mWidth, XEUtils.toInteger(colMinWidth))\r\n      }\r\n    }\r\n  }\r\n  return mWidth\r\n}\r\n\r\nfunction countTreeExpand (prevRow, params) {\r\n  const { $table } = params\r\n  const rowChildren = prevRow[$table.treeOpts.children]\r\n  let count = 1\r\n  if ($table.isTreeExpandByRow(prevRow)) {\r\n    for (let index = 0; index < rowChildren.length; index++) {\r\n      count += countTreeExpand(rowChildren[index], params)\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\nexport function getOffsetSize ($xetable) {\r\n  return lineOffsetSizes[$xetable.vSize] || 0\r\n}\r\n\r\nexport function calcTreeLine (params, items) {\r\n  const { $table, $rowIndex } = params\r\n  let expandSize = 1\r\n  if ($rowIndex) {\r\n    expandSize = countTreeExpand(items[$rowIndex - 1], params)\r\n  }\r\n  return $table.rowHeight * expandSize - ($rowIndex ? 1 : (12 - getOffsetSize($table)))\r\n}\r\n\r\nexport function mergeBodyMethod (mergeList, _rowIndex, _columnIndex) {\r\n  for (let mIndex = 0; mIndex < mergeList.length; mIndex++) {\r\n    const { row: mergeRowIndex, col: mergeColIndex, rowspan: mergeRowspan, colspan: mergeColspan } = mergeList[mIndex]\r\n    if (mergeColIndex > -1 && mergeRowIndex > -1 && mergeRowspan && mergeColspan) {\r\n      if (mergeRowIndex === _rowIndex && mergeColIndex === _columnIndex) {\r\n        return { rowspan: mergeRowspan, colspan: mergeColspan }\r\n      }\r\n      if (_rowIndex >= mergeRowIndex && _rowIndex < mergeRowIndex + mergeRowspan && _columnIndex >= mergeColIndex && _columnIndex < mergeColIndex + mergeColspan) {\r\n        return { rowspan: 0, colspan: 0 }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function clearTableDefaultStatus (_vm) {\r\n  _vm.initStatus = false\r\n  _vm.clearSort()\r\n  _vm.clearCurrentRow()\r\n  _vm.clearCurrentColumn()\r\n  _vm.clearRadioRow()\r\n  _vm.clearRadioReserve()\r\n  _vm.clearCheckboxRow()\r\n  _vm.clearCheckboxReserve()\r\n  _vm.clearRowExpand()\r\n  _vm.clearTreeExpand()\r\n  _vm.clearTreeExpandReserve()\r\n  if (_vm.clearActived && VXETable._edit) {\r\n    _vm.clearActived()\r\n  }\r\n  if (_vm.clearSelected && (_vm.keyboardConfig || _vm.mouseConfig)) {\r\n    _vm.clearSelected()\r\n  }\r\n  if (_vm.clearCellAreas && _vm.mouseConfig) {\r\n    _vm.clearCellAreas()\r\n    _vm.clearCopyCellArea()\r\n  }\r\n  return _vm.clearScroll()\r\n}\r\n\r\nexport function clearTableAllStatus (_vm) {\r\n  if (_vm.clearFilter && VXETable._filter) {\r\n    _vm.clearFilter()\r\n  }\r\n  return clearTableDefaultStatus(_vm)\r\n}\r\n"]}]}