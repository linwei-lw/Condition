{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\common\\util\\Dates.js","dependencies":[{"path":"D:\\cdRule\\src\\common\\util\\Dates.js","mtime":1612227987785},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\"; //获取当天日期字符串\n\nexport function getNowDate() {\n  let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'YYYY-MM-DD';\n  return dateFormat(null, format);\n} //获取当前日期时间字符串\n\nexport function getNowDateTime() {\n  let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'YYYY-MM-DD HH:NN:SS';\n  return dateFormat(null, format);\n}\n/**\r\n * 当天加天数，如：明天addDateTime(1)　昨天addDateTime(-1)\r\n * @params {Int} day 相隔的天数\r\n * @params {String} format 返回格式\r\n * @returns {String} 日期字符串\r\n */\n\nexport function addDateTime(day) {\n  let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD HH:NN:SS';\n  let date = new Date();\n  date.setDate(date.getDate() + day);\n  return dateFormat(date, format);\n}\n/**\r\n * 获取两个日期时间相隔的天数\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {Number} 相隔天数\r\n */\n\nexport function apartDays(datetime1, datetime2) {\n  return datetime1 && datetime2 ? Math.ceil(apartSeconds(datetime1, datetime2) / (24 * 60 * 60)) : 0;\n}\n/**\r\n * 获取两个日期时间相隔的秒数\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {Number} 相隔秒数\r\n */\n\nexport function apartSeconds(datetime1, datetime2) {\n  if (!datetime1 || !datetime2) return null;\n  datetime1 = parseDate(datetime1);\n  datetime2 = parseDate(datetime2);\n  return Math.abs(datetime1.getTime() - datetime2.getTime()) / 1000;\n}\n/**\r\n * 获取某月份的天数\r\n * @params year 指定年份\r\n * @params month 指定月份\r\n * @returns {Number} 当月的天数\r\n */\n\nexport function getDays(year, month) {\n  if (month == 2) {\n    //如果是二月，判断是否为闰年\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0 ? 29 : 28;\n  } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n    return 31;\n  }\n\n  return 30;\n}\n/**\r\n * 将日期对象进行字符串格式化\r\n * @params {Date} date 日期对象\r\n * @params {String} format 格式\r\n * @returns {String} 日期字符串\r\n */\n\nexport function dateFormat(date) {\n  let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD';\n  date = date || new Date();\n  format = format || 'YYYY-MM-DD';\n  let month = date.getMonth() + 1,\n      day = date.getDate(),\n      hour = date.getHours(),\n      minute = date.getMinutes(),\n      second = date.getSeconds(),\n      millisecond = date.getMilliseconds() + '';\n  month = (month < 10 ? '0' : '') + month;\n  day = (day < 10 ? '0' : '') + day;\n  hour = (hour < 10 ? '0' : '') + hour;\n  minute = (minute < 10 ? '0' : '') + minute;\n  second = (second < 10 ? '0' : '') + second;\n  return format.replace('YYYY', date.getFullYear()).replace('MM', month).replace('DD', day).replace('HH', hour).replace('NN', minute).replace('SS', second).replace('MSD', millisecond);\n}\n/**\r\n * 将字符串转化为日期对象\r\n * @params {String} date 日期字符串\r\n * @returns {Date} 日期对象\r\n */\n\nexport function parseDate(date) {\n  let ymdhns = date.split(/[-| |:]/);\n  let year = parseInt(ymdhns[0]);\n  let month = parseInt(ymdhns[1]);\n  let day = parseInt(ymdhns[2]);\n  let hour = ymdhns.length > 3 ? parseInt(ymdhns[3]) : 0;\n  let minute = ymdhns.length > 4 ? parseInt(ymdhns[4]) : 0;\n  let second = ymdhns.length > 5 ? parseInt(ymdhns[5]) : 0;\n  return new Date(year, month - 1, day, hour, minute, second);\n}\n/**\r\n * 将[datetime]从格式yyyy-MM-dd hh:mm:ss转成格式yyyyMMddhhmmss\r\n * @params {String} datetime 日期时间字符串\r\n * @returns {String} 日期时间纯数字格式\r\n */\n\nexport function dateFormatToNum(datetime) {\n  return datetime.split(/[-| |:]/).join('');\n}\n/**\r\n * 将[datetime]从格式yyyyMMddhhmmss转成格式yyyy-MM-dd hh:mm:ss\r\n * @params {String} datetime 日期时间纯数字格式\r\n * @returns {String} 日期时间字符串\r\n */\n\nexport function dateNumToFormat(datetime) {\n  if (datetime.length == 14) {\n    return [datetime.substr(0, 4), '-', datetime.substr(4, 2), '-', datetime.substr(6, 2), ' ', datetime.substr(8, 2), ':', datetime.substr(10, 2), ':', datetime.substr(12, 2)].join('');\n  }\n\n  return datetime;\n}\n/**\r\n * 将秒数转成[天 时:分:秒]格式\r\n * @params {Int} seconds 秒数\r\n * @returns {String} [天 时:分:秒]\r\n */\n\nexport function secondsToDHMS(seconds) {\n  if (seconds === 0 || seconds === '0') return '00:00:00';\n  if (!seconds) return '';\n  seconds = Number(seconds);\n  let day = parseInt(seconds / (60 * 60 * 24));\n  let hour = parseInt(seconds % (60 * 60 * 24) / (60 * 60));\n  let minute = parseInt(seconds % (60 * 60 * 24) % (60 * 60) / 60);\n  let second = parseInt(seconds % (60 * 60 * 24) % (60 * 60) % 60);\n  let dhms = '';\n\n  if (day > 0) {\n    dhms = (day < 10 ? '0' : '') + day;\n    dhms += ' ';\n  }\n\n  dhms += (hour < 10 ? '0' : '') + hour;\n  dhms += (minute < 10 ? ':0' : ':') + minute;\n  dhms += (second < 10 ? ':0' : ':') + second;\n  return dhms;\n}\n/**\r\n * 将秒数转成[时:分:秒]格式\r\n * @params {Int} seconds 秒数\r\n * @returns {String} [时:分:秒]\r\n */\n\nexport function secondsToHMS(seconds) {\n  if (seconds === 0 || seconds === '0') return '00:00:00';\n  if (!seconds) return '';\n  seconds = Number(seconds);\n  let hour = parseInt(seconds / (60 * 60));\n  let minute = parseInt(seconds % (60 * 60 * 24) % (60 * 60) / 60);\n  let second = parseInt(seconds % (60 * 60 * 24) % (60 * 60) % 60);\n  let hms = (hour < 10 ? '0' : '') + hour;\n  hms += (minute < 10 ? ':0' : ':') + minute;\n  hms += (second < 10 ? ':0' : ':') + second;\n  return hms;\n}\n/**\r\n * 将两日期时间的间隔转成[时:分:秒]\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {String} [时:分:秒]\r\n */\n\nexport function apartToHMS(datetime1, datetime2) {\n  return datetime1 && datetime2 ? secondsToHMS(apartSeconds(datetime1, datetime2)) : '';\n}\n/**\r\n * 将两日期时间的间隔转成[x天x时x分x秒]\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {String} [x天x时x分x秒]\r\n */\n\nexport function apartDateTimeCnDesc(datetime1, datetime2) {\n  return datetime1 && datetime2 ? secondsToCnDesc(apartSeconds(datetime1, datetime2)) : '';\n}\n/**\r\n * 将秒数转成[x天x时x分x秒]格式\r\n * @params {Int} seconds 秒数\r\n * @returns {String} [x天x时x分x秒]\r\n */\n\nexport function secondsToCnDesc(seconds) {\n  if (seconds === 0 || seconds === '0') return '0秒';\n  if (!seconds) return '';\n  let day = parseInt(seconds / (60 * 60 * 24));\n  let hour = parseInt(seconds % (60 * 60 * 24) / (60 * 60));\n  let minute = parseInt(seconds % (60 * 60 * 24) % (60 * 60) / 60);\n  let second = parseInt(seconds % (60 * 60 * 24) % (60 * 60) % 60);\n  let desc = [];\n  day > 0 && desc.push(day, '天');\n  hour > 0 && desc.push(hour, '时');\n  minute > 0 && desc.push(minute, '分');\n  second > 0 && desc.push(second, '秒');\n  return desc.join('');\n}\n/**\r\n * 将时间范围分割成每一天\r\n * 例：2019-12-23 00:00:00 ~ 2019-12-24 23:59:59或2019-12-23 ~ 2019-12-24\r\n * 分割为：[{sdate:2019-12-23 00:00:00,edate:2019-12-23 23:59:59},{sdate:2019-12-24 00:00:00,edate:2019-12-24 23:59:59}]\r\n * @params {String} startDate 开始时间\r\n * @params {String} endDate 结束时间\r\n * @returns {Array} [{sdate:yyyy-MM-dd hh:mm:ss,edate:yyyy-MM-dd hh:mm:ss}]\r\n */\n\nexport function splitDate(start, end) {\n  let sf = {\n    10: '',\n    13: ' 00',\n    16: ' 00:00'\n  }[start.length] || ' 00:00:00',\n      ef = {\n    10: '',\n    13: ' 24',\n    16: ' 24:00'\n  }[start.length] || ' 23:59:59';\n  let sdate = parseDate(start.split(' ')[0]),\n      stime = sdate.getTime(),\n      etime = parseDate(end).getTime(),\n      item = {\n    sdate: start\n  },\n      result = [],\n      oneday = 24 * 60 * 60 * 1000;\n\n  while (stime + oneday < etime) {\n    sdate.setTime(stime = stime + oneday - 1);\n    item.edate = dateFormat(sdate, 'YYYY-MM-DD') + ef;\n    result.push(item);\n    sdate.setTime(stime = stime + 1);\n    item = {\n      sdate: dateFormat(sdate, 'YYYY-MM-DD') + sf\n    };\n  }\n\n  item.edate = end;\n  result.push(item);\n  return result;\n}",null]}