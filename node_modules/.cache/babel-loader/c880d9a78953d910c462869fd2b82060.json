{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\checkbox\\src\\checkbox.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\checkbox\\src\\checkbox.js","mtime":1638513605603},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { UtilTools } from '../../tools';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport vSize from '../../mixins/size';\nexport default {\n  name: 'VxeCheckbox',\n  mixins: [vSize],\n  props: {\n    value: Boolean,\n    label: [String, Number],\n    indeterminate: Boolean,\n    title: [String, Number],\n    content: [String, Number],\n    disabled: Boolean,\n    size: {\n      type: String,\n      default: () => GlobalConfig.checkbox.size || GlobalConfig.size\n    }\n  },\n  inject: {\n    $xecheckboxgroup: {\n      default: null\n    }\n  },\n  computed: {\n    isGroup() {\n      return this.$xecheckboxgroup;\n    },\n\n    isDisabled() {\n      return this.disabled || this.isGroup && this.$xecheckboxgroup.disabled;\n    }\n\n  },\n\n  render(h) {\n    const $scopedSlots = this.$scopedSlots,\n          $xecheckboxgroup = this.$xecheckboxgroup,\n          isGroup = this.isGroup,\n          isDisabled = this.isDisabled,\n          title = this.title,\n          vSize = this.vSize,\n          indeterminate = this.indeterminate,\n          value = this.value,\n          label = this.label,\n          content = this.content;\n    const attrs = {};\n\n    if (title) {\n      attrs.title = title;\n    }\n\n    return h('label', {\n      class: ['vxe-checkbox', {\n        [`size--${vSize}`]: vSize,\n        'is--indeterminate': indeterminate,\n        'is--disabled': isDisabled\n      }],\n      attrs\n    }, [h('input', {\n      class: 'vxe-checkbox--input',\n      attrs: {\n        type: 'checkbox',\n        disabled: isDisabled\n      },\n      domProps: {\n        checked: isGroup ? XEUtils.includes($xecheckboxgroup.value, label) : value\n      },\n      on: {\n        change: this.changeEvent\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--icon'\n    }), h('span', {\n      class: 'vxe-checkbox--label'\n    }, $scopedSlots.default ? $scopedSlots.default.call(this, {}) : [UtilTools.getFuncText(content)])]);\n  },\n\n  methods: {\n    changeEvent(evnt) {\n      const $xecheckboxgroup = this.$xecheckboxgroup,\n            isGroup = this.isGroup,\n            isDisabled = this.isDisabled,\n            label = this.label;\n\n      if (!isDisabled) {\n        const checked = evnt.target.checked;\n        const params = {\n          checked,\n          label,\n          $event: evnt\n        };\n\n        if (isGroup) {\n          $xecheckboxgroup.handleChecked(params);\n        } else {\n          this.$emit('input', checked);\n          this.$emit('change', params);\n        }\n      }\n    }\n\n  }\n};",null]}