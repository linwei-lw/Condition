{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\table\\src\\methods.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\table\\src\\methods.js","mtime":1657012587403},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport Cell from \"./cell\";\nimport VXETable from \"../../v-x-e-table\";\nimport { UtilTools, DomTools } from \"../../tools\";\nimport { clearTableAllStatus, handleFieldOrColumn } from \"./util\";\nimport { eqEmptyValue, isEnableConf } from \"../../tools/src/utils\";\nimport { browse, getPaddingTopBottomSize, setScrollTop, setScrollLeft } from \"../../tools/src/dom\";\nimport { formats } from \"../../v-x-e-table/src/formats\";\nimport { arraySort, compare } from '@/common/util/Arrays.js'; //加\n\nvar getRowid = UtilTools.getRowid,\n    getRowkey = UtilTools.getRowkey,\n    setCellValue = UtilTools.setCellValue,\n    hasChildrenList = UtilTools.hasChildrenList,\n    getColumnList = UtilTools.getColumnList;\nvar calcHeight = DomTools.calcHeight,\n    hasClass = DomTools.hasClass,\n    addClass = DomTools.addClass,\n    removeClass = DomTools.removeClass,\n    getEventTargetNode = DomTools.getEventTargetNode;\nvar isWebkit = browse['-webkit'] && !browse.edge;\nvar debounceScrollYDuration = browse.msie ? 80 : 20;\nvar resizableStorageKey = 'VXE_TABLE_CUSTOM_COLUMN_WIDTH';\nvar visibleStorageKey = 'VXE_TABLE_CUSTOM_COLUMN_VISIBLE';\n/**\r\n * 生成行的唯一主键\r\n */\n\nfunction getRowUniqueId() {\n  return XEUtils.uniqueId('row_');\n}\n\nfunction eqCellValue(row1, row2, field) {\n  var val1 = XEUtils.get(row1, field);\n  var val2 = XEUtils.get(row2, field);\n\n  if (eqEmptyValue(val1) && eqEmptyValue(val2)) {\n    return true;\n  }\n\n  if (XEUtils.isString(val1) || XEUtils.isNumber(val1)) {\n    /* eslint-disable eqeqeq */\n    return val1 == val2;\n  }\n\n  return XEUtils.isEqual(val1, val2);\n}\n\nfunction getNextSortOrder(_vm, column) {\n  var orders = _vm.sortOpts.orders;\n  var currOrder = column.order || null;\n  var oIndex = orders.indexOf(currOrder) + 1;\n  return orders[oIndex < orders.length ? oIndex : 0];\n}\n\nfunction getCustomStorageMap(key) {\n  var version = GlobalConfig.version;\n  var rest = XEUtils.toStringJSON(localStorage.getItem(key));\n  return rest && rest._v === version ? rest : {\n    _v: version\n  };\n}\n\nfunction getRecoverRow(_vm, list) {\n  var fullAllDataRowMap = _vm.fullAllDataRowMap;\n  return list.filter(function (row) {\n    return fullAllDataRowMap.has(row);\n  });\n}\n\nfunction handleReserveRow(_vm, reserveRowMap) {\n  var fullDataRowIdData = _vm.fullDataRowIdData;\n  var reserveList = [];\n  XEUtils.each(reserveRowMap, function (item, rowid) {\n    if (fullDataRowIdData[rowid] && reserveList.indexOf(fullDataRowIdData[rowid].row) === -1) {\n      reserveList.push(fullDataRowIdData[rowid].row);\n    }\n  });\n  return reserveList;\n}\n\nfunction restoreScroll(_vm, scrollLeft, scrollTop) {\n  return _vm.clearScroll().then(function () {\n    if (scrollLeft || scrollTop) {\n      // 重置最后滚动状态\n      _vm.lastScrollLeft = 0;\n      _vm.lastScrollTop = 0; // 还原滚动状态\n\n      return _vm.scrollTo(scrollLeft, scrollTop);\n    }\n  });\n}\n\nfunction computeVirtualX(_vm) {\n  var $refs = _vm.$refs,\n      visibleColumn = _vm.visibleColumn;\n  var tableBody = $refs.tableBody;\n  var tableBodyElem = tableBody ? tableBody.$el : null;\n\n  if (tableBodyElem) {\n    var scrollLeft = tableBodyElem.scrollLeft,\n        clientWidth = tableBodyElem.clientWidth;\n    var endWidth = scrollLeft + clientWidth;\n    var toVisibleIndex = -1;\n    var cWidth = 0;\n    var visibleSize = 0;\n\n    for (var colIndex = 0, colLen = visibleColumn.length; colIndex < colLen; colIndex++) {\n      cWidth += visibleColumn[colIndex].renderWidth;\n\n      if (toVisibleIndex === -1 && scrollLeft < cWidth) {\n        toVisibleIndex = colIndex;\n      }\n\n      if (toVisibleIndex >= 0) {\n        visibleSize++;\n\n        if (cWidth > endWidth) {\n          break;\n        }\n      }\n    }\n\n    return {\n      toVisibleIndex: Math.max(0, toVisibleIndex),\n      visibleSize: Math.max(8, visibleSize)\n    };\n  }\n\n  return {\n    toVisibleIndex: 0,\n    visibleSize: 8\n  };\n}\n\nfunction computeVirtualY(_vm) {\n  var $refs = _vm.$refs,\n      vSize = _vm.vSize,\n      rowHeightMaps = _vm.rowHeightMaps,\n      params = _vm.params;\n  var tableHeader = $refs.tableHeader,\n      tableBody = $refs.tableBody;\n  var tableBodyElem = tableBody ? tableBody.$el : null;\n\n  if (tableBodyElem) {\n    var tableHeaderElem = tableHeader ? tableHeader.$el : null;\n    var rowHeight = params ? params.rowHeight : 0;\n\n    if (!rowHeight) {\n      var firstTrElem;\n      firstTrElem = tableBodyElem.querySelector('tr');\n\n      if (!firstTrElem && tableHeaderElem) {\n        firstTrElem = tableHeaderElem.querySelector('tr');\n      }\n\n      if (firstTrElem) {\n        rowHeight = firstTrElem.clientHeight;\n      }\n    }\n\n    if (!rowHeight) {\n      rowHeight = rowHeightMaps[vSize || 'default'];\n    }\n\n    var visibleSize = Math.max(8, Math.ceil(tableBodyElem.clientHeight / rowHeight) + 2);\n    return {\n      rowHeight: rowHeight,\n      visibleSize: visibleSize\n    };\n  }\n\n  return {\n    rowHeight: 0,\n    visibleSize: 8\n  };\n}\n\nfunction calculateMergerOffserIndex(list, offsetItem, type) {\n  for (var mcIndex = 0, len = list.length; mcIndex < len; mcIndex++) {\n    var mergeItem = list[mcIndex];\n    var startIndex = offsetItem.startIndex,\n        endIndex = offsetItem.endIndex;\n    var mergeStartIndex = mergeItem[type];\n    var mergeSpanNumber = mergeItem[type + 'span'];\n    var mergeEndIndex = mergeStartIndex + mergeSpanNumber;\n\n    if (mergeStartIndex < startIndex && startIndex < mergeEndIndex) {\n      offsetItem.startIndex = mergeStartIndex;\n    }\n\n    if (mergeStartIndex < endIndex && endIndex < mergeEndIndex) {\n      offsetItem.endIndex = mergeEndIndex;\n    }\n\n    if (offsetItem.startIndex !== startIndex || offsetItem.endIndex !== endIndex) {\n      mcIndex = -1;\n    }\n  }\n}\n\nfunction setMerges(_vm, merges, mList, rowList) {\n  if (merges) {\n    var treeConfig = _vm.treeConfig,\n        visibleColumn = _vm.visibleColumn;\n\n    if (treeConfig) {\n      throw new Error(UtilTools.getLog('vxe.error.noTree', ['merge-footer-items']));\n    }\n\n    if (!XEUtils.isArray(merges)) {\n      merges = [merges];\n    }\n\n    merges.forEach(function (item) {\n      var row = item.row,\n          col = item.col,\n          rowspan = item.rowspan,\n          colspan = item.colspan;\n\n      if (rowList && XEUtils.isNumber(row)) {\n        row = rowList[row];\n      }\n\n      if (XEUtils.isNumber(col)) {\n        col = visibleColumn[col];\n      }\n\n      if ((rowList ? row : XEUtils.isNumber(row)) && col && (rowspan || colspan)) {\n        rowspan = XEUtils.toNumber(rowspan) || 1;\n        colspan = XEUtils.toNumber(colspan) || 1;\n\n        if (rowspan > 1 || colspan > 1) {\n          var mcIndex = XEUtils.findIndexOf(mList, function (item) {\n            return item._row === row && item._col === col;\n          });\n          var mergeItem = mList[mcIndex];\n\n          if (mergeItem) {\n            mergeItem.rowspan = rowspan;\n            mergeItem.colspan = colspan;\n            mergeItem._rowspan = rowspan;\n            mergeItem._colspan = colspan;\n          } else {\n            var mergeRowIndex = rowList ? rowList.indexOf(row) : row;\n            var mergeColIndex = visibleColumn.indexOf(col);\n            mList.push({\n              row: mergeRowIndex,\n              col: mergeColIndex,\n              rowspan: rowspan,\n              colspan: colspan,\n              _row: row,\n              _col: col,\n              _rowspan: rowspan,\n              _colspan: colspan\n            });\n          }\n        }\n      }\n    });\n  }\n}\n\nfunction removeMerges(_vm, merges, mList, rowList) {\n  var rest = [];\n\n  if (merges) {\n    var treeConfig = _vm.treeConfig,\n        visibleColumn = _vm.visibleColumn;\n\n    if (treeConfig) {\n      throw new Error(UtilTools.getLog('vxe.error.noTree', ['merge-cells']));\n    }\n\n    if (!XEUtils.isArray(merges)) {\n      merges = [merges];\n    }\n\n    merges.forEach(function (item) {\n      var row = item.row,\n          col = item.col;\n\n      if (rowList && XEUtils.isNumber(row)) {\n        row = rowList[row];\n      }\n\n      if (XEUtils.isNumber(col)) {\n        col = visibleColumn[col];\n      }\n\n      var mcIndex = XEUtils.findIndexOf(mList, function (item) {\n        return item._row === row && item._col === col;\n      });\n\n      if (mcIndex > -1) {\n        var rItems = mList.splice(mcIndex, 1);\n        rest.push(rItems[0]);\n      }\n    });\n  }\n\n  return rest;\n}\n\nfunction clearAllSort(_vm) {\n  _vm.tableFullColumn.forEach(function (column) {\n    column.order = null;\n  });\n}\n\nfunction getOrderField(_vm, column) {\n  var sortBy = column.sortBy,\n      sortType = column.sortType;\n  return function (row) {\n    var cellValue;\n\n    if (sortBy) {\n      cellValue = XEUtils.isFunction(sortBy) ? sortBy({\n        row: row,\n        column: column\n      }) : XEUtils.get(row, sortBy);\n    } else {\n      cellValue = _vm.getCellLabel(row, column);\n    }\n\n    if (!sortType || sortType === 'auto') {\n      return isNaN(cellValue) ? cellValue : XEUtils.toNumber(cellValue);\n    } else if (sortType === 'number') {\n      return XEUtils.toNumber(cellValue);\n    } else if (sortType === 'string') {\n      return XEUtils.toString(cellValue);\n    }\n\n    return cellValue;\n  };\n}\n\nvar Methods = {\n  callSlot: function callSlot(slotFunc, params, h, vNodes) {\n    if (slotFunc) {\n      var $xegrid = this.$xegrid;\n\n      if ($xegrid) {\n        return $xegrid.callSlot(slotFunc, params, h, vNodes);\n      }\n\n      if (XEUtils.isFunction(slotFunc)) {\n        return slotFunc.call(this, params, h, vNodes);\n      }\n    }\n\n    return [];\n  },\n\n  /**\r\n   * 获取父容器元素\r\n   */\n  getParentElem: function getParentElem() {\n    var $el = this.$el,\n        $xegrid = this.$xegrid;\n    return $xegrid ? $xegrid.$el.parentNode : $el.parentNode;\n  },\n\n  /**\r\n   * 获取父容器的高度\r\n   */\n  getParentHeight: function getParentHeight() {\n    var $el = this.$el,\n        $xegrid = this.$xegrid,\n        height = this.height;\n    var parentElem = $el.parentNode;\n    var parentPaddingSize = height === 'auto' ? getPaddingTopBottomSize(parentElem) : 0;\n    return Math.floor($xegrid ? $xegrid.getParentHeight() : XEUtils.toNumber(getComputedStyle(parentElem).height) - parentPaddingSize);\n  },\n\n  /**\r\n   * 获取需要排除的高度\r\n   * 但渲染表格高度时，需要排除工具栏或分页等相关组件的高度\r\n   * 如果存在表尾合计滚动条，则需要排除滚动条高度\r\n   */\n  getExcludeHeight: function getExcludeHeight() {\n    var $xegrid = this.$xegrid;\n    return $xegrid ? $xegrid.getExcludeHeight() : 0;\n  },\n\n  /**\r\n   * 重置表格的一切数据状态\r\n   */\n  clearAll: function clearAll() {\n    return clearTableAllStatus(this);\n  },\n\n  /**\r\n   * 同步 data 数据\r\n   * 如果用了该方法，那么组件将不再记录增删改的状态，只能自行实现对应逻辑\r\n   * 对于某些特殊的场景，比如深层树节点元素发生变动时可能会用到\r\n   */\n  syncData: function syncData() {\n    var _this = this;\n\n    return this.$nextTick().then(function () {\n      _this.tableData = [];\n      return _this.$nextTick().then(function () {\n        return _this.loadTableData(_this.tableFullData);\n      });\n    });\n  },\n\n  /**\r\n   * 手动处理数据\r\n   * 对于手动更改了排序、筛选...等条件后需要重新处理数据时可能会用到\r\n   */\n  updateData: function updateData() {\n    return this.handleTableData(true).then(this.updateFooter).then(this.recalculate);\n  },\n  handleTableData: function handleTableData(force) {\n    var scrollYLoad = this.scrollYLoad,\n        scrollYStore = this.scrollYStore;\n    var fullData = force ? this.updateAfterFullData() : this.afterFullData;\n    this.tableData = scrollYLoad ? fullData.slice(scrollYStore.startIndex, scrollYStore.endIndex) : fullData.slice(0);\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 加载表格数据\r\n   * @param {Array} datas 数据\r\n   */\n  loadTableData: function loadTableData(datas) {\n    var _this2 = this;\n\n    var keepSource = this.keepSource,\n        treeConfig = this.treeConfig,\n        editStore = this.editStore,\n        sYOpts = this.sYOpts,\n        scrollYStore = this.scrollYStore,\n        scrollXStore = this.scrollXStore,\n        lastScrollLeft = this.lastScrollLeft,\n        lastScrollTop = this.lastScrollTop,\n        oldScrollYLoad = this.scrollYLoad;\n    var tableFullData = datas ? datas.slice(0) : [];\n    var scrollYLoad = !treeConfig && sYOpts.enabled && sYOpts.gt > -1 && sYOpts.gt < tableFullData.length;\n    scrollYStore.startIndex = 0;\n    scrollYStore.endIndex = 1;\n    scrollXStore.startIndex = 0;\n    scrollXStore.endIndex = 1;\n    editStore.insertList = [];\n    editStore.removeList = []; // 全量数据\n\n    this.tableFullData = tableFullData; // 缓存数据\n\n    this.updateCache(true); // 原始数据\n\n    this.tableSynchData = datas;\n\n    if (keepSource) {\n      this.tableSourceData = XEUtils.clone(tableFullData, true);\n    }\n\n    this.scrollYLoad = scrollYLoad;\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      if (scrollYLoad) {\n        if (!(this.height || this.maxHeight)) {\n          UtilTools.error('vxe.error.reqProp', ['table.height | table.max-height | table.scroll-y={enabled: false}']);\n        }\n\n        if (!this.showOverflow) {\n          UtilTools.warn('vxe.error.reqProp', ['table.show-overflow']);\n        }\n\n        if (this.spanMethod) {\n          UtilTools.warn('vxe.error.scrollErrProp', ['table.span-method']);\n        }\n      }\n    }\n\n    if (this.clearCellAreas && this.mouseConfig) {\n      this.clearCellAreas();\n      this.clearCopyCellArea();\n    }\n\n    this.clearMergeCells();\n    this.clearMergeFooterItems();\n    this.handleTableData(true);\n    this.updateFooter();\n    return this.$nextTick().then(function () {\n      _this2.updateHeight();\n\n      _this2.updateStyle();\n    }).then(function () {\n      _this2.computeScrollLoad();\n    }).then(function () {\n      // 是否加载了数据\n      if (scrollYLoad) {\n        scrollYStore.endIndex = scrollYStore.visibleSize;\n      }\n\n      _this2.handleReserveStatus();\n\n      _this2.checkSelectionStatus();\n\n      return new Promise(function (resolve) {\n        _this2.$nextTick().then(function () {\n          return _this2.recalculate();\n        }).then(function () {\n          // 是否变更虚拟滚动\n          if (oldScrollYLoad === scrollYLoad) {\n            restoreScroll(_this2, lastScrollLeft, lastScrollTop).then(resolve);\n          } else {\n            setTimeout(function () {\n              return restoreScroll(_this2, lastScrollLeft, lastScrollTop).then(resolve);\n            });\n          }\n        });\n      });\n    });\n  },\n\n  /**\r\n   * 重新加载数据，不会清空表格状态\r\n   * @param {Array} datas 数据\r\n   */\n  loadData: function loadData(datas) {\n    var _this3 = this;\n\n    var inited = this.inited,\n        initStatus = this.initStatus;\n    return this.loadTableData(datas).then(function () {\n      _this3.inited = true;\n      _this3.initStatus = true;\n\n      if (!initStatus) {\n        _this3.handleLoadDefaults();\n      }\n\n      if (!inited) {\n        _this3.handleInitDefaults();\n      }\n\n      return _this3.recalculate();\n    });\n  },\n\n  /**\r\n   * 重新加载数据，会清空表格状态\r\n   * @param {Array} datas 数据\r\n   */\n  reloadData: function reloadData(datas) {\n    var _this4 = this;\n\n    var inited = this.inited;\n    return this.clearAll().then(function () {\n      _this4.inited = true;\n      _this4.initStatus = true;\n      return _this4.loadTableData(datas);\n    }).then(function () {\n      _this4.handleLoadDefaults();\n\n      if (!inited) {\n        _this4.handleInitDefaults();\n      }\n\n      return _this4.recalculate();\n    });\n  },\n\n  /**\r\n   * 局部加载行数据并恢复到初始状态\r\n   * 对于行数据需要局部更改的场景中可能会用到\r\n   * @param {Row} row 行对象\r\n   * @param {Object} record 新数据\r\n   * @param {String} field 字段名\r\n   */\n  reloadRow: function reloadRow(row, record, field) {\n    var keepSource = this.keepSource,\n        tableSourceData = this.tableSourceData,\n        tableData = this.tableData;\n\n    if (keepSource) {\n      var rowIndex = this.getRowIndex(row);\n      var oRow = tableSourceData[rowIndex];\n\n      if (oRow && row) {\n        if (field) {\n          XEUtils.set(oRow, field, XEUtils.get(record || row, field));\n        } else {\n          if (record) {\n            tableSourceData[rowIndex] = record;\n            XEUtils.clear(row, undefined);\n            Object.assign(row, this.defineField(Object.assign({}, record)));\n            this.updateCache(true);\n          } else {\n            XEUtils.destructuring(oRow, XEUtils.clone(row, true));\n          }\n        }\n      }\n\n      this.tableData = tableData.slice(0);\n    } else {\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        UtilTools.warn('vxe.error.reqProp', ['keep-source']);\n      }\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 加载列配置\r\n   * 对于表格列需要重载、局部递增场景下可能会用到\r\n   * @param {ColumnInfo} columns 列配置\r\n   */\n  loadColumn: function loadColumn(columns) {\n    var _this5 = this;\n\n    var collectColumn = XEUtils.mapTree(columns, function (column) {\n      return Cell.createColumn(_this5, column);\n    }, {\n      children: 'children'\n    });\n    this.handleColumn(collectColumn);\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 加载列配置并恢复到初始状态\r\n   * 对于表格列需要重载、局部递增场景下可能会用到\r\n   * @param {ColumnInfo} columns 列配置\r\n   */\n  reloadColumn: function reloadColumn(columns) {\n    var _this6 = this;\n\n    return this.clearAll().then(function () {\n      return _this6.loadColumn(columns);\n    });\n  },\n  handleColumn: function handleColumn(collectColumn) {\n    var _this7 = this;\n\n    this.collectColumn = collectColumn;\n    var tableFullColumn = getColumnList(collectColumn);\n    this.tableFullColumn = tableFullColumn;\n    this.cacheColumnMap();\n    this.restoreCustomStorage();\n    this.parseColumns().then(function () {\n      if (_this7.scrollXLoad) {\n        _this7.loadScrollXData(true);\n      }\n    });\n    this.clearMergeCells();\n    this.clearMergeFooterItems();\n    this.handleTableData(true);\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      if ((this.scrollXLoad || this.scrollYLoad) && this.expandColumn) {\n        UtilTools.warn('vxe.error.scrollErrProp', ['column.type=expand']);\n      }\n    }\n\n    this.$nextTick(function () {\n      if (_this7.$toolbar) {\n        _this7.$toolbar.syncUpdate({\n          collectColumn: collectColumn,\n          $table: _this7\n        });\n      }\n    });\n  },\n\n  /**\r\n   * 更新数据行的 Map\r\n   * 牺牲数据组装的耗时，用来换取使用过程中的流畅\r\n   */\n  updateCache: function updateCache(source) {\n    var _this8 = this;\n\n    var treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        tableFullData = this.tableFullData,\n        fullDataRowMap = this.fullDataRowMap,\n        fullAllDataRowMap = this.fullAllDataRowMap;\n    var fullDataRowIdData = this.fullDataRowIdData,\n        fullAllDataRowIdData = this.fullAllDataRowIdData;\n    var rowkey = getRowkey(this);\n    var isLazy = treeConfig && treeOpts.lazy;\n\n    var handleCache = function handleCache(row, index, items, path, parent) {\n      var rowid = getRowid(_this8, row);\n\n      if (!rowid) {\n        rowid = getRowUniqueId();\n        XEUtils.set(row, rowkey, rowid);\n      }\n\n      if (isLazy && row[treeOpts.hasChild] && XEUtils.isUndefined(row[treeOpts.children])) {\n        row[treeOpts.children] = null;\n      }\n\n      var rest = {\n        row: row,\n        rowid: rowid,\n        index: treeConfig && parent ? -1 : index,\n        items: items,\n        parent: parent\n      };\n\n      if (source) {\n        fullDataRowIdData[rowid] = rest;\n        fullDataRowMap.set(row, rest);\n      }\n\n      fullAllDataRowIdData[rowid] = rest;\n      fullAllDataRowMap.set(row, rest);\n    };\n\n    if (source) {\n      fullDataRowIdData = this.fullDataRowIdData = {};\n      fullDataRowMap.clear();\n    }\n\n    fullAllDataRowIdData = this.fullAllDataRowIdData = {};\n    fullAllDataRowMap.clear();\n\n    if (treeConfig) {\n      XEUtils.eachTree(tableFullData, handleCache, treeOpts);\n    } else {\n      tableFullData.forEach(handleCache);\n    }\n  },\n  loadChildren: function loadChildren(row, childRecords) {\n    var _this9 = this;\n\n    return this.createData(childRecords).then(function (rows) {\n      var keepSource = _this9.keepSource,\n          tableSourceData = _this9.tableSourceData,\n          treeOpts = _this9.treeOpts,\n          fullDataRowIdData = _this9.fullDataRowIdData,\n          fullDataRowMap = _this9.fullDataRowMap,\n          fullAllDataRowMap = _this9.fullAllDataRowMap,\n          fullAllDataRowIdData = _this9.fullAllDataRowIdData;\n      var children = treeOpts.children;\n\n      if (keepSource) {\n        var rowid = getRowid(_this9, row);\n        var matchObj = XEUtils.findTree(tableSourceData, function (item) {\n          return rowid === getRowid(_this9, item);\n        }, treeOpts);\n\n        if (matchObj) {\n          matchObj.item[children] = XEUtils.clone(rows, true);\n        }\n      }\n\n      XEUtils.eachTree(rows, function (childRow, index, items, path, parent) {\n        var rowid = getRowid(_this9, childRow);\n        var rest = {\n          row: childRow,\n          rowid: rowid,\n          index: -1,\n          items: items,\n          parent: parent\n        };\n        fullDataRowIdData[rowid] = rest;\n        fullDataRowMap.set(childRow, rest);\n        fullAllDataRowIdData[rowid] = rest;\n        fullAllDataRowMap.set(childRow, rest);\n      }, treeOpts);\n      row[children] = rows;\n      return rows;\n    });\n  },\n\n  /**\r\n   * 更新数据列的 Map\r\n   * 牺牲数据组装的耗时，用来换取使用过程中的流畅\r\n   */\n  cacheColumnMap: function cacheColumnMap() {\n    var _this10 = this;\n\n    var tableFullColumn = this.tableFullColumn,\n        collectColumn = this.collectColumn,\n        fullColumnMap = this.fullColumnMap,\n        showOverflow = this.showOverflow;\n    var fullColumnIdData = this.fullColumnIdData = {};\n    var fullColumnFieldData = this.fullColumnFieldData = {};\n    var isGroup = collectColumn.some(hasChildrenList);\n    var isAllOverflow = !!showOverflow;\n    var expandColumn;\n    var treeNodeColumn;\n    var checkboxColumn;\n    var radioColumn;\n    var hasFixed;\n\n    var handleFunc = function handleFunc(column, index, items, path, parent) {\n      var colid = column.id,\n          property = column.property,\n          fixed = column.fixed,\n          type = column.type,\n          treeNode = column.treeNode;\n      var rest = {\n        column: column,\n        colid: colid,\n        index: index,\n        items: items,\n        parent: parent\n      };\n\n      if (property) {\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          if (fullColumnFieldData[property]) {\n            UtilTools.warn('vxe.error.colRepet', ['field', property]);\n          }\n        }\n\n        fullColumnFieldData[property] = rest;\n      }\n\n      if (!hasFixed && fixed) {\n        hasFixed = fixed;\n      }\n\n      if (treeNode) {\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          if (treeNodeColumn) {\n            UtilTools.warn('vxe.error.colRepet', ['tree-node', treeNode]);\n          }\n        }\n\n        if (!treeNodeColumn) {\n          treeNodeColumn = column;\n        }\n      } else if (type === 'expand') {\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          if (expandColumn) {\n            UtilTools.warn('vxe.error.colRepet', ['type', type]);\n          }\n        }\n\n        if (!expandColumn) {\n          expandColumn = column;\n        }\n      }\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (type === 'checkbox') {\n          if (checkboxColumn) {\n            UtilTools.warn('vxe.error.colRepet', ['type', type]);\n          }\n\n          if (!checkboxColumn) {\n            checkboxColumn = column;\n          }\n        } else if (type === 'radio') {\n          if (radioColumn) {\n            UtilTools.warn('vxe.error.colRepet', ['type', type]);\n          }\n\n          if (!radioColumn) {\n            radioColumn = column;\n          }\n        }\n      }\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (_this10.showOverflow && column.showOverflow === false) {\n          UtilTools.warn('vxe.error.errConflicts', [\"table.show-overflow=\".concat(_this10.showOverflow), \"column.show-overflow=\".concat(column.showOverflow)]);\n        }\n\n        if (_this10.showHeaderOverflow && column.showHeaderOverflow === false) {\n          UtilTools.warn('vxe.error.errConflicts', [\"table.show-header-overflow=\".concat(_this10.showHeaderOverflow), \"column.show-header-overflow=\".concat(column.showHeaderOverflow)]);\n        }\n\n        if (_this10.showFooterOverflow && column.showFooterOverflow === false) {\n          UtilTools.warn('vxe.error.errConflicts', [\"table.show-footer-overflow=\".concat(_this10.showFooterOverflow), \"column.show-footer-overflow=\".concat(column.showFooterOverflow)]);\n        }\n      }\n\n      if (isAllOverflow && column.showOverflow === false) {\n        isAllOverflow = false;\n      }\n\n      if (fullColumnIdData[colid]) {\n        UtilTools.error('vxe.error.colRepet', ['colId', colid]);\n      }\n\n      fullColumnIdData[colid] = rest;\n      fullColumnMap.set(column, rest);\n    };\n\n    fullColumnMap.clear();\n\n    if (isGroup) {\n      XEUtils.eachTree(collectColumn, function (column, index, items, path, parent, nodes) {\n        column.level = nodes.length;\n        handleFunc(column, index, items, path, parent);\n      });\n    } else {\n      tableFullColumn.forEach(handleFunc);\n    }\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      if (expandColumn && this.mouseOpts.area) {\n        UtilTools.error('vxe.error.errConflicts', ['mouse-config.area', 'column.type=expand']);\n      }\n    }\n\n    this.isGroup = isGroup;\n    this.treeNodeColumn = treeNodeColumn;\n    this.expandColumn = expandColumn;\n    this.isAllOverflow = isAllOverflow;\n  },\n\n  /**\r\n   * 根据 tr 元素获取对应的 row 信息\r\n   * @param {Element} tr 元素\r\n   */\n  getRowNode: function getRowNode(tr) {\n    if (tr) {\n      var fullAllDataRowIdData = this.fullAllDataRowIdData;\n      var rowid = tr.getAttribute('rowid');\n      var rest = fullAllDataRowIdData[rowid];\n\n      if (rest) {\n        return {\n          rowid: rest.rowid,\n          item: rest.row,\n          index: rest.index,\n          items: rest.items,\n          parent: rest.parent\n        };\n      }\n    }\n\n    return null;\n  },\n\n  /**\r\n   * 根据 th/td 元素获取对应的 column 信息\r\n   * @param {Element} cell 元素\r\n   */\n  getColumnNode: function getColumnNode(cell) {\n    if (cell) {\n      var fullColumnIdData = this.fullColumnIdData;\n      var colid = cell.getAttribute('colid');\n      var rest = fullColumnIdData[colid];\n\n      if (rest) {\n        return {\n          colid: rest.colid,\n          item: rest.column,\n          index: rest.index,\n          items: rest.items,\n          parent: rest.parent\n        };\n      }\n    }\n\n    return null;\n  },\n\n  /**\r\n   * 根据 row 获取相对于 data 中的索引\r\n   * @param {Row} row 行对象\r\n   */\n  getRowIndex: function getRowIndex(row) {\n    return this.fullDataRowMap.has(row) ? this.fullDataRowMap.get(row).index : -1;\n  },\n\n  /**\r\n   * 根据 row 获取相对于当前数据中的索引\r\n   * @param {Row} row 行对象\r\n   */\n  getVTRowIndex: function getVTRowIndex(row) {\n    return this.afterFullData.indexOf(row);\n  },\n  // 在 v3 中废弃\n  _getRowIndex: function _getRowIndex(row) {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      UtilTools.warn('vxe.error.delFunc', ['_getRowIndex', 'getVTRowIndex']);\n    }\n\n    return this.getVTRowIndex(row);\n  },\n\n  /**\r\n   * 根据 row 获取渲染中的虚拟索引\r\n   * @param {Row} row 行对象\r\n   */\n  getVMRowIndex: function getVMRowIndex(row) {\n    return this.tableData.indexOf(row);\n  },\n  // 在 v3 中废弃\n  $getRowIndex: function $getRowIndex(row) {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      UtilTools.warn('vxe.error.delFunc', ['$getRowIndex', 'getVMRowIndex']);\n    }\n\n    return this.getVMRowIndex(row);\n  },\n\n  /**\r\n   * 根据 column 获取相对于 columns 中的索引\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  getColumnIndex: function getColumnIndex(column) {\n    return this.fullColumnMap.has(column) ? this.fullColumnMap.get(column).index : -1;\n  },\n\n  /**\r\n   * 根据 column 获取相对于当前表格列中的索引\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  getVTColumnIndex: function getVTColumnIndex(column) {\n    return this.visibleColumn.indexOf(column);\n  },\n  // 在 v3 中废弃\n  _getColumnIndex: function _getColumnIndex(column) {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      UtilTools.warn('vxe.error.delFunc', ['_getColumnIndex', 'getVTColumnIndex']);\n    }\n\n    return this.getVTColumnIndex(column);\n  },\n\n  /**\r\n   * 根据 column 获取渲染中的虚拟索引\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  getVMColumnIndex: function getVMColumnIndex(column) {\n    return this.tableColumn.indexOf(column);\n  },\n  // 在 v3 中废弃\n  $getColumnIndex: function $getColumnIndex(column) {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      UtilTools.warn('vxe.error.delFunc', ['$getColumnIndex', 'getVMColumnIndex']);\n    }\n\n    return this.getVMColumnIndex(column);\n  },\n\n  /**\r\n   * 判断是否为索引列\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  isSeqColumn: function isSeqColumn(column) {\n    return column && (column.type === 'seq' || column.type === 'index');\n  },\n\n  /**\r\n   * 定义行数据中的列属性，如果不存在则定义\r\n   * @param {Row} record 行数据\r\n   */\n  defineField: function defineField(record) {\n    var radioOpts = this.radioOpts,\n        checkboxOpts = this.checkboxOpts,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        expandOpts = this.expandOpts;\n    var rowkey = getRowkey(this);\n    this.visibleColumn.forEach(function (_ref) {\n      var property = _ref.property,\n          editRender = _ref.editRender;\n\n      if (property && !XEUtils.has(record, property)) {\n        XEUtils.set(record, property, editRender && !XEUtils.isUndefined(editRender.defaultValue) ? editRender.defaultValue : null);\n      }\n    });\n    var ohterFields = [radioOpts.labelField, checkboxOpts.checkField, checkboxOpts.labelField, expandOpts.labelField];\n    ohterFields.forEach(function (key) {\n      if (key && !XEUtils.get(record, key)) {\n        XEUtils.set(record, key, null);\n      }\n    });\n\n    if (treeConfig && treeOpts.lazy && XEUtils.isUndefined(record[treeOpts.children])) {\n      record[treeOpts.children] = null;\n    } // 必须有行数据的唯一主键，可以自行设置；也可以默认生成一个随机数\n\n\n    if (!XEUtils.get(record, rowkey)) {\n      XEUtils.set(record, rowkey, getRowUniqueId());\n    }\n\n    return record;\n  },\n\n  /**\r\n   * 创建 data 对象\r\n   * 对于某些特殊场景可能会用到，会自动对数据的字段名进行检测，如果不存在就自动定义\r\n   * @param {Array} records 新数据\r\n   */\n  createData: function createData(records) {\n    var _this11 = this;\n\n    var treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts;\n\n    var handleRrecord = function handleRrecord(record) {\n      return _this11.defineField(Object.assign({}, record));\n    };\n\n    var rows = treeConfig ? XEUtils.mapTree(records, handleRrecord, treeOpts) : records.map(handleRrecord);\n    return this.$nextTick().then(function () {\n      return rows;\n    });\n  },\n\n  /**\r\n   * 创建 Row|Rows 对象\r\n   * 对于某些特殊场景需要对数据进行手动插入时可能会用到\r\n   * @param {Array/Object} records 新数据\r\n   */\n  createRow: function createRow(records) {\n    var _this12 = this;\n\n    var isArr = XEUtils.isArray(records);\n\n    if (!isArr) {\n      records = [records];\n    }\n\n    return this.$nextTick().then(function () {\n      return _this12.createData(records).then(function (rows) {\n        return isArr ? rows : rows[0];\n      });\n    });\n  },\n\n  /**\r\n   * 还原数据\r\n   * 如果不传任何参数，则还原整个表格\r\n   * 如果传 row 则还原一行\r\n   * 如果传 rows 则还原多行\r\n   * 如果还额外传了 field 则还原指定的单元格数据\r\n   */\n  revertData: function revertData(rows, field) {\n    var _this13 = this;\n\n    var keepSource = this.keepSource,\n        tableSourceData = this.tableSourceData,\n        treeConfig = this.treeConfig;\n\n    if (!keepSource) {\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        UtilTools.warn('vxe.error.reqProp', ['keep-source']);\n      }\n\n      return this.$nextTick();\n    }\n\n    var targetRows = rows;\n\n    if (rows) {\n      if (!XEUtils.isArray(rows)) {\n        targetRows = [rows];\n      }\n    } else {\n      targetRows = XEUtils.toArray(this.getUpdateRecords());\n    }\n\n    if (targetRows.length) {\n      targetRows.forEach(function (row) {\n        if (!_this13.isInsertByRow(row)) {\n          var rowIndex = _this13.getRowIndex(row);\n\n          if (treeConfig && rowIndex === -1) {\n            throw new Error(UtilTools.getLog('vxe.error.noTree', ['revertData']));\n          }\n\n          var oRow = tableSourceData[rowIndex];\n\n          if (oRow && row) {\n            if (field) {\n              XEUtils.set(row, field, XEUtils.clone(XEUtils.get(oRow, field), true));\n            } else {\n              XEUtils.destructuring(row, XEUtils.clone(oRow, true));\n            }\n          }\n        }\n      });\n    }\n\n    if (rows) {\n      return this.$nextTick();\n    }\n\n    return this.reloadData(tableSourceData);\n  },\n\n  /**\r\n   * 清空单元格内容\r\n   * 如果不创参数，则清空整个表格内容\r\n   * 如果传 row 则清空一行内容\r\n   * 如果传 rows 则清空多行内容\r\n   * 如果还额外传了 field 则清空指定单元格内容\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {String} field 字段名\r\n   */\n  clearData: function clearData(rows, field) {\n    var tableFullData = this.tableFullData,\n        visibleColumn = this.visibleColumn;\n\n    if (!arguments.length) {\n      rows = tableFullData;\n    } else if (rows && !XEUtils.isArray(rows)) {\n      rows = [rows];\n    }\n\n    if (field) {\n      rows.forEach(function (row) {\n        return XEUtils.set(row, field, null);\n      });\n    } else {\n      rows.forEach(function (row) {\n        visibleColumn.forEach(function (column) {\n          if (column.property) {\n            setCellValue(row, column, null);\n          }\n        });\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 检查是否为临时行数据\r\n   * @param {Row} row 行对象\r\n   */\n  isInsertByRow: function isInsertByRow(row) {\n    return this.editStore.insertList.indexOf(row) > -1;\n  },\n\n  /**\r\n   * 检查行或列数据是否发生改变\r\n   * @param {Row} row 行对象\r\n   * @param {String} field 字段名\r\n   */\n  isUpdateByRow: function isUpdateByRow(row, field) {\n    var _this14 = this;\n\n    var visibleColumn = this.visibleColumn,\n        keepSource = this.keepSource,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        tableSourceData = this.tableSourceData,\n        fullDataRowIdData = this.fullDataRowIdData;\n\n    if (keepSource) {\n      var oRow, property;\n      var rowid = getRowid(this, row); // 新增的数据不需要检测\n\n      if (!fullDataRowIdData[rowid]) {\n        return false;\n      }\n\n      if (treeConfig) {\n        var children = treeOpts.children;\n        var matchObj = XEUtils.findTree(tableSourceData, function (item) {\n          return rowid === getRowid(_this14, item);\n        }, treeOpts);\n        row = Object.assign({}, row, _defineProperty({}, children, null));\n\n        if (matchObj) {\n          oRow = Object.assign({}, matchObj.item, _defineProperty({}, children, null));\n        }\n      } else {\n        var oRowIndex = fullDataRowIdData[rowid].index;\n        oRow = tableSourceData[oRowIndex];\n      }\n\n      if (oRow) {\n        if (arguments.length > 1) {\n          return !eqCellValue(oRow, row, field);\n        }\n\n        for (var index = 0, len = visibleColumn.length; index < len; index++) {\n          property = visibleColumn[index].property;\n\n          if (property && !eqCellValue(oRow, row, property)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n\n  /**\r\n   * 获取表格的可视列，也可以指定索引获取列\r\n   * @param {Number} columnIndex 索引\r\n   */\n  getColumns: function getColumns(columnIndex) {\n    var columns = this.visibleColumn;\n    return XEUtils.isUndefined(columnIndex) ? columns.slice(0) : columns[columnIndex];\n  },\n\n  /**\r\n   * 根据列的唯一主键获取列\r\n   * @param {String} colid 列主键\r\n   */\n  getColumnById: function getColumnById(colid) {\n    var fullColumnIdData = this.fullColumnIdData;\n    return fullColumnIdData[colid] ? fullColumnIdData[colid].column : null;\n  },\n\n  /**\r\n   * 根据列的字段名获取列\r\n   * @param {String} field 字段名\r\n   */\n  getColumnByField: function getColumnByField(field) {\n    var fullColumnFieldData = this.fullColumnFieldData;\n    return fullColumnFieldData[field] ? fullColumnFieldData[field].column : null;\n  },\n\n  /**\r\n   * 获取当前表格的列\r\n   * 收集到的全量列、全量表头列、处理条件之后的全量表头列、当前渲染中的表头列\r\n   */\n  getTableColumn: function getTableColumn() {\n    return {\n      collectColumn: this.collectColumn.slice(0),\n      fullColumn: this.tableFullColumn.slice(0),\n      visibleColumn: this.visibleColumn.slice(0),\n      tableColumn: this.tableColumn.slice(0)\n    };\n  },\n\n  /**\r\n   * 获取数据，和 data 的行为一致，也可以指定索引获取数据\r\n   */\n  getData: function getData(rowIndex) {\n    var tableSynchData = this.data || this.tableSynchData;\n    return XEUtils.isUndefined(rowIndex) ? tableSynchData.slice(0) : tableSynchData[rowIndex];\n  },\n\n  /**\r\n   * 用于多选行，获取已选中的数据\r\n   */\n  getCheckboxRecords: function getCheckboxRecords() {\n    var tableFullData = this.tableFullData,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        checkboxOpts = this.checkboxOpts;\n    var property = checkboxOpts.checkField;\n    var rowList = [];\n\n    if (property) {\n      if (treeConfig) {\n        rowList = XEUtils.filterTree(tableFullData, function (row) {\n          return XEUtils.get(row, property);\n        }, treeOpts);\n      } else {\n        rowList = tableFullData.filter(function (row) {\n          return XEUtils.get(row, property);\n        });\n      }\n    } else {\n      var selection = this.selection;\n\n      if (treeConfig) {\n        rowList = XEUtils.filterTree(tableFullData, function (row) {\n          return selection.indexOf(row) > -1;\n        }, treeOpts);\n      } else {\n        rowList = tableFullData.filter(function (row) {\n          return selection.indexOf(row) > -1;\n        });\n      }\n    }\n\n    return rowList;\n  },\n\n  /**\r\n   * 获取处理后全量的表格数据\r\n   * 如果存在筛选条件，继续处理\r\n   */\n  updateAfterFullData: function updateAfterFullData() {\n    var _this15 = this;\n\n    var tableFullColumn = this.tableFullColumn,\n        tableFullData = this.tableFullData,\n        filterOpts = this.filterOpts,\n        sortOpts = this.sortOpts;\n    var allRemoteFilter = filterOpts.remote,\n        allFilterMethod = filterOpts.filterMethod;\n    var allRemoteSort = sortOpts.remote,\n        allSortMethod = sortOpts.sortMethod,\n        sortMultiple = sortOpts.multiple;\n    var tableData = tableFullData.slice(0);\n    var filterColumns = [];\n    var orderColumns = [];\n    tableFullColumn.forEach(function (column) {\n      var sortable = column.sortable,\n          order = column.order,\n          filters = column.filters;\n\n      if (!allRemoteFilter && filters && filters.length) {\n        var valueList = [];\n        var itemList = [];\n        filters.forEach(function (item) {\n          if (item.checked) {\n            itemList.push(item);\n            valueList.push(item.value);\n          }\n        });\n\n        if (itemList.length) {\n          filterColumns.push({\n            column: column,\n            valueList: valueList,\n            itemList: itemList\n          });\n        }\n      }\n\n      if (!allRemoteSort && sortable && order) {\n        orderColumns.push({\n          column: column,\n          property: column.property,\n          order: order\n        });\n      }\n    });\n\n    if (filterColumns.length) {\n      tableData = tableData.filter(function (row) {\n        return filterColumns.every(function (_ref2) {\n          var column = _ref2.column,\n              valueList = _ref2.valueList,\n              itemList = _ref2.itemList;\n\n          if (valueList.length && !allRemoteFilter) {\n            var filterMethod = column.filterMethod,\n                filterRender = column.filterRender;\n            var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n            var compFilterMethod = compConf && compConf.renderFilter ? compConf.filterMethod : null;\n            var cellValue = UtilTools.getCellValue(row, column);\n\n            if (filterMethod) {\n              return itemList.some(function (item) {\n                return filterMethod({\n                  value: item.value,\n                  option: item,\n                  cellValue: cellValue,\n                  row: row,\n                  column: column,\n                  $table: _this15\n                });\n              });\n            } else if (compFilterMethod) {\n              return itemList.some(function (item) {\n                return compFilterMethod({\n                  value: item.value,\n                  option: item,\n                  cellValue: cellValue,\n                  row: row,\n                  column: column,\n                  $table: _this15\n                });\n              });\n            } else if (allFilterMethod) {\n              return allFilterMethod({\n                options: itemList,\n                values: valueList,\n                cellValue: cellValue,\n                row: row,\n                column: column\n              });\n            }\n\n            return valueList.indexOf(XEUtils.get(row, column.property)) > -1;\n          }\n\n          return true;\n        });\n      });\n    }\n\n    var firstOrderColumn = orderColumns[0];\n\n    if (!allRemoteSort && firstOrderColumn) {\n      if (allSortMethod) {\n        var sortRests = allSortMethod({\n          data: tableData,\n          column: firstOrderColumn.column,\n          property: firstOrderColumn.property,\n          order: firstOrderColumn.order,\n          sortList: orderColumns,\n          $table: this\n        });\n        tableData = XEUtils.isArray(sortRests) ? sortRests : tableData;\n      } else {\n        // 兼容 v4\n        if (sortMultiple) {\n          tableData = XEUtils.orderBy(tableData, orderColumns.map(function (_ref3) {\n            var column = _ref3.column,\n                order = _ref3.order;\n            return [getOrderField(_this15, column), order];\n          }));\n        } else {\n          var column = firstOrderColumn.column,\n              rest = null;\n\n          if (column.sortMethod) {\n            rest = tableData.sort(column.sortMethod);\n          } else if (column.sortBy) {\n            rest = arraySort(tableData, column.sortBy, true);\n          } else if (column.formatter && column.sortByFormatter) {\n            var params = {\n              $table: this,\n              column: column\n            };\n            rest = tableData.sort(function (row1, row2) {\n              params.row = row1;\n              row1 = _this15.getCellLabel(row1, column, params);\n              params.row = row2;\n              row2 = _this15.getCellLabel(row2, column, params);\n              return compare(row1, row2);\n            });\n          } else if (column.property) {\n            rest = arraySort(tableData, column.property, true);\n          } else {\n            rest = tableData;\n          }\n\n          tableData = column.order === 'desc' ? rest.reverse() : rest; //        \t\n          //          // 兼容 v2，在 v4 中废弃， sortBy 不能为数组\n          //          let sortByConfs\n          //          if (XEUtils.isArray(firstOrderColumn.sortBy)) {\n          //            sortByConfs = firstOrderColumn.sortBy.map(item => [item, firstOrderColumn.order])\n          //          }\n          //          tableData = XEUtils.orderBy(tableData, sortByConfs || [firstOrderColumn].map(({ column, order }) => [getOrderField(this, column), order]))\n        }\n      }\n    }\n\n    this.afterFullData = tableData;\n    return tableData;\n  },\n\n  /**\r\n   * 根据行的唯一主键获取行\r\n   * @param {String/Number} rowid 行主键\r\n   */\n  getRowById: function getRowById(rowid) {\n    var fullDataRowIdData = this.fullDataRowIdData;\n    return fullDataRowIdData[rowid] ? fullDataRowIdData[rowid].row : null;\n  },\n\n  /**\r\n   * 根据行获取行的唯一主键\r\n   * @param {Row} row 行对象\r\n   */\n  getRowid: function getRowid(row) {\n    var fullAllDataRowMap = this.fullAllDataRowMap;\n    return fullAllDataRowMap.has(row) ? fullAllDataRowMap.get(row).rowid : null;\n  },\n\n  /**\r\n   * 获取处理后的表格数据\r\n   * 如果存在筛选条件，继续处理\r\n   * 如果存在排序，继续处理\r\n   */\n  getTableData: function getTableData() {\n    var tableFullData = this.tableFullData,\n        afterFullData = this.afterFullData,\n        tableData = this.tableData,\n        footerTableData = this.footerTableData;\n    return {\n      fullData: tableFullData.slice(0),\n      visibleData: afterFullData.slice(0),\n      tableData: tableData.slice(0),\n      footerData: footerTableData.slice(0)\n    };\n  },\n\n  /**\r\n   * 处理数据加载默认行为\r\n   * 默认执行一次，除非被重置\r\n   */\n  handleLoadDefaults: function handleLoadDefaults() {\n    var _this16 = this;\n\n    if (this.checkboxConfig) {\n      this.handleDefaultSelectionChecked();\n    }\n\n    if (this.radioConfig) {\n      this.handleDefaultRadioChecked();\n    }\n\n    if (this.expandConfig) {\n      this.handleDefaultRowExpand();\n    }\n\n    if (this.treeConfig) {\n      this.handleDefaultTreeExpand();\n    }\n\n    if (this.mergeCells) {\n      this.handleDefaultMergeCells();\n    }\n\n    if (this.mergeFooterItems) {\n      this.handleDefaultMergeFooterItems();\n    }\n\n    this.$nextTick(function () {\n      return setTimeout(_this16.recalculate);\n    });\n  },\n\n  /**\r\n   * 处理初始化的默认行为\r\n   * 只会执行一次\r\n   */\n  handleInitDefaults: function handleInitDefaults() {\n    var sortConfig = this.sortConfig;\n\n    if (sortConfig) {\n      this.handleDefaultSort();\n    }\n  },\n\n  /**\r\n   * 隐藏指定列\r\n   */\n  hideColumn: function hideColumn(fieldOrColumn) {\n    var column = handleFieldOrColumn(this, fieldOrColumn);\n\n    if (column) {\n      column.visible = false;\n    }\n\n    return this.handleCustom();\n  },\n\n  /**\r\n   * 显示指定列\r\n   */\n  showColumn: function showColumn(fieldOrColumn) {\n    var column = handleFieldOrColumn(this, fieldOrColumn);\n\n    if (column) {\n      column.visible = true;\n    }\n\n    return this.handleCustom();\n  },\n\n  /**\r\n   * 手动重置列的显示隐藏、列宽拖动的状态；\r\n   * 如果为 true 则重置所有状态\r\n   * 如果已关联工具栏，则会同步更新\r\n   */\n  resetColumn: function resetColumn(options) {\n    var customOpts = this.customOpts;\n    var checkMethod = customOpts.checkMethod;\n    var opts = Object.assign({\n      visible: true,\n      resizable: options === true\n    }, options);\n    this.tableFullColumn.forEach(function (column) {\n      if (opts.resizable) {\n        column.resizeWidth = 0;\n      }\n\n      if (!checkMethod || checkMethod({\n        column: column\n      })) {\n        column.visible = column.defaultVisible;\n      }\n    });\n\n    if (opts.resizable) {\n      this.saveCustomResizable(true);\n    }\n\n    return this.handleCustom();\n  },\n  handleCustom: function handleCustom() {\n    this.saveCustomVisible();\n    this.analyColumnWidth();\n    return this.refreshColumn();\n  },\n\n  /**\r\n   * 还原自定义列操作状态\r\n   */\n  restoreCustomStorage: function restoreCustomStorage() {\n    var id = this.id,\n        collectColumn = this.collectColumn,\n        customConfig = this.customConfig,\n        customOpts = this.customOpts;\n    var storage = customOpts.storage;\n    var isAllStorage = customOpts.storage === true;\n    var isResizable = isAllStorage || storage && storage.resizable;\n    var isVisible = isAllStorage || storage && storage.visible;\n\n    if (customConfig && (isResizable || isVisible)) {\n      var customMap = {};\n\n      if (!id) {\n        UtilTools.error('vxe.error.reqProp', ['id']);\n        return;\n      }\n\n      if (isResizable) {\n        var columnWidthStorage = getCustomStorageMap(resizableStorageKey)[id];\n\n        if (columnWidthStorage) {\n          XEUtils.each(columnWidthStorage, function (resizeWidth, field) {\n            customMap[field] = {\n              field: field,\n              resizeWidth: resizeWidth\n            };\n          });\n        }\n      }\n\n      if (isVisible) {\n        var columnVisibleStorage = getCustomStorageMap(visibleStorageKey)[id];\n\n        if (columnVisibleStorage) {\n          var colVisibles = columnVisibleStorage.split('|');\n          var colHides = colVisibles[0] ? colVisibles[0].split(',') : [];\n          var colShows = colVisibles[1] ? colVisibles[1].split(',') : [];\n          colHides.forEach(function (field) {\n            if (customMap[field]) {\n              customMap[field].visible = false;\n            } else {\n              customMap[field] = {\n                field: field,\n                visible: false\n              };\n            }\n          });\n          colShows.forEach(function (field) {\n            if (customMap[field]) {\n              customMap[field].visible = true;\n            } else {\n              customMap[field] = {\n                field: field,\n                visible: true\n              };\n            }\n          });\n        }\n      }\n\n      var keyMap = {};\n      XEUtils.eachTree(collectColumn, function (column) {\n        var colKey = column.getKey();\n\n        if (colKey) {\n          keyMap[colKey] = column;\n        }\n      });\n      XEUtils.each(customMap, function (_ref4, field) {\n        var visible = _ref4.visible,\n            resizeWidth = _ref4.resizeWidth;\n        var column = keyMap[field];\n\n        if (column) {\n          if (XEUtils.isNumber(resizeWidth)) {\n            column.resizeWidth = resizeWidth;\n          }\n\n          if (XEUtils.isBoolean(visible)) {\n            column.visible = visible;\n          }\n        }\n      });\n    }\n  },\n  saveCustomVisible: function saveCustomVisible() {\n    var id = this.id,\n        collectColumn = this.collectColumn,\n        customConfig = this.customConfig,\n        customOpts = this.customOpts;\n    var checkMethod = customOpts.checkMethod,\n        storage = customOpts.storage;\n    var isAllStorage = customOpts.storage === true;\n    var isVisible = isAllStorage || storage && storage.visible;\n\n    if (customConfig && isVisible) {\n      var columnVisibleStorageMap = getCustomStorageMap(visibleStorageKey);\n      var colHides = [];\n      var colShows = [];\n\n      if (!id) {\n        UtilTools.error('vxe.error.reqProp', ['id']);\n        return;\n      }\n\n      XEUtils.eachTree(collectColumn, function (column) {\n        if (!checkMethod || checkMethod({\n          column: column\n        })) {\n          if (!column.visible && column.defaultVisible) {\n            var colKey = column.getKey();\n\n            if (colKey) {\n              colHides.push(colKey);\n            }\n          } else if (column.visible && !column.defaultVisible) {\n            var _colKey = column.getKey();\n\n            if (_colKey) {\n              colShows.push(_colKey);\n            }\n          }\n        }\n      });\n      columnVisibleStorageMap[id] = [colHides.join(',')].concat(colShows.length ? [colShows.join(',')] : []).join('|') || undefined;\n      localStorage.setItem(visibleStorageKey, XEUtils.toJSONString(columnVisibleStorageMap));\n    }\n  },\n  saveCustomResizable: function saveCustomResizable(isReset) {\n    var id = this.id,\n        collectColumn = this.collectColumn,\n        customConfig = this.customConfig,\n        customOpts = this.customOpts;\n    var storage = customOpts.storage;\n    var isAllStorage = customOpts.storage === true;\n    var isResizable = isAllStorage || storage && storage.resizable;\n\n    if (customConfig && isResizable) {\n      var columnWidthStorageMap = getCustomStorageMap(resizableStorageKey);\n      var columnWidthStorage;\n\n      if (!id) {\n        UtilTools.error('vxe.error.reqProp', ['id']);\n        return;\n      }\n\n      if (!isReset) {\n        columnWidthStorage = XEUtils.isPlainObject(columnWidthStorageMap[id]) ? columnWidthStorageMap[id] : {};\n        XEUtils.eachTree(collectColumn, function (column) {\n          if (column.resizeWidth) {\n            var colKey = column.getKey();\n\n            if (colKey) {\n              columnWidthStorage[colKey] = column.renderWidth;\n            }\n          }\n        });\n      }\n\n      columnWidthStorageMap[id] = XEUtils.isEmpty(columnWidthStorage) ? undefined : columnWidthStorage;\n      localStorage.setItem(resizableStorageKey, XEUtils.toJSONString(columnWidthStorageMap));\n    }\n  },\n\n  /**\r\n   * 刷新列配置\r\n   */\n  refreshColumn: function refreshColumn() {\n    var _this17 = this;\n\n    return this.parseColumns().then(function () {\n      return _this17.refreshScroll();\n    }).then(function () {\n      return _this17.recalculate();\n    });\n  },\n\n  /**\r\n   * 刷新列信息\r\n   * 将固定的列左边、右边分别靠边\r\n   */\n  parseColumns: function parseColumns() {\n    var _this18 = this;\n\n    var leftList = [];\n    var centerList = [];\n    var rightList = [];\n    var collectColumn = this.collectColumn,\n        tableFullColumn = this.tableFullColumn,\n        isGroup = this.isGroup,\n        columnStore = this.columnStore,\n        sXOpts = this.sXOpts,\n        scrollXStore = this.scrollXStore; // 如果是分组表头，如果子列全部被隐藏，则根列也隐藏\n\n    if (isGroup) {\n      var leftGroupList = [];\n      var centerGroupList = [];\n      var rightGroupList = [];\n      XEUtils.eachTree(collectColumn, function (column, index, items, path, parent) {\n        var isColGroup = hasChildrenList(column); // 如果是分组，必须按组设置固定列，不允许给子列设置固定\n\n        if (parent && parent.fixed) {\n          column.fixed = parent.fixed;\n        }\n\n        if (parent && column.fixed !== parent.fixed) {\n          UtilTools.error('vxe.error.groupFixed');\n        }\n\n        if (isColGroup) {\n          column.visible = !!XEUtils.findTree(column.children, function (subColumn) {\n            return hasChildrenList(subColumn) ? null : subColumn.visible;\n          });\n        } else if (column.visible) {\n          if (column.fixed === 'left') {\n            leftList.push(column);\n          } else if (column.fixed === 'right') {\n            rightList.push(column);\n          } else {\n            centerList.push(column);\n          }\n        }\n      });\n      collectColumn.forEach(function (column) {\n        if (column.visible) {\n          if (column.fixed === 'left') {\n            leftGroupList.push(column);\n          } else if (column.fixed === 'right') {\n            rightGroupList.push(column);\n          } else {\n            centerGroupList.push(column);\n          }\n        }\n      });\n      this.tableGroupColumn = leftGroupList.concat(centerGroupList).concat(rightGroupList);\n    } else {\n      // 重新分配列\n      tableFullColumn.forEach(function (column) {\n        if (column.visible) {\n          if (column.fixed === 'left') {\n            leftList.push(column);\n          } else if (column.fixed === 'right') {\n            rightList.push(column);\n          } else {\n            centerList.push(column);\n          }\n        }\n      });\n    }\n\n    var visibleColumn = leftList.concat(centerList).concat(rightList);\n    var scrollXLoad = sXOpts.enabled && sXOpts.gt > -1 && sXOpts.gt < tableFullColumn.length;\n    this.hasFixedColumn = leftList.length > 0 || rightList.length > 0;\n    Object.assign(columnStore, {\n      leftList: leftList,\n      centerList: centerList,\n      rightList: rightList\n    });\n\n    if (scrollXLoad && isGroup) {\n      scrollXLoad = false;\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        UtilTools.warn('vxe.error.scrollXNotGroup');\n      }\n    }\n\n    if (scrollXLoad) {\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (this.showHeader && !this.showHeaderOverflow) {\n          UtilTools.warn('vxe.error.reqProp', ['show-header-overflow']);\n        }\n\n        if (this.showFooter && !this.showFooterOverflow) {\n          UtilTools.warn('vxe.error.reqProp', ['show-footer-overflow']);\n        }\n\n        if (this.spanMethod) {\n          UtilTools.warn('vxe.error.scrollErrProp', ['span-method']);\n        }\n\n        if (this.footerSpanMethod) {\n          UtilTools.warn('vxe.error.scrollErrProp', ['footer-span-method']);\n        }\n      }\n\n      var _computeVirtualX = computeVirtualX(this),\n          visibleSize = _computeVirtualX.visibleSize;\n\n      scrollXStore.startIndex = 0;\n      scrollXStore.endIndex = visibleSize;\n      scrollXStore.visibleSize = visibleSize;\n    } // 如果列被显示/隐藏，则清除合并状态\n    // 如果列被设置为固定，则清除合并状态\n\n\n    if (visibleColumn.length !== this.visibleColumn.length || !this.visibleColumn.every(function (column, index) {\n      return column === visibleColumn[index];\n    })) {\n      this.clearMergeCells();\n      this.clearMergeFooterItems();\n    }\n\n    this.scrollXLoad = scrollXLoad;\n    this.visibleColumn = visibleColumn;\n    this.handleTableColumn();\n    return this.updateFooter().then(function () {\n      return _this18.recalculate();\n    }).then(function () {\n      _this18.updateCellAreas();\n\n      return _this18.recalculate();\n    });\n  },\n\n  /**\r\n   * 指定列宽的列进行拆分\r\n   */\n  analyColumnWidth: function analyColumnWidth() {\n    var columnOpts = this.columnOpts;\n    var defaultWidth = columnOpts.width,\n        defaultMinWidth = columnOpts.minWidth;\n    var resizeList = [];\n    var pxList = [];\n    var pxMinList = [];\n    var scaleList = [];\n    var scaleMinList = [];\n    var autoList = [];\n    this.tableFullColumn.forEach(function (column) {\n      if (defaultWidth && !column.width) {\n        column.width = defaultWidth;\n      }\n\n      if (defaultMinWidth && !column.minWidth) {\n        column.minWidth = defaultMinWidth;\n      }\n\n      if (column.visible) {\n        if (column.resizeWidth) {\n          resizeList.push(column);\n        } else if (DomTools.isPx(column.width)) {\n          pxList.push(column);\n        } else if (DomTools.isScale(column.width)) {\n          scaleList.push(column);\n        } else if (DomTools.isPx(column.minWidth)) {\n          pxMinList.push(column);\n        } else if (DomTools.isScale(column.minWidth)) {\n          scaleMinList.push(column);\n        } else {\n          autoList.push(column);\n        }\n      }\n    });\n    Object.assign(this.columnStore, {\n      resizeList: resizeList,\n      pxList: pxList,\n      pxMinList: pxMinList,\n      scaleList: scaleList,\n      scaleMinList: scaleMinList,\n      autoList: autoList\n    });\n  },\n\n  /**\r\n   * 刷新滚动操作，手动同步滚动相关位置（对于某些特殊的操作，比如滚动条错位、固定列不同步）\r\n   */\n  refreshScroll: function refreshScroll() {\n    var lastScrollLeft = this.lastScrollLeft,\n        lastScrollTop = this.lastScrollTop;\n    var $refs = this.$refs;\n    var tableBody = $refs.tableBody,\n        leftBody = $refs.leftBody,\n        rightBody = $refs.rightBody,\n        tableFooter = $refs.tableFooter;\n    var tableBodyElem = tableBody ? tableBody.$el : null;\n    var leftBodyElem = leftBody ? leftBody.$el : null;\n    var rightBodyElem = rightBody ? rightBody.$el : null;\n    var tableFooterElem = tableFooter ? tableFooter.$el : null; // 还原滚动条位置\n\n    if (lastScrollLeft || lastScrollTop) {\n      return restoreScroll(this, lastScrollLeft, lastScrollTop);\n    } // 重置\n\n\n    setScrollTop(tableBodyElem, lastScrollTop);\n    setScrollTop(leftBodyElem, lastScrollTop);\n    setScrollTop(rightBodyElem, lastScrollTop);\n    setScrollLeft(tableFooterElem, lastScrollLeft);\n  },\n\n  /**\r\n   * 计算单元格列宽，动态分配可用剩余空间\r\n   * 支持 width=? width=?px width=?% min-width=? min-width=?px min-width=?%\r\n   */\n  recalculate: function recalculate(refull) {\n    var _this19 = this;\n\n    var $refs = this.$refs;\n    var tableBody = $refs.tableBody,\n        tableHeader = $refs.tableHeader,\n        tableFooter = $refs.tableFooter;\n    var bodyElem = tableBody ? tableBody.$el : null;\n    var headerElem = tableHeader ? tableHeader.$el : null;\n    var footerElem = tableFooter ? tableFooter.$el : null;\n\n    if (bodyElem) {\n      this.autoCellWidth(headerElem, bodyElem, footerElem);\n\n      if (refull === true) {\n        // 初始化时需要在列计算之后再执行优化运算，达到最优显示效果\n        return this.computeScrollLoad().then(function () {\n          _this19.autoCellWidth(headerElem, bodyElem, footerElem);\n\n          return _this19.computeScrollLoad();\n        });\n      }\n    }\n\n    return this.computeScrollLoad();\n  },\n\n  /**\r\n   * 列宽算法\r\n   * 支持 px、%、固定 混合分配\r\n   * 支持动态列表调整分配\r\n   * 支持自动分配偏移量\r\n   * @param {Element} headerElem\r\n   * @param {Element} bodyElem\r\n   * @param {Element} footerElem\r\n   * @param {Number} bodyWidth\r\n   */\n  autoCellWidth: function autoCellWidth(headerElem, bodyElem, footerElem) {\n    var tableWidth = 0;\n    var minCellWidth = 40; // 列宽最少限制 40px\n\n    var bodyWidth = bodyElem.clientWidth - 1;\n    var remainWidth = bodyWidth;\n    var meanWidth = remainWidth / 100;\n    var fit = this.fit,\n        columnStore = this.columnStore;\n    var resizeList = columnStore.resizeList,\n        pxMinList = columnStore.pxMinList,\n        pxList = columnStore.pxList,\n        scaleList = columnStore.scaleList,\n        scaleMinList = columnStore.scaleMinList,\n        autoList = columnStore.autoList; // 最小宽\n\n    pxMinList.forEach(function (column) {\n      var minWidth = parseInt(column.minWidth);\n      tableWidth += minWidth;\n      column.renderWidth = minWidth;\n    }); // 最小百分比\n\n    scaleMinList.forEach(function (column) {\n      var scaleWidth = Math.floor(parseInt(column.minWidth) * meanWidth);\n      tableWidth += scaleWidth;\n      column.renderWidth = scaleWidth;\n    }); // 固定百分比\n\n    scaleList.forEach(function (column) {\n      var scaleWidth = Math.floor(parseInt(column.width) * meanWidth);\n      tableWidth += scaleWidth;\n      column.renderWidth = scaleWidth;\n    }); // 固定宽\n\n    pxList.forEach(function (column) {\n      var width = parseInt(column.width);\n      tableWidth += width;\n      column.renderWidth = width;\n    }); // 调整了列宽\n\n    resizeList.forEach(function (column) {\n      var width = parseInt(column.resizeWidth);\n      tableWidth += width;\n      column.renderWidth = width;\n    });\n    remainWidth -= tableWidth;\n    meanWidth = remainWidth > 0 ? Math.floor(remainWidth / (scaleMinList.length + pxMinList.length + autoList.length)) : 0;\n\n    if (fit) {\n      if (remainWidth > 0) {\n        scaleMinList.concat(pxMinList).forEach(function (column) {\n          tableWidth += meanWidth;\n          column.renderWidth += meanWidth;\n        });\n      }\n    } else {\n      meanWidth = minCellWidth;\n    } // 自适应\n\n\n    autoList.forEach(function (column) {\n      var width = Math.max(meanWidth, minCellWidth);\n      column.renderWidth = width;\n      tableWidth += width;\n    });\n\n    if (fit) {\n      /**\r\n       * 偏移量算法\r\n       * 如果所有列足够放的情况下，从最后动态列开始分配\r\n       */\n      var dynamicList = scaleList.concat(scaleMinList).concat(pxMinList).concat(autoList);\n      var dynamicSize = dynamicList.length - 1;\n\n      if (dynamicSize > 0) {\n        var odiffer = bodyWidth - tableWidth;\n\n        if (odiffer > 0) {\n          while (odiffer > 0 && dynamicSize >= 0) {\n            odiffer--;\n            dynamicList[dynamicSize--].renderWidth++;\n          }\n\n          tableWidth = bodyWidth;\n        }\n      }\n    }\n\n    var tableHeight = bodyElem.offsetHeight;\n    var overflowY = bodyElem.scrollHeight > bodyElem.clientHeight;\n    this.scrollbarWidth = overflowY ? bodyElem.offsetWidth - bodyElem.clientWidth : 0;\n    this.overflowY = overflowY;\n    this.tableWidth = tableWidth;\n    this.tableHeight = tableHeight;\n\n    if (headerElem) {\n      this.headerHeight = headerElem.clientHeight;\n      this.$nextTick(function () {\n        // 检测是否同步滚动\n        if (headerElem && bodyElem && headerElem.scrollLeft !== bodyElem.scrollLeft) {\n          headerElem.scrollLeft = bodyElem.scrollLeft;\n        }\n      });\n    } else {\n      this.headerHeight = 0;\n    }\n\n    if (footerElem) {\n      var footerHeight = footerElem.offsetHeight;\n      this.scrollbarHeight = Math.max(footerHeight - footerElem.clientHeight, 0);\n      this.overflowX = tableWidth > footerElem.clientWidth;\n      this.footerHeight = footerHeight;\n    } else {\n      this.footerHeight = 0;\n      this.scrollbarHeight = Math.max(tableHeight - bodyElem.clientHeight, 0);\n      this.overflowX = tableWidth > bodyWidth;\n    }\n\n    this.updateHeight();\n    this.parentHeight = Math.max(this.headerHeight + this.footerHeight + 20, this.getParentHeight());\n\n    if (this.overflowX) {\n      this.checkScrolling();\n    }\n  },\n  updateHeight: function updateHeight() {\n    this.customHeight = calcHeight(this, 'height');\n    this.customMaxHeight = calcHeight(this, 'maxHeight');\n  },\n  updateStyle: function updateStyle() {\n    var _this20 = this;\n\n    var $refs = this.$refs,\n        isGroup = this.isGroup,\n        fullColumnIdData = this.fullColumnIdData,\n        tableColumn = this.tableColumn,\n        customHeight = this.customHeight,\n        customMaxHeight = this.customMaxHeight,\n        border = this.border,\n        headerHeight = this.headerHeight,\n        showFooter = this.showFooter,\n        allColumnOverflow = this.showOverflow,\n        allColumnHeaderOverflow = this.showHeaderOverflow,\n        allColumnFooterOverflow = this.showFooterOverflow,\n        footerHeight = this.footerHeight,\n        tableHeight = this.tableHeight,\n        tableWidth = this.tableWidth,\n        scrollbarHeight = this.scrollbarHeight,\n        scrollbarWidth = this.scrollbarWidth,\n        scrollXLoad = this.scrollXLoad,\n        scrollYLoad = this.scrollYLoad,\n        cellOffsetWidth = this.cellOffsetWidth,\n        columnStore = this.columnStore,\n        elemStore = this.elemStore,\n        editStore = this.editStore,\n        currentRow = this.currentRow,\n        mouseConfig = this.mouseConfig,\n        keyboardConfig = this.keyboardConfig,\n        keyboardOpts = this.keyboardOpts,\n        spanMethod = this.spanMethod,\n        mergeList = this.mergeList,\n        mergeFooterList = this.mergeFooterList,\n        footerSpanMethod = this.footerSpanMethod,\n        isAllOverflow = this.isAllOverflow;\n    var containerList = ['main', 'left', 'right'];\n    var emptyPlaceholderElem = $refs.emptyPlaceholder;\n    var bodyWrapperElem = elemStore['main-body-wrapper'];\n\n    var _headerHeight = Math.max(32, headerHeight); //加\n\n\n    if (emptyPlaceholderElem) {\n      //      emptyPlaceholderElem.style.top = `${headerHeight}px`//删\n      //      emptyPlaceholderElem.style.height = bodyWrapperElem ? `${bodyWrapperElem.offsetHeight - scrollbarHeight}px` : ''//删\n      emptyPlaceholderElem.style.top = \"\".concat(_headerHeight, \"px\"); //加\n\n      emptyPlaceholderElem.style.height = 'calc(100% - ' + _headerHeight + 'px)'; //加\n    }\n\n    if (customHeight > 0) {\n      if (showFooter) {\n        customHeight += scrollbarHeight;\n      }\n    }\n\n    containerList.forEach(function (name, index) {\n      var fixedType = index > 0 ? name : '';\n      var layoutList = ['header', 'body', 'footer'];\n      var fixedColumn = columnStore[\"\".concat(fixedType, \"List\")];\n      var fixedWrapperElem = $refs[\"\".concat(fixedType, \"Container\")];\n      layoutList.forEach(function (layout) {\n        var wrapperElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-wrapper\")];\n        var tableElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-table\")];\n\n        if (layout === 'header') {\n          // 表头体样式处理\n          // 横向滚动渲染\n          var tWidth = tableWidth; // 如果是使用优化模式\n\n          var isOptimize = false;\n\n          if (!isGroup) {\n            if (fixedType) {\n              if (scrollXLoad || allColumnHeaderOverflow) {\n                isOptimize = true;\n              }\n            }\n          }\n\n          if (isOptimize) {\n            tableColumn = fixedColumn;\n          }\n\n          if (isOptimize || scrollXLoad) {\n            tWidth = tableColumn.reduce(function (previous, column) {\n              return previous + column.renderWidth;\n            }, 0);\n          }\n\n          if (tableElem) {\n            tableElem.style.width = tWidth ? \"\".concat(tWidth + scrollbarWidth + 1, \"px\") : ''; //改\n            // 修复 IE 中高度无法自适应问题\n\n            if (browse.msie) {\n              XEUtils.arrayEach(tableElem.querySelectorAll('.vxe-resizable'), function (resizeElem) {\n                resizeElem.style.height = \"\".concat(resizeElem.parentNode.offsetHeight, \"px\");\n              });\n            }\n          }\n\n          var repairElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-repair\")];\n\n          if (repairElem) {\n            repairElem.style.width = \"\".concat(tableWidth, \"px\");\n          }\n\n          var listElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-list\")];\n\n          if (isGroup && listElem) {\n            XEUtils.arrayEach(listElem.querySelectorAll('.col--group'), function (thElem) {\n              var colNode = _this20.getColumnNode(thElem);\n\n              if (colNode) {\n                var column = colNode.item;\n                var showHeaderOverflow = column.showHeaderOverflow;\n                var cellOverflow = XEUtils.isBoolean(showHeaderOverflow) ? showHeaderOverflow : allColumnHeaderOverflow;\n                var showEllipsis = cellOverflow === 'ellipsis';\n                var showTitle = cellOverflow === 'title';\n                var showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n                var hasEllipsis = showTitle || showTooltip || showEllipsis;\n                var childWidth = 0;\n                var countChild = 0;\n\n                if (hasEllipsis) {\n                  XEUtils.eachTree(column.children, function (item) {\n                    if (!item.children || !column.children.length) {\n                      countChild++;\n                    }\n\n                    childWidth += item.renderWidth;\n                  });\n                }\n\n                thElem.style.width = hasEllipsis ? \"\".concat(childWidth - countChild - (border ? 2 : 0), \"px\") : '';\n              }\n            });\n          }\n        } else if (layout === 'body') {\n          var emptyBlockElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-emptyBlock\")];\n\n          if (wrapperElem) {\n            /*删\r\n               if (customMaxHeight) {\r\n                 wrapperElem.style.maxHeight = `${fixedType ? customMaxHeight - headerHeight - (showFooter ? 0 : scrollbarHeight) : customMaxHeight - headerHeight}px`\r\n               } else {\r\n                 if (customHeight > 0) {\r\n                   wrapperElem.style.height = `${fixedType ? (customHeight > 0 ? customHeight - headerHeight - footerHeight : tableHeight) - (showFooter ? 0 : scrollbarHeight) : customHeight - headerHeight - footerHeight}px`\r\n                 } else {\r\n                   wrapperElem.style.height = ''\r\n                 }\r\n               }*/\n            wrapperElem.style.height = 'calc(100% - ' + _headerHeight + 'px)'; //加\n          } // 如果是固定列\n\n\n          if (fixedWrapperElem) {\n            var isRightFixed = fixedType === 'right';\n            var _fixedColumn = columnStore[\"\".concat(fixedType, \"List\")];\n\n            if (wrapperElem) {\n              //              wrapperElem.style.top = `${headerHeight}px`//删\n              wrapperElem.style.top = \"\".concat(_headerHeight, \"px\"); //加\n            } //            fixedWrapperElem.style.height = `${(customHeight > 0 ? customHeight - headerHeight - footerHeight : tableHeight) + headerHeight + footerHeight - scrollbarHeight * (showFooter ? 2 : 1)}px`//删\n\n\n            fixedWrapperElem.style.height = 'calc(100% - 11px)'; //加\n\n            fixedWrapperElem.style.width = \"\".concat(_fixedColumn.reduce(function (previous, column) {\n              return previous + column.renderWidth;\n            }, isRightFixed ? scrollbarWidth : 0), \"px\");\n          }\n\n          var _tWidth = tableWidth; // 如果是使用优化模式\n\n          var _isOptimize = false;\n\n          if (fixedType) {\n            if (!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts.isMerge) && (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow))) {\n              _isOptimize = true;\n            }\n          }\n\n          if (_isOptimize) {\n            tableColumn = fixedColumn;\n          }\n\n          if (_isOptimize || scrollXLoad) {\n            _tWidth = tableColumn.reduce(function (previous, column) {\n              return previous + column.renderWidth;\n            }, 0);\n          }\n\n          if (tableElem) {\n            tableElem.style.width = _tWidth ? \"\".concat(_tWidth + 1, \"px\") : ''; //改\n            // 兼容性处理\n\n            tableElem.style.paddingRight = scrollbarWidth && fixedType && (browse['-moz'] || browse.safari) ? \"\".concat(scrollbarWidth, \"px\") : '';\n          }\n\n          if (emptyBlockElem) {\n            emptyBlockElem.style.width = _tWidth ? \"\".concat(_tWidth, \"px\") : '';\n          }\n        } else if (layout === 'footer') {\n          var _tWidth2 = tableWidth; // 如果是使用优化模式\n\n          var _isOptimize2 = false;\n\n          if (fixedType) {\n            if ((!mergeFooterList.length || !footerSpanMethod) && (scrollXLoad || allColumnFooterOverflow)) {\n              _isOptimize2 = true;\n            }\n          }\n\n          if (_isOptimize2) {\n            tableColumn = fixedColumn;\n          }\n\n          if (_isOptimize2 || scrollXLoad) {\n            _tWidth2 = tableColumn.reduce(function (previous, column) {\n              return previous + column.renderWidth;\n            }, 0);\n          }\n\n          if (wrapperElem) {\n            // 如果是固定列\n            if (fixedWrapperElem) {\n              //              wrapperElem.style.top = `${customHeight > 0 ? customHeight - footerHeight : tableHeight + headerHeight}px`//删\n              wrapperElem.style.top = \"\".concat(customHeight > 0 ? customHeight - footerHeight : tableHeight + _headerHeight, \"px\"); //加\n            }\n\n            wrapperElem.style.marginTop = \"\".concat(-scrollbarHeight, \"px\");\n          }\n\n          if (tableElem) {\n            tableElem.style.width = _tWidth2 ? \"\".concat(_tWidth2 + scrollbarWidth + 1, \"px\") : ''; //改\n          }\n        }\n\n        var colgroupElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-colgroup\")];\n\n        if (colgroupElem) {\n          XEUtils.arrayEach(colgroupElem.children, function (colElem) {\n            var colid = colElem.getAttribute('name');\n\n            if (colid === 'col_gutter') {\n              colElem.style.width = \"\".concat(scrollbarWidth, \"px\");\n            }\n\n            if (fullColumnIdData[colid]) {\n              var column = fullColumnIdData[colid].column;\n              var showHeaderOverflow = column.showHeaderOverflow,\n                  showFooterOverflow = column.showFooterOverflow,\n                  showOverflow = column.showOverflow;\n              var cellOverflow;\n              colElem.style.width = \"\".concat(column.renderWidth, \"px\");\n\n              if (layout === 'header') {\n                cellOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n              } else if (layout === 'footer') {\n                cellOverflow = XEUtils.isUndefined(showFooterOverflow) || XEUtils.isNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow;\n              } else {\n                cellOverflow = XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow) ? allColumnOverflow : showOverflow;\n              }\n\n              var showEllipsis = cellOverflow === 'ellipsis';\n              var showTitle = cellOverflow === 'title';\n              var showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n              var hasEllipsis = showTitle || showTooltip || showEllipsis;\n              var _listElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-list\")]; // 滚动的渲染不支持动态行高\n\n              if (layout === 'header' || layout === 'footer') {\n                if (scrollXLoad && !hasEllipsis) {\n                  hasEllipsis = true;\n                }\n              } else {\n                if ((scrollXLoad || scrollYLoad) && !hasEllipsis) {\n                  hasEllipsis = true;\n                }\n              }\n\n              if (_listElem) {\n                XEUtils.arrayEach(_listElem.querySelectorAll(\".\".concat(column.id)), function (elem) {\n                  var colspan = parseInt(elem.getAttribute('colspan') || 1);\n                  var cellElem = elem.querySelector('.vxe-cell');\n                  var colWidth = column.renderWidth;\n\n                  if (cellElem) {\n                    if (colspan > 1) {\n                      var columnIndex = _this20.getColumnIndex(column);\n\n                      for (var _index = 1; _index < colspan; _index++) {\n                        var nextColumn = _this20.getColumns(columnIndex + _index);\n\n                        if (nextColumn) {\n                          colWidth += nextColumn.renderWidth;\n                        }\n                      }\n                    }\n\n                    cellElem.style.width = hasEllipsis ? \"\".concat(colWidth - cellOffsetWidth * colspan, \"px\") : '';\n                  }\n                });\n              }\n            }\n          });\n        }\n      });\n    });\n\n    if (currentRow) {\n      this.setCurrentRow(currentRow);\n    }\n\n    if (mouseConfig && mouseConfig.selected && editStore.selected.row && editStore.selected.column) {\n      this.addColSdCls();\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 处理固定列的显示状态\r\n   */\n  checkScrolling: function checkScrolling() {\n    var _this$$refs = this.$refs,\n        tableBody = _this$$refs.tableBody,\n        leftContainer = _this$$refs.leftContainer,\n        rightContainer = _this$$refs.rightContainer;\n    var bodyElem = tableBody ? tableBody.$el : null;\n\n    if (bodyElem) {\n      if (leftContainer) {\n        DomTools[bodyElem.scrollLeft > 0 ? 'addClass' : 'removeClass'](leftContainer, 'scrolling--middle');\n      }\n\n      if (rightContainer) {\n        DomTools[bodyElem.clientWidth < bodyElem.scrollWidth - Math.ceil(bodyElem.scrollLeft) ? 'addClass' : 'removeClass'](rightContainer, 'scrolling--middle');\n      }\n    }\n  },\n  preventEvent: function preventEvent(evnt, type, args, next, end) {\n    var _this21 = this;\n\n    var evntList = VXETable.interceptor.get(type);\n    var rest;\n\n    if (!evntList.some(function (func) {\n      return func(Object.assign({\n        $grid: _this21.$xegrid,\n        $table: _this21,\n        $event: evnt\n      }, args)) === false;\n    })) {\n      if (next) {\n        rest = next();\n      }\n    }\n\n    if (end) {\n      end();\n    }\n\n    return rest;\n  },\n\n  /**\r\n   * 全局按下事件处理\r\n   */\n  handleGlobalMousedownEvent: function handleGlobalMousedownEvent(evnt) {\n    var _this22 = this;\n\n    var $el = this.$el,\n        $refs = this.$refs,\n        $xegrid = this.$xegrid,\n        $toolbar = this.$toolbar,\n        mouseConfig = this.mouseConfig,\n        editStore = this.editStore,\n        ctxMenuStore = this.ctxMenuStore,\n        editOpts = this.editOpts,\n        filterStore = this.filterStore,\n        getRowNode = this.getRowNode;\n    var actived = editStore.actived;\n    var ctxWrapper = $refs.ctxWrapper,\n        filterWrapper = $refs.filterWrapper,\n        validTip = $refs.validTip;\n\n    if (filterWrapper) {\n      if (getEventTargetNode(evnt, $el, 'vxe-cell--filter').flag) {// 如果点击了筛选按钮\n      } else if (getEventTargetNode(evnt, filterWrapper.$el).flag) {// 如果点击筛选容器\n      } else {\n        if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\n          this.preventEvent(evnt, 'event.clearFilter', filterStore.args, this.closeFilter);\n        }\n      }\n    } // 如果已激活了编辑状态\n\n\n    if (actived.row) {\n      if (!(editOpts.autoClear === false)) {\n        // 如果是激活状态，点击了单元格之外\n        var cell = actived.args.cell;\n\n        if (!cell || !getEventTargetNode(evnt, cell).flag) {\n          if (validTip && getEventTargetNode(evnt, validTip.$el).flag) {// 如果是激活状态，且点击了校验提示框\n          } else if (!this.lastCallTime || this.lastCallTime + 50 < Date.now()) {\n            if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\n              // 如果手动调用了激活单元格，避免触发源被移除后导致重复关闭\n              this.preventEvent(evnt, 'event.clearActived', actived.args, function () {\n                var isClearActived;\n\n                if (editOpts.mode === 'row') {\n                  var rowNode = getEventTargetNode(evnt, $el, 'vxe-body--row'); // row 方式，如果点击了不同行\n\n                  isClearActived = rowNode.flag ? getRowNode(rowNode.targetElem).item !== actived.args.row : false;\n                } else {\n                  // cell 方式，如果是非编辑列\n                  isClearActived = !getEventTargetNode(evnt, $el, 'col--edit').flag;\n                } // 如果点击表头行，则清除激活状态\n\n\n                if (!isClearActived) {\n                  isClearActived = getEventTargetNode(evnt, $el, 'vxe-header--row').flag;\n                } // 如果点击表尾行，则清除激活状态\n\n\n                if (!isClearActived) {\n                  isClearActived = getEventTargetNode(evnt, $el, 'vxe-footer--row').flag;\n                } // 如果固定了高度且点击了行之外的空白处，则清除激活状态\n\n\n                if (!isClearActived && _this22.height && !_this22.overflowY) {\n                  var bodyWrapperElem = evnt.target;\n\n                  if (hasClass(bodyWrapperElem, 'vxe-table--body-wrapper')) {\n                    isClearActived = evnt.offsetY < bodyWrapperElem.clientHeight;\n                  }\n                }\n\n                if (isClearActived || // 如果点击了当前表格之外\n                !getEventTargetNode(evnt, $el).flag) {\n                  setTimeout(function () {\n                    return _this22.clearActived(evnt);\n                  });\n                }\n              });\n            }\n          }\n        }\n      }\n    } else if (mouseConfig) {\n      if (!getEventTargetNode(evnt, $el).flag && !($xegrid && getEventTargetNode(evnt, $xegrid.$el).flag) && !(ctxWrapper && getEventTargetNode(evnt, ctxWrapper.$el).flag) && !($toolbar && getEventTargetNode(evnt, $toolbar.$el).flag)) {\n        this.clearSelected();\n\n        if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-areas-clear').flag) {\n          this.preventEvent(evnt, 'event.clearAreas', {}, function () {\n            _this22.clearCellAreas();\n\n            _this22.clearCopyCellArea();\n          });\n        }\n      }\n    } // 如果配置了快捷菜单且，点击了其他地方则关闭\n\n\n    if (ctxMenuStore.visible && ctxWrapper && !getEventTargetNode(evnt, ctxWrapper.$el).flag) {\n      this.closeMenu();\n    } // 最后激活的表格\n\n\n    this.isActivated = getEventTargetNode(evnt, ($xegrid || this).$el).flag;\n  },\n\n  /**\r\n   * 窗口失焦事件处理\r\n   */\n  handleGlobalBlurEvent: function handleGlobalBlurEvent() {\n    this.closeFilter();\n    this.closeMenu();\n  },\n\n  /**\r\n   * 全局滚动事件\r\n   */\n  handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent() {\n    this.closeTooltip();\n    this.closeMenu();\n  },\n\n  /**\r\n   * 表格键盘事件\r\n   */\n  keydownEvent: function keydownEvent(evnt) {\n    var _this23 = this;\n\n    var filterStore = this.filterStore,\n        ctxMenuStore = this.ctxMenuStore,\n        editStore = this.editStore,\n        keyboardConfig = this.keyboardConfig,\n        mouseConfig = this.mouseConfig,\n        mouseOpts = this.mouseOpts;\n    var actived = editStore.actived;\n    var keyCode = evnt.keyCode;\n    var isEsc = keyCode === 27;\n\n    if (isEsc) {\n      this.preventEvent(evnt, 'event.keydown', null, function () {\n        if (keyboardConfig && mouseConfig && mouseOpts.area && _this23.handleKeyboardEvent) {\n          _this23.handleKeyboardEvent(evnt);\n        } else if (actived.row || filterStore.visible || ctxMenuStore.visible) {\n          evnt.stopPropagation(); // 如果按下了 Esc 键，关闭快捷菜单、筛选\n\n          _this23.closeFilter();\n\n          _this23.closeMenu(); // 如果是激活编辑状态，则取消编辑\n\n\n          if (actived.row) {\n            var params = actived.args;\n\n            _this23.clearActived(evnt); // 如果配置了选中功能，则为选中状态\n\n\n            if (mouseConfig && mouseOpts.selected) {\n              _this23.$nextTick(function () {\n                return _this23.handleSelected(params, evnt);\n              });\n            }\n          }\n        }\n\n        _this23.emitEvent('keydown', {}, evnt);\n      });\n    }\n  },\n\n  /**\r\n   * 全局键盘事件\r\n   */\n  handleGlobalKeydownEvent: function handleGlobalKeydownEvent(evnt) {\n    var _this24 = this; // 该行为只对当前激活的表格有效\n\n\n    if (this.isActivated) {\n      this.preventEvent(evnt, 'event.keydown', null, function () {\n        var filterStore = _this24.filterStore,\n            isCtxMenu = _this24.isCtxMenu,\n            ctxMenuStore = _this24.ctxMenuStore,\n            editStore = _this24.editStore,\n            editOpts = _this24.editOpts,\n            editConfig = _this24.editConfig,\n            mouseConfig = _this24.mouseConfig,\n            mouseOpts = _this24.mouseOpts,\n            keyboardConfig = _this24.keyboardConfig,\n            keyboardOpts = _this24.keyboardOpts,\n            treeConfig = _this24.treeConfig,\n            treeOpts = _this24.treeOpts,\n            highlightCurrentRow = _this24.highlightCurrentRow,\n            currentRow = _this24.currentRow,\n            bodyCtxMenu = _this24.bodyCtxMenu;\n        var selected = editStore.selected,\n            actived = editStore.actived;\n        var keyCode = evnt.keyCode;\n        var isBack = keyCode === 8;\n        var isTab = keyCode === 9;\n        var isEnter = keyCode === 13;\n        var isEsc = keyCode === 27;\n        var isSpacebar = keyCode === 32;\n        var isLeftArrow = keyCode === 37;\n        var isUpArrow = keyCode === 38;\n        var isRightArrow = keyCode === 39;\n        var isDwArrow = keyCode === 40;\n        var isDel = keyCode === 46;\n        var isF2 = keyCode === 113;\n        var isContextMenu = keyCode === 93;\n        var hasMetaKey = evnt.metaKey;\n        var hasCtrlKey = evnt.ctrlKey;\n        var hasShiftKey = evnt.shiftKey;\n        var hasAltKey = evnt.altKey;\n        var operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow;\n        var operCtxMenu = isCtxMenu && ctxMenuStore.visible && (isEnter || isSpacebar || operArrow);\n        var isEditStatus = editConfig && actived.column && actived.row;\n        var params;\n\n        if (filterStore.visible) {\n          if (isEsc) {\n            _this24.closeFilter();\n          }\n\n          return;\n        }\n\n        if (operCtxMenu) {\n          // 如果配置了右键菜单; 支持方向键操作、回车\n          evnt.preventDefault();\n\n          if (ctxMenuStore.showChild && hasChildrenList(ctxMenuStore.selected)) {\n            _this24.moveCtxMenu(evnt, keyCode, ctxMenuStore, 'selectChild', 37, false, ctxMenuStore.selected.children);\n          } else {\n            _this24.moveCtxMenu(evnt, keyCode, ctxMenuStore, 'selected', 39, true, _this24.ctxMenuList);\n          }\n        } else if (keyboardConfig && mouseConfig && mouseOpts.area && _this24.handleKeyboardEvent) {\n          _this24.handleKeyboardEvent(evnt);\n        } else if (keyboardConfig && isSpacebar && keyboardOpts.isChecked && selected.row && selected.column && (selected.column.type === 'checkbox' || selected.column.type === 'radio')) {\n          // 空格键支持选中复选框\n          evnt.preventDefault();\n\n          if (selected.column.type === 'checkbox') {\n            _this24.handleToggleCheckRowEvent(evnt, selected.args);\n          } else {\n            _this24.triggerRadioRowEvent(evnt, selected.args);\n          }\n        } else if (isF2) {\n          if (!isEditStatus) {\n            // 如果按下了 F2 键\n            if (selected.row && selected.column) {\n              evnt.stopPropagation();\n              evnt.preventDefault();\n\n              _this24.handleActived(selected.args, evnt);\n            }\n          }\n        } else if (isContextMenu) {\n          // 如果按下上下文键\n          _this24._keyCtx = selected.row && selected.column && bodyCtxMenu.length;\n          clearTimeout(_this24.keyCtxTimeout);\n          _this24.keyCtxTimeout = setTimeout(function () {\n            _this24._keyCtx = false;\n          }, 1000);\n        } else if (isEnter && !hasAltKey && keyboardConfig && keyboardOpts.isEnter && (selected.row || actived.row || treeConfig && highlightCurrentRow && currentRow)) {\n          // 退出选中\n          if (hasCtrlKey) {\n            // 如果是激活编辑状态，则取消编辑\n            if (actived.row) {\n              params = actived.args;\n\n              _this24.clearActived(evnt); // 如果配置了选中功能，则为选中状态\n\n\n              if (mouseConfig && mouseOpts.selected) {\n                _this24.$nextTick(function () {\n                  return _this24.handleSelected(params, evnt);\n                });\n              }\n            }\n          } else {\n            // 如果是激活状态，退则出到上一行/下一行\n            if (selected.row || actived.row) {\n              var targetArgs = selected.row ? selected.args : actived.args;\n\n              if (hasShiftKey) {\n                if (keyboardOpts.enterToTab) {\n                  _this24.moveTabSelected(targetArgs, hasShiftKey, evnt);\n                } else {\n                  _this24.moveSelected(targetArgs, isLeftArrow, true, isRightArrow, false, evnt);\n                }\n              } else {\n                if (keyboardOpts.enterToTab) {\n                  _this24.moveTabSelected(targetArgs, hasShiftKey, evnt);\n                } else {\n                  _this24.moveSelected(targetArgs, isLeftArrow, false, isRightArrow, true, evnt);\n                }\n              }\n            } else if (treeConfig && highlightCurrentRow && currentRow) {\n              // 如果是树形表格当前行回车移动到子节点\n              var childrens = currentRow[treeOpts.children];\n\n              if (childrens && childrens.length) {\n                evnt.preventDefault();\n                var targetRow = childrens[0];\n                params = {\n                  $table: _this24,\n                  row: targetRow\n                };\n\n                _this24.setTreeExpand(currentRow, true).then(function () {\n                  return _this24.scrollToRow(targetRow);\n                }).then(function () {\n                  return _this24.triggerCurrentRowEvent(evnt, params);\n                });\n              }\n            }\n          }\n        } else if (operArrow && keyboardConfig && keyboardOpts.isArrow) {\n          if (!isEditStatus) {\n            // 如果按下了方向键\n            if (selected.row && selected.column) {\n              _this24.moveSelected(selected.args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt);\n            } else if ((isUpArrow || isDwArrow) && highlightCurrentRow) {\n              // 当前行按键上下移动\n              _this24.moveCurrentRow(isUpArrow, isDwArrow, evnt);\n            }\n          }\n        } else if (isTab && keyboardConfig && keyboardOpts.isTab) {\n          // 如果按下了 Tab 键切换\n          if (selected.row || selected.column) {\n            _this24.moveTabSelected(selected.args, hasShiftKey, evnt);\n          } else if (actived.row || actived.column) {\n            _this24.moveTabSelected(actived.args, hasShiftKey, evnt);\n          }\n        } else if (keyboardConfig && (isDel || (treeConfig && highlightCurrentRow && currentRow ? isBack && keyboardOpts.isArrow : isBack))) {\n          if (!isEditStatus) {\n            var delMethod = keyboardOpts.delMethod,\n                backMethod = keyboardOpts.backMethod; // 如果是删除键\n\n            if (keyboardOpts.isDel && (selected.row || selected.column)) {\n              if (delMethod) {\n                delMethod({\n                  row: selected.row,\n                  rowIndex: _this24.getRowIndex(selected.row),\n                  column: selected.column,\n                  columnIndex: _this24.getColumnIndex(selected.column),\n                  $table: _this24\n                });\n              } else {\n                setCellValue(selected.row, selected.column, null);\n              }\n\n              if (isBack) {\n                if (backMethod) {\n                  backMethod({\n                    row: selected.row,\n                    rowIndex: _this24.getRowIndex(selected.row),\n                    column: selected.column,\n                    columnIndex: _this24.getColumnIndex(selected.column),\n                    $table: _this24\n                  });\n                } else {\n                  _this24.handleActived(selected.args, evnt);\n                }\n              } else if (isDel) {\n                // 如果按下 del 键，更新表尾数据\n                _this24.updateFooter();\n              }\n            } else if (isBack && keyboardOpts.isArrow && treeConfig && highlightCurrentRow && currentRow) {\n              // 如果树形表格回退键关闭当前行返回父节点\n              var _XEUtils$findTree = XEUtils.findTree(_this24.afterFullData, function (item) {\n                return item === currentRow;\n              }, treeOpts),\n                  parentRow = _XEUtils$findTree.parent;\n\n              if (parentRow) {\n                evnt.preventDefault();\n                params = {\n                  $table: _this24,\n                  row: parentRow\n                };\n\n                _this24.setTreeExpand(parentRow, false).then(function () {\n                  return _this24.scrollToRow(parentRow);\n                }).then(function () {\n                  return _this24.triggerCurrentRowEvent(evnt, params);\n                });\n              }\n            }\n          }\n        } else if (keyboardConfig && keyboardOpts.isEdit && !hasCtrlKey && !hasMetaKey && (isSpacebar || keyCode >= 48 && keyCode <= 57 || keyCode >= 65 && keyCode <= 90 || keyCode >= 96 && keyCode <= 111 || keyCode >= 186 && keyCode <= 192 || keyCode >= 219 && keyCode <= 222)) {\n          var editMethod = keyboardOpts.editMethod; // 启用编辑后，空格键功能将失效\n          // if (isSpacebar) {\n          //   evnt.preventDefault()\n          // }\n          // 如果是按下非功能键之外允许直接编辑\n\n          if (selected.column && selected.row && isEnableConf(selected.column.editRender)) {\n            if (!editOpts.activeMethod || editOpts.activeMethod(selected.args)) {\n              if (editMethod) {\n                editMethod({\n                  row: selected.row,\n                  rowIndex: _this24.getRowIndex(selected.row),\n                  column: selected.column,\n                  columnIndex: _this24.getColumnIndex(selected.column),\n                  $table: _this24\n                });\n              } else {\n                setCellValue(selected.row, selected.column, null);\n\n                _this24.handleActived(selected.args, evnt);\n              }\n            }\n          }\n        }\n\n        _this24.emitEvent('keydown', {}, evnt);\n      });\n    }\n  },\n  handleGlobalPasteEvent: function handleGlobalPasteEvent(evnt) {\n    var isActivated = this.isActivated,\n        keyboardConfig = this.keyboardConfig,\n        keyboardOpts = this.keyboardOpts,\n        mouseConfig = this.mouseConfig,\n        mouseOpts = this.mouseOpts,\n        editStore = this.editStore,\n        filterStore = this.filterStore;\n    var actived = editStore.actived;\n\n    if (isActivated && !filterStore.visible) {\n      if (!(actived.row || actived.column)) {\n        if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && this.handlePasteCellAreaEvent) {\n          this.handlePasteCellAreaEvent(evnt);\n        }\n      }\n\n      this.emitEvent('paste', {}, evnt);\n    }\n  },\n  handleGlobalCopyEvent: function handleGlobalCopyEvent(evnt) {\n    var isActivated = this.isActivated,\n        keyboardConfig = this.keyboardConfig,\n        keyboardOpts = this.keyboardOpts,\n        mouseConfig = this.mouseConfig,\n        mouseOpts = this.mouseOpts,\n        editStore = this.editStore,\n        filterStore = this.filterStore;\n    var actived = editStore.actived;\n\n    if (isActivated && !filterStore.visible) {\n      if (!(actived.row || actived.column)) {\n        if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && this.handleCopyCellAreaEvent) {\n          this.handleCopyCellAreaEvent(evnt);\n        }\n      }\n\n      this.emitEvent('copy', {}, evnt);\n    }\n  },\n  handleGlobalCutEvent: function handleGlobalCutEvent(evnt) {\n    var isActivated = this.isActivated,\n        keyboardConfig = this.keyboardConfig,\n        keyboardOpts = this.keyboardOpts,\n        mouseConfig = this.mouseConfig,\n        mouseOpts = this.mouseOpts,\n        editStore = this.editStore,\n        filterStore = this.filterStore;\n    var actived = editStore.actived;\n\n    if (isActivated && !filterStore.visible) {\n      if (!(actived.row || actived.column)) {\n        if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && this.handleCutCellAreaEvent) {\n          this.handleCutCellAreaEvent(evnt);\n        }\n      }\n\n      this.emitEvent('cut', {}, evnt);\n    }\n  },\n  handleGlobalResizeEvent: function handleGlobalResizeEvent() {\n    this.closeMenu();\n    this.updateCellAreas();\n    this.recalculate(true);\n  },\n  handleTooltipLeaveMethod: function handleTooltipLeaveMethod() {\n    var _this25 = this;\n\n    var tooltipOpts = this.tooltipOpts;\n    setTimeout(function () {\n      if (!_this25.tooltipActive) {\n        _this25.closeTooltip();\n      }\n    }, tooltipOpts.leaveDelay);\n    return false;\n  },\n  handleTargetEnterEvent: function handleTargetEnterEvent() {\n    clearTimeout(this.tooltipTimeout);\n    this.tooltipActive = true;\n    this.closeTooltip();\n  },\n  handleTargetLeaveEvent: function handleTargetLeaveEvent() {\n    var _this26 = this;\n\n    var tooltipOpts = this.tooltipOpts;\n    this.tooltipActive = false;\n\n    if (tooltipOpts.enterable) {\n      this.tooltipTimeout = setTimeout(function () {\n        var tooltip = _this26.$refs.tooltip;\n\n        if (tooltip && !tooltip.isHover) {\n          _this26.closeTooltip();\n        }\n      }, tooltipOpts.leaveDelay);\n    } else {\n      this.closeTooltip();\n    }\n  },\n  triggerHeaderHelpEvent: function triggerHeaderHelpEvent(evnt, params) {\n    var column = params.column;\n    var titleHelp = column.titleHelp;\n\n    if (titleHelp.message) {\n      var $refs = this.$refs,\n          tooltipStore = this.tooltipStore;\n      var tooltip = $refs.tooltip;\n      var content = UtilTools.getFuncText(titleHelp.message);\n      this.handleTargetEnterEvent();\n      tooltipStore.visible = true;\n\n      if (tooltip) {\n        tooltip.open(evnt.currentTarget, content);\n      }\n    }\n  },\n\n  /**\r\n   * 触发表头 tooltip 事件\r\n   */\n  triggerHeaderTooltipEvent: function triggerHeaderTooltipEvent(evnt, params) {\n    var tooltipStore = this.tooltipStore;\n    var column = params.column;\n    var titleElem = evnt.currentTarget;\n    this.handleTargetEnterEvent();\n\n    if (tooltipStore.column !== column || !tooltipStore.visible) {\n      this.handleTooltip(evnt, titleElem, titleElem, null, params);\n    }\n  },\n\n  /**\r\n   * 触发单元格 tooltip 事件\r\n   */\n  triggerBodyTooltipEvent: function triggerBodyTooltipEvent(evnt, params) {\n    var editConfig = this.editConfig,\n        editOpts = this.editOpts,\n        editStore = this.editStore,\n        tooltipStore = this.tooltipStore;\n    var actived = editStore.actived;\n    var row = params.row,\n        column = params.column;\n    var cell = evnt.currentTarget;\n    this.handleTargetEnterEvent();\n\n    if (editConfig) {\n      if (editOpts.mode === 'row' && actived.row === row || actived.row === row && actived.column === column) {\n        return;\n      }\n    }\n\n    if (tooltipStore.column !== column || tooltipStore.row !== row || !tooltipStore.visible) {\n      var overflowElem;\n      var tipElem;\n\n      if (column.treeNode) {\n        overflowElem = cell.querySelector('.vxe-tree-cell');\n\n        if (column.type === 'html') {\n          tipElem = cell.querySelector('.vxe-cell--html');\n        }\n      } else {\n        tipElem = cell.querySelector(column.type === 'html' ? '.vxe-cell--html' : '.vxe-cell--label');\n      }\n\n      this.handleTooltip(evnt, cell, overflowElem || cell.children[0], tipElem, params);\n    }\n  },\n\n  /**\r\n   * 触发表尾 tooltip 事件\r\n   */\n  triggerFooterTooltipEvent: function triggerFooterTooltipEvent(evnt, params) {\n    var column = params.column;\n    var tooltipStore = this.tooltipStore;\n    var cell = evnt.currentTarget;\n    this.handleTargetEnterEvent();\n\n    if (tooltipStore.column !== column || !tooltipStore.visible) {\n      this.handleTooltip(evnt, cell, cell.querySelector('.vxe-cell--item') || cell.children[0], null, params);\n    }\n  },\n\n  /**\r\n   * 处理显示 tooltip\r\n   * @param {Event} evnt 事件\r\n   * @param {ColumnInfo} column 列配置\r\n   * @param {Row} row 行对象\r\n   */\n  handleTooltip: function handleTooltip(evnt, cell, overflowElem, tipElem, params) {\n    params.cell = cell;\n    var $refs = this.$refs,\n        tooltipOpts = this.tooltipOpts,\n        tooltipStore = this.tooltipStore;\n    var column = params.column,\n        row = params.row;\n    var showAll = tooltipOpts.showAll,\n        enabled = tooltipOpts.enabled,\n        contentMethod = tooltipOpts.contentMethod;\n    var tooltip = $refs.tooltip;\n    var customContent = contentMethod ? contentMethod(params) : null;\n    var useCustom = contentMethod && !XEUtils.eqNull(customContent);\n    var content = useCustom ? customContent : (column.type === 'html' ? overflowElem.innerText : overflowElem.textContent).trim();\n    var isCellOverflow = overflowElem.scrollWidth > overflowElem.clientWidth;\n\n    if (content && (showAll || enabled || useCustom || isCellOverflow)) {\n      Object.assign(tooltipStore, {\n        row: row,\n        column: column,\n        visible: true\n      });\n\n      if (tooltip) {\n        tooltip.open(isCellOverflow ? overflowElem : tipElem || overflowElem, UtilTools.formatText(content));\n      }\n    }\n\n    return this.$nextTick();\n  },\n  openTooltip: function openTooltip(target, content) {\n    var $refs = this.$refs;\n    var commTip = $refs.commTip;\n\n    if (commTip) {\n      return commTip.open(target, content);\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 关闭 tooltip\r\n   */\n  closeTooltip: function closeTooltip() {\n    var $refs = this.$refs,\n        tooltipStore = this.tooltipStore;\n    var tooltip = $refs.tooltip;\n    var commTip = $refs.commTip;\n\n    if (tooltipStore.visible) {\n      Object.assign(tooltipStore, {\n        row: null,\n        column: null,\n        content: null,\n        visible: false\n      });\n\n      if (tooltip) {\n        tooltip.close();\n      }\n    }\n\n    if (commTip) {\n      commTip.close();\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 判断复选框是否全选\r\n   */\n  isAllCheckboxChecked: function isAllCheckboxChecked() {\n    return this.isAllSelected;\n  },\n\n  /**\r\n   * 判断复选框是否全选\r\n   */\n  isCheckboxIndeterminate: function isCheckboxIndeterminate() {\n    return !this.isAllSelected && this.isIndeterminate;\n  },\n\n  /**\r\n   * 获取复选框半选状态的行数据\r\n   */\n  getCheckboxIndeterminateRecords: function getCheckboxIndeterminateRecords() {\n    var treeConfig = this.treeConfig,\n        treeIndeterminates = this.treeIndeterminates;\n\n    if (treeConfig) {\n      return treeIndeterminates.slice(0);\n    }\n\n    return [];\n  },\n\n  /**\r\n   * 处理默认勾选\r\n   */\n  handleDefaultSelectionChecked: function handleDefaultSelectionChecked() {\n    var fullDataRowIdData = this.fullDataRowIdData,\n        checkboxOpts = this.checkboxOpts;\n    var checkAll = checkboxOpts.checkAll,\n        checkRowKeys = checkboxOpts.checkRowKeys;\n\n    if (checkAll) {\n      this.setAllCheckboxRow(true);\n    } else if (checkRowKeys) {\n      var defSelection = [];\n      checkRowKeys.forEach(function (rowid) {\n        if (fullDataRowIdData[rowid]) {\n          defSelection.push(fullDataRowIdData[rowid].row);\n        }\n      });\n      this.setCheckboxRow(defSelection, true);\n    }\n  },\n\n  /**\r\n   * 用于多选行，设置行为选中状态，第二个参数为选中与否\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {Boolean} value 是否选中\r\n   */\n  setCheckboxRow: function setCheckboxRow(rows, value) {\n    var _this27 = this;\n\n    if (rows && !XEUtils.isArray(rows)) {\n      rows = [rows];\n    }\n\n    rows.forEach(function (row) {\n      return _this27.handleSelectRow({\n        row: row\n      }, !!value);\n    });\n    return this.$nextTick();\n  },\n  isCheckedByCheckboxRow: function isCheckedByCheckboxRow(row) {\n    var property = this.checkboxOpts.checkField;\n\n    if (property) {\n      return XEUtils.get(row, property);\n    }\n\n    return this.selection.indexOf(row) > -1;\n  },\n\n  /**\r\n   * 多选，行选中事件\r\n   * value 选中true 不选false 不确定-1\r\n   */\n  handleSelectRow: function handleSelectRow(_ref5, value) {\n    var _this28 = this;\n\n    var row = _ref5.row;\n    var selection = this.selection,\n        afterFullData = this.afterFullData,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        treeIndeterminates = this.treeIndeterminates,\n        checkboxOpts = this.checkboxOpts;\n    var property = checkboxOpts.checkField,\n        checkStrictly = checkboxOpts.checkStrictly,\n        checkMethod = checkboxOpts.checkMethod;\n\n    if (property) {\n      if (treeConfig && !checkStrictly) {\n        if (value === -1) {\n          if (treeIndeterminates.indexOf(row) === -1) {\n            treeIndeterminates.push(row);\n          }\n\n          XEUtils.set(row, property, false);\n        } else {\n          // 更新子节点状态\n          XEUtils.eachTree([row], function (item) {\n            if (row === item || !checkMethod || checkMethod({\n              row: item\n            })) {\n              XEUtils.set(item, property, value);\n              XEUtils.remove(treeIndeterminates, function (half) {\n                return half === item;\n              });\n\n              _this28.handleCheckboxReserveRow(row, value);\n            }\n          }, treeOpts);\n        } // 如果存在父节点，更新父节点状态\n\n\n        var matchObj = XEUtils.findTree(afterFullData, function (item) {\n          return item === row;\n        }, treeOpts);\n\n        if (matchObj && matchObj.parent) {\n          var parentStatus;\n          var vItems = checkMethod ? matchObj.items.filter(function (item) {\n            return checkMethod({\n              row: item\n            });\n          }) : matchObj.items;\n          var indeterminatesItem = XEUtils.find(matchObj.items, function (item) {\n            return treeIndeterminates.indexOf(item) > -1;\n          });\n\n          if (indeterminatesItem) {\n            parentStatus = -1;\n          } else {\n            var selectItems = matchObj.items.filter(function (item) {\n              return XEUtils.get(item, property);\n            });\n            parentStatus = selectItems.filter(function (item) {\n              return vItems.indexOf(item) > -1;\n            }).length === vItems.length ? true : selectItems.length || value === -1 ? -1 : false;\n          }\n\n          return this.handleSelectRow({\n            row: matchObj.parent\n          }, parentStatus);\n        }\n      } else {\n        if (!checkMethod || checkMethod({\n          row: row\n        })) {\n          XEUtils.set(row, property, value);\n          this.handleCheckboxReserveRow(row, value);\n        }\n      }\n    } else {\n      if (treeConfig && !checkStrictly) {\n        if (value === -1) {\n          if (treeIndeterminates.indexOf(row) === -1) {\n            treeIndeterminates.push(row);\n          }\n\n          XEUtils.remove(selection, function (item) {\n            return item === row;\n          });\n        } else {\n          // 更新子节点状态\n          XEUtils.eachTree([row], function (item) {\n            if (row === item || !checkMethod || checkMethod({\n              row: item\n            })) {\n              if (value) {\n                selection.push(item);\n              } else {\n                XEUtils.remove(selection, function (select) {\n                  return select === item;\n                });\n              }\n\n              XEUtils.remove(treeIndeterminates, function (half) {\n                return half === item;\n              });\n\n              _this28.handleCheckboxReserveRow(row, value);\n            }\n          }, treeOpts);\n        } // 如果存在父节点，更新父节点状态\n\n\n        var _matchObj = XEUtils.findTree(afterFullData, function (item) {\n          return item === row;\n        }, treeOpts);\n\n        if (_matchObj && _matchObj.parent) {\n          var _parentStatus;\n\n          var _vItems = checkMethod ? _matchObj.items.filter(function (item) {\n            return checkMethod({\n              row: item\n            });\n          }) : _matchObj.items;\n\n          var _indeterminatesItem = XEUtils.find(_matchObj.items, function (item) {\n            return treeIndeterminates.indexOf(item) > -1;\n          });\n\n          if (_indeterminatesItem) {\n            _parentStatus = -1;\n          } else {\n            var _selectItems = _matchObj.items.filter(function (item) {\n              return selection.indexOf(item) > -1;\n            });\n\n            _parentStatus = _selectItems.filter(function (item) {\n              return _vItems.indexOf(item) > -1;\n            }).length === _vItems.length ? true : _selectItems.length || value === -1 ? -1 : false;\n          }\n\n          return this.handleSelectRow({\n            row: _matchObj.parent\n          }, _parentStatus);\n        }\n      } else {\n        if (!checkMethod || checkMethod({\n          row: row\n        })) {\n          if (value) {\n            if (selection.indexOf(row) === -1) {\n              selection.push(row);\n            }\n          } else {\n            XEUtils.remove(selection, function (item) {\n              return item === row;\n            });\n          }\n\n          this.handleCheckboxReserveRow(row, value);\n        }\n      }\n    }\n\n    this.checkSelectionStatus();\n  },\n  handleToggleCheckRowEvent: function handleToggleCheckRowEvent(evnt, params) {\n    var selection = this.selection,\n        checkboxOpts = this.checkboxOpts;\n    var property = checkboxOpts.checkField;\n    var row = params.row;\n    var value = property ? !XEUtils.get(row, property) : selection.indexOf(row) === -1;\n\n    if (evnt) {\n      this.triggerCheckRowEvent(evnt, params, value);\n    } else {\n      this.handleSelectRow(params, value);\n    }\n  },\n  triggerCheckRowEvent: function triggerCheckRowEvent(evnt, params, value) {\n    var checkMethod = this.checkboxOpts.checkMethod;\n\n    if (!checkMethod || checkMethod({\n      row: params.row\n    })) {\n      this.handleSelectRow(params, value);\n      this.emitEvent('checkbox-change', Object.assign({\n        records: this.getCheckboxRecords(),\n        reserves: this.getCheckboxReserveRecords(),\n        indeterminates: this.getCheckboxIndeterminateRecords(),\n        checked: value\n      }, params), evnt);\n    }\n  },\n\n  /**\r\n   * 多选，切换某一行的选中状态\r\n   */\n  toggleCheckboxRow: function toggleCheckboxRow(row) {\n    this.handleToggleCheckRowEvent(null, {\n      row: row\n    });\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于多选行，设置所有行的选中状态\r\n   * @param {Boolean} value 是否选中\r\n   */\n  setAllCheckboxRow: function setAllCheckboxRow(value) {\n    var _this29 = this;\n\n    var afterFullData = this.afterFullData,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        selection = this.selection,\n        checkboxReserveRowMap = this.checkboxReserveRowMap,\n        checkboxOpts = this.checkboxOpts;\n    var property = checkboxOpts.checkField,\n        reserve = checkboxOpts.reserve,\n        checkStrictly = checkboxOpts.checkStrictly,\n        checkMethod = checkboxOpts.checkMethod;\n    var selectRows = [];\n    var beforeSelection = treeConfig ? [] : selection.filter(function (row) {\n      return afterFullData.indexOf(row) === -1;\n    });\n\n    if (checkStrictly) {\n      this.isAllSelected = value;\n    } else {\n      /**\r\n       * 绑定属性方式（高性能，有污染）\r\n       * 必须在行数据存在对应的属性，否则将不响应\r\n       */\n      if (property) {\n        var checkValFn = function checkValFn(row) {\n          if (!checkMethod || checkMethod({\n            row: row\n          })) {\n            if (value) {\n              selectRows.push(row);\n            }\n\n            XEUtils.set(row, property, value);\n          }\n        }; // 如果存在选中方法\n        // 如果方法成立，则更新值，否则忽略该数据\n\n\n        if (treeConfig) {\n          XEUtils.eachTree(afterFullData, checkValFn, treeOpts);\n        } else {\n          afterFullData.forEach(checkValFn);\n        }\n      } else {\n        /**\r\n         * 默认方式（低性能，无污染）\r\n         * 无需任何属性，直接绑定\r\n         */\n        if (treeConfig) {\n          if (value) {\n            /**\r\n             * 如果是树勾选\r\n             * 如果方法成立，则添加到临时集合中\r\n             */\n            XEUtils.eachTree(afterFullData, function (row) {\n              if (!checkMethod || checkMethod({\n                row: row\n              })) {\n                selectRows.push(row);\n              }\n            }, treeOpts);\n          } else {\n            /**\r\n             * 如果是树取消\r\n             * 如果方法成立，则不添加到临时集合中\r\n             */\n            if (checkMethod) {\n              XEUtils.eachTree(afterFullData, function (row) {\n                if (checkMethod({\n                  row: row\n                }) ? 0 : selection.indexOf(row) > -1) {\n                  selectRows.push(row);\n                }\n              }, treeOpts);\n            }\n          }\n        } else {\n          if (value) {\n            /**\r\n             * 如果是行勾选\r\n             * 如果存在选中方法且成立或者本身已勾选，则添加到临时集合中\r\n             * 如果不存在选中方法，则添加所有数据到临时集合中\r\n             */\n            if (checkMethod) {\n              selectRows = afterFullData.filter(function (row) {\n                return selection.indexOf(row) > -1 || checkMethod({\n                  row: row\n                });\n              });\n            } else {\n              selectRows = afterFullData.slice(0);\n            }\n          } else {\n            /**\r\n             * 如果是行取消\r\n             * 如果方法成立，则不添加到临时集合中；如果方法不成立则判断当前是否已勾选，如果已被勾选则添加到新集合中\r\n             * 如果不存在选中方法，无需处理，临时集合默认为空\r\n             */\n            if (checkMethod) {\n              selectRows = afterFullData.filter(function (row) {\n                return checkMethod({\n                  row: row\n                }) ? 0 : selection.indexOf(row) > -1;\n              });\n            }\n          }\n        }\n      }\n\n      if (reserve) {\n        if (value) {\n          selectRows.forEach(function (row) {\n            checkboxReserveRowMap[getRowid(_this29, row)] = row;\n          });\n        } else {\n          afterFullData.forEach(function (row) {\n            return _this29.handleCheckboxReserveRow(row, false);\n          });\n        }\n      }\n\n      this.selection = property ? [] : beforeSelection.concat(selectRows);\n    }\n\n    this.treeIndeterminates = [];\n    this.checkSelectionStatus();\n  },\n  checkSelectionStatus: function checkSelectionStatus() {\n    var afterFullData = this.afterFullData,\n        selection = this.selection,\n        treeIndeterminates = this.treeIndeterminates,\n        checkboxOpts = this.checkboxOpts,\n        treeConfig = this.treeConfig;\n    var checkField = checkboxOpts.checkField,\n        halfField = checkboxOpts.halfField,\n        checkStrictly = checkboxOpts.checkStrictly,\n        checkMethod = checkboxOpts.checkMethod;\n\n    if (!checkStrictly) {\n      var isAllSelected = false;\n      var isIndeterminate = false;\n\n      if (checkField) {\n        isAllSelected = afterFullData.length && afterFullData.every(checkMethod ? function (row) {\n          return !checkMethod({\n            row: row\n          }) || XEUtils.get(row, checkField);\n        } : function (row) {\n          return XEUtils.get(row, checkField);\n        });\n\n        if (treeConfig) {\n          if (halfField) {\n            isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n              return XEUtils.get(row, checkField) || XEUtils.get(row, halfField) || treeIndeterminates.indexOf(row) > -1;\n            });\n          } else {\n            isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n              return XEUtils.get(row, checkField) || treeIndeterminates.indexOf(row) > -1;\n            });\n          }\n        } else {\n          if (halfField) {\n            isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n              return XEUtils.get(row, checkField) || XEUtils.get(row, halfField);\n            });\n          } else {\n            isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n              return XEUtils.get(row, checkField);\n            });\n          }\n        }\n      } else {\n        isAllSelected = afterFullData.length && afterFullData.every(checkMethod ? function (row) {\n          return !checkMethod({\n            row: row\n          }) || selection.indexOf(row) > -1;\n        } : function (row) {\n          return selection.indexOf(row) > -1;\n        });\n\n        if (treeConfig) {\n          isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n            return treeIndeterminates.indexOf(row) > -1 || selection.indexOf(row) > -1;\n          });\n        } else {\n          isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n            return selection.indexOf(row) > -1;\n          });\n        }\n      }\n\n      this.isAllSelected = isAllSelected;\n      this.isIndeterminate = isIndeterminate;\n    }\n  },\n  // 还原展开、选中等相关状态\n  handleReserveStatus: function handleReserveStatus() {\n    var expandColumn = this.expandColumn,\n        treeOpts = this.treeOpts,\n        treeConfig = this.treeConfig,\n        fullDataRowIdData = this.fullDataRowIdData,\n        fullAllDataRowMap = this.fullAllDataRowMap,\n        currentRow = this.currentRow,\n        selectRow = this.selectRow,\n        radioReserveRow = this.radioReserveRow,\n        radioOpts = this.radioOpts,\n        checkboxOpts = this.checkboxOpts,\n        selection = this.selection,\n        rowExpandeds = this.rowExpandeds,\n        treeExpandeds = this.treeExpandeds,\n        expandOpts = this.expandOpts; // 单选框\n\n    if (selectRow && !fullAllDataRowMap.has(selectRow)) {\n      this.selectRow = null; // 刷新单选行状态\n    } // 还原保留选中状态\n\n\n    if (radioOpts.reserve && radioReserveRow) {\n      var rowid = getRowid(this, radioReserveRow);\n\n      if (fullDataRowIdData[rowid]) {\n        this.setRadioRow(fullDataRowIdData[rowid].row);\n      }\n    } // 复选框\n\n\n    this.selection = getRecoverRow(this, selection); // 刷新多选行状态\n    // 还原保留选中状态\n\n    if (checkboxOpts.reserve) {\n      this.setCheckboxRow(handleReserveRow(this, this.checkboxReserveRowMap), true);\n    }\n\n    if (currentRow && !fullAllDataRowMap.has(currentRow)) {\n      this.currentRow = null; // 刷新当前行状态\n    } // 行展开\n\n\n    this.rowExpandeds = expandColumn ? getRecoverRow(this, rowExpandeds) : []; // 刷新行展开状态\n    // 还原保留状态\n\n    if (expandColumn && expandOpts.reserve) {\n      this.setRowExpand(handleReserveRow(this, this.rowExpandedReserveRowMap), true);\n    } // 树展开\n\n\n    this.treeExpandeds = treeConfig ? getRecoverRow(this, treeExpandeds) : []; // 刷新树展开状态\n\n    if (treeConfig && treeOpts.reserve) {\n      this.setTreeExpand(handleReserveRow(this, this.treeExpandedReserveRowMap), true);\n    }\n  },\n\n  /**\r\n   * 获取单选框保留选中的行\r\n   */\n  getRadioReserveRecord: function getRadioReserveRecord() {\n    var fullDataRowIdData = this.fullDataRowIdData,\n        radioReserveRow = this.radioReserveRow,\n        radioOpts = this.radioOpts;\n\n    if (radioOpts.reserve && radioReserveRow) {\n      if (!fullDataRowIdData[getRowid(this, radioReserveRow)]) {\n        return radioReserveRow;\n      }\n    }\n\n    return null;\n  },\n  clearRadioReserve: function clearRadioReserve() {\n    this.radioReserveRow = null;\n    return this.$nextTick();\n  },\n  handleRadioReserveRow: function handleRadioReserveRow(row) {\n    var radioOpts = this.radioOpts;\n\n    if (radioOpts.reserve) {\n      this.radioReserveRow = row;\n    }\n  },\n\n  /**\r\n   * 获取复选框保留选中的行\r\n   */\n  getCheckboxReserveRecords: function getCheckboxReserveRecords() {\n    var fullDataRowIdData = this.fullDataRowIdData,\n        checkboxReserveRowMap = this.checkboxReserveRowMap,\n        checkboxOpts = this.checkboxOpts;\n    var reserveSelection = [];\n\n    if (checkboxOpts.reserve) {\n      XEUtils.each(checkboxReserveRowMap, function (row, rowid) {\n        if (row && !fullDataRowIdData[rowid]) {\n          reserveSelection.push(row);\n        }\n      });\n    }\n\n    return reserveSelection;\n  },\n  clearCheckboxReserve: function clearCheckboxReserve() {\n    this.checkboxReserveRowMap = {};\n    return this.$nextTick();\n  },\n  handleCheckboxReserveRow: function handleCheckboxReserveRow(row, checked) {\n    var checkboxReserveRowMap = this.checkboxReserveRowMap,\n        checkboxOpts = this.checkboxOpts;\n\n    if (checkboxOpts.reserve) {\n      var rowid = getRowid(this, row);\n\n      if (checked) {\n        checkboxReserveRowMap[rowid] = row;\n      } else if (checkboxReserveRowMap[rowid]) {\n        delete checkboxReserveRowMap[rowid];\n      }\n    }\n  },\n\n  /**\r\n   * 多选，选中所有事件\r\n   */\n  triggerCheckAllEvent: function triggerCheckAllEvent(evnt, value) {\n    this.setAllCheckboxRow(value);\n    this.emitEvent('checkbox-all', {\n      records: this.getCheckboxRecords(),\n      reserves: this.getCheckboxReserveRecords(),\n      indeterminates: this.getCheckboxIndeterminateRecords(),\n      checked: value\n    }, evnt);\n  },\n\n  /**\r\n   * 多选，切换所有行的选中状态\r\n   */\n  toggleAllCheckboxRow: function toggleAllCheckboxRow() {\n    this.triggerCheckAllEvent(null, !this.isAllSelected);\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于多选行，手动清空用户的选择\r\n   * 清空行为不管是否被禁用还是保留记录，都将彻底清空选中状态\r\n   */\n  clearCheckboxRow: function clearCheckboxRow() {\n    var _this30 = this;\n\n    var tableFullData = this.tableFullData,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        checkboxOpts = this.checkboxOpts;\n    var property = checkboxOpts.checkField,\n        reserve = checkboxOpts.reserve;\n\n    if (property) {\n      if (treeConfig) {\n        XEUtils.eachTree(tableFullData, function (item) {\n          return XEUtils.set(item, property, false);\n        }, treeOpts);\n      } else {\n        tableFullData.forEach(function (item) {\n          return XEUtils.set(item, property, false);\n        });\n      }\n    }\n\n    if (reserve) {\n      tableFullData.forEach(function (row) {\n        return _this30.handleCheckboxReserveRow(row, false);\n      });\n    }\n\n    this.isAllSelected = false;\n    this.isIndeterminate = false;\n    this.selection = [];\n    this.treeIndeterminates = [];\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 处理单选框默认勾选\r\n   */\n  handleDefaultRadioChecked: function handleDefaultRadioChecked() {\n    var radioOpts = this.radioOpts,\n        fullDataRowIdData = this.fullDataRowIdData;\n    var rowid = radioOpts.checkRowKey,\n        reserve = radioOpts.reserve;\n\n    if (rowid) {\n      if (fullDataRowIdData[rowid]) {\n        this.setRadioRow(fullDataRowIdData[rowid].row);\n      }\n\n      if (reserve) {\n        var rowkey = getRowkey(this);\n        this.radioReserveRow = _defineProperty({}, rowkey, rowid);\n      }\n    }\n  },\n\n  /**\r\n   * 单选，行选中事件\r\n   */\n  triggerRadioRowEvent: function triggerRadioRowEvent(evnt, params) {\n    var isChange = this.selectRow !== params.row;\n    this.setRadioRow(params.row);\n\n    if (isChange) {\n      this.emitEvent('radio-change', params, evnt);\n    }\n  },\n  triggerCurrentRowEvent: function triggerCurrentRowEvent(evnt, params) {\n    var isChange = this.currentRow !== params.row;\n    this.setCurrentRow(params.row);\n\n    if (isChange) {\n      this.emitEvent('current-change', params, evnt);\n    }\n  },\n\n  /**\r\n   * 用于当前行，设置某一行为高亮状态\r\n   * @param {Row} row 行对象\r\n   */\n  setCurrentRow: function setCurrentRow(row) {\n    var $el = this.$el;\n    this.clearCurrentRow();\n    this.clearCurrentColumn();\n    this.currentRow = row;\n\n    if (this.highlightCurrentRow) {\n      if ($el) {\n        XEUtils.arrayEach($el.querySelectorAll(\"[rowid=\\\"\".concat(getRowid(this, row), \"\\\"]\")), function (elem) {\n          addClass(elem, 'row--current');\n          elem.style['background-color'] = $_theme.selected_color;\n        });\n      }\n    }\n\n    return this.$nextTick();\n  },\n  isCheckedByRadioRow: function isCheckedByRadioRow(row) {\n    return this.selectRow === row;\n  },\n\n  /**\r\n   * 用于单选行，设置某一行为选中状态\r\n   * @param {Row} row 行对象\r\n   */\n  setRadioRow: function setRadioRow(row) {\n    var radioOpts = this.radioOpts;\n    var checkMethod = radioOpts.checkMethod;\n\n    if (row && (!checkMethod || checkMethod({\n      row: row\n    }))) {\n      this.selectRow = row;\n      this.handleRadioReserveRow(row);\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于当前行，手动清空当前高亮的状态\r\n   */\n  clearCurrentRow: function clearCurrentRow() {\n    var $el = this.$el;\n    this.currentRow = null;\n    this.hoverRow = null;\n\n    if ($el) {\n      XEUtils.arrayEach($el.querySelectorAll('.row--current'), function (elem) {\n        removeClass(elem, 'row--current');\n        elem.style['background-color'] = '';\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于单选行，手动清空用户的选择\r\n   */\n  clearRadioRow: function clearRadioRow() {\n    this.selectRow = null;\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于当前行，获取当前行的数据\r\n   */\n  getCurrentRecord: function getCurrentRecord() {\n    return this.highlightCurrentRow ? this.currentRow : null;\n  },\n\n  /**\r\n   * 用于单选行，获取当已选中的数据\r\n   */\n  getRadioRecord: function getRadioRecord() {\n    return this.selectRow;\n  },\n\n  /**\r\n   * 行 hover 事件\r\n   */\n  triggerHoverEvent: function triggerHoverEvent(evnt, _ref6) {\n    var row = _ref6.row;\n    this.setHoverRow(row);\n  },\n  setHoverRow: function setHoverRow(row) {\n    var $el = this.$el;\n    var rowid = getRowid(this, row);\n    this.clearHoverRow();\n\n    if ($el) {\n      XEUtils.arrayEach($el.querySelectorAll(\"[rowid=\\\"\".concat(rowid, \"\\\"]\")), function (elem) {\n        return addClass(elem, 'row--hover');\n      });\n    }\n\n    this.hoverRow = row;\n  },\n  clearHoverRow: function clearHoverRow() {\n    var $el = this.$el;\n\n    if ($el) {\n      XEUtils.arrayEach($el.querySelectorAll('.vxe-body--row.row--hover'), function (elem) {\n        return removeClass(elem, 'row--hover');\n      });\n    }\n\n    this.hoverRow = null;\n  },\n  triggerHeaderCellClickEvent: function triggerHeaderCellClickEvent(evnt, params) {\n    var _lastResizeTime = this._lastResizeTime,\n        sortOpts = this.sortOpts;\n    var column = params.column;\n    var cell = evnt.currentTarget;\n\n    var triggerResizable = _lastResizeTime && _lastResizeTime > Date.now() - 300;\n\n    var triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n    var triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n\n    if (sortOpts.trigger === 'cell' && !(triggerResizable || triggerSort || triggerFilter)) {\n      this.triggerSortEvent(evnt, column, getNextSortOrder(this, column));\n    }\n\n    this.emitEvent('header-cell-click', Object.assign({\n      triggerResizable: triggerResizable,\n      triggerSort: triggerSort,\n      triggerFilter: triggerFilter,\n      cell: cell\n    }, params), evnt);\n\n    if (this.highlightCurrentColumn) {\n      return this.setCurrentColumn(column);\n    }\n\n    return this.$nextTick();\n  },\n  triggerHeaderCellDblclickEvent: function triggerHeaderCellDblclickEvent(evnt, params) {\n    this.emitEvent('header-cell-dblclick', Object.assign({\n      cell: evnt.currentTarget\n    }, params), evnt);\n  },\n  getCurrentColumn: function getCurrentColumn() {\n    return this.highlightCurrentColumn ? this.currentColumn : null;\n  },\n\n  /**\r\n   * 用于当前列，设置某列行为高亮状态\r\n   * @param {ColumnInfo} fieldOrColumn 列配置\r\n   */\n  setCurrentColumn: function setCurrentColumn(fieldOrColumn) {\n    var column = handleFieldOrColumn(this, fieldOrColumn);\n\n    if (column) {\n      this.clearCurrentRow();\n      this.clearCurrentColumn();\n      this.currentColumn = column;\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于当前列，手动清空当前高亮的状态\r\n   */\n  clearCurrentColumn: function clearCurrentColumn() {\n    this.currentColumn = null;\n    return this.$nextTick();\n  },\n  checkValidate: function checkValidate(type) {\n    if (VXETable._valid) {\n      return this.triggerValidate(type);\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 当单元格发生改变时\r\n   * 如果存在规则，则校验\r\n   */\n  handleChangeCell: function handleChangeCell(evnt, params) {\n    var _this31 = this;\n\n    this.checkValidate('blur').catch(function (e) {\n      return e;\n    }).then(function () {\n      _this31.handleActived(params, evnt).then(function () {\n        return _this31.checkValidate('change');\n      }).catch(function (e) {\n        return e;\n      });\n    });\n  },\n\n  /**\r\n   * 列点击事件\r\n   * 如果是单击模式，则激活为编辑状态\r\n   * 如果是双击模式，则单击后选中状态\r\n   */\n  triggerCellClickEvent: function triggerCellClickEvent(evnt, params) {\n    var highlightCurrentRow = this.highlightCurrentRow,\n        editStore = this.editStore,\n        radioOpts = this.radioOpts,\n        expandOpts = this.expandOpts,\n        treeOpts = this.treeOpts,\n        editConfig = this.editConfig,\n        editOpts = this.editOpts,\n        checkboxOpts = this.checkboxOpts;\n    var actived = editStore.actived;\n    var _params = params,\n        row = _params.row,\n        column = _params.column;\n    var type = column.type,\n        treeNode = column.treeNode;\n    var isRadioType = type === 'radio';\n    var isCheckboxType = type === 'checkbox';\n    var isExpandType = type === 'expand';\n    var cell = evnt.currentTarget;\n    var triggerRadio = isRadioType && getEventTargetNode(evnt, cell, 'vxe-cell--radio').flag;\n    var triggerCheckbox = isCheckboxType && getEventTargetNode(evnt, cell, 'vxe-cell--checkbox').flag;\n    var triggerTreeNode = treeNode && getEventTargetNode(evnt, cell, 'vxe-tree--btn-wrapper').flag;\n    var triggerExpandNode = isExpandType && getEventTargetNode(evnt, cell, 'vxe-table--expanded').flag;\n    params = Object.assign({\n      cell: cell,\n      triggerRadio: triggerRadio,\n      triggerCheckbox: triggerCheckbox,\n      triggerTreeNode: triggerTreeNode,\n      triggerExpandNode: triggerExpandNode\n    }, params);\n\n    if (!triggerCheckbox && !triggerRadio) {\n      // 如果是展开行\n      if (!triggerExpandNode && (expandOpts.trigger === 'row' || isExpandType && expandOpts.trigger === 'cell')) {\n        this.triggerRowExpandEvent(evnt, params);\n      } // 如果是树形表格\n\n\n      if (treeOpts.trigger === 'row' || treeNode && treeOpts.trigger === 'cell') {\n        this.triggerTreeExpandEvent(evnt, params);\n      }\n    } // 如果点击了树节点\n\n\n    if (!triggerTreeNode) {\n      if (!triggerExpandNode) {\n        // 如果是高亮行\n        if (highlightCurrentRow) {\n          if (!triggerCheckbox && !triggerRadio) {\n            this.triggerCurrentRowEvent(evnt, params);\n          }\n        } // 如果是单选框\n\n\n        if (!triggerRadio && (radioOpts.trigger === 'row' || isRadioType && radioOpts.trigger === 'cell')) {\n          this.triggerRadioRowEvent(evnt, params);\n        } // 如果是复选框\n\n\n        if (!triggerCheckbox && (checkboxOpts.trigger === 'row' || isCheckboxType && checkboxOpts.trigger === 'cell')) {\n          this.handleToggleCheckRowEvent(evnt, params);\n        }\n      } // 如果设置了单元格选中功能，则不会使用点击事件去处理（只能支持双击模式）\n\n\n      if (editConfig) {\n        if (editOpts.trigger === 'manual') {\n          if (actived.args && actived.row === row && column !== actived.column) {\n            this.handleChangeCell(evnt, params);\n          }\n        } else if (!actived.args || row !== actived.row || column !== actived.column) {\n          if (editOpts.trigger === 'click') {\n            this.handleChangeCell(evnt, params);\n          } else if (editOpts.trigger === 'dblclick') {\n            if (editOpts.mode === 'row' && actived.row === row) {\n              this.handleChangeCell(evnt, params);\n            }\n          }\n        }\n      }\n    }\n\n    this.emitEvent('cell-click', params, evnt);\n  },\n\n  /**\r\n   * 列双击点击事件\r\n   * 如果是双击模式，则激活为编辑状态\r\n   */\n  triggerCellDblclickEvent: function triggerCellDblclickEvent(evnt, params) {\n    var _this32 = this;\n\n    var editStore = this.editStore,\n        editConfig = this.editConfig,\n        editOpts = this.editOpts;\n    var actived = editStore.actived;\n    var cell = evnt.currentTarget;\n    params.cell = cell;\n\n    if (editConfig && editOpts.trigger === 'dblclick') {\n      if (!actived.args || evnt.currentTarget !== actived.args.cell) {\n        if (editOpts.mode === 'row') {\n          this.checkValidate('blur').catch(function (e) {\n            return e;\n          }).then(function () {\n            _this32.handleActived(params, evnt).then(function () {\n              return _this32.checkValidate('change');\n            }).catch(function (e) {\n              return e;\n            });\n          });\n        } else if (editOpts.mode === 'cell') {\n          this.handleActived(params, evnt).then(function () {\n            return _this32.checkValidate('change');\n          }).catch(function (e) {\n            return e;\n          });\n        }\n      }\n    }\n\n    this.emitEvent('cell-dblclick', params, evnt);\n  },\n  handleDefaultSort: function handleDefaultSort() {\n    var _this33 = this;\n\n    var sortConfig = this.sortConfig,\n        sortOpts = this.sortOpts;\n    var defaultSort = sortOpts.defaultSort;\n\n    if (defaultSort) {\n      if (!XEUtils.isArray(defaultSort)) {\n        defaultSort = [defaultSort];\n      }\n\n      if (defaultSort.length) {\n        (sortConfig.multiple ? defaultSort : defaultSort.slice(0, 1)).forEach(function (item) {\n          var field = item.field,\n              order = item.order;\n\n          if (field && order) {\n            var column = _this33.getColumnByField(field);\n\n            if (column && column.sortable) {\n              column.order = order;\n              column.sortTime = Date.now();\n            }\n          }\n        });\n\n        if (!sortOpts.remote) {\n          this.handleTableData(true).then(this.updateStyle);\n        }\n      }\n    }\n  },\n\n  /**\r\n   * 点击排序事件\r\n   */\n  triggerSortEvent: function triggerSortEvent(evnt, column, order) {\n    var _this34 = this;\n\n    var sortOpts = this.sortOpts;\n    var property = column.property;\n\n    if (column.sortable || column.remoteSort) {\n      var row = this.currentRow; //加\n\n      row && this.clearCurrentRow(); //加\n\n      if (!order || column.order === order) {\n        this.clearSort(sortOpts.multiple ? column : null);\n      } else {\n        //        this.sort({ field: property, order })//删\n        this.sort({\n          field: column,\n          order: order\n        }); //加\n      }\n\n      var params = {\n        column: column,\n        property: property,\n        order: column.order,\n        sortList: this.getSortColumns()\n      };\n      row && this.$nextTick(function () {\n        return _this34.setCurrentRow(row);\n      }); //加\n\n      this.emitEvent('sort-change', params, evnt);\n    }\n  },\n  sort: function sort(sortConfs, sortOrder) {\n    var _this35 = this;\n\n    var sortOpts = this.sortOpts;\n    var multiple = sortOpts.multiple,\n        remote = sortOpts.remote,\n        orders = sortOpts.orders;\n\n    if (sortConfs) {\n      if (XEUtils.isString(sortConfs)) {\n        sortConfs = [{\n          field: sortConfs,\n          order: sortOrder\n        }];\n      }\n    }\n\n    if (!XEUtils.isArray(sortConfs)) {\n      sortConfs = [sortConfs];\n    }\n\n    if (sortConfs.length) {\n      var firstSortColumn;\n\n      if (!multiple) {\n        clearAllSort(this);\n      }\n\n      (multiple ? sortConfs : [sortConfs[0]]).forEach(function (confs) {\n        var field = confs.field,\n            order = confs.order;\n        var column = field;\n\n        if (XEUtils.isString(field)) {\n          column = _this35.getColumnByField(field);\n        }\n\n        if (column && (column.sortable || column.remoteSort)) {\n          if (!firstSortColumn) {\n            firstSortColumn = column;\n          }\n\n          if (orders.indexOf(order) === -1) {\n            order = getNextSortOrder(_this35, column);\n          }\n\n          if (column.order !== order) {\n            column.order = order;\n          }\n        }\n      }); // 如果是服务端排序，则跳过本地排序处理\n\n      if (!remote || firstSortColumn && firstSortColumn.remoteSort) {\n        this.handleTableData(true);\n      }\n\n      return this.$nextTick().then(this.updateStyle);\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 清空指定列的排序条件\r\n   * 如果为空则清空所有列的排序条件\r\n   * @param {String} column 列或字段名\r\n   */\n  clearSort: function clearSort(fieldOrColumn) {\n    var sortOpts = this.sortOpts;\n\n    if (fieldOrColumn) {\n      var column = handleFieldOrColumn(this, fieldOrColumn);\n\n      if (column) {\n        column.order = null;\n      }\n    } else {\n      clearAllSort(this);\n    }\n\n    if (!sortOpts.remote) {\n      return this.handleTableData(true);\n    }\n\n    return this.$nextTick();\n  },\n  // 在 v3 中废弃\n  getSortColumn: function getSortColumn() {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      UtilTools.warn('vxe.error.delFunc', ['getSortColumn', 'getSortColumns']);\n    }\n\n    return XEUtils.find(this.tableFullColumn, function (column) {\n      return (column.sortable || column.remoteSort) && column.order;\n    });\n  },\n  isSort: function isSort(fieldOrColumn) {\n    if (fieldOrColumn) {\n      var column = handleFieldOrColumn(this, fieldOrColumn);\n      return column && column.sortable && !!column.order;\n    }\n\n    return this.getSortColumns().length > 0;\n  },\n  getSortColumns: function getSortColumns() {\n    var sortList = [];\n    this.tableFullColumn.forEach(function (column) {\n      var order = column.order;\n\n      if ((column.sortable || column.remoteSort) && order) {\n        sortList.push({\n          column: column,\n          property: column.property,\n          order: order\n        });\n      }\n    });\n    return sortList;\n  },\n\n  /**\r\n   * 关闭筛选\r\n   * @param {Event} evnt 事件\r\n   */\n  closeFilter: function closeFilter() {\n    Object.assign(this.filterStore, {\n      isAllSelected: false,\n      isIndeterminate: false,\n      options: [],\n      visible: false\n    });\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 判断指定列是否为筛选状态，如果为空则判断所有列\r\n   * @param {String} fieldOrColumn 字段名\r\n   */\n  isFilter: function isFilter(fieldOrColumn) {\n    var column = handleFieldOrColumn(this, fieldOrColumn);\n\n    if (column) {\n      return column.filters && column.filters.some(function (option) {\n        return option.checked;\n      });\n    }\n\n    return this.getCheckedFilters().length > 0;\n  },\n\n  /**\r\n   * 判断展开行是否懒加载完成\r\n   * @param {Row} row 行对象\r\n   */\n  isRowExpandLoaded: function isRowExpandLoaded(row) {\n    var rest = this.fullAllDataRowMap.get(row);\n    return rest && rest.expandLoaded;\n  },\n  clearRowExpandLoaded: function clearRowExpandLoaded(row) {\n    var expandOpts = this.expandOpts,\n        expandLazyLoadeds = this.expandLazyLoadeds,\n        fullAllDataRowMap = this.fullAllDataRowMap;\n    var lazy = expandOpts.lazy;\n    var rest = fullAllDataRowMap.get(row);\n\n    if (lazy && rest) {\n      rest.expandLoaded = false;\n      XEUtils.remove(expandLazyLoadeds, function (item) {\n        return row === item;\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 重新加载展开行的内容\r\n   * @param {Row} row 行对象\r\n   */\n  reloadExpandContent: function reloadExpandContent(row) {\n    var _this36 = this;\n\n    var expandOpts = this.expandOpts,\n        expandLazyLoadeds = this.expandLazyLoadeds;\n    var lazy = expandOpts.lazy;\n\n    if (lazy && expandLazyLoadeds.indexOf(row) === -1) {\n      this.clearRowExpandLoaded(row).then(function () {\n        return _this36.handleAsyncRowExpand(row);\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 展开行事件\r\n   */\n  triggerRowExpandEvent: function triggerRowExpandEvent(evnt, params) {\n    var expandOpts = this.expandOpts,\n        expandLazyLoadeds = this.expandLazyLoadeds,\n        column = this.expandColumn;\n    var row = params.row;\n    var lazy = expandOpts.lazy;\n\n    if (!lazy || expandLazyLoadeds.indexOf(row) === -1) {\n      var expanded = !this.isExpandByRow(row);\n      var columnIndex = this.getColumnIndex(column);\n      var $columnIndex = this.getVMColumnIndex(column);\n      this.setRowExpand(row, expanded);\n      this.emitEvent('toggle-row-expand', {\n        expanded: expanded,\n        column: column,\n        columnIndex: columnIndex,\n        $columnIndex: $columnIndex,\n        row: row,\n        rowIndex: this.getRowIndex(row),\n        $rowIndex: this.getVMRowIndex(row)\n      }, evnt);\n    }\n  },\n\n  /**\r\n   * 切换展开行\r\n   */\n  toggleRowExpand: function toggleRowExpand(row) {\n    return this.setRowExpand(row, !this.isExpandByRow(row));\n  },\n\n  /**\r\n   * 处理默认展开行\r\n   */\n  handleDefaultRowExpand: function handleDefaultRowExpand() {\n    var expandOpts = this.expandOpts,\n        fullDataRowIdData = this.fullDataRowIdData;\n    var expandAll = expandOpts.expandAll,\n        expandRowKeys = expandOpts.expandRowKeys;\n\n    if (expandAll) {\n      this.setAllRowExpand(true);\n    } else if (expandRowKeys) {\n      var defExpandeds = [];\n      expandRowKeys.forEach(function (rowid) {\n        if (fullDataRowIdData[rowid]) {\n          defExpandeds.push(fullDataRowIdData[rowid].row);\n        }\n      });\n      this.setRowExpand(defExpandeds, true);\n    }\n  },\n\n  /**\r\n   * 设置所有行的展开与否\r\n   * @param {Boolean} expanded 是否展开\r\n   */\n  setAllRowExpand: function setAllRowExpand(expanded) {\n    return this.setRowExpand(this.expandOpts.lazy ? this.tableData : this.tableFullData, expanded);\n  },\n  handleAsyncRowExpand: function handleAsyncRowExpand(row) {\n    var _this37 = this;\n\n    var rest = this.fullAllDataRowMap.get(row);\n    return new Promise(function (resolve) {\n      _this37.expandLazyLoadeds.push(row);\n\n      _this37.expandOpts.loadMethod({\n        $table: _this37,\n        row: row,\n        rowIndex: _this37.getRowIndex(row),\n        $rowIndex: _this37.getVMRowIndex(row)\n      }).catch(function (e) {\n        return e;\n      }).then(function () {\n        rest.expandLoaded = true;\n        XEUtils.remove(_this37.expandLazyLoadeds, function (item) {\n          return item === row;\n        });\n\n        _this37.rowExpandeds.push(row);\n\n        resolve(_this37.$nextTick().then(_this37.recalculate));\n      });\n    });\n  },\n\n  /**\r\n   * 设置展开行，二个参数设置这一行展开与否\r\n   * 支持单行\r\n   * 支持多行\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {Boolean} expanded 是否展开\r\n   */\n  setRowExpand: function setRowExpand(rows, expanded) {\n    var _this38 = this;\n\n    var fullAllDataRowMap = this.fullAllDataRowMap,\n        expandLazyLoadeds = this.expandLazyLoadeds,\n        expandOpts = this.expandOpts,\n        column = this.expandColumn;\n    var rowExpandeds = this.rowExpandeds;\n    var reserve = expandOpts.reserve,\n        lazy = expandOpts.lazy,\n        accordion = expandOpts.accordion,\n        toggleMethod = expandOpts.toggleMethod;\n    var lazyRests = [];\n    var columnIndex = this.getColumnIndex(column);\n    var $columnIndex = this.getVMColumnIndex(column);\n\n    if (rows) {\n      if (!XEUtils.isArray(rows)) {\n        rows = [rows];\n      }\n\n      if (accordion) {\n        // 只能同时展开一个\n        rowExpandeds = [];\n        rows = rows.slice(rows.length - 1, rows.length);\n      }\n\n      var validRows = toggleMethod ? rows.filter(function (row) {\n        return toggleMethod({\n          expanded: expanded,\n          column: column,\n          columnIndex: columnIndex,\n          $columnIndex: $columnIndex,\n          row: row,\n          rowIndex: _this38.getRowIndex(row),\n          $rowIndex: _this38.getVMRowIndex(row)\n        });\n      }) : rows;\n\n      if (expanded) {\n        validRows.forEach(function (row) {\n          if (rowExpandeds.indexOf(row) === -1) {\n            var rest = fullAllDataRowMap.get(row);\n            var isLoad = lazy && !rest.expandLoaded && expandLazyLoadeds.indexOf(row) === -1;\n\n            if (isLoad) {\n              lazyRests.push(_this38.handleAsyncRowExpand(row));\n            } else {\n              rowExpandeds.push(row);\n            }\n          }\n        });\n      } else {\n        XEUtils.remove(rowExpandeds, function (row) {\n          return validRows.indexOf(row) > -1;\n        });\n      }\n\n      if (reserve) {\n        validRows.forEach(function (row) {\n          return _this38.handleRowExpandReserve(row, expanded);\n        });\n      }\n    }\n\n    this.rowExpandeds = rowExpandeds;\n    return Promise.all(lazyRests).then(this.recalculate);\n  },\n\n  /**\r\n   * 判断行是否为展开状态\r\n   * @param {Row} row 行对象\r\n   */\n  isExpandByRow: function isExpandByRow(row) {\n    return this.rowExpandeds.indexOf(row) > -1;\n  },\n\n  /**\r\n   * 手动清空展开行状态，数据会恢复成未展开的状态\r\n   */\n  clearRowExpand: function clearRowExpand() {\n    var _this39 = this;\n\n    var expandOpts = this.expandOpts,\n        rowExpandeds = this.rowExpandeds,\n        tableFullData = this.tableFullData;\n    var reserve = expandOpts.reserve;\n    var isExists = rowExpandeds.length;\n    this.rowExpandeds = [];\n\n    if (reserve) {\n      tableFullData.forEach(function (row) {\n        return _this39.handleRowExpandReserve(row, false);\n      });\n    }\n\n    return this.$nextTick().then(function () {\n      if (isExists) {\n        _this39.recalculate();\n      }\n    });\n  },\n  clearRowExpandReserve: function clearRowExpandReserve() {\n    this.rowExpandedReserveRowMap = {};\n    return this.$nextTick();\n  },\n  handleRowExpandReserve: function handleRowExpandReserve(row, expanded) {\n    var rowExpandedReserveRowMap = this.rowExpandedReserveRowMap,\n        expandOpts = this.expandOpts;\n\n    if (expandOpts.reserve) {\n      var rowid = getRowid(this, row);\n\n      if (expanded) {\n        rowExpandedReserveRowMap[rowid] = row;\n      } else if (rowExpandedReserveRowMap[rowid]) {\n        delete rowExpandedReserveRowMap[rowid];\n      }\n    }\n  },\n  getRowExpandRecords: function getRowExpandRecords() {\n    return this.rowExpandeds.slice(0);\n  },\n  getTreeExpandRecords: function getTreeExpandRecords() {\n    return this.treeExpandeds.slice(0);\n  },\n\n  /**\r\n   * 获取数表格状态\r\n   */\n  getTreeStatus: function getTreeStatus() {\n    if (this.treeConfig) {\n      return {\n        config: this.treeOpts,\n        rowExpandeds: this.getTreeExpandRecords()\n      };\n    }\n\n    return null;\n  },\n\n  /**\r\n   * 判断树节点是否懒加载完成\r\n   * @param {Row} row 行对象\r\n   */\n  isTreeExpandLoaded: function isTreeExpandLoaded(row) {\n    var rest = this.fullAllDataRowMap.get(row);\n    return rest && rest.treeLoaded;\n  },\n  clearTreeExpandLoaded: function clearTreeExpandLoaded(row) {\n    var treeOpts = this.treeOpts,\n        treeExpandeds = this.treeExpandeds,\n        fullAllDataRowMap = this.fullAllDataRowMap;\n    var lazy = treeOpts.lazy;\n    var rest = fullAllDataRowMap.get(row);\n\n    if (lazy && rest) {\n      rest.treeLoaded = false;\n      XEUtils.remove(treeExpandeds, function (item) {\n        return row === item;\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 重新加载树的子节点\r\n   * @param {Row} row 行对象\r\n   */\n  reloadTreeChilds: function reloadTreeChilds(row) {\n    var _this40 = this;\n\n    var treeOpts = this.treeOpts,\n        treeLazyLoadeds = this.treeLazyLoadeds;\n    var lazy = treeOpts.lazy,\n        hasChild = treeOpts.hasChild;\n\n    if (lazy && row[hasChild] && treeLazyLoadeds.indexOf(row) === -1) {\n      this.clearTreeExpandLoaded(row).then(function () {\n        return _this40.handleAsyncTreeExpandChilds(row);\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 展开树节点事件\r\n   */\n  triggerTreeExpandEvent: function triggerTreeExpandEvent(evnt, params) {\n    var treeOpts = this.treeOpts,\n        treeLazyLoadeds = this.treeLazyLoadeds;\n    var row = params.row,\n        column = params.column;\n    var lazy = treeOpts.lazy;\n\n    if (!lazy || treeLazyLoadeds.indexOf(row) === -1) {\n      var expanded = !this.isTreeExpandByRow(row);\n      var columnIndex = this.getColumnIndex(column);\n      var $columnIndex = this.getVMColumnIndex(column);\n      this.setTreeExpand(row, expanded);\n      this.emitEvent('toggle-tree-expand', {\n        expanded: expanded,\n        column: column,\n        columnIndex: columnIndex,\n        $columnIndex: $columnIndex,\n        row: row\n      }, evnt);\n    }\n  },\n\n  /**\r\n   * 切换/展开树节点\r\n   */\n  toggleTreeExpand: function toggleTreeExpand(row) {\n    return this.setTreeExpand(row, !this.isTreeExpandByRow(row));\n  },\n\n  /**\r\n   * 处理默认展开树节点\r\n   */\n  handleDefaultTreeExpand: function handleDefaultTreeExpand() {\n    var treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        tableFullData = this.tableFullData;\n\n    if (treeConfig) {\n      var expandAll = treeOpts.expandAll,\n          expandRowKeys = treeOpts.expandRowKeys;\n\n      if (expandAll) {\n        this.setAllTreeExpand(true);\n      } else if (expandRowKeys) {\n        var defExpandeds = [];\n        var rowkey = getRowkey(this);\n        expandRowKeys.forEach(function (rowid) {\n          var matchObj = XEUtils.findTree(tableFullData, function (item) {\n            return rowid === XEUtils.get(item, rowkey);\n          }, treeOpts);\n\n          if (matchObj) {\n            defExpandeds.push(matchObj.item);\n          }\n        });\n        this.setTreeExpand(defExpandeds, true);\n      }\n    }\n  },\n  handleAsyncTreeExpandChilds: function handleAsyncTreeExpandChilds(row) {\n    var _this41 = this;\n\n    var fullAllDataRowMap = this.fullAllDataRowMap,\n        treeExpandeds = this.treeExpandeds,\n        treeOpts = this.treeOpts,\n        treeLazyLoadeds = this.treeLazyLoadeds,\n        checkboxOpts = this.checkboxOpts;\n    var loadMethod = treeOpts.loadMethod;\n    var checkStrictly = checkboxOpts.checkStrictly;\n    var rest = fullAllDataRowMap.get(row);\n    return new Promise(function (resolve) {\n      treeLazyLoadeds.push(row);\n      loadMethod({\n        $table: _this41,\n        row: row\n      }).catch(function () {\n        return [];\n      }).then(function (childRecords) {\n        rest.treeLoaded = true;\n        XEUtils.remove(treeLazyLoadeds, function (item) {\n          return item === row;\n        });\n\n        if (!XEUtils.isArray(childRecords)) {\n          childRecords = [];\n        }\n\n        if (childRecords) {\n          _this41.loadChildren(row, childRecords).then(function (childRows) {\n            if (childRows.length && treeExpandeds.indexOf(row) === -1) {\n              treeExpandeds.push(row);\n            } // 如果当前节点已选中，则展开后子节点也被选中\n\n\n            if (!checkStrictly && _this41.isCheckedByCheckboxRow(row)) {\n              _this41.setCheckboxRow(childRows, true);\n            }\n          });\n        }\n\n        resolve(_this41.$nextTick().then(_this41.recalculate));\n      });\n    });\n  },\n\n  /**\r\n   * 设置所有树节点的展开与否\r\n   * @param {Boolean} expanded 是否展开\r\n   */\n  setAllTreeExpand: function setAllTreeExpand(expanded) {\n    var tableFullData = this.tableFullData,\n        treeOpts = this.treeOpts;\n    var lazy = treeOpts.lazy,\n        children = treeOpts.children;\n    var expandeds = [];\n    XEUtils.eachTree(tableFullData, function (row) {\n      var rowChildren = row[children];\n\n      if (lazy || rowChildren && rowChildren.length) {\n        expandeds.push(row);\n      }\n    }, treeOpts);\n    return this.setTreeExpand(expandeds, expanded);\n  },\n\n  /**\r\n   * 设置展开树形节点，二个参数设置这一行展开与否\r\n   * 支持单行\r\n   * 支持多行\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {Boolean} expanded 是否展开\r\n   */\n  setTreeExpand: function setTreeExpand(rows, expanded) {\n    var _this42 = this;\n\n    var fullAllDataRowMap = this.fullAllDataRowMap,\n        tableFullData = this.tableFullData,\n        treeExpandeds = this.treeExpandeds,\n        treeOpts = this.treeOpts,\n        treeLazyLoadeds = this.treeLazyLoadeds,\n        treeNodeColumn = this.treeNodeColumn;\n    var reserve = treeOpts.reserve,\n        lazy = treeOpts.lazy,\n        hasChild = treeOpts.hasChild,\n        children = treeOpts.children,\n        accordion = treeOpts.accordion,\n        toggleMethod = treeOpts.toggleMethod;\n    var result = [];\n    var columnIndex = this.getColumnIndex(treeNodeColumn);\n    var $columnIndex = this.getVMColumnIndex(treeNodeColumn);\n\n    if (rows) {\n      if (!XEUtils.isArray(rows)) {\n        rows = [rows];\n      }\n\n      if (rows.length) {\n        var validRows = toggleMethod ? rows.filter(function (row) {\n          return toggleMethod({\n            expanded: expanded,\n            column: treeNodeColumn,\n            columnIndex: columnIndex,\n            $columnIndex: $columnIndex,\n            row: row\n          });\n        }) : rows;\n\n        if (accordion) {\n          validRows = validRows.length ? [validRows[validRows.length - 1]] : []; // 同一级只能展开一个\n\n          var matchObj = XEUtils.findTree(tableFullData, function (item) {\n            return item === validRows[0];\n          }, treeOpts);\n\n          if (matchObj) {\n            XEUtils.remove(treeExpandeds, function (item) {\n              return matchObj.items.indexOf(item) > -1;\n            });\n          }\n        }\n\n        if (expanded) {\n          validRows.forEach(function (row) {\n            if (treeExpandeds.indexOf(row) === -1) {\n              var rest = fullAllDataRowMap.get(row);\n              var isLoad = lazy && row[hasChild] && !rest.treeLoaded && treeLazyLoadeds.indexOf(row) === -1; // 是否使用懒加载\n\n              if (isLoad) {\n                result.push(_this42.handleAsyncTreeExpandChilds(row));\n              } else {\n                if (row[children] && row[children].length) {\n                  treeExpandeds.push(row);\n                }\n              }\n            }\n          });\n        } else {\n          XEUtils.remove(treeExpandeds, function (row) {\n            return validRows.indexOf(row) > -1;\n          });\n        }\n\n        if (reserve) {\n          validRows.forEach(function (row) {\n            return _this42.handleTreeExpandReserve(row, expanded);\n          });\n        }\n\n        return Promise.all(result).then(this.recalculate);\n      }\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 判断行是否为树形节点展开状态\r\n   * @param {Row} row 行对象\r\n   */\n  isTreeExpandByRow: function isTreeExpandByRow(row) {\n    return this.treeExpandeds.indexOf(row) > -1;\n  },\n\n  /**\r\n   * 手动清空树形节点的展开状态，数据会恢复成未展开的状态\r\n   */\n  clearTreeExpand: function clearTreeExpand() {\n    var _this43 = this;\n\n    var treeOpts = this.treeOpts,\n        treeExpandeds = this.treeExpandeds,\n        tableFullData = this.tableFullData;\n    var reserve = treeOpts.reserve;\n    var isExists = treeExpandeds.length;\n    this.treeExpandeds = [];\n\n    if (reserve) {\n      XEUtils.eachTree(tableFullData, function (row) {\n        return _this43.handleTreeExpandReserve(row, false);\n      }, treeOpts);\n    }\n\n    return this.$nextTick().then(function () {\n      if (isExists) {\n        _this43.recalculate();\n      }\n    });\n  },\n  clearTreeExpandReserve: function clearTreeExpandReserve() {\n    this.treeExpandedReserveRowMap = {};\n    return this.$nextTick();\n  },\n  handleTreeExpandReserve: function handleTreeExpandReserve(row, expanded) {\n    var treeExpandedReserveRowMap = this.treeExpandedReserveRowMap,\n        treeOpts = this.treeOpts;\n\n    if (treeOpts.reserve) {\n      var rowid = getRowid(this, row);\n\n      if (expanded) {\n        treeExpandedReserveRowMap[rowid] = row;\n      } else if (treeExpandedReserveRowMap[rowid]) {\n        delete treeExpandedReserveRowMap[rowid];\n      }\n    }\n  },\n\n  /**\r\n   * 获取表格的滚动状态\r\n   */\n  getScroll: function getScroll() {\n    var $refs = this.$refs,\n        scrollXLoad = this.scrollXLoad,\n        scrollYLoad = this.scrollYLoad;\n    var bodyElem = $refs.tableBody.$el;\n    return {\n      virtualX: scrollXLoad,\n      virtualY: scrollYLoad,\n      scrollTop: bodyElem.scrollTop,\n      scrollLeft: bodyElem.scrollLeft\n    };\n  },\n\n  /**\r\n   * 横向 X 可视渲染事件处理\r\n   */\n  triggerScrollXEvent: function triggerScrollXEvent() {\n    this.loadScrollXData();\n  },\n  loadScrollXData: function loadScrollXData() {\n    var mergeList = this.mergeList,\n        mergeFooterList = this.mergeFooterList,\n        scrollXStore = this.scrollXStore;\n    var startIndex = scrollXStore.startIndex,\n        endIndex = scrollXStore.endIndex,\n        offsetSize = scrollXStore.offsetSize;\n\n    var _computeVirtualX2 = computeVirtualX(this),\n        toVisibleIndex = _computeVirtualX2.toVisibleIndex,\n        visibleSize = _computeVirtualX2.visibleSize;\n\n    var offsetItem = {\n      startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),\n      endIndex: toVisibleIndex + visibleSize + offsetSize\n    };\n    calculateMergerOffserIndex(mergeList.concat(mergeFooterList), offsetItem, 'col');\n    var offsetStartIndex = offsetItem.startIndex,\n        offsetEndIndex = offsetItem.endIndex;\n\n    if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\n      if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\n        scrollXStore.startIndex = offsetStartIndex;\n        scrollXStore.endIndex = offsetEndIndex;\n        this.updateScrollXData();\n      }\n    }\n\n    this.closeTooltip();\n  },\n\n  /**\r\n   * 纵向 Y 可视渲染事件处理\r\n   */\n  triggerScrollYEvent: function triggerScrollYEvent(evnt) {\n    var _this44 = this;\n\n    var row = this.currentRow; //加\n\n    row && this.clearCurrentRow(); //加\n\n    var scrollYStore = this.scrollYStore;\n    var adaptive = scrollYStore.adaptive,\n        offsetSize = scrollYStore.offsetSize,\n        visibleSize = scrollYStore.visibleSize; // webkit 浏览器使用最佳的渲染方式，且最高渲染量不能大于 40 条\n\n    if (isWebkit && adaptive && offsetSize * 2 + visibleSize <= 40) {\n      this.loadScrollYData(evnt);\n    } else {\n      this.debounceScrollY(evnt);\n    }\n\n    row && this.$nextTick(function () {\n      return _this44.setCurrentRow(row);\n    }); //加\n  },\n  debounceScrollY: XEUtils.debounce(function (evnt) {\n    this.loadScrollYData(evnt);\n  }, debounceScrollYDuration, {\n    leading: false,\n    trailing: true\n  }),\n\n  /**\r\n   * 纵向 Y 可视渲染处理\r\n   */\n  loadScrollYData: function loadScrollYData(evnt) {\n    var mergeList = this.mergeList,\n        scrollYStore = this.scrollYStore;\n    var startIndex = scrollYStore.startIndex,\n        endIndex = scrollYStore.endIndex,\n        visibleSize = scrollYStore.visibleSize,\n        offsetSize = scrollYStore.offsetSize,\n        rowHeight = scrollYStore.rowHeight;\n    var scrollBodyElem = evnt.currentTarget || evnt.target;\n    var scrollTop = scrollBodyElem.scrollTop;\n    var toVisibleIndex = Math.floor(scrollTop / rowHeight);\n    var offsetItem = {\n      startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),\n      endIndex: toVisibleIndex + visibleSize + offsetSize\n    };\n    calculateMergerOffserIndex(mergeList, offsetItem, 'row');\n    var offsetStartIndex = offsetItem.startIndex,\n        offsetEndIndex = offsetItem.endIndex;\n\n    if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\n      if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\n        scrollYStore.startIndex = offsetStartIndex;\n        scrollYStore.endIndex = offsetEndIndex;\n        this.updateScrollYData();\n      }\n    }\n  },\n  // 计算可视渲染相关数据\n  computeScrollLoad: function computeScrollLoad() {\n    var _this45 = this;\n\n    return this.$nextTick().then(function () {\n      var sYOpts = _this45.sYOpts,\n          sXOpts = _this45.sXOpts,\n          scrollXLoad = _this45.scrollXLoad,\n          scrollYLoad = _this45.scrollYLoad,\n          scrollXStore = _this45.scrollXStore,\n          scrollYStore = _this45.scrollYStore; // 计算 X 逻辑\n\n      if (scrollXLoad) {\n        var _computeVirtualX3 = computeVirtualX(_this45),\n            visibleXSize = _computeVirtualX3.visibleSize;\n\n        var offsetXSize = sXOpts.oSize ? XEUtils.toNumber(sXOpts.oSize) : browse.msie ? 10 : browse.edge ? 5 : 0;\n        scrollXStore.offsetSize = offsetXSize;\n        scrollXStore.visibleSize = visibleXSize;\n        scrollXStore.endIndex = Math.max(scrollXStore.startIndex + scrollXStore.visibleSize + offsetXSize, scrollXStore.endIndex);\n\n        _this45.updateScrollXData();\n      } else {\n        _this45.updateScrollXSpace();\n      } // 计算 Y 逻辑\n\n\n      var _computeVirtualY = computeVirtualY(_this45),\n          rowHeight = _computeVirtualY.rowHeight,\n          visibleYSize = _computeVirtualY.visibleSize;\n\n      scrollYStore.rowHeight = rowHeight;\n\n      if (scrollYLoad) {\n        var offsetYSize = sYOpts.oSize ? XEUtils.toNumber(sYOpts.oSize) : browse.msie ? 20 : browse.edge ? 10 : 0;\n        scrollYStore.offsetSize = offsetYSize;\n        scrollYStore.visibleSize = visibleYSize;\n        scrollYStore.endIndex = Math.max(scrollYStore.startIndex + visibleYSize + offsetYSize, scrollYStore.endIndex);\n\n        _this45.updateScrollYData();\n      } else {\n        _this45.updateScrollYSpace();\n      }\n\n      _this45.rowHeight = rowHeight;\n\n      _this45.$nextTick(_this45.updateStyle);\n    });\n  },\n  handleTableColumn: function handleTableColumn() {\n    var scrollXLoad = this.scrollXLoad,\n        visibleColumn = this.visibleColumn,\n        scrollXStore = this.scrollXStore;\n    this.tableColumn = scrollXLoad ? visibleColumn.slice(scrollXStore.startIndex, scrollXStore.endIndex) : visibleColumn.slice(0);\n  },\n  updateScrollXData: function updateScrollXData() {\n    this.handleTableColumn();\n    this.updateScrollXSpace();\n  },\n  // 更新横向 X 可视渲染上下剩余空间大小\n  updateScrollXSpace: function updateScrollXSpace() {\n    var $refs = this.$refs,\n        elemStore = this.elemStore,\n        visibleColumn = this.visibleColumn,\n        scrollXStore = this.scrollXStore,\n        scrollXLoad = this.scrollXLoad,\n        tableWidth = this.tableWidth,\n        scrollbarWidth = this.scrollbarWidth;\n    var tableHeader = $refs.tableHeader,\n        tableBody = $refs.tableBody,\n        tableFooter = $refs.tableFooter;\n    var tableBodyElem = tableBody ? tableBody.$el : null;\n\n    if (tableBodyElem) {\n      var tableHeaderElem = tableHeader ? tableHeader.$el : null;\n      var tableFooterElem = tableFooter ? tableFooter.$el : null;\n      var headerElem = tableHeaderElem ? tableHeaderElem.querySelector('.vxe-table--header') : null;\n      var bodyElem = tableBodyElem.querySelector('.vxe-table--body');\n      var footerElem = tableFooterElem ? tableFooterElem.querySelector('.vxe-table--footer') : null;\n      var leftSpaceWidth = visibleColumn.slice(0, scrollXStore.startIndex).reduce(function (previous, column) {\n        return previous + column.renderWidth;\n      }, 0);\n      var marginLeft = '';\n\n      if (scrollXLoad) {\n        marginLeft = \"\".concat(leftSpaceWidth, \"px\");\n      }\n\n      if (headerElem) {\n        headerElem.style.marginLeft = marginLeft;\n      }\n\n      bodyElem.style.marginLeft = marginLeft;\n\n      if (footerElem) {\n        footerElem.style.marginLeft = marginLeft;\n      }\n\n      var containerList = ['main'];\n      containerList.forEach(function (name) {\n        var layoutList = ['header', 'body', 'footer'];\n        layoutList.forEach(function (layout) {\n          var xSpaceElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-xSpace\")];\n\n          if (xSpaceElem) {\n            xSpaceElem.style.width = scrollXLoad ? \"\".concat(tableWidth + (layout === 'header' ? scrollbarWidth : 0), \"px\") : '';\n          }\n        });\n      });\n      this.$nextTick(this.updateStyle);\n    }\n  },\n  updateScrollYData: function updateScrollYData() {\n    this.handleTableData();\n    this.updateScrollYSpace();\n  },\n  // 更新纵向 Y 可视渲染上下剩余空间大小\n  updateScrollYSpace: function updateScrollYSpace() {\n    var elemStore = this.elemStore,\n        scrollYStore = this.scrollYStore,\n        scrollYLoad = this.scrollYLoad,\n        afterFullData = this.afterFullData;\n    var startIndex = scrollYStore.startIndex,\n        rowHeight = scrollYStore.rowHeight;\n    var bodyHeight = afterFullData.length * rowHeight;\n    var topSpaceHeight = Math.max(0, startIndex * rowHeight);\n    var containerList = ['main', 'left', 'right'];\n    var marginTop = '';\n    var ySpaceHeight = '';\n\n    if (scrollYLoad) {\n      marginTop = \"\".concat(topSpaceHeight, \"px\");\n      ySpaceHeight = \"\".concat(bodyHeight, \"px\");\n    }\n\n    containerList.forEach(function (name) {\n      var layoutList = ['header', 'body', 'footer'];\n      var tableElem = elemStore[\"\".concat(name, \"-body-table\")];\n\n      if (tableElem) {\n        tableElem.style.marginTop = marginTop;\n      }\n\n      layoutList.forEach(function (layout) {\n        var ySpaceElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-ySpace\")];\n\n        if (ySpaceElem) {\n          ySpaceElem.style.height = ySpaceHeight;\n        }\n      });\n    });\n    this.$nextTick(this.updateStyle);\n  },\n\n  /**\r\n   * 如果有滚动条，则滚动到对应的位置\r\n   * @param {Number} scrollLeft 左距离\r\n   * @param {Number} scrollTop 上距离\r\n   */\n  scrollTo: function scrollTo(scrollLeft, scrollTop) {\n    var _this46 = this;\n\n    var $refs = this.$refs;\n    var tableBody = $refs.tableBody,\n        rightBody = $refs.rightBody,\n        tableFooter = $refs.tableFooter;\n    var tableBodyElem = tableBody ? tableBody.$el : null;\n    var rightBodyElem = rightBody ? rightBody.$el : null;\n    var tableFooterElem = tableFooter ? tableFooter.$el : null;\n\n    if (XEUtils.isNumber(scrollLeft)) {\n      setScrollLeft(tableFooterElem || tableBodyElem, scrollLeft);\n    }\n\n    if (XEUtils.isNumber(scrollTop)) {\n      setScrollTop(rightBodyElem || tableBodyElem, scrollTop);\n    }\n\n    if (this.scrollXLoad || this.scrollYLoad) {\n      return new Promise(function (resolve) {\n        return setTimeout(function () {\n          return resolve(_this46.$nextTick());\n        }, 50);\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 如果有滚动条，则滚动到对应的行\r\n   * @param {Row} row 行对象\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  scrollToRow: function scrollToRow(row, fieldOrColumn) {\n    var rest = [];\n\n    if (row) {\n      if (this.treeConfig) {\n        rest.push(this.scrollToTreeRow(row));\n      } else {\n        rest.push(DomTools.rowToVisible(this, row));\n      }\n    }\n\n    if (fieldOrColumn) {\n      rest.push(this.scrollToColumn(fieldOrColumn));\n    }\n\n    return Promise.all(rest);\n  },\n\n  /**\r\n   * 如果有滚动条，则滚动到对应的列\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  scrollToColumn: function scrollToColumn(fieldOrColumn) {\n    var column = handleFieldOrColumn(this, fieldOrColumn);\n\n    if (column && this.fullColumnMap.has(column)) {\n      return DomTools.colToVisible(this, column);\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 对于树形结构中，可以直接滚动到指定深层节点中\r\n   * 对于某些特定的场景可能会用到，比如定位到某一节点\r\n   * @param {Row} row 行对象\r\n   */\n  scrollToTreeRow: function scrollToTreeRow(row) {\n    var _this47 = this;\n\n    var tableFullData = this.tableFullData,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts;\n\n    if (treeConfig) {\n      var matchObj = XEUtils.findTree(tableFullData, function (item) {\n        return item === row;\n      }, treeOpts);\n\n      if (matchObj) {\n        var nodes = matchObj.nodes;\n        nodes.forEach(function (row, index) {\n          if (index < nodes.length - 1 && !_this47.isTreeExpandByRow(row)) {\n            _this47.setTreeExpand(row, true);\n          }\n        });\n      }\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 手动清除滚动相关信息，还原到初始状态\r\n   */\n  clearScroll: function clearScroll() {\n    var $refs = this.$refs;\n    var tableBody = $refs.tableBody,\n        rightBody = $refs.rightBody,\n        tableFooter = $refs.tableFooter;\n    var tableBodyElem = tableBody ? tableBody.$el : null;\n    var rightBodyElem = rightBody ? rightBody.$el : null;\n    var tableFooterElem = tableFooter ? tableFooter.$el : null;\n\n    if (rightBodyElem) {\n      rightBodyElem.scrollTop = 0;\n    }\n\n    if (tableFooterElem) {\n      tableFooterElem.scrollLeft = 0;\n    }\n\n    if (tableBodyElem) {\n      tableBodyElem.scrollTop = 0;\n      tableBodyElem.scrollLeft = 0;\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 更新表尾合计\r\n   */\n  updateFooter: function updateFooter() {\n    var showFooter = this.showFooter,\n        visibleColumn = this.visibleColumn,\n        footerMethod = this.footerMethod;\n\n    if (showFooter && footerMethod) {\n      this.footerTableData = visibleColumn.length ? footerMethod({\n        columns: visibleColumn,\n        data: this.afterFullData,\n        $table: this,\n        $grid: this.$xegrid\n      }) : [];\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 更新列状态\r\n   * 如果组件值 v-model 发生 change 时，调用改函数用于更新某一列编辑状态\r\n   * 如果单元格配置了校验规则，则会进行校验\r\n   */\n  updateStatus: function updateStatus(scope, cellValue) {\n    var _this48 = this;\n\n    var customVal = !XEUtils.isUndefined(cellValue);\n    return this.$nextTick().then(function () {\n      var $refs = _this48.$refs,\n          editRules = _this48.editRules,\n          validStore = _this48.validStore;\n\n      if (scope && $refs.tableBody && editRules) {\n        var row = scope.row,\n            column = scope.column;\n        var type = 'change';\n\n        if (_this48.hasCellRules(type, row, column)) {\n          var cell = _this48.getCell(row, column);\n\n          if (cell) {\n            return _this48.validCellRules(type, row, column, cellValue).then(function () {\n              if (customVal && validStore.visible) {\n                setCellValue(row, column, cellValue);\n              }\n\n              _this48.clearValidate();\n            }).catch(function (_ref7) {\n              var rule = _ref7.rule;\n\n              if (customVal) {\n                setCellValue(row, column, cellValue);\n              }\n\n              _this48.showValidTooltip({\n                rule: rule,\n                row: row,\n                column: column,\n                cell: cell\n              });\n            });\n          }\n        }\n      }\n    });\n  },\n  handleDefaultMergeCells: function handleDefaultMergeCells() {\n    this.setMergeCells(this.mergeCells);\n  },\n\n  /**\r\n   * 设置合并单元格\r\n   * @param {TableMergeConfig[]} merges { row: Row|number, column: ColumnInfo|number, rowspan: number, colspan: number }\r\n   */\n  setMergeCells: function setMergeCells(merges) {\n    var _this49 = this;\n\n    if (this.spanMethod) {\n      UtilTools.error('vxe.error.errConflicts', ['merge-cells', 'span-method']);\n    }\n\n    setMerges(this, merges, this.mergeList, this.afterFullData);\n    return this.$nextTick().then(function () {\n      return _this49.updateCellAreas();\n    });\n  },\n\n  /**\r\n   * 移除单元格合并\r\n   * @param {TableMergeConfig[]} merges 多个或数组 [{row:Row|number, col:ColumnInfo|number}]\r\n   */\n  removeMergeCells: function removeMergeCells(merges) {\n    var _this50 = this;\n\n    if (this.spanMethod) {\n      UtilTools.error('vxe.error.errConflicts', ['merge-cells', 'span-method']);\n    }\n\n    var rest = removeMerges(this, merges, this.mergeList, this.afterFullData);\n    return this.$nextTick().then(function () {\n      _this50.updateCellAreas();\n\n      return rest;\n    });\n  },\n\n  /**\r\n   * 获取所有被合并的单元格\r\n   */\n  getMergeCells: function getMergeCells() {\n    return this.mergeList.slice(0);\n  },\n\n  /**\r\n   * 清除所有单元格合并\r\n   */\n  clearMergeCells: function clearMergeCells() {\n    this.mergeList = [];\n    return this.$nextTick();\n  },\n  handleDefaultMergeFooterItems: function handleDefaultMergeFooterItems() {\n    this.setMergeFooterItems(this.mergeFooterItems);\n  },\n  setMergeFooterItems: function setMergeFooterItems(merges) {\n    var _this51 = this;\n\n    if (this.footerSpanMethod) {\n      UtilTools.error('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method']);\n    }\n\n    setMerges(this, merges, this.mergeFooterList, null);\n    return this.$nextTick().then(function () {\n      return _this51.updateCellAreas();\n    });\n  },\n  removeMergeFooterItems: function removeMergeFooterItems(merges) {\n    var _this52 = this;\n\n    if (this.footerSpanMethod) {\n      UtilTools.error('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method']);\n    }\n\n    var rest = removeMerges(this, merges, this.mergeFooterList, null);\n    return this.$nextTick().then(function () {\n      _this52.updateCellAreas();\n\n      return rest;\n    });\n  },\n\n  /**\r\n   * 获取所有被合并的表尾\r\n   */\n  getMergeFooterItems: function getMergeFooterItems() {\n    return this.mergeFooterList.slice(0);\n  },\n\n  /**\r\n   * 清除所有表尾合并\r\n   */\n  clearMergeFooterItems: function clearMergeFooterItems() {\n    this.mergeFooterList = [];\n    return this.$nextTick();\n  },\n  updateZindex: function updateZindex() {\n    if (this.zIndex) {\n      this.tZindex = this.zIndex;\n    } else if (this.tZindex < UtilTools.getLastZIndex()) {\n      this.tZindex = UtilTools.nextZIndex();\n    }\n  },\n  updateCellAreas: function updateCellAreas() {\n    if (this.mouseConfig && this.mouseOpts.area && this.handleUpdateCellAreas) {\n      this.handleUpdateCellAreas();\n    }\n  },\n  emitEvent: function emitEvent(type, params, evnt) {\n    this.$emit(type, Object.assign({\n      $table: this,\n      $grid: this.$xegrid,\n      $event: evnt\n    }, params));\n  },\n  focus: function focus() {\n    this.isActivated = true;\n    return this.$nextTick();\n  },\n  blur: function blur() {\n    this.isActivated = false;\n    return this.$nextTick();\n  },\n  // 连接工具栏\n  connect: function connect($toolbar) {\n    if ($toolbar && $toolbar.syncUpdate) {\n      $toolbar.syncUpdate({\n        collectColumn: this.collectColumn,\n        $table: this\n      });\n      this.$toolbar = $toolbar;\n    } else {\n      UtilTools.error('vxe.error.barUnableLink');\n    }\n\n    return this.$nextTick();\n  },\n\n  /*************************\r\n   * Publish methods\r\n   *************************/\n  getCell: function getCell(row, column) {\n    var $refs = this.$refs;\n    var rowid = getRowid(this, row);\n    var bodyElem = $refs[\"\".concat(column.fixed || 'table', \"Body\")] || $refs.tableBody;\n\n    if (bodyElem && bodyElem.$el) {\n      return bodyElem.$el.querySelector(\".vxe-body--row[rowid=\\\"\".concat(rowid, \"\\\"] .\").concat(column.id));\n    }\n\n    return null;\n  },\n  getCellLabel: function getCellLabel(row, column) {\n    var formatter = column.formatter;\n    var cellValue = UtilTools.getCellValue(row, column);\n    var cellLabel = cellValue;\n\n    if (formatter) {\n      var rest, formatData;\n      var fullAllDataRowMap = this.fullAllDataRowMap;\n      var colid = column.id;\n      var cacheFormat = fullAllDataRowMap.has(row);\n\n      if (cacheFormat) {\n        rest = fullAllDataRowMap.get(row);\n        formatData = rest.formatData;\n\n        if (!formatData) {\n          formatData = fullAllDataRowMap.get(row).formatData = {};\n        }\n\n        if (rest && formatData[colid]) {\n          if (formatData[colid].value === cellValue) {\n            return formatData[colid].label;\n          }\n        }\n      }\n\n      var formatParams = {\n        cellValue: cellValue,\n        row: row,\n        rowIndex: this.getRowIndex(row),\n        column: column,\n        columnIndex: this.getColumnIndex(column)\n      };\n\n      if (XEUtils.isString(formatter)) {\n        var globalFunc = formats.get(formatter);\n        cellLabel = globalFunc ? globalFunc(formatParams) : '';\n      } else if (XEUtils.isArray(formatter)) {\n        var _globalFunc = formats.get(formatter[0]);\n\n        cellLabel = _globalFunc ? _globalFunc.apply(void 0, [formatParams].concat(_toConsumableArray(formatter.slice(1)))) : '';\n      } else {\n        cellLabel = formatter(formatParams);\n      }\n\n      if (formatData) {\n        formatData[colid] = {\n          value: cellValue,\n          label: cellLabel\n        };\n      }\n    }\n\n    return cellLabel;\n  }\n  /*************************\r\n   * Publish methods\r\n   *************************/\n\n}; // Module methods\n\nvar funcs = 'setFilter,clearFilter,getCheckedFilters,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,clearCopyCellArea,setCellAreas,openFind,openReplace,getSelectedCell,clearSelected,insert,insertAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearActived,getActiveRecord,isActiveByRow,setActiveRow,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print'.split(',');\nfuncs.forEach(function (name) {\n  Methods[name] = function () {\n    return this[\"_\".concat(name)] ? this[\"_\".concat(name)].apply(this, arguments) : null;\n  };\n});\nexport default Methods;",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\table\\src\\methods.js"],"names":["getRowid","getRowkey","setCellValue","hasChildrenList","getColumnList","UtilTools","calcHeight","hasClass","addClass","removeClass","getEventTargetNode","DomTools","isWebkit","browse","debounceScrollYDuration","resizableStorageKey","visibleStorageKey","XEUtils","val1","val2","eqEmptyValue","orders","_vm","currOrder","column","oIndex","version","GlobalConfig","rest","localStorage","_v","fullAllDataRowMap","fullDataRowIdData","reserveList","scrollLeft","$refs","visibleColumn","tableBody","tableBodyElem","clientWidth","endWidth","toVisibleIndex","cWidth","visibleSize","colIndex","colLen","Math","vSize","rowHeightMaps","params","tableHeader","tableHeaderElem","rowHeight","firstTrElem","mcIndex","len","list","mergeItem","startIndex","endIndex","offsetItem","mergeStartIndex","mergeSpanNumber","type","mergeEndIndex","treeConfig","merges","row","col","rowspan","colspan","item","rowList","mList","mergeRowIndex","mergeColIndex","_row","_col","_rowspan","_colspan","rItems","sortBy","sortType","cellValue","isNaN","Methods","callSlot","$xegrid","slotFunc","getParentElem","$el","getParentHeight","height","parentElem","parentPaddingSize","getPaddingTopBottomSize","getComputedStyle","getExcludeHeight","clearAll","clearTableAllStatus","syncData","updateData","handleTableData","scrollYLoad","scrollYStore","fullData","force","loadTableData","keepSource","editStore","sYOpts","scrollXStore","lastScrollLeft","lastScrollTop","oldScrollYLoad","tableFullData","datas","process","restoreScroll","setTimeout","loadData","inited","initStatus","reloadData","reloadRow","tableSourceData","tableData","rowIndex","oRow","record","Object","loadColumn","collectColumn","Cell","children","reloadColumn","handleColumn","tableFullColumn","$table","updateCache","treeOpts","fullDataRowMap","fullAllDataRowIdData","rowkey","isLazy","handleCache","rowid","getRowUniqueId","index","items","parent","loadChildren","matchObj","cacheColumnMap","fullColumnMap","showOverflow","fullColumnIdData","fullColumnFieldData","isGroup","isAllOverflow","handleFunc","colid","property","fixed","treeNode","hasFixed","treeNodeColumn","expandColumn","checkboxColumn","radioColumn","nodes","getRowNode","tr","getColumnNode","cell","getRowIndex","getVTRowIndex","_getRowIndex","getVMRowIndex","$getRowIndex","getColumnIndex","getVTColumnIndex","_getColumnIndex","getVMColumnIndex","$getColumnIndex","isSeqColumn","defineField","radioOpts","checkboxOpts","expandOpts","editRender","ohterFields","key","createData","handleRrecord","rows","records","createRow","isArr","revertData","targetRows","clearData","arguments","isInsertByRow","isUpdateByRow","oRowIndex","eqCellValue","getColumns","columns","getColumnById","getColumnByField","getTableColumn","fullColumn","tableColumn","getData","tableSynchData","getCheckboxRecords","selection","updateAfterFullData","filterOpts","sortOpts","allRemoteFilter","allFilterMethod","allRemoteSort","allSortMethod","sortMultiple","filterColumns","orderColumns","sortable","order","filters","valueList","itemList","filterMethod","filterRender","compConf","VXETable","compFilterMethod","value","option","options","values","firstOrderColumn","sortRests","data","sortList","getOrderField","arraySort","row1","row2","compare","getRowById","getTableData","afterFullData","footerTableData","visibleData","footerData","handleLoadDefaults","handleInitDefaults","sortConfig","hideColumn","handleFieldOrColumn","showColumn","resetColumn","customOpts","checkMethod","opts","visible","resizable","handleCustom","restoreCustomStorage","id","customConfig","storage","isAllStorage","isResizable","isVisible","customMap","columnWidthStorage","getCustomStorageMap","field","resizeWidth","columnVisibleStorage","colVisibles","colHides","colShows","keyMap","colKey","saveCustomVisible","columnVisibleStorageMap","saveCustomResizable","columnWidthStorageMap","refreshColumn","parseColumns","leftList","centerList","rightList","columnStore","sXOpts","leftGroupList","centerGroupList","rightGroupList","isColGroup","subColumn","scrollXLoad","computeVirtualX","analyColumnWidth","columnOpts","defaultWidth","defaultMinWidth","resizeList","pxList","pxMinList","scaleList","scaleMinList","autoList","refreshScroll","leftBody","rightBody","tableFooter","leftBodyElem","rightBodyElem","tableFooterElem","setScrollTop","setScrollLeft","recalculate","bodyElem","headerElem","footerElem","refull","autoCellWidth","tableWidth","minCellWidth","bodyWidth","remainWidth","meanWidth","fit","minWidth","parseInt","scaleWidth","width","dynamicList","dynamicSize","odiffer","tableHeight","overflowY","footerHeight","updateHeight","updateStyle","customHeight","customMaxHeight","border","headerHeight","showFooter","allColumnOverflow","allColumnHeaderOverflow","allColumnFooterOverflow","scrollbarHeight","scrollbarWidth","cellOffsetWidth","elemStore","currentRow","mouseConfig","keyboardConfig","keyboardOpts","spanMethod","mergeList","mergeFooterList","footerSpanMethod","containerList","emptyPlaceholderElem","bodyWrapperElem","_headerHeight","fixedType","layoutList","fixedColumn","fixedWrapperElem","wrapperElem","tableElem","layout","tWidth","isOptimize","previous","resizeElem","repairElem","listElem","colNode","showHeaderOverflow","cellOverflow","showEllipsis","showTitle","showTooltip","hasEllipsis","childWidth","countChild","thElem","emptyBlockElem","isRightFixed","colgroupElem","colElem","showFooterOverflow","elem","cellElem","colWidth","columnIndex","nextColumn","checkScrolling","leftContainer","rightContainer","preventEvent","evntList","func","$grid","$event","evnt","next","end","handleGlobalMousedownEvent","$toolbar","ctxMenuStore","editOpts","filterStore","actived","ctxWrapper","filterWrapper","validTip","document","Date","rowNode","isClearActived","handleGlobalBlurEvent","handleGlobalMousewheelEvent","keydownEvent","mouseOpts","keyCode","isEsc","handleGlobalKeydownEvent","isCtxMenu","editConfig","highlightCurrentRow","bodyCtxMenu","selected","isBack","isTab","isEnter","isSpacebar","isLeftArrow","isUpArrow","isRightArrow","isDwArrow","isDel","isF2","isContextMenu","hasMetaKey","hasCtrlKey","hasShiftKey","hasAltKey","operArrow","operCtxMenu","isEditStatus","clearTimeout","targetArgs","childrens","targetRow","delMethod","backMethod","parentRow","editMethod","isEnableConf","handleGlobalPasteEvent","isActivated","handleGlobalCopyEvent","handleGlobalCutEvent","handleGlobalResizeEvent","handleTooltipLeaveMethod","tooltipOpts","handleTargetEnterEvent","handleTargetLeaveEvent","tooltip","triggerHeaderHelpEvent","titleHelp","tooltipStore","content","triggerHeaderTooltipEvent","titleElem","triggerBodyTooltipEvent","overflowElem","tipElem","triggerFooterTooltipEvent","handleTooltip","showAll","enabled","contentMethod","customContent","useCustom","isCellOverflow","openTooltip","commTip","closeTooltip","isAllCheckboxChecked","isCheckboxIndeterminate","getCheckboxIndeterminateRecords","treeIndeterminates","handleDefaultSelectionChecked","checkAll","checkRowKeys","defSelection","setCheckboxRow","isCheckedByCheckboxRow","handleSelectRow","checkStrictly","half","vItems","indeterminatesItem","parentStatus","selectItems","select","handleToggleCheckRowEvent","triggerCheckRowEvent","reserves","indeterminates","checked","toggleCheckboxRow","setAllCheckboxRow","checkboxReserveRowMap","reserve","selectRows","beforeSelection","checkValFn","checkSelectionStatus","checkField","halfField","isAllSelected","isIndeterminate","handleReserveStatus","selectRow","radioReserveRow","rowExpandeds","treeExpandeds","getRecoverRow","handleReserveRow","getRadioReserveRecord","clearRadioReserve","handleRadioReserveRow","getCheckboxReserveRecords","reserveSelection","clearCheckboxReserve","handleCheckboxReserveRow","triggerCheckAllEvent","toggleAllCheckboxRow","clearCheckboxRow","handleDefaultRadioChecked","triggerRadioRowEvent","isChange","triggerCurrentRowEvent","setCurrentRow","$_theme","isCheckedByRadioRow","setRadioRow","clearCurrentRow","clearRadioRow","getCurrentRecord","getRadioRecord","triggerHoverEvent","setHoverRow","clearHoverRow","triggerHeaderCellClickEvent","_lastResizeTime","triggerResizable","triggerSort","triggerFilter","getNextSortOrder","triggerHeaderCellDblclickEvent","currentTarget","getCurrentColumn","setCurrentColumn","clearCurrentColumn","checkValidate","handleChangeCell","triggerCellClickEvent","isRadioType","isCheckboxType","isExpandType","triggerRadio","triggerCheckbox","triggerTreeNode","triggerExpandNode","triggerCellDblclickEvent","handleDefaultSort","defaultSort","triggerSortEvent","sort","multiple","remote","sortConfs","sortOrder","clearAllSort","confs","firstSortColumn","clearSort","getSortColumn","isSort","getSortColumns","closeFilter","isFilter","isRowExpandLoaded","clearRowExpandLoaded","expandLazyLoadeds","lazy","reloadExpandContent","triggerRowExpandEvent","expanded","$columnIndex","$rowIndex","toggleRowExpand","handleDefaultRowExpand","expandAll","expandRowKeys","defExpandeds","setAllRowExpand","handleAsyncRowExpand","resolve","setRowExpand","accordion","toggleMethod","lazyRests","validRows","isLoad","Promise","isExpandByRow","clearRowExpand","isExists","clearRowExpandReserve","handleRowExpandReserve","rowExpandedReserveRowMap","getRowExpandRecords","getTreeExpandRecords","getTreeStatus","config","isTreeExpandLoaded","clearTreeExpandLoaded","reloadTreeChilds","treeLazyLoadeds","hasChild","triggerTreeExpandEvent","toggleTreeExpand","handleDefaultTreeExpand","handleAsyncTreeExpandChilds","loadMethod","childRecords","childRows","setAllTreeExpand","expandeds","rowChildren","setTreeExpand","result","isTreeExpandByRow","clearTreeExpand","clearTreeExpandReserve","handleTreeExpandReserve","treeExpandedReserveRowMap","getScroll","virtualX","virtualY","scrollTop","triggerScrollXEvent","loadScrollXData","offsetSize","calculateMergerOffserIndex","offsetStartIndex","offsetEndIndex","triggerScrollYEvent","adaptive","debounceScrollY","leading","trailing","loadScrollYData","scrollBodyElem","computeScrollLoad","visibleXSize","offsetXSize","visibleYSize","computeVirtualY","offsetYSize","handleTableColumn","updateScrollXData","updateScrollXSpace","leftSpaceWidth","marginLeft","xSpaceElem","updateScrollYData","updateScrollYSpace","bodyHeight","topSpaceHeight","marginTop","ySpaceHeight","ySpaceElem","scrollTo","scrollToRow","scrollToColumn","scrollToTreeRow","clearScroll","updateFooter","footerMethod","updateStatus","customVal","editRules","validStore","scope","rule","handleDefaultMergeCells","setMergeCells","setMerges","removeMergeCells","removeMerges","getMergeCells","clearMergeCells","handleDefaultMergeFooterItems","setMergeFooterItems","removeMergeFooterItems","getMergeFooterItems","clearMergeFooterItems","updateZindex","updateCellAreas","emitEvent","focus","blur","connect","getCell","getCellLabel","formatter","cellLabel","cacheFormat","formatData","formatParams","globalFunc","formats","label","funcs"],"mappings":"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","sourcesContent":["import XEUtils from 'xe-utils'\r\nimport GlobalConfig from '../../v-x-e-table/src/conf'\r\nimport Cell from './cell'\r\nimport VXETable from '../../v-x-e-table'\r\nimport { UtilTools, DomTools } from '../../tools'\r\nimport { clearTableAllStatus, handleFieldOrColumn } from './util'\r\nimport { eqEmptyValue, isEnableConf } from '../../tools/src/utils'\r\nimport { browse, getPaddingTopBottomSize, setScrollTop, setScrollLeft } from '../../tools/src/dom'\r\nimport { formats } from '../../v-x-e-table/src/formats'\r\n\r\nimport { arraySort, compare } from '@/common/util/Arrays.js'//加\r\n\r\nconst { getRowid, getRowkey, setCellValue, hasChildrenList, getColumnList } = UtilTools\r\nconst { calcHeight, hasClass, addClass, removeClass, getEventTargetNode } = DomTools\r\n\r\nconst isWebkit = browse['-webkit'] && !browse.edge\r\nconst debounceScrollYDuration = browse.msie ? 80 : 20\r\n\r\nconst resizableStorageKey = 'VXE_TABLE_CUSTOM_COLUMN_WIDTH'\r\nconst visibleStorageKey = 'VXE_TABLE_CUSTOM_COLUMN_VISIBLE'\r\n\r\n/**\r\n * 生成行的唯一主键\r\n */\r\nfunction getRowUniqueId () {\r\n  return XEUtils.uniqueId('row_')\r\n}\r\n\r\nfunction eqCellValue (row1, row2, field) {\r\n  const val1 = XEUtils.get(row1, field)\r\n  const val2 = XEUtils.get(row2, field)\r\n  if (eqEmptyValue(val1) && eqEmptyValue(val2)) {\r\n    return true\r\n  }\r\n  if (XEUtils.isString(val1) || XEUtils.isNumber(val1)) {\r\n    /* eslint-disable eqeqeq */\r\n    return val1 == val2\r\n  }\r\n  return XEUtils.isEqual(val1, val2)\r\n}\r\n\r\nfunction getNextSortOrder (_vm, column) {\r\n  const orders = _vm.sortOpts.orders\r\n  const currOrder = column.order || null\r\n  const oIndex = orders.indexOf(currOrder) + 1\r\n  return orders[oIndex < orders.length ? oIndex : 0]\r\n}\r\n\r\nfunction getCustomStorageMap (key) {\r\n  const version = GlobalConfig.version\r\n  const rest = XEUtils.toStringJSON(localStorage.getItem(key))\r\n  return rest && rest._v === version ? rest : { _v: version }\r\n}\r\n\r\nfunction getRecoverRow (_vm, list) {\r\n  const { fullAllDataRowMap } = _vm\r\n  return list.filter(row => fullAllDataRowMap.has(row))\r\n}\r\n\r\nfunction handleReserveRow (_vm, reserveRowMap) {\r\n  const { fullDataRowIdData } = _vm\r\n  const reserveList = []\r\n  XEUtils.each(reserveRowMap, (item, rowid) => {\r\n    if (fullDataRowIdData[rowid] && reserveList.indexOf(fullDataRowIdData[rowid].row) === -1) {\r\n      reserveList.push(fullDataRowIdData[rowid].row)\r\n    }\r\n  })\r\n  return reserveList\r\n}\r\n\r\nfunction restoreScroll (_vm, scrollLeft, scrollTop) {\r\n  return _vm.clearScroll().then(() => {\r\n    if (scrollLeft || scrollTop) {\r\n      // 重置最后滚动状态\r\n      _vm.lastScrollLeft = 0\r\n      _vm.lastScrollTop = 0\r\n      // 还原滚动状态\r\n      return _vm.scrollTo(scrollLeft, scrollTop)\r\n    }\r\n  })\r\n}\r\n\r\nfunction computeVirtualX (_vm) {\r\n  const { $refs, visibleColumn } = _vm\r\n  const { tableBody } = $refs\r\n  const tableBodyElem = tableBody ? tableBody.$el : null\r\n  if (tableBodyElem) {\r\n    const { scrollLeft, clientWidth } = tableBodyElem\r\n    const endWidth = scrollLeft + clientWidth\r\n    let toVisibleIndex = -1\r\n    let cWidth = 0\r\n    let visibleSize = 0\r\n    for (let colIndex = 0, colLen = visibleColumn.length; colIndex < colLen; colIndex++) {\r\n      cWidth += visibleColumn[colIndex].renderWidth\r\n      if (toVisibleIndex === -1 && scrollLeft < cWidth) {\r\n        toVisibleIndex = colIndex\r\n      }\r\n      if (toVisibleIndex >= 0) {\r\n        visibleSize++\r\n        if (cWidth > endWidth) {\r\n          break\r\n        }\r\n      }\r\n    }\r\n    return { toVisibleIndex: Math.max(0, toVisibleIndex), visibleSize: Math.max(8, visibleSize) }\r\n  }\r\n  return { toVisibleIndex: 0, visibleSize: 8 }\r\n}\r\n\r\nfunction computeVirtualY (_vm) {\r\n  const { $refs, vSize, rowHeightMaps, params } = _vm\r\n  const { tableHeader, tableBody } = $refs\r\n  const tableBodyElem = tableBody ? tableBody.$el : null\r\n  if (tableBodyElem) {\r\n    const tableHeaderElem = tableHeader ? tableHeader.$el : null\r\n    let rowHeight = params ? params.rowHeight : 0;\r\n\tif (!rowHeight) {\r\n\t    let firstTrElem\r\n\t    firstTrElem = tableBodyElem.querySelector('tr')\r\n\t    if (!firstTrElem && tableHeaderElem) {\r\n\t      firstTrElem = tableHeaderElem.querySelector('tr')\r\n\t    }\r\n\t    if (firstTrElem) {\r\n\t      rowHeight = firstTrElem.clientHeight\r\n\t    }\r\n\t}\r\n    if (!rowHeight) {\r\n      rowHeight = rowHeightMaps[vSize || 'default']\r\n    }\r\n    const visibleSize = Math.max(8, Math.ceil(tableBodyElem.clientHeight / rowHeight) + 2)\r\n    return { rowHeight, visibleSize }\r\n  }\r\n  return { rowHeight: 0, visibleSize: 8 }\r\n}\r\n\r\nfunction calculateMergerOffserIndex (list, offsetItem, type) {\r\n  for (let mcIndex = 0, len = list.length; mcIndex < len; mcIndex++) {\r\n    const mergeItem = list[mcIndex]\r\n    const { startIndex, endIndex } = offsetItem\r\n    const mergeStartIndex = mergeItem[type]\r\n    const mergeSpanNumber = mergeItem[type + 'span']\r\n    const mergeEndIndex = mergeStartIndex + mergeSpanNumber\r\n    if (mergeStartIndex < startIndex && startIndex < mergeEndIndex) {\r\n      offsetItem.startIndex = mergeStartIndex\r\n    }\r\n    if (mergeStartIndex < endIndex && endIndex < mergeEndIndex) {\r\n      offsetItem.endIndex = mergeEndIndex\r\n    }\r\n    if (offsetItem.startIndex !== startIndex || offsetItem.endIndex !== endIndex) {\r\n      mcIndex = -1\r\n    }\r\n  }\r\n}\r\n\r\nfunction setMerges (_vm, merges, mList, rowList) {\r\n  if (merges) {\r\n    const { treeConfig, visibleColumn } = _vm\r\n    if (treeConfig) {\r\n      throw new Error(UtilTools.getLog('vxe.error.noTree', ['merge-footer-items']))\r\n    }\r\n    if (!XEUtils.isArray(merges)) {\r\n      merges = [merges]\r\n    }\r\n    merges.forEach(item => {\r\n      let { row, col, rowspan, colspan } = item\r\n      if (rowList && XEUtils.isNumber(row)) {\r\n        row = rowList[row]\r\n      }\r\n      if (XEUtils.isNumber(col)) {\r\n        col = visibleColumn[col]\r\n      }\r\n      if ((rowList ? row : XEUtils.isNumber(row)) && col && (rowspan || colspan)) {\r\n        rowspan = XEUtils.toNumber(rowspan) || 1\r\n        colspan = XEUtils.toNumber(colspan) || 1\r\n        if (rowspan > 1 || colspan > 1) {\r\n          const mcIndex = XEUtils.findIndexOf(mList, item => item._row === row && item._col === col)\r\n          const mergeItem = mList[mcIndex]\r\n          if (mergeItem) {\r\n            mergeItem.rowspan = rowspan\r\n            mergeItem.colspan = colspan\r\n            mergeItem._rowspan = rowspan\r\n            mergeItem._colspan = colspan\r\n          } else {\r\n            const mergeRowIndex = rowList ? rowList.indexOf(row) : row\r\n            const mergeColIndex = visibleColumn.indexOf(col)\r\n            mList.push({\r\n              row: mergeRowIndex,\r\n              col: mergeColIndex,\r\n              rowspan,\r\n              colspan,\r\n              _row: row,\r\n              _col: col,\r\n              _rowspan: rowspan,\r\n              _colspan: colspan\r\n            })\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction removeMerges (_vm, merges, mList, rowList) {\r\n  const rest = []\r\n  if (merges) {\r\n    const { treeConfig, visibleColumn } = _vm\r\n    if (treeConfig) {\r\n      throw new Error(UtilTools.getLog('vxe.error.noTree', ['merge-cells']))\r\n    }\r\n    if (!XEUtils.isArray(merges)) {\r\n      merges = [merges]\r\n    }\r\n    merges.forEach(item => {\r\n      let { row, col } = item\r\n      if (rowList && XEUtils.isNumber(row)) {\r\n        row = rowList[row]\r\n      }\r\n      if (XEUtils.isNumber(col)) {\r\n        col = visibleColumn[col]\r\n      }\r\n      const mcIndex = XEUtils.findIndexOf(mList, item => item._row === row && item._col === col)\r\n      if (mcIndex > -1) {\r\n        const rItems = mList.splice(mcIndex, 1)\r\n        rest.push(rItems[0])\r\n      }\r\n    })\r\n  }\r\n  return rest\r\n}\r\n\r\nfunction clearAllSort (_vm) {\r\n  _vm.tableFullColumn.forEach((column) => {\r\n    column.order = null\r\n  })\r\n}\r\n\r\nfunction getOrderField (_vm, column) {\r\n  const { sortBy, sortType } = column\r\n  return (row) => {\r\n    let cellValue\r\n    if (sortBy) {\r\n      cellValue = XEUtils.isFunction(sortBy) ? sortBy({ row, column }) : XEUtils.get(row, sortBy)\r\n    } else {\r\n      cellValue = _vm.getCellLabel(row, column)\r\n    }\r\n    if (!sortType || sortType === 'auto') {\r\n      return isNaN(cellValue) ? cellValue : XEUtils.toNumber(cellValue)\r\n    } else if (sortType === 'number') {\r\n      return XEUtils.toNumber(cellValue)\r\n    } else if (sortType === 'string') {\r\n      return XEUtils.toString(cellValue)\r\n    }\r\n    return cellValue\r\n  }\r\n}\r\n\r\nconst Methods = {\r\n  callSlot (slotFunc, params, h, vNodes) {\r\n    if (slotFunc) {\r\n      const { $xegrid } = this\r\n      if ($xegrid) {\r\n        return $xegrid.callSlot(slotFunc, params, h, vNodes)\r\n      }\r\n      if (XEUtils.isFunction(slotFunc)) {\r\n        return slotFunc.call(this, params, h, vNodes)\r\n      }\r\n    }\r\n    return []\r\n  },\r\n  /**\r\n   * 获取父容器元素\r\n   */\r\n  getParentElem () {\r\n    const { $el, $xegrid } = this\r\n    return $xegrid ? $xegrid.$el.parentNode : $el.parentNode\r\n  },\r\n  /**\r\n   * 获取父容器的高度\r\n   */\r\n  getParentHeight () {\r\n    const { $el, $xegrid, height } = this\r\n    const parentElem = $el.parentNode\r\n    const parentPaddingSize = height === 'auto' ? getPaddingTopBottomSize(parentElem) : 0\r\n    return Math.floor($xegrid ? $xegrid.getParentHeight() : XEUtils.toNumber(getComputedStyle(parentElem).height) - parentPaddingSize)\r\n  },\r\n  /**\r\n   * 获取需要排除的高度\r\n   * 但渲染表格高度时，需要排除工具栏或分页等相关组件的高度\r\n   * 如果存在表尾合计滚动条，则需要排除滚动条高度\r\n   */\r\n  getExcludeHeight () {\r\n    const { $xegrid } = this\r\n    return $xegrid ? $xegrid.getExcludeHeight() : 0\r\n  },\r\n  /**\r\n   * 重置表格的一切数据状态\r\n   */\r\n  clearAll () {\r\n    return clearTableAllStatus(this)\r\n  },\r\n  /**\r\n   * 同步 data 数据\r\n   * 如果用了该方法，那么组件将不再记录增删改的状态，只能自行实现对应逻辑\r\n   * 对于某些特殊的场景，比如深层树节点元素发生变动时可能会用到\r\n   */\r\n  syncData () {\r\n    return this.$nextTick().then(() => {\r\n      this.tableData = []\r\n      return this.$nextTick().then(() => this.loadTableData(this.tableFullData))\r\n    })\r\n  },\r\n  /**\r\n   * 手动处理数据\r\n   * 对于手动更改了排序、筛选...等条件后需要重新处理数据时可能会用到\r\n   */\r\n  updateData () {\r\n    return this.handleTableData(true).then(this.updateFooter).then(this.recalculate)\r\n  },\r\n  handleTableData (force) {\r\n    const { scrollYLoad, scrollYStore } = this\r\n    const fullData = force ? this.updateAfterFullData() : this.afterFullData\r\n    this.tableData = scrollYLoad ? fullData.slice(scrollYStore.startIndex, scrollYStore.endIndex) : fullData.slice(0)\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 加载表格数据\r\n   * @param {Array} datas 数据\r\n   */\r\n  loadTableData (datas) {\r\n    const { keepSource, treeConfig, editStore, sYOpts, scrollYStore, scrollXStore, lastScrollLeft, lastScrollTop, scrollYLoad: oldScrollYLoad } = this\r\n    const tableFullData = datas ? datas.slice(0) : []\r\n    const scrollYLoad = !treeConfig && sYOpts.enabled && sYOpts.gt > -1 && sYOpts.gt < tableFullData.length\r\n    scrollYStore.startIndex = 0\r\n    scrollYStore.endIndex = 1\r\n    scrollXStore.startIndex = 0\r\n    scrollXStore.endIndex = 1\r\n    editStore.insertList = []\r\n    editStore.removeList = []\r\n    // 全量数据\r\n    this.tableFullData = tableFullData\r\n    // 缓存数据\r\n    this.updateCache(true)\r\n    // 原始数据\r\n    this.tableSynchData = datas\r\n    if (keepSource) {\r\n      this.tableSourceData = XEUtils.clone(tableFullData, true)\r\n    }\r\n    this.scrollYLoad = scrollYLoad\r\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n      if (scrollYLoad) {\r\n        if (!(this.height || this.maxHeight)) {\r\n          UtilTools.error('vxe.error.reqProp', ['table.height | table.max-height | table.scroll-y={enabled: false}'])\r\n        }\r\n        if (!this.showOverflow) {\r\n          UtilTools.warn('vxe.error.reqProp', ['table.show-overflow'])\r\n        }\r\n        if (this.spanMethod) {\r\n          UtilTools.warn('vxe.error.scrollErrProp', ['table.span-method'])\r\n        }\r\n      }\r\n    }\r\n    if (this.clearCellAreas && this.mouseConfig) {\r\n      this.clearCellAreas()\r\n      this.clearCopyCellArea()\r\n    }\r\n    this.clearMergeCells()\r\n    this.clearMergeFooterItems()\r\n    this.handleTableData(true)\r\n    this.updateFooter()\r\n    return this.$nextTick().then(() => {\r\n      this.updateHeight()\r\n      this.updateStyle()\r\n    }).then(() => {\r\n      this.computeScrollLoad()\r\n    }).then(() => {\r\n      // 是否加载了数据\r\n      if (scrollYLoad) {\r\n        scrollYStore.endIndex = scrollYStore.visibleSize\r\n      }\r\n      this.handleReserveStatus()\r\n      this.checkSelectionStatus()\r\n      return new Promise(resolve => {\r\n        this.$nextTick()\r\n          .then(() => this.recalculate())\r\n          .then(() => {\r\n            // 是否变更虚拟滚动\r\n            if (oldScrollYLoad === scrollYLoad) {\r\n              restoreScroll(this, lastScrollLeft, lastScrollTop).then(resolve)\r\n            } else {\r\n              setTimeout(() => restoreScroll(this, lastScrollLeft, lastScrollTop).then(resolve))\r\n            }\r\n          })\r\n      })\r\n    })\r\n  },\r\n  /**\r\n   * 重新加载数据，不会清空表格状态\r\n   * @param {Array} datas 数据\r\n   */\r\n  loadData (datas) {\r\n    const { inited, initStatus } = this\r\n    return this.loadTableData(datas).then(() => {\r\n      this.inited = true\r\n      this.initStatus = true\r\n      if (!initStatus) {\r\n        this.handleLoadDefaults()\r\n      }\r\n      if (!inited) {\r\n        this.handleInitDefaults()\r\n      }\r\n      return this.recalculate()\r\n    })\r\n  },\r\n  /**\r\n   * 重新加载数据，会清空表格状态\r\n   * @param {Array} datas 数据\r\n   */\r\n  reloadData (datas) {\r\n    const { inited } = this\r\n    return this.clearAll()\r\n      .then(() => {\r\n        this.inited = true\r\n        this.initStatus = true\r\n        return this.loadTableData(datas)\r\n      })\r\n      .then(() => {\r\n        this.handleLoadDefaults()\r\n        if (!inited) {\r\n          this.handleInitDefaults()\r\n        }\r\n        return this.recalculate()\r\n      })\r\n  },\r\n  /**\r\n   * 局部加载行数据并恢复到初始状态\r\n   * 对于行数据需要局部更改的场景中可能会用到\r\n   * @param {Row} row 行对象\r\n   * @param {Object} record 新数据\r\n   * @param {String} field 字段名\r\n   */\r\n  reloadRow (row, record, field) {\r\n    const { keepSource, tableSourceData, tableData } = this\r\n    if (keepSource) {\r\n      const rowIndex = this.getRowIndex(row)\r\n      const oRow = tableSourceData[rowIndex]\r\n      if (oRow && row) {\r\n        if (field) {\r\n          XEUtils.set(oRow, field, XEUtils.get(record || row, field))\r\n        } else {\r\n          if (record) {\r\n            tableSourceData[rowIndex] = record\r\n            XEUtils.clear(row, undefined)\r\n            Object.assign(row, this.defineField(Object.assign({}, record)))\r\n            this.updateCache(true)\r\n          } else {\r\n            XEUtils.destructuring(oRow, XEUtils.clone(row, true))\r\n          }\r\n        }\r\n      }\r\n      this.tableData = tableData.slice(0)\r\n    } else {\r\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n        UtilTools.warn('vxe.error.reqProp', ['keep-source'])\r\n      }\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 加载列配置\r\n   * 对于表格列需要重载、局部递增场景下可能会用到\r\n   * @param {ColumnInfo} columns 列配置\r\n   */\r\n  loadColumn (columns) {\r\n    const collectColumn = XEUtils.mapTree(columns, column => Cell.createColumn(this, column), { children: 'children' })\r\n    this.handleColumn(collectColumn)\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 加载列配置并恢复到初始状态\r\n   * 对于表格列需要重载、局部递增场景下可能会用到\r\n   * @param {ColumnInfo} columns 列配置\r\n   */\r\n  reloadColumn (columns) {\r\n    return this.clearAll().then(() => {\r\n      return this.loadColumn(columns)\r\n    })\r\n  },\r\n  handleColumn (collectColumn) {\r\n    this.collectColumn = collectColumn\r\n    const tableFullColumn = getColumnList(collectColumn)\r\n    this.tableFullColumn = tableFullColumn\r\n    this.cacheColumnMap()\r\n    this.restoreCustomStorage()\r\n    this.parseColumns().then(() => {\r\n      if (this.scrollXLoad) {\r\n        this.loadScrollXData(true)\r\n      }\r\n    })\r\n    this.clearMergeCells()\r\n    this.clearMergeFooterItems()\r\n    this.handleTableData(true)\r\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n      if ((this.scrollXLoad || this.scrollYLoad) && this.expandColumn) {\r\n        UtilTools.warn('vxe.error.scrollErrProp', ['column.type=expand'])\r\n      }\r\n    }\r\n    this.$nextTick(() => {\r\n      if (this.$toolbar) {\r\n        this.$toolbar.syncUpdate({ collectColumn, $table: this })\r\n      }\r\n    })\r\n  },\r\n  /**\r\n   * 更新数据行的 Map\r\n   * 牺牲数据组装的耗时，用来换取使用过程中的流畅\r\n   */\r\n  updateCache (source) {\r\n    const { treeConfig, treeOpts, tableFullData, fullDataRowMap, fullAllDataRowMap } = this\r\n    let { fullDataRowIdData, fullAllDataRowIdData } = this\r\n    const rowkey = getRowkey(this)\r\n    const isLazy = treeConfig && treeOpts.lazy\r\n    const handleCache = (row, index, items, path, parent) => {\r\n      let rowid = getRowid(this, row)\r\n      if (!rowid) {\r\n        rowid = getRowUniqueId()\r\n        XEUtils.set(row, rowkey, rowid)\r\n      }\r\n      if (isLazy && row[treeOpts.hasChild] && XEUtils.isUndefined(row[treeOpts.children])) {\r\n        row[treeOpts.children] = null\r\n      }\r\n      const rest = { row, rowid, index: treeConfig && parent ? -1 : index, items, parent }\r\n      if (source) {\r\n        fullDataRowIdData[rowid] = rest\r\n        fullDataRowMap.set(row, rest)\r\n      }\r\n      fullAllDataRowIdData[rowid] = rest\r\n      fullAllDataRowMap.set(row, rest)\r\n    }\r\n    if (source) {\r\n      fullDataRowIdData = this.fullDataRowIdData = {}\r\n      fullDataRowMap.clear()\r\n    }\r\n    fullAllDataRowIdData = this.fullAllDataRowIdData = {}\r\n    fullAllDataRowMap.clear()\r\n    if (treeConfig) {\r\n      XEUtils.eachTree(tableFullData, handleCache, treeOpts)\r\n    } else {\r\n      tableFullData.forEach(handleCache)\r\n    }\r\n  },\r\n  loadChildren (row, childRecords) {\r\n    return this.createData(childRecords).then((rows) => {\r\n      const { keepSource, tableSourceData, treeOpts, fullDataRowIdData, fullDataRowMap, fullAllDataRowMap, fullAllDataRowIdData } = this\r\n      const { children } = treeOpts\r\n      if (keepSource) {\r\n        const rowid = getRowid(this, row)\r\n        const matchObj = XEUtils.findTree(tableSourceData, (item) => rowid === getRowid(this, item), treeOpts)\r\n        if (matchObj) {\r\n          matchObj.item[children] = XEUtils.clone(rows, true)\r\n        }\r\n      }\r\n      XEUtils.eachTree(rows, (childRow, index, items, path, parent) => {\r\n        const rowid = getRowid(this, childRow)\r\n        const rest = { row: childRow, rowid, index: -1, items, parent }\r\n        fullDataRowIdData[rowid] = rest\r\n        fullDataRowMap.set(childRow, rest)\r\n        fullAllDataRowIdData[rowid] = rest\r\n        fullAllDataRowMap.set(childRow, rest)\r\n      }, treeOpts)\r\n      row[children] = rows\r\n      return rows\r\n    })\r\n  },\r\n  /**\r\n   * 更新数据列的 Map\r\n   * 牺牲数据组装的耗时，用来换取使用过程中的流畅\r\n   */\r\n  cacheColumnMap () {\r\n    const { tableFullColumn, collectColumn, fullColumnMap, showOverflow } = this\r\n    const fullColumnIdData = this.fullColumnIdData = {}\r\n    const fullColumnFieldData = this.fullColumnFieldData = {}\r\n    const isGroup = collectColumn.some(hasChildrenList)\r\n    let isAllOverflow = !!showOverflow\r\n    let expandColumn\r\n    let treeNodeColumn\r\n    let checkboxColumn\r\n    let radioColumn\r\n    let hasFixed\r\n    const handleFunc = (column, index, items, path, parent) => {\r\n      const { id: colid, property, fixed, type, treeNode } = column\r\n      const rest = { column, colid, index, items, parent }\r\n      if (property) {\r\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n          if (fullColumnFieldData[property]) {\r\n            UtilTools.warn('vxe.error.colRepet', ['field', property])\r\n          }\r\n        }\r\n        fullColumnFieldData[property] = rest\r\n      }\r\n      if (!hasFixed && fixed) {\r\n        hasFixed = fixed\r\n      }\r\n      if (treeNode) {\r\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n          if (treeNodeColumn) {\r\n            UtilTools.warn('vxe.error.colRepet', ['tree-node', treeNode])\r\n          }\r\n        }\r\n        if (!treeNodeColumn) {\r\n          treeNodeColumn = column\r\n        }\r\n      } else if (type === 'expand') {\r\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n          if (expandColumn) {\r\n            UtilTools.warn('vxe.error.colRepet', ['type', type])\r\n          }\r\n        }\r\n        if (!expandColumn) {\r\n          expandColumn = column\r\n        }\r\n      }\r\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n        if (type === 'checkbox') {\r\n          if (checkboxColumn) {\r\n            UtilTools.warn('vxe.error.colRepet', ['type', type])\r\n          }\r\n          if (!checkboxColumn) {\r\n            checkboxColumn = column\r\n          }\r\n        } else if (type === 'radio') {\r\n          if (radioColumn) {\r\n            UtilTools.warn('vxe.error.colRepet', ['type', type])\r\n          }\r\n          if (!radioColumn) {\r\n            radioColumn = column\r\n          }\r\n        }\r\n      }\r\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n        if (this.showOverflow && column.showOverflow === false) {\r\n          UtilTools.warn('vxe.error.errConflicts', [`table.show-overflow=${this.showOverflow}`, `column.show-overflow=${column.showOverflow}`])\r\n        }\r\n        if (this.showHeaderOverflow && column.showHeaderOverflow === false) {\r\n          UtilTools.warn('vxe.error.errConflicts', [`table.show-header-overflow=${this.showHeaderOverflow}`, `column.show-header-overflow=${column.showHeaderOverflow}`])\r\n        }\r\n        if (this.showFooterOverflow && column.showFooterOverflow === false) {\r\n          UtilTools.warn('vxe.error.errConflicts', [`table.show-footer-overflow=${this.showFooterOverflow}`, `column.show-footer-overflow=${column.showFooterOverflow}`])\r\n        }\r\n      }\r\n      if (isAllOverflow && column.showOverflow === false) {\r\n        isAllOverflow = false\r\n      }\r\n      if (fullColumnIdData[colid]) {\r\n        UtilTools.error('vxe.error.colRepet', ['colId', colid])\r\n      }\r\n      fullColumnIdData[colid] = rest\r\n      fullColumnMap.set(column, rest)\r\n    }\r\n    fullColumnMap.clear()\r\n    if (isGroup) {\r\n      XEUtils.eachTree(collectColumn, (column, index, items, path, parent, nodes) => {\r\n        column.level = nodes.length\r\n        handleFunc(column, index, items, path, parent)\r\n      })\r\n    } else {\r\n      tableFullColumn.forEach(handleFunc)\r\n    }\r\n\r\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n      if (expandColumn && this.mouseOpts.area) {\r\n        UtilTools.error('vxe.error.errConflicts', ['mouse-config.area', 'column.type=expand'])\r\n      }\r\n    }\r\n\r\n    this.isGroup = isGroup\r\n    this.treeNodeColumn = treeNodeColumn\r\n    this.expandColumn = expandColumn\r\n    this.isAllOverflow = isAllOverflow\r\n  },\r\n  /**\r\n   * 根据 tr 元素获取对应的 row 信息\r\n   * @param {Element} tr 元素\r\n   */\r\n  getRowNode (tr) {\r\n    if (tr) {\r\n      const { fullAllDataRowIdData } = this\r\n      const rowid = tr.getAttribute('rowid')\r\n      const rest = fullAllDataRowIdData[rowid]\r\n      if (rest) {\r\n        return { rowid: rest.rowid, item: rest.row, index: rest.index, items: rest.items, parent: rest.parent }\r\n      }\r\n    }\r\n    return null\r\n  },\r\n  /**\r\n   * 根据 th/td 元素获取对应的 column 信息\r\n   * @param {Element} cell 元素\r\n   */\r\n  getColumnNode (cell) {\r\n    if (cell) {\r\n      const { fullColumnIdData } = this\r\n      const colid = cell.getAttribute('colid')\r\n      const rest = fullColumnIdData[colid]\r\n      if (rest) {\r\n        return { colid: rest.colid, item: rest.column, index: rest.index, items: rest.items, parent: rest.parent }\r\n      }\r\n    }\r\n    return null\r\n  },\r\n  /**\r\n   * 根据 row 获取相对于 data 中的索引\r\n   * @param {Row} row 行对象\r\n   */\r\n  getRowIndex (row) {\r\n    return this.fullDataRowMap.has(row) ? this.fullDataRowMap.get(row).index : -1\r\n  },\r\n  /**\r\n   * 根据 row 获取相对于当前数据中的索引\r\n   * @param {Row} row 行对象\r\n   */\r\n  getVTRowIndex (row) {\r\n    return this.afterFullData.indexOf(row)\r\n  },\r\n  // 在 v3 中废弃\r\n  _getRowIndex (row) {\r\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n      UtilTools.warn('vxe.error.delFunc', ['_getRowIndex', 'getVTRowIndex'])\r\n    }\r\n    return this.getVTRowIndex(row)\r\n  },\r\n  /**\r\n   * 根据 row 获取渲染中的虚拟索引\r\n   * @param {Row} row 行对象\r\n   */\r\n  getVMRowIndex (row) {\r\n    return this.tableData.indexOf(row)\r\n  },\r\n  // 在 v3 中废弃\r\n  $getRowIndex (row) {\r\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n      UtilTools.warn('vxe.error.delFunc', ['$getRowIndex', 'getVMRowIndex'])\r\n    }\r\n    return this.getVMRowIndex(row)\r\n  },\r\n  /**\r\n   * 根据 column 获取相对于 columns 中的索引\r\n   * @param {ColumnInfo} column 列配置\r\n   */\r\n  getColumnIndex (column) {\r\n    return this.fullColumnMap.has(column) ? this.fullColumnMap.get(column).index : -1\r\n  },\r\n  /**\r\n   * 根据 column 获取相对于当前表格列中的索引\r\n   * @param {ColumnInfo} column 列配置\r\n   */\r\n  getVTColumnIndex (column) {\r\n    return this.visibleColumn.indexOf(column)\r\n  },\r\n  // 在 v3 中废弃\r\n  _getColumnIndex (column) {\r\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n      UtilTools.warn('vxe.error.delFunc', ['_getColumnIndex', 'getVTColumnIndex'])\r\n    }\r\n    return this.getVTColumnIndex(column)\r\n  },\r\n  /**\r\n   * 根据 column 获取渲染中的虚拟索引\r\n   * @param {ColumnInfo} column 列配置\r\n   */\r\n  getVMColumnIndex (column) {\r\n    return this.tableColumn.indexOf(column)\r\n  },\r\n  // 在 v3 中废弃\r\n  $getColumnIndex (column) {\r\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n      UtilTools.warn('vxe.error.delFunc', ['$getColumnIndex', 'getVMColumnIndex'])\r\n    }\r\n    return this.getVMColumnIndex(column)\r\n  },\r\n  /**\r\n   * 判断是否为索引列\r\n   * @param {ColumnInfo} column 列配置\r\n   */\r\n  isSeqColumn (column) {\r\n    return column && (column.type === 'seq' || column.type === 'index');\r\n  },\r\n  /**\r\n   * 定义行数据中的列属性，如果不存在则定义\r\n   * @param {Row} record 行数据\r\n   */\r\n  defineField (record) {\r\n    const { radioOpts, checkboxOpts, treeConfig, treeOpts, expandOpts } = this\r\n    const rowkey = getRowkey(this)\r\n    this.visibleColumn.forEach(({ property, editRender }) => {\r\n      if (property && !XEUtils.has(record, property)) {\r\n        XEUtils.set(record, property, editRender && !XEUtils.isUndefined(editRender.defaultValue) ? editRender.defaultValue : null)\r\n      }\r\n    })\r\n    const ohterFields = [radioOpts.labelField, checkboxOpts.checkField, checkboxOpts.labelField, expandOpts.labelField]\r\n    ohterFields.forEach((key) => {\r\n      if (key && !XEUtils.get(record, key)) {\r\n        XEUtils.set(record, key, null)\r\n      }\r\n    })\r\n    if (treeConfig && treeOpts.lazy && XEUtils.isUndefined(record[treeOpts.children])) {\r\n      record[treeOpts.children] = null\r\n    }\r\n    // 必须有行数据的唯一主键，可以自行设置；也可以默认生成一个随机数\r\n    if (!XEUtils.get(record, rowkey)) {\r\n      XEUtils.set(record, rowkey, getRowUniqueId())\r\n    }\r\n    return record\r\n  },\r\n  /**\r\n   * 创建 data 对象\r\n   * 对于某些特殊场景可能会用到，会自动对数据的字段名进行检测，如果不存在就自动定义\r\n   * @param {Array} records 新数据\r\n   */\r\n  createData (records) {\r\n    const { treeConfig, treeOpts } = this\r\n    const handleRrecord = record => this.defineField(Object.assign({}, record))\r\n    const rows = treeConfig ? XEUtils.mapTree(records, handleRrecord, treeOpts) : records.map(handleRrecord)\r\n    return this.$nextTick().then(() => rows)\r\n  },\r\n  /**\r\n   * 创建 Row|Rows 对象\r\n   * 对于某些特殊场景需要对数据进行手动插入时可能会用到\r\n   * @param {Array/Object} records 新数据\r\n   */\r\n  createRow (records) {\r\n    const isArr = XEUtils.isArray(records)\r\n    if (!isArr) {\r\n      records = [records]\r\n    }\r\n    return this.$nextTick().then(() => this.createData(records).then(rows => isArr ? rows : rows[0]))\r\n  },\r\n  /**\r\n   * 还原数据\r\n   * 如果不传任何参数，则还原整个表格\r\n   * 如果传 row 则还原一行\r\n   * 如果传 rows 则还原多行\r\n   * 如果还额外传了 field 则还原指定的单元格数据\r\n   */\r\n  revertData (rows, field) {\r\n    const { keepSource, tableSourceData, treeConfig } = this\r\n    if (!keepSource) {\r\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n        UtilTools.warn('vxe.error.reqProp', ['keep-source'])\r\n      }\r\n      return this.$nextTick()\r\n    }\r\n    let targetRows = rows\r\n    if (rows) {\r\n      if (!XEUtils.isArray(rows)) {\r\n        targetRows = [rows]\r\n      }\r\n    } else {\r\n      targetRows = XEUtils.toArray(this.getUpdateRecords())\r\n    }\r\n    if (targetRows.length) {\r\n      targetRows.forEach(row => {\r\n        if (!this.isInsertByRow(row)) {\r\n          const rowIndex = this.getRowIndex(row)\r\n          if (treeConfig && rowIndex === -1) {\r\n            throw new Error(UtilTools.getLog('vxe.error.noTree', ['revertData']))\r\n          }\r\n          const oRow = tableSourceData[rowIndex]\r\n          if (oRow && row) {\r\n            if (field) {\r\n              XEUtils.set(row, field, XEUtils.clone(XEUtils.get(oRow, field), true))\r\n            } else {\r\n              XEUtils.destructuring(row, XEUtils.clone(oRow, true))\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n    if (rows) {\r\n      return this.$nextTick()\r\n    }\r\n    return this.reloadData(tableSourceData)\r\n  },\r\n  /**\r\n   * 清空单元格内容\r\n   * 如果不创参数，则清空整个表格内容\r\n   * 如果传 row 则清空一行内容\r\n   * 如果传 rows 则清空多行内容\r\n   * 如果还额外传了 field 则清空指定单元格内容\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {String} field 字段名\r\n   */\r\n  clearData (rows, field) {\r\n    const { tableFullData, visibleColumn } = this\r\n    if (!arguments.length) {\r\n      rows = tableFullData\r\n    } else if (rows && !XEUtils.isArray(rows)) {\r\n      rows = [rows]\r\n    }\r\n    if (field) {\r\n      rows.forEach(row => XEUtils.set(row, field, null))\r\n    } else {\r\n      rows.forEach(row => {\r\n        visibleColumn.forEach(column => {\r\n          if (column.property) {\r\n            setCellValue(row, column, null)\r\n          }\r\n        })\r\n      })\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 检查是否为临时行数据\r\n   * @param {Row} row 行对象\r\n   */\r\n  isInsertByRow (row) {\r\n    return this.editStore.insertList.indexOf(row) > -1\r\n  },\r\n  /**\r\n   * 检查行或列数据是否发生改变\r\n   * @param {Row} row 行对象\r\n   * @param {String} field 字段名\r\n   */\r\n  isUpdateByRow (row, field) {\r\n    const { visibleColumn, keepSource, treeConfig, treeOpts, tableSourceData, fullDataRowIdData } = this\r\n    if (keepSource) {\r\n      let oRow, property\r\n      const rowid = getRowid(this, row)\r\n      // 新增的数据不需要检测\r\n      if (!fullDataRowIdData[rowid]) {\r\n        return false\r\n      }\r\n      if (treeConfig) {\r\n        const children = treeOpts.children\r\n        const matchObj = XEUtils.findTree(tableSourceData, item => rowid === getRowid(this, item), treeOpts)\r\n        row = Object.assign({}, row, { [children]: null })\r\n        if (matchObj) {\r\n          oRow = Object.assign({}, matchObj.item, { [children]: null })\r\n        }\r\n      } else {\r\n        const oRowIndex = fullDataRowIdData[rowid].index\r\n        oRow = tableSourceData[oRowIndex]\r\n      }\r\n      if (oRow) {\r\n        if (arguments.length > 1) {\r\n          return !eqCellValue(oRow, row, field)\r\n        }\r\n        for (let index = 0, len = visibleColumn.length; index < len; index++) {\r\n          property = visibleColumn[index].property\r\n          if (property && !eqCellValue(oRow, row, property)) {\r\n            return true\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  },\r\n  /**\r\n   * 获取表格的可视列，也可以指定索引获取列\r\n   * @param {Number} columnIndex 索引\r\n   */\r\n  getColumns (columnIndex) {\r\n    const columns = this.visibleColumn\r\n    return XEUtils.isUndefined(columnIndex) ? columns.slice(0) : columns[columnIndex]\r\n  },\r\n  /**\r\n   * 根据列的唯一主键获取列\r\n   * @param {String} colid 列主键\r\n   */\r\n  getColumnById (colid) {\r\n    const fullColumnIdData = this.fullColumnIdData\r\n    return fullColumnIdData[colid] ? fullColumnIdData[colid].column : null\r\n  },\r\n  /**\r\n   * 根据列的字段名获取列\r\n   * @param {String} field 字段名\r\n   */\r\n  getColumnByField (field) {\r\n    const fullColumnFieldData = this.fullColumnFieldData\r\n    return fullColumnFieldData[field] ? fullColumnFieldData[field].column : null\r\n  },\r\n  /**\r\n   * 获取当前表格的列\r\n   * 收集到的全量列、全量表头列、处理条件之后的全量表头列、当前渲染中的表头列\r\n   */\r\n  getTableColumn () {\r\n    return {\r\n      collectColumn: this.collectColumn.slice(0),\r\n      fullColumn: this.tableFullColumn.slice(0),\r\n      visibleColumn: this.visibleColumn.slice(0),\r\n      tableColumn: this.tableColumn.slice(0)\r\n    }\r\n  },\r\n  /**\r\n   * 获取数据，和 data 的行为一致，也可以指定索引获取数据\r\n   */\r\n  getData (rowIndex) {\r\n    const tableSynchData = this.data || this.tableSynchData\r\n    return XEUtils.isUndefined(rowIndex) ? tableSynchData.slice(0) : tableSynchData[rowIndex]\r\n  },\r\n  /**\r\n   * 用于多选行，获取已选中的数据\r\n   */\r\n  getCheckboxRecords () {\r\n    const { tableFullData, treeConfig, treeOpts, checkboxOpts } = this\r\n    const { checkField: property } = checkboxOpts\r\n    let rowList = []\r\n    if (property) {\r\n      if (treeConfig) {\r\n        rowList = XEUtils.filterTree(tableFullData, row => XEUtils.get(row, property), treeOpts)\r\n      } else {\r\n        rowList = tableFullData.filter(row => XEUtils.get(row, property))\r\n      }\r\n    } else {\r\n      const { selection } = this\r\n      if (treeConfig) {\r\n        rowList = XEUtils.filterTree(tableFullData, row => selection.indexOf(row) > -1, treeOpts)\r\n      } else {\r\n        rowList = tableFullData.filter(row => selection.indexOf(row) > -1)\r\n      }\r\n    }\r\n    return rowList\r\n  },\r\n  /**\r\n   * 获取处理后全量的表格数据\r\n   * 如果存在筛选条件，继续处理\r\n   */\r\n  updateAfterFullData () {\r\n    const { tableFullColumn, tableFullData, filterOpts, sortOpts } = this\r\n    const { remote: allRemoteFilter, filterMethod: allFilterMethod } = filterOpts\r\n    const { remote: allRemoteSort, sortMethod: allSortMethod, multiple: sortMultiple } = sortOpts\r\n    let tableData = tableFullData.slice(0)\r\n    const filterColumns = []\r\n    const orderColumns = []\r\n    tableFullColumn.forEach(column => {\r\n      const { sortable, order, filters } = column\r\n      if (!allRemoteFilter && filters && filters.length) {\r\n        const valueList = []\r\n        const itemList = []\r\n        filters.forEach((item) => {\r\n          if (item.checked) {\r\n            itemList.push(item)\r\n            valueList.push(item.value)\r\n          }\r\n        })\r\n        if (itemList.length) {\r\n          filterColumns.push({ column, valueList, itemList })\r\n        }\r\n      }\r\n      if (!allRemoteSort && sortable && order) {\r\n        orderColumns.push({ column, property: column.property, order })\r\n      }\r\n    })\r\n    if (filterColumns.length) {\r\n      tableData = tableData.filter(row => {\r\n        return filterColumns.every(({ column, valueList, itemList }) => {\r\n          if (valueList.length && !allRemoteFilter) {\r\n            const { filterMethod, filterRender } = column\r\n            const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null\r\n            const compFilterMethod = compConf && compConf.renderFilter ? compConf.filterMethod : null\r\n            const cellValue = UtilTools.getCellValue(row, column)\r\n            if (filterMethod) {\r\n              return itemList.some((item) => filterMethod({ value: item.value, option: item, cellValue, row, column, $table: this }))\r\n            } else if (compFilterMethod) {\r\n              return itemList.some((item) => compFilterMethod({ value: item.value, option: item, cellValue, row, column, $table: this }))\r\n            } else if (allFilterMethod) {\r\n              return allFilterMethod({ options: itemList, values: valueList, cellValue, row, column })\r\n            }\r\n            return valueList.indexOf(XEUtils.get(row, column.property)) > -1\r\n          }\r\n          return true\r\n        })\r\n      })\r\n    }\r\n    const firstOrderColumn = orderColumns[0]\r\n    if (!allRemoteSort && firstOrderColumn) {\r\n      if (allSortMethod) {\r\n        const sortRests = allSortMethod({ data: tableData, column: firstOrderColumn.column, property: firstOrderColumn.property, order: firstOrderColumn.order, sortList: orderColumns, $table: this })\r\n        tableData = XEUtils.isArray(sortRests) ? sortRests : tableData\r\n      } else {\r\n        // 兼容 v4\r\n        if (sortMultiple) {\r\n          tableData = XEUtils.orderBy(tableData, orderColumns.map(({ column, order }) => [getOrderField(this, column), order]))\r\n        } else {\r\n            let column = firstOrderColumn.column, rest = null;\r\n            if (column.sortMethod) {\r\n          \t  rest = tableData.sort(column.sortMethod);\r\n            } else if (column.sortBy) {\r\n          \t  rest = arraySort(tableData, column.sortBy, true);\r\n            } else if (column.formatter && column.sortByFormatter) {\r\n          \t  let params = {$table: this, column:column};\r\n          \t  rest = tableData.sort((row1,row2)=>{\r\n          \t\t  params.row = row1; row1 = this.getCellLabel(row1, column, params);\r\n          \t\t  params.row = row2; row2 = this.getCellLabel(row2, column, params);\r\n          \t\t  return compare(row1, row2);\r\n          \t  });\r\n            } else if (column.property) {\r\n          \t  rest = arraySort(tableData, column.property, true);\r\n            } else {\r\n          \t  rest = tableData;\r\n            }\r\n            tableData = column.order === 'desc' ? rest.reverse() : rest\r\n        \t\r\n//        \t\r\n//          // 兼容 v2，在 v4 中废弃， sortBy 不能为数组\r\n//          let sortByConfs\r\n//          if (XEUtils.isArray(firstOrderColumn.sortBy)) {\r\n//            sortByConfs = firstOrderColumn.sortBy.map(item => [item, firstOrderColumn.order])\r\n//          }\r\n//          tableData = XEUtils.orderBy(tableData, sortByConfs || [firstOrderColumn].map(({ column, order }) => [getOrderField(this, column), order]))\r\n        }\r\n      }\r\n    }\r\n    this.afterFullData = tableData\r\n    return tableData\r\n  },\r\n  /**\r\n   * 根据行的唯一主键获取行\r\n   * @param {String/Number} rowid 行主键\r\n   */\r\n  getRowById (rowid) {\r\n    const fullDataRowIdData = this.fullDataRowIdData\r\n    return fullDataRowIdData[rowid] ? fullDataRowIdData[rowid].row : null\r\n  },\r\n  /**\r\n   * 根据行获取行的唯一主键\r\n   * @param {Row} row 行对象\r\n   */\r\n  getRowid (row) {\r\n    const fullAllDataRowMap = this.fullAllDataRowMap\r\n    return fullAllDataRowMap.has(row) ? fullAllDataRowMap.get(row).rowid : null\r\n  },\r\n  /**\r\n   * 获取处理后的表格数据\r\n   * 如果存在筛选条件，继续处理\r\n   * 如果存在排序，继续处理\r\n   */\r\n  getTableData () {\r\n    const { tableFullData, afterFullData, tableData, footerTableData } = this\r\n    return {\r\n      fullData: tableFullData.slice(0),\r\n      visibleData: afterFullData.slice(0),\r\n      tableData: tableData.slice(0),\r\n      footerData: footerTableData.slice(0)\r\n    }\r\n  },\r\n  /**\r\n   * 处理数据加载默认行为\r\n   * 默认执行一次，除非被重置\r\n   */\r\n  handleLoadDefaults () {\r\n    if (this.checkboxConfig) {\r\n      this.handleDefaultSelectionChecked()\r\n    }\r\n    if (this.radioConfig) {\r\n      this.handleDefaultRadioChecked()\r\n    }\r\n    if (this.expandConfig) {\r\n      this.handleDefaultRowExpand()\r\n    }\r\n    if (this.treeConfig) {\r\n      this.handleDefaultTreeExpand()\r\n    }\r\n    if (this.mergeCells) {\r\n      this.handleDefaultMergeCells()\r\n    }\r\n    if (this.mergeFooterItems) {\r\n      this.handleDefaultMergeFooterItems()\r\n    }\r\n    this.$nextTick(() => setTimeout(this.recalculate))\r\n  },\r\n  /**\r\n   * 处理初始化的默认行为\r\n   * 只会执行一次\r\n   */\r\n  handleInitDefaults () {\r\n    const { sortConfig } = this\r\n    if (sortConfig) {\r\n      this.handleDefaultSort()\r\n    }\r\n  },\r\n  /**\r\n   * 隐藏指定列\r\n   */\r\n  hideColumn (fieldOrColumn) {\r\n    const column = handleFieldOrColumn(this, fieldOrColumn)\r\n    if (column) {\r\n      column.visible = false\r\n    }\r\n    return this.handleCustom()\r\n  },\r\n  /**\r\n   * 显示指定列\r\n   */\r\n  showColumn (fieldOrColumn) {\r\n    const column = handleFieldOrColumn(this, fieldOrColumn)\r\n    if (column) {\r\n      column.visible = true\r\n    }\r\n    return this.handleCustom()\r\n  },\r\n  /**\r\n   * 手动重置列的显示隐藏、列宽拖动的状态；\r\n   * 如果为 true 则重置所有状态\r\n   * 如果已关联工具栏，则会同步更新\r\n   */\r\n  resetColumn (options) {\r\n    const { customOpts } = this\r\n    const { checkMethod } = customOpts\r\n    const opts = Object.assign({ visible: true, resizable: options === true }, options)\r\n    this.tableFullColumn.forEach(column => {\r\n      if (opts.resizable) {\r\n        column.resizeWidth = 0\r\n      }\r\n      if (!checkMethod || checkMethod({ column })) {\r\n        column.visible = column.defaultVisible\r\n      }\r\n    })\r\n    if (opts.resizable) {\r\n      this.saveCustomResizable(true)\r\n    }\r\n    return this.handleCustom()\r\n  },\r\n  handleCustom () {\r\n    this.saveCustomVisible()\r\n    this.analyColumnWidth()\r\n    return this.refreshColumn()\r\n  },\r\n  /**\r\n   * 还原自定义列操作状态\r\n   */\r\n  restoreCustomStorage () {\r\n    const { id, collectColumn, customConfig, customOpts } = this\r\n    const { storage } = customOpts\r\n    const isAllStorage = customOpts.storage === true\r\n    const isResizable = isAllStorage || (storage && storage.resizable)\r\n    const isVisible = isAllStorage || (storage && storage.visible)\r\n    if (customConfig && (isResizable || isVisible)) {\r\n      const customMap = {}\r\n      if (!id) {\r\n        UtilTools.error('vxe.error.reqProp', ['id'])\r\n        return\r\n      }\r\n      if (isResizable) {\r\n        const columnWidthStorage = getCustomStorageMap(resizableStorageKey)[id]\r\n        if (columnWidthStorage) {\r\n          XEUtils.each(columnWidthStorage, (resizeWidth, field) => {\r\n            customMap[field] = { field, resizeWidth }\r\n          })\r\n        }\r\n      }\r\n      if (isVisible) {\r\n        const columnVisibleStorage = getCustomStorageMap(visibleStorageKey)[id]\r\n        if (columnVisibleStorage) {\r\n          const colVisibles = columnVisibleStorage.split('|')\r\n          const colHides = colVisibles[0] ? colVisibles[0].split(',') : []\r\n          const colShows = colVisibles[1] ? colVisibles[1].split(',') : []\r\n          colHides.forEach(field => {\r\n            if (customMap[field]) {\r\n              customMap[field].visible = false\r\n            } else {\r\n              customMap[field] = { field, visible: false }\r\n            }\r\n          })\r\n          colShows.forEach(field => {\r\n            if (customMap[field]) {\r\n              customMap[field].visible = true\r\n            } else {\r\n              customMap[field] = { field, visible: true }\r\n            }\r\n          })\r\n        }\r\n      }\r\n      const keyMap = {}\r\n      XEUtils.eachTree(collectColumn, column => {\r\n        const colKey = column.getKey()\r\n        if (colKey) {\r\n          keyMap[colKey] = column\r\n        }\r\n      })\r\n      XEUtils.each(customMap, ({ visible, resizeWidth }, field) => {\r\n        const column = keyMap[field]\r\n        if (column) {\r\n          if (XEUtils.isNumber(resizeWidth)) {\r\n            column.resizeWidth = resizeWidth\r\n          }\r\n          if (XEUtils.isBoolean(visible)) {\r\n            column.visible = visible\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n  saveCustomVisible () {\r\n    const { id, collectColumn, customConfig, customOpts } = this\r\n    const { checkMethod, storage } = customOpts\r\n    const isAllStorage = customOpts.storage === true\r\n    const isVisible = isAllStorage || (storage && storage.visible)\r\n    if (customConfig && isVisible) {\r\n      const columnVisibleStorageMap = getCustomStorageMap(visibleStorageKey)\r\n      const colHides = []\r\n      const colShows = []\r\n      if (!id) {\r\n        UtilTools.error('vxe.error.reqProp', ['id'])\r\n        return\r\n      }\r\n      XEUtils.eachTree(collectColumn, column => {\r\n        if (!checkMethod || checkMethod({ column })) {\r\n          if (!column.visible && column.defaultVisible) {\r\n            const colKey = column.getKey()\r\n            if (colKey) {\r\n              colHides.push(colKey)\r\n            }\r\n          } else if (column.visible && !column.defaultVisible) {\r\n            const colKey = column.getKey()\r\n            if (colKey) {\r\n              colShows.push(colKey)\r\n            }\r\n          }\r\n        }\r\n      })\r\n      columnVisibleStorageMap[id] = [colHides.join(',')].concat(colShows.length ? [colShows.join(',')] : []).join('|') || undefined\r\n      localStorage.setItem(visibleStorageKey, XEUtils.toJSONString(columnVisibleStorageMap))\r\n    }\r\n  },\r\n  saveCustomResizable (isReset) {\r\n    const { id, collectColumn, customConfig, customOpts } = this\r\n    const { storage } = customOpts\r\n    const isAllStorage = customOpts.storage === true\r\n    const isResizable = isAllStorage || (storage && storage.resizable)\r\n    if (customConfig && isResizable) {\r\n      const columnWidthStorageMap = getCustomStorageMap(resizableStorageKey)\r\n      let columnWidthStorage\r\n      if (!id) {\r\n        UtilTools.error('vxe.error.reqProp', ['id'])\r\n        return\r\n      }\r\n      if (!isReset) {\r\n        columnWidthStorage = XEUtils.isPlainObject(columnWidthStorageMap[id]) ? columnWidthStorageMap[id] : {}\r\n        XEUtils.eachTree(collectColumn, column => {\r\n          if (column.resizeWidth) {\r\n            const colKey = column.getKey()\r\n            if (colKey) {\r\n              columnWidthStorage[colKey] = column.renderWidth\r\n            }\r\n          }\r\n        })\r\n      }\r\n      columnWidthStorageMap[id] = XEUtils.isEmpty(columnWidthStorage) ? undefined : columnWidthStorage\r\n      localStorage.setItem(resizableStorageKey, XEUtils.toJSONString(columnWidthStorageMap))\r\n    }\r\n  },\r\n  /**\r\n   * 刷新列配置\r\n   */\r\n  refreshColumn () {\r\n    return this.parseColumns().then(() => {\r\n      return this.refreshScroll()\r\n    }).then(() => {\r\n      return this.recalculate()\r\n    })\r\n  },\r\n  /**\r\n   * 刷新列信息\r\n   * 将固定的列左边、右边分别靠边\r\n   */\r\n  parseColumns () {\r\n    const leftList = []\r\n    const centerList = []\r\n    const rightList = []\r\n    const { collectColumn, tableFullColumn, isGroup, columnStore, sXOpts, scrollXStore } = this\r\n    // 如果是分组表头，如果子列全部被隐藏，则根列也隐藏\r\n    if (isGroup) {\r\n      const leftGroupList = []\r\n      const centerGroupList = []\r\n      const rightGroupList = []\r\n      XEUtils.eachTree(collectColumn, (column, index, items, path, parent) => {\r\n        const isColGroup = hasChildrenList(column)\r\n        // 如果是分组，必须按组设置固定列，不允许给子列设置固定\r\n        if (parent && parent.fixed) {\r\n          column.fixed = parent.fixed\r\n        }\r\n        if (parent && column.fixed !== parent.fixed) {\r\n          UtilTools.error('vxe.error.groupFixed')\r\n        }\r\n        if (isColGroup) {\r\n          column.visible = !!XEUtils.findTree(column.children, subColumn => hasChildrenList(subColumn) ? null : subColumn.visible)\r\n        } else if (column.visible) {\r\n          if (column.fixed === 'left') {\r\n            leftList.push(column)\r\n          } else if (column.fixed === 'right') {\r\n            rightList.push(column)\r\n          } else {\r\n            centerList.push(column)\r\n          }\r\n        }\r\n      })\r\n      collectColumn.forEach((column) => {\r\n        if (column.visible) {\r\n          if (column.fixed === 'left') {\r\n            leftGroupList.push(column)\r\n          } else if (column.fixed === 'right') {\r\n            rightGroupList.push(column)\r\n          } else {\r\n            centerGroupList.push(column)\r\n          }\r\n        }\r\n      })\r\n      this.tableGroupColumn = leftGroupList.concat(centerGroupList).concat(rightGroupList)\r\n    } else {\r\n      // 重新分配列\r\n      tableFullColumn.forEach((column) => {\r\n        if (column.visible) {\r\n          if (column.fixed === 'left') {\r\n            leftList.push(column)\r\n          } else if (column.fixed === 'right') {\r\n            rightList.push(column)\r\n          } else {\r\n            centerList.push(column)\r\n          }\r\n        }\r\n      })\r\n    }\r\n    const visibleColumn = leftList.concat(centerList).concat(rightList)\r\n    let scrollXLoad = sXOpts.enabled && sXOpts.gt > -1 && sXOpts.gt < tableFullColumn.length\r\n    this.hasFixedColumn = leftList.length > 0 || rightList.length > 0\r\n    Object.assign(columnStore, { leftList, centerList, rightList })\r\n    if (scrollXLoad && isGroup) {\r\n      scrollXLoad = false\r\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n        UtilTools.warn('vxe.error.scrollXNotGroup')\r\n      }\r\n    }\r\n    if (scrollXLoad) {\r\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n        if (this.showHeader && !this.showHeaderOverflow) {\r\n          UtilTools.warn('vxe.error.reqProp', ['show-header-overflow'])\r\n        }\r\n        if (this.showFooter && !this.showFooterOverflow) {\r\n          UtilTools.warn('vxe.error.reqProp', ['show-footer-overflow'])\r\n        }\r\n        if (this.spanMethod) {\r\n          UtilTools.warn('vxe.error.scrollErrProp', ['span-method'])\r\n        }\r\n        if (this.footerSpanMethod) {\r\n          UtilTools.warn('vxe.error.scrollErrProp', ['footer-span-method'])\r\n        }\r\n      }\r\n      const { visibleSize } = computeVirtualX(this)\r\n      scrollXStore.startIndex = 0\r\n      scrollXStore.endIndex = visibleSize\r\n      scrollXStore.visibleSize = visibleSize\r\n    }\r\n    // 如果列被显示/隐藏，则清除合并状态\r\n    // 如果列被设置为固定，则清除合并状态\r\n    if (visibleColumn.length !== this.visibleColumn.length || !this.visibleColumn.every((column, index) => column === visibleColumn[index])) {\r\n      this.clearMergeCells()\r\n      this.clearMergeFooterItems()\r\n    }\r\n    this.scrollXLoad = scrollXLoad\r\n    this.visibleColumn = visibleColumn\r\n    this.handleTableColumn()\r\n    return this.updateFooter().then(() => {\r\n      return this.recalculate()\r\n    }).then(() => {\r\n      this.updateCellAreas()\r\n      return this.recalculate()\r\n    })\r\n  },\r\n  /**\r\n   * 指定列宽的列进行拆分\r\n   */\r\n  analyColumnWidth () {\r\n    const { columnOpts } = this\r\n    const { width: defaultWidth, minWidth: defaultMinWidth } = columnOpts\r\n    const resizeList = []\r\n    const pxList = []\r\n    const pxMinList = []\r\n    const scaleList = []\r\n    const scaleMinList = []\r\n    const autoList = []\r\n    this.tableFullColumn.forEach(column => {\r\n      if (defaultWidth && !column.width) {\r\n        column.width = defaultWidth\r\n      }\r\n      if (defaultMinWidth && !column.minWidth) {\r\n        column.minWidth = defaultMinWidth\r\n      }\r\n      if (column.visible) {\r\n        if (column.resizeWidth) {\r\n          resizeList.push(column)\r\n        } else if (DomTools.isPx(column.width)) {\r\n          pxList.push(column)\r\n        } else if (DomTools.isScale(column.width)) {\r\n          scaleList.push(column)\r\n        } else if (DomTools.isPx(column.minWidth)) {\r\n          pxMinList.push(column)\r\n        } else if (DomTools.isScale(column.minWidth)) {\r\n          scaleMinList.push(column)\r\n        } else {\r\n          autoList.push(column)\r\n        }\r\n      }\r\n    })\r\n    Object.assign(this.columnStore, { resizeList, pxList, pxMinList, scaleList, scaleMinList, autoList })\r\n  },\r\n  /**\r\n   * 刷新滚动操作，手动同步滚动相关位置（对于某些特殊的操作，比如滚动条错位、固定列不同步）\r\n   */\r\n  refreshScroll () {\r\n    const { lastScrollLeft, lastScrollTop } = this\r\n    const { $refs } = this\r\n    const { tableBody, leftBody, rightBody, tableFooter } = $refs\r\n    const tableBodyElem = tableBody ? tableBody.$el : null\r\n    const leftBodyElem = leftBody ? leftBody.$el : null\r\n    const rightBodyElem = rightBody ? rightBody.$el : null\r\n    const tableFooterElem = tableFooter ? tableFooter.$el : null\r\n    // 还原滚动条位置\r\n    if (lastScrollLeft || lastScrollTop) {\r\n      return restoreScroll(this, lastScrollLeft, lastScrollTop)\r\n    }\r\n    // 重置\r\n    setScrollTop(tableBodyElem, lastScrollTop)\r\n    setScrollTop(leftBodyElem, lastScrollTop)\r\n    setScrollTop(rightBodyElem, lastScrollTop)\r\n    setScrollLeft(tableFooterElem, lastScrollLeft)\r\n  },\r\n  /**\r\n   * 计算单元格列宽，动态分配可用剩余空间\r\n   * 支持 width=? width=?px width=?% min-width=? min-width=?px min-width=?%\r\n   */\r\n  recalculate (refull) {\r\n    const { $refs } = this\r\n    const { tableBody, tableHeader, tableFooter } = $refs\r\n    const bodyElem = tableBody ? tableBody.$el : null\r\n    const headerElem = tableHeader ? tableHeader.$el : null\r\n    const footerElem = tableFooter ? tableFooter.$el : null\r\n    if (bodyElem) {\r\n      this.autoCellWidth(headerElem, bodyElem, footerElem)\r\n      if (refull === true) {\r\n        // 初始化时需要在列计算之后再执行优化运算，达到最优显示效果\r\n        return this.computeScrollLoad().then(() => {\r\n          this.autoCellWidth(headerElem, bodyElem, footerElem)\r\n          return this.computeScrollLoad()\r\n        })\r\n      }\r\n    }\r\n    return this.computeScrollLoad()\r\n  },\r\n  /**\r\n   * 列宽算法\r\n   * 支持 px、%、固定 混合分配\r\n   * 支持动态列表调整分配\r\n   * 支持自动分配偏移量\r\n   * @param {Element} headerElem\r\n   * @param {Element} bodyElem\r\n   * @param {Element} footerElem\r\n   * @param {Number} bodyWidth\r\n   */\r\n  autoCellWidth (headerElem, bodyElem, footerElem) {\r\n    let tableWidth = 0\r\n    const minCellWidth = 40 // 列宽最少限制 40px\r\n    const bodyWidth = bodyElem.clientWidth - 1\r\n    let remainWidth = bodyWidth\r\n    let meanWidth = remainWidth / 100\r\n    const { fit, columnStore } = this\r\n    const { resizeList, pxMinList, pxList, scaleList, scaleMinList, autoList } = columnStore\r\n    // 最小宽\r\n    pxMinList.forEach(column => {\r\n      const minWidth = parseInt(column.minWidth)\r\n      tableWidth += minWidth\r\n      column.renderWidth = minWidth\r\n    })\r\n    // 最小百分比\r\n    scaleMinList.forEach(column => {\r\n      const scaleWidth = Math.floor(parseInt(column.minWidth) * meanWidth)\r\n      tableWidth += scaleWidth\r\n      column.renderWidth = scaleWidth\r\n    })\r\n    // 固定百分比\r\n    scaleList.forEach(column => {\r\n      const scaleWidth = Math.floor(parseInt(column.width) * meanWidth)\r\n      tableWidth += scaleWidth\r\n      column.renderWidth = scaleWidth\r\n    })\r\n    // 固定宽\r\n    pxList.forEach(column => {\r\n      const width = parseInt(column.width)\r\n      tableWidth += width\r\n      column.renderWidth = width\r\n    })\r\n    // 调整了列宽\r\n    resizeList.forEach(column => {\r\n      const width = parseInt(column.resizeWidth)\r\n      tableWidth += width\r\n      column.renderWidth = width\r\n    })\r\n    remainWidth -= tableWidth\r\n    meanWidth = remainWidth > 0 ? Math.floor(remainWidth / (scaleMinList.length + pxMinList.length + autoList.length)) : 0\r\n    if (fit) {\r\n      if (remainWidth > 0) {\r\n        scaleMinList.concat(pxMinList).forEach(column => {\r\n          tableWidth += meanWidth\r\n          column.renderWidth += meanWidth\r\n        })\r\n      }\r\n    } else {\r\n      meanWidth = minCellWidth\r\n    }\r\n    // 自适应\r\n    autoList.forEach(column => {\r\n      const width = Math.max(meanWidth, minCellWidth)\r\n      column.renderWidth = width\r\n      tableWidth += width\r\n    })\r\n    if (fit) {\r\n      /**\r\n       * 偏移量算法\r\n       * 如果所有列足够放的情况下，从最后动态列开始分配\r\n       */\r\n      const dynamicList = scaleList.concat(scaleMinList).concat(pxMinList).concat(autoList)\r\n      let dynamicSize = dynamicList.length - 1\r\n      if (dynamicSize > 0) {\r\n        let odiffer = bodyWidth - tableWidth\r\n        if (odiffer > 0) {\r\n          while (odiffer > 0 && dynamicSize >= 0) {\r\n            odiffer--\r\n            dynamicList[dynamicSize--].renderWidth++\r\n          }\r\n          tableWidth = bodyWidth\r\n        }\r\n      }\r\n    }\r\n    const tableHeight = bodyElem.offsetHeight\r\n    const overflowY = bodyElem.scrollHeight > bodyElem.clientHeight\r\n    this.scrollbarWidth = overflowY ? bodyElem.offsetWidth - bodyElem.clientWidth : 0\r\n    this.overflowY = overflowY\r\n    this.tableWidth = tableWidth\r\n    this.tableHeight = tableHeight\r\n    if (headerElem) {\r\n      this.headerHeight = headerElem.clientHeight\r\n      this.$nextTick(() => {\r\n        // 检测是否同步滚动\r\n        if (headerElem && bodyElem && headerElem.scrollLeft !== bodyElem.scrollLeft) {\r\n          headerElem.scrollLeft = bodyElem.scrollLeft\r\n        }\r\n      })\r\n    } else {\r\n      this.headerHeight = 0\r\n    }\r\n    if (footerElem) {\r\n      const footerHeight = footerElem.offsetHeight\r\n      this.scrollbarHeight = Math.max(footerHeight - footerElem.clientHeight, 0)\r\n      this.overflowX = tableWidth > footerElem.clientWidth\r\n      this.footerHeight = footerHeight\r\n    } else {\r\n      this.footerHeight = 0\r\n      this.scrollbarHeight = Math.max(tableHeight - bodyElem.clientHeight, 0)\r\n      this.overflowX = tableWidth > bodyWidth\r\n    }\r\n    this.updateHeight()\r\n    this.parentHeight = Math.max(this.headerHeight + this.footerHeight + 20, this.getParentHeight())\r\n    if (this.overflowX) {\r\n      this.checkScrolling()\r\n    }\r\n  },\r\n  updateHeight () {\r\n    this.customHeight = calcHeight(this, 'height')\r\n    this.customMaxHeight = calcHeight(this, 'maxHeight')\r\n  },\r\n  updateStyle () {\r\n    let {\r\n      $refs,\r\n      isGroup,\r\n      fullColumnIdData,\r\n      tableColumn,\r\n      customHeight,\r\n      customMaxHeight,\r\n      border,\r\n      headerHeight,\r\n      showFooter,\r\n      showOverflow: allColumnOverflow,\r\n      showHeaderOverflow: allColumnHeaderOverflow,\r\n      showFooterOverflow: allColumnFooterOverflow,\r\n      footerHeight,\r\n      tableHeight,\r\n      tableWidth,\r\n      scrollbarHeight,\r\n      scrollbarWidth,\r\n      scrollXLoad,\r\n      scrollYLoad,\r\n      cellOffsetWidth,\r\n      columnStore,\r\n      elemStore,\r\n      editStore,\r\n      currentRow,\r\n      mouseConfig,\r\n      keyboardConfig,\r\n      keyboardOpts,\r\n      spanMethod,\r\n      mergeList,\r\n      mergeFooterList,\r\n      footerSpanMethod,\r\n      isAllOverflow\r\n    } = this\r\n    const containerList = ['main', 'left', 'right']\r\n    const emptyPlaceholderElem = $refs.emptyPlaceholder\r\n    const bodyWrapperElem = elemStore['main-body-wrapper']\r\n    let _headerHeight = Math.max(32, headerHeight);//加\r\n    if (emptyPlaceholderElem) {\r\n//      emptyPlaceholderElem.style.top = `${headerHeight}px`//删\r\n//      emptyPlaceholderElem.style.height = bodyWrapperElem ? `${bodyWrapperElem.offsetHeight - scrollbarHeight}px` : ''//删\r\n      emptyPlaceholderElem.style.top = `${_headerHeight}px`//加\r\n      emptyPlaceholderElem.style.height = 'calc(100% - '+_headerHeight+'px)';//加\r\n    }\r\n    if (customHeight > 0) {\r\n      if (showFooter) {\r\n        customHeight += scrollbarHeight\r\n      }\r\n    }\r\n    containerList.forEach((name, index) => {\r\n      const fixedType = index > 0 ? name : ''\r\n      const layoutList = ['header', 'body', 'footer']\r\n      const fixedColumn = columnStore[`${fixedType}List`]\r\n      const fixedWrapperElem = $refs[`${fixedType}Container`]\r\n      layoutList.forEach(layout => {\r\n        const wrapperElem = elemStore[`${name}-${layout}-wrapper`]\r\n        const tableElem = elemStore[`${name}-${layout}-table`]\r\n        if (layout === 'header') {\r\n          // 表头体样式处理\r\n          // 横向滚动渲染\r\n          let tWidth = tableWidth\r\n\r\n          // 如果是使用优化模式\r\n          let isOptimize = false\r\n          if (!isGroup) {\r\n            if (fixedType) {\r\n              if (scrollXLoad || allColumnHeaderOverflow) {\r\n                isOptimize = true\r\n              }\r\n            }\r\n          }\r\n          if (isOptimize) {\r\n            tableColumn = fixedColumn\r\n          }\r\n          if (isOptimize || scrollXLoad) {\r\n            tWidth = tableColumn.reduce((previous, column) => previous + column.renderWidth, 0)\r\n          }\r\n\r\n          if (tableElem) {\r\n            tableElem.style.width = tWidth ? `${tWidth + scrollbarWidth + 1}px` : '';//改\r\n            // 修复 IE 中高度无法自适应问题\r\n            if (browse.msie) {\r\n              XEUtils.arrayEach(tableElem.querySelectorAll('.vxe-resizable'), resizeElem => {\r\n                resizeElem.style.height = `${resizeElem.parentNode.offsetHeight}px`\r\n              })\r\n            }\r\n          }\r\n\r\n          const repairElem = elemStore[`${name}-${layout}-repair`]\r\n          if (repairElem) {\r\n            repairElem.style.width = `${tableWidth}px`\r\n          }\r\n\r\n          const listElem = elemStore[`${name}-${layout}-list`]\r\n          if (isGroup && listElem) {\r\n            XEUtils.arrayEach(listElem.querySelectorAll('.col--group'), thElem => {\r\n              const colNode = this.getColumnNode(thElem)\r\n              if (colNode) {\r\n                const column = colNode.item\r\n                const { showHeaderOverflow } = column\r\n                const cellOverflow = XEUtils.isBoolean(showHeaderOverflow) ? showHeaderOverflow : allColumnHeaderOverflow\r\n                const showEllipsis = cellOverflow === 'ellipsis'\r\n                const showTitle = cellOverflow === 'title'\r\n                const showTooltip = cellOverflow === true || cellOverflow === 'tooltip'\r\n                const hasEllipsis = showTitle || showTooltip || showEllipsis\r\n                let childWidth = 0\r\n                let countChild = 0\r\n                if (hasEllipsis) {\r\n                  XEUtils.eachTree(column.children, item => {\r\n                    if (!item.children || !column.children.length) {\r\n                      countChild++\r\n                    }\r\n                    childWidth += item.renderWidth\r\n                  })\r\n                }\r\n                thElem.style.width = hasEllipsis ? `${childWidth - countChild - (border ? 2 : 0)}px` : ''\r\n              }\r\n            })\r\n          }\r\n        } else if (layout === 'body') {\r\n          const emptyBlockElem = elemStore[`${name}-${layout}-emptyBlock`]\r\n          if (wrapperElem) {\r\n        \t/*删\r\n            if (customMaxHeight) {\r\n              wrapperElem.style.maxHeight = `${fixedType ? customMaxHeight - headerHeight - (showFooter ? 0 : scrollbarHeight) : customMaxHeight - headerHeight}px`\r\n            } else {\r\n              if (customHeight > 0) {\r\n                wrapperElem.style.height = `${fixedType ? (customHeight > 0 ? customHeight - headerHeight - footerHeight : tableHeight) - (showFooter ? 0 : scrollbarHeight) : customHeight - headerHeight - footerHeight}px`\r\n              } else {\r\n                wrapperElem.style.height = ''\r\n              }\r\n            }*/\r\n            wrapperElem.style.height = 'calc(100% - '+_headerHeight+'px)';//加\r\n          }\r\n\r\n          // 如果是固定列\r\n          if (fixedWrapperElem) {\r\n            const isRightFixed = fixedType === 'right'\r\n            const fixedColumn = columnStore[`${fixedType}List`]\r\n            if (wrapperElem) {\r\n//              wrapperElem.style.top = `${headerHeight}px`//删\r\n              wrapperElem.style.top = `${_headerHeight}px`//加\r\n            }\r\n//            fixedWrapperElem.style.height = `${(customHeight > 0 ? customHeight - headerHeight - footerHeight : tableHeight) + headerHeight + footerHeight - scrollbarHeight * (showFooter ? 2 : 1)}px`//删\r\n            fixedWrapperElem.style.height = 'calc(100% - 11px)';//加\r\n            fixedWrapperElem.style.width = `${fixedColumn.reduce((previous, column) => previous + column.renderWidth, isRightFixed ? scrollbarWidth : 0)}px`\r\n          }\r\n\r\n          let tWidth = tableWidth\r\n\r\n          // 如果是使用优化模式\r\n          let isOptimize = false\r\n          if (fixedType) {\r\n            if ((!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts.isMerge)) && (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow))) {\r\n              isOptimize = true\r\n            }\r\n          }\r\n          if (isOptimize) {\r\n            tableColumn = fixedColumn\r\n          }\r\n          if (isOptimize || scrollXLoad) {\r\n            tWidth = tableColumn.reduce((previous, column) => previous + column.renderWidth, 0)\r\n          }\r\n\r\n          if (tableElem) {\r\n            tableElem.style.width = tWidth ? `${tWidth + 1}px` : ''//改\r\n            // 兼容性处理\r\n            tableElem.style.paddingRight = scrollbarWidth && fixedType && (browse['-moz'] || browse.safari) ? `${scrollbarWidth}px` : ''\r\n          }\r\n          if (emptyBlockElem) {\r\n            emptyBlockElem.style.width = tWidth ? `${tWidth}px` : ''\r\n          }\r\n        } else if (layout === 'footer') {\r\n          let tWidth = tableWidth\r\n\r\n          // 如果是使用优化模式\r\n          let isOptimize = false\r\n          if (fixedType) {\r\n            if ((!mergeFooterList.length || !footerSpanMethod) && (scrollXLoad || allColumnFooterOverflow)) {\r\n              isOptimize = true\r\n            }\r\n          }\r\n          if (isOptimize) {\r\n            tableColumn = fixedColumn\r\n          }\r\n          if (isOptimize || scrollXLoad) {\r\n            tWidth = tableColumn.reduce((previous, column) => previous + column.renderWidth, 0)\r\n          }\r\n\r\n          if (wrapperElem) {\r\n            // 如果是固定列\r\n            if (fixedWrapperElem) {\r\n//              wrapperElem.style.top = `${customHeight > 0 ? customHeight - footerHeight : tableHeight + headerHeight}px`//删\r\n              wrapperElem.style.top = `${customHeight > 0 ? customHeight - footerHeight : tableHeight + _headerHeight}px`//加\r\n            }\r\n            wrapperElem.style.marginTop = `${-scrollbarHeight}px`\r\n          }\r\n          if (tableElem) {\r\n        \t  tableElem.style.width = tWidth ? `${tWidth + scrollbarWidth + 1}px` : ''//改\r\n          }\r\n        }\r\n        const colgroupElem = elemStore[`${name}-${layout}-colgroup`]\r\n        if (colgroupElem) {\r\n          XEUtils.arrayEach(colgroupElem.children, colElem => {\r\n            const colid = colElem.getAttribute('name')\r\n            if (colid === 'col_gutter') {\r\n              colElem.style.width = `${scrollbarWidth}px`\r\n            }\r\n            if (fullColumnIdData[colid]) {\r\n              const column = fullColumnIdData[colid].column\r\n              const { showHeaderOverflow, showFooterOverflow, showOverflow } = column\r\n              let cellOverflow\r\n              colElem.style.width = `${column.renderWidth}px`\r\n              if (layout === 'header') {\r\n                cellOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow\r\n              } else if (layout === 'footer') {\r\n                cellOverflow = XEUtils.isUndefined(showFooterOverflow) || XEUtils.isNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow\r\n              } else {\r\n                cellOverflow = XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow) ? allColumnOverflow : showOverflow\r\n              }\r\n              const showEllipsis = cellOverflow === 'ellipsis'\r\n              const showTitle = cellOverflow === 'title'\r\n              const showTooltip = cellOverflow === true || cellOverflow === 'tooltip'\r\n              let hasEllipsis = showTitle || showTooltip || showEllipsis\r\n              const listElem = elemStore[`${name}-${layout}-list`]\r\n              // 滚动的渲染不支持动态行高\r\n              if (layout === 'header' || layout === 'footer') {\r\n                if (scrollXLoad && !hasEllipsis) {\r\n                  hasEllipsis = true\r\n                }\r\n              } else {\r\n                if ((scrollXLoad || scrollYLoad) && !hasEllipsis) {\r\n                  hasEllipsis = true\r\n                }\r\n              }\r\n              if (listElem) {\r\n                XEUtils.arrayEach(listElem.querySelectorAll(`.${column.id}`), elem => {\r\n                  const colspan = parseInt(elem.getAttribute('colspan') || 1)\r\n                  const cellElem = elem.querySelector('.vxe-cell')\r\n                  let colWidth = column.renderWidth\r\n                  if (cellElem) {\r\n                    if (colspan > 1) {\r\n                      const columnIndex = this.getColumnIndex(column)\r\n                      for (let index = 1; index < colspan; index++) {\r\n                        const nextColumn = this.getColumns(columnIndex + index)\r\n                        if (nextColumn) {\r\n                          colWidth += nextColumn.renderWidth\r\n                        }\r\n                      }\r\n                    }\r\n                    cellElem.style.width = hasEllipsis ? `${colWidth - (cellOffsetWidth * colspan)}px` : ''\r\n                  }\r\n                })\r\n              }\r\n            }\r\n          })\r\n        }\r\n      })\r\n    })\r\n    if (currentRow) {\r\n      this.setCurrentRow(currentRow)\r\n    }\r\n    if (mouseConfig && mouseConfig.selected && editStore.selected.row && editStore.selected.column) {\r\n      this.addColSdCls()\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 处理固定列的显示状态\r\n   */\r\n  checkScrolling () {\r\n    const { tableBody, leftContainer, rightContainer } = this.$refs\r\n    const bodyElem = tableBody ? tableBody.$el : null\r\n    if (bodyElem) {\r\n      if (leftContainer) {\r\n        DomTools[bodyElem.scrollLeft > 0 ? 'addClass' : 'removeClass'](leftContainer, 'scrolling--middle')\r\n      }\r\n      if (rightContainer) {\r\n        DomTools[bodyElem.clientWidth < bodyElem.scrollWidth - Math.ceil(bodyElem.scrollLeft) ? 'addClass' : 'removeClass'](rightContainer, 'scrolling--middle')\r\n      }\r\n    }\r\n  },\r\n  preventEvent (evnt, type, args, next, end) {\r\n    const evntList = VXETable.interceptor.get(type)\r\n    let rest\r\n    if (!evntList.some(func => func(Object.assign({ $grid: this.$xegrid, $table: this, $event: evnt }, args)) === false)) {\r\n      if (next) {\r\n        rest = next()\r\n      }\r\n    }\r\n    if (end) {\r\n      end()\r\n    }\r\n    return rest\r\n  },\r\n  /**\r\n   * 全局按下事件处理\r\n   */\r\n  handleGlobalMousedownEvent (evnt) {\r\n    const { $el, $refs, $xegrid, $toolbar, mouseConfig, editStore, ctxMenuStore, editOpts, filterStore, getRowNode } = this\r\n    const { actived } = editStore\r\n    const { ctxWrapper, filterWrapper, validTip } = $refs\r\n    if (filterWrapper) {\r\n      if (getEventTargetNode(evnt, $el, 'vxe-cell--filter').flag) {\r\n        // 如果点击了筛选按钮\r\n      } else if (getEventTargetNode(evnt, filterWrapper.$el).flag) {\r\n        // 如果点击筛选容器\r\n      } else {\r\n        if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\r\n          this.preventEvent(evnt, 'event.clearFilter', filterStore.args, this.closeFilter)\r\n        }\r\n      }\r\n    }\r\n    // 如果已激活了编辑状态\r\n    if (actived.row) {\r\n      if (!(editOpts.autoClear === false)) {\r\n        // 如果是激活状态，点击了单元格之外\r\n        const cell = actived.args.cell\r\n        if ((!cell || !getEventTargetNode(evnt, cell).flag)) {\r\n          if (validTip && getEventTargetNode(evnt, validTip.$el).flag) {\r\n            // 如果是激活状态，且点击了校验提示框\r\n          } else if (!this.lastCallTime || this.lastCallTime + 50 < Date.now()) {\r\n            if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\r\n              // 如果手动调用了激活单元格，避免触发源被移除后导致重复关闭\r\n              this.preventEvent(evnt, 'event.clearActived', actived.args, () => {\r\n                let isClearActived\r\n                if (editOpts.mode === 'row') {\r\n                  const rowNode = getEventTargetNode(evnt, $el, 'vxe-body--row')\r\n                  // row 方式，如果点击了不同行\r\n                  isClearActived = rowNode.flag ? getRowNode(rowNode.targetElem).item !== actived.args.row : false\r\n                } else {\r\n                  // cell 方式，如果是非编辑列\r\n                  isClearActived = !getEventTargetNode(evnt, $el, 'col--edit').flag\r\n                }\r\n                // 如果点击表头行，则清除激活状态\r\n                if (!isClearActived) {\r\n                  isClearActived = getEventTargetNode(evnt, $el, 'vxe-header--row').flag\r\n                }\r\n                // 如果点击表尾行，则清除激活状态\r\n                if (!isClearActived) {\r\n                  isClearActived = getEventTargetNode(evnt, $el, 'vxe-footer--row').flag\r\n                }\r\n                // 如果固定了高度且点击了行之外的空白处，则清除激活状态\r\n                if (!isClearActived && this.height && !this.overflowY) {\r\n                  const bodyWrapperElem = evnt.target\r\n                  if (hasClass(bodyWrapperElem, 'vxe-table--body-wrapper')) {\r\n                    isClearActived = evnt.offsetY < bodyWrapperElem.clientHeight\r\n                  }\r\n                }\r\n                if (\r\n                  isClearActived ||\r\n                    // 如果点击了当前表格之外\r\n                    !getEventTargetNode(evnt, $el).flag\r\n                ) {\r\n                  setTimeout(() => this.clearActived(evnt))\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (mouseConfig) {\r\n      if (!getEventTargetNode(evnt, $el).flag && !($xegrid && getEventTargetNode(evnt, $xegrid.$el).flag) && !(ctxWrapper && getEventTargetNode(evnt, ctxWrapper.$el).flag) && !($toolbar && getEventTargetNode(evnt, $toolbar.$el).flag)) {\r\n        this.clearSelected()\r\n        if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-areas-clear').flag) {\r\n          this.preventEvent(evnt, 'event.clearAreas', {}, () => {\r\n            this.clearCellAreas()\r\n            this.clearCopyCellArea()\r\n          })\r\n        }\r\n      }\r\n    }\r\n    // 如果配置了快捷菜单且，点击了其他地方则关闭\r\n    if (ctxMenuStore.visible && ctxWrapper && !getEventTargetNode(evnt, ctxWrapper.$el).flag) {\r\n      this.closeMenu()\r\n    }\r\n    // 最后激活的表格\r\n    this.isActivated = getEventTargetNode(evnt, ($xegrid || this).$el).flag\r\n  },\r\n  /**\r\n   * 窗口失焦事件处理\r\n   */\r\n  handleGlobalBlurEvent () {\r\n    this.closeFilter()\r\n    this.closeMenu()\r\n  },\r\n  /**\r\n   * 全局滚动事件\r\n   */\r\n  handleGlobalMousewheelEvent () {\r\n    this.closeTooltip()\r\n    this.closeMenu()\r\n  },\r\n  /**\r\n   * 表格键盘事件\r\n   */\r\n  keydownEvent (evnt) {\r\n    const { filterStore, ctxMenuStore, editStore, keyboardConfig, mouseConfig, mouseOpts } = this\r\n    const { actived } = editStore\r\n    const { keyCode } = evnt\r\n    const isEsc = keyCode === 27\r\n    if (isEsc) {\r\n      this.preventEvent(evnt, 'event.keydown', null, () => {\r\n        if (keyboardConfig && mouseConfig && mouseOpts.area && this.handleKeyboardEvent) {\r\n          this.handleKeyboardEvent(evnt)\r\n        } else if (actived.row || filterStore.visible || ctxMenuStore.visible) {\r\n          evnt.stopPropagation()\r\n          // 如果按下了 Esc 键，关闭快捷菜单、筛选\r\n          this.closeFilter()\r\n          this.closeMenu()\r\n          // 如果是激活编辑状态，则取消编辑\r\n          if (actived.row) {\r\n            const params = actived.args\r\n            this.clearActived(evnt)\r\n            // 如果配置了选中功能，则为选中状态\r\n            if (mouseConfig && mouseOpts.selected) {\r\n              this.$nextTick(() => this.handleSelected(params, evnt))\r\n            }\r\n          }\r\n        }\r\n        this.emitEvent('keydown', {}, evnt)\r\n      })\r\n    }\r\n  },\r\n  /**\r\n   * 全局键盘事件\r\n   */\r\n  handleGlobalKeydownEvent (evnt) {\r\n    // 该行为只对当前激活的表格有效\r\n    if (this.isActivated) {\r\n      this.preventEvent(evnt, 'event.keydown', null, () => {\r\n        const { filterStore, isCtxMenu, ctxMenuStore, editStore, editOpts, editConfig, mouseConfig, mouseOpts, keyboardConfig, keyboardOpts, treeConfig, treeOpts, highlightCurrentRow, currentRow, bodyCtxMenu } = this\r\n        const { selected, actived } = editStore\r\n        const { keyCode } = evnt\r\n        const isBack = keyCode === 8\r\n        const isTab = keyCode === 9\r\n        const isEnter = keyCode === 13\r\n        const isEsc = keyCode === 27\r\n        const isSpacebar = keyCode === 32\r\n        const isLeftArrow = keyCode === 37\r\n        const isUpArrow = keyCode === 38\r\n        const isRightArrow = keyCode === 39\r\n        const isDwArrow = keyCode === 40\r\n        const isDel = keyCode === 46\r\n        const isF2 = keyCode === 113\r\n        const isContextMenu = keyCode === 93\r\n        const hasMetaKey = evnt.metaKey\r\n        const hasCtrlKey = evnt.ctrlKey\r\n        const hasShiftKey = evnt.shiftKey\r\n        const hasAltKey = evnt.altKey\r\n        const operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow\r\n        const operCtxMenu = isCtxMenu && ctxMenuStore.visible && (isEnter || isSpacebar || operArrow)\r\n        const isEditStatus = editConfig && actived.column && actived.row\r\n        let params\r\n        if (filterStore.visible) {\r\n          if (isEsc) {\r\n            this.closeFilter()\r\n          }\r\n          return\r\n        }\r\n        if (operCtxMenu) {\r\n          // 如果配置了右键菜单; 支持方向键操作、回车\r\n          evnt.preventDefault()\r\n          if (ctxMenuStore.showChild && hasChildrenList(ctxMenuStore.selected)) {\r\n            this.moveCtxMenu(evnt, keyCode, ctxMenuStore, 'selectChild', 37, false, ctxMenuStore.selected.children)\r\n          } else {\r\n            this.moveCtxMenu(evnt, keyCode, ctxMenuStore, 'selected', 39, true, this.ctxMenuList)\r\n          }\r\n        } else if (keyboardConfig && mouseConfig && mouseOpts.area && this.handleKeyboardEvent) {\r\n          this.handleKeyboardEvent(evnt)\r\n        } else if (keyboardConfig && isSpacebar && keyboardOpts.isChecked && selected.row && selected.column && (selected.column.type === 'checkbox' || selected.column.type === 'radio')) {\r\n          // 空格键支持选中复选框\r\n          evnt.preventDefault()\r\n          if (selected.column.type === 'checkbox') {\r\n            this.handleToggleCheckRowEvent(evnt, selected.args)\r\n          } else {\r\n            this.triggerRadioRowEvent(evnt, selected.args)\r\n          }\r\n        } else if (isF2) {\r\n          if (!isEditStatus) {\r\n            // 如果按下了 F2 键\r\n            if (selected.row && selected.column) {\r\n              evnt.stopPropagation()\r\n              evnt.preventDefault()\r\n              this.handleActived(selected.args, evnt)\r\n            }\r\n          }\r\n        } else if (isContextMenu) {\r\n          // 如果按下上下文键\r\n          this._keyCtx = selected.row && selected.column && bodyCtxMenu.length\r\n          clearTimeout(this.keyCtxTimeout)\r\n          this.keyCtxTimeout = setTimeout(() => {\r\n            this._keyCtx = false\r\n          }, 1000)\r\n        } else if (isEnter && !hasAltKey && keyboardConfig && keyboardOpts.isEnter && (selected.row || actived.row || (treeConfig && highlightCurrentRow && currentRow))) {\r\n          // 退出选中\r\n          if (hasCtrlKey) {\r\n            // 如果是激活编辑状态，则取消编辑\r\n            if (actived.row) {\r\n              params = actived.args\r\n              this.clearActived(evnt)\r\n              // 如果配置了选中功能，则为选中状态\r\n              if (mouseConfig && mouseOpts.selected) {\r\n                this.$nextTick(() => this.handleSelected(params, evnt))\r\n              }\r\n            }\r\n          } else {\r\n            // 如果是激活状态，退则出到上一行/下一行\r\n            if (selected.row || actived.row) {\r\n              const targetArgs = selected.row ? selected.args : actived.args\r\n              if (hasShiftKey) {\r\n                if (keyboardOpts.enterToTab) {\r\n                  this.moveTabSelected(targetArgs, hasShiftKey, evnt)\r\n                } else {\r\n                  this.moveSelected(targetArgs, isLeftArrow, true, isRightArrow, false, evnt)\r\n                }\r\n              } else {\r\n                if (keyboardOpts.enterToTab) {\r\n                  this.moveTabSelected(targetArgs, hasShiftKey, evnt)\r\n                } else {\r\n                  this.moveSelected(targetArgs, isLeftArrow, false, isRightArrow, true, evnt)\r\n                }\r\n              }\r\n            } else if (treeConfig && highlightCurrentRow && currentRow) {\r\n              // 如果是树形表格当前行回车移动到子节点\r\n              const childrens = currentRow[treeOpts.children]\r\n              if (childrens && childrens.length) {\r\n                evnt.preventDefault()\r\n                const targetRow = childrens[0]\r\n                params = { $table: this, row: targetRow }\r\n                this.setTreeExpand(currentRow, true)\r\n                  .then(() => this.scrollToRow(targetRow))\r\n                  .then(() => this.triggerCurrentRowEvent(evnt, params))\r\n              }\r\n            }\r\n          }\r\n        } else if (operArrow && keyboardConfig && keyboardOpts.isArrow) {\r\n          if (!isEditStatus) {\r\n            // 如果按下了方向键\r\n            if (selected.row && selected.column) {\r\n              this.moveSelected(selected.args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt)\r\n            } else if ((isUpArrow || isDwArrow) && highlightCurrentRow) {\r\n              // 当前行按键上下移动\r\n              this.moveCurrentRow(isUpArrow, isDwArrow, evnt)\r\n            }\r\n          }\r\n        } else if (isTab && keyboardConfig && keyboardOpts.isTab) {\r\n          // 如果按下了 Tab 键切换\r\n          if (selected.row || selected.column) {\r\n            this.moveTabSelected(selected.args, hasShiftKey, evnt)\r\n          } else if (actived.row || actived.column) {\r\n            this.moveTabSelected(actived.args, hasShiftKey, evnt)\r\n          }\r\n        } else if (keyboardConfig && (isDel || (treeConfig && highlightCurrentRow && currentRow ? isBack && keyboardOpts.isArrow : isBack))) {\r\n          if (!isEditStatus) {\r\n            const { delMethod, backMethod } = keyboardOpts\r\n            // 如果是删除键\r\n            if (keyboardOpts.isDel && (selected.row || selected.column)) {\r\n              if (delMethod) {\r\n                delMethod({\r\n                  row: selected.row,\r\n                  rowIndex: this.getRowIndex(selected.row),\r\n                  column: selected.column,\r\n                  columnIndex: this.getColumnIndex(selected.column),\r\n                  $table: this\r\n                })\r\n              } else {\r\n                setCellValue(selected.row, selected.column, null)\r\n              }\r\n              if (isBack) {\r\n                if (backMethod) {\r\n                  backMethod({\r\n                    row: selected.row,\r\n                    rowIndex: this.getRowIndex(selected.row),\r\n                    column: selected.column,\r\n                    columnIndex: this.getColumnIndex(selected.column),\r\n                    $table: this\r\n                  })\r\n                } else {\r\n                  this.handleActived(selected.args, evnt)\r\n                }\r\n              } else if (isDel) {\r\n                // 如果按下 del 键，更新表尾数据\r\n                this.updateFooter()\r\n              }\r\n            } else if (isBack && keyboardOpts.isArrow && treeConfig && highlightCurrentRow && currentRow) {\r\n              // 如果树形表格回退键关闭当前行返回父节点\r\n              const { parent: parentRow } = XEUtils.findTree(this.afterFullData, item => item === currentRow, treeOpts)\r\n              if (parentRow) {\r\n                evnt.preventDefault()\r\n                params = { $table: this, row: parentRow }\r\n                this.setTreeExpand(parentRow, false)\r\n                  .then(() => this.scrollToRow(parentRow))\r\n                  .then(() => this.triggerCurrentRowEvent(evnt, params))\r\n              }\r\n            }\r\n          }\r\n        } else if (keyboardConfig && keyboardOpts.isEdit && !hasCtrlKey && !hasMetaKey && (isSpacebar || (keyCode >= 48 && keyCode <= 57) || (keyCode >= 65 && keyCode <= 90) || (keyCode >= 96 && keyCode <= 111) || (keyCode >= 186 && keyCode <= 192) || (keyCode >= 219 && keyCode <= 222))) {\r\n          const { editMethod } = keyboardOpts\r\n          // 启用编辑后，空格键功能将失效\r\n          // if (isSpacebar) {\r\n          //   evnt.preventDefault()\r\n          // }\r\n          // 如果是按下非功能键之外允许直接编辑\r\n          if (selected.column && selected.row && isEnableConf(selected.column.editRender)) {\r\n            if (!editOpts.activeMethod || editOpts.activeMethod(selected.args)) {\r\n              if (editMethod) {\r\n                editMethod({\r\n                  row: selected.row,\r\n                  rowIndex: this.getRowIndex(selected.row),\r\n                  column: selected.column,\r\n                  columnIndex: this.getColumnIndex(selected.column),\r\n                  $table: this\r\n                })\r\n              } else {\r\n                setCellValue(selected.row, selected.column, null)\r\n                this.handleActived(selected.args, evnt)\r\n              }\r\n            }\r\n          }\r\n        }\r\n        this.emitEvent('keydown', {}, evnt)\r\n      })\r\n    }\r\n  },\r\n  handleGlobalPasteEvent (evnt) {\r\n    const { isActivated, keyboardConfig, keyboardOpts, mouseConfig, mouseOpts, editStore, filterStore } = this\r\n    const { actived } = editStore\r\n    if (isActivated && !filterStore.visible) {\r\n      if (!(actived.row || actived.column)) {\r\n        if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && this.handlePasteCellAreaEvent) {\r\n          this.handlePasteCellAreaEvent(evnt)\r\n        }\r\n      }\r\n      this.emitEvent('paste', {}, evnt)\r\n    }\r\n  },\r\n  handleGlobalCopyEvent (evnt) {\r\n    const { isActivated, keyboardConfig, keyboardOpts, mouseConfig, mouseOpts, editStore, filterStore } = this\r\n    const { actived } = editStore\r\n    if (isActivated && !filterStore.visible) {\r\n      if (!(actived.row || actived.column)) {\r\n        if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && this.handleCopyCellAreaEvent) {\r\n          this.handleCopyCellAreaEvent(evnt)\r\n        }\r\n      }\r\n      this.emitEvent('copy', {}, evnt)\r\n    }\r\n  },\r\n  handleGlobalCutEvent (evnt) {\r\n    const { isActivated, keyboardConfig, keyboardOpts, mouseConfig, mouseOpts, editStore, filterStore } = this\r\n    const { actived } = editStore\r\n    if (isActivated && !filterStore.visible) {\r\n      if (!(actived.row || actived.column)) {\r\n        if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && this.handleCutCellAreaEvent) {\r\n          this.handleCutCellAreaEvent(evnt)\r\n        }\r\n      }\r\n      this.emitEvent('cut', {}, evnt)\r\n    }\r\n  },\r\n  handleGlobalResizeEvent () {\r\n    this.closeMenu()\r\n    this.updateCellAreas()\r\n    this.recalculate(true)\r\n  },\r\n  handleTooltipLeaveMethod () {\r\n    const tooltipOpts = this.tooltipOpts\r\n    setTimeout(() => {\r\n      if (!this.tooltipActive) {\r\n        this.closeTooltip()\r\n      }\r\n    }, tooltipOpts.leaveDelay)\r\n    return false\r\n  },\r\n  handleTargetEnterEvent () {\r\n    clearTimeout(this.tooltipTimeout)\r\n    this.tooltipActive = true\r\n    this.closeTooltip()\r\n  },\r\n  handleTargetLeaveEvent () {\r\n    const tooltipOpts = this.tooltipOpts\r\n    this.tooltipActive = false\r\n    if (tooltipOpts.enterable) {\r\n      this.tooltipTimeout = setTimeout(() => {\r\n        const tooltip = this.$refs.tooltip\r\n        if (tooltip && !tooltip.isHover) {\r\n          this.closeTooltip()\r\n        }\r\n      }, tooltipOpts.leaveDelay)\r\n    } else {\r\n      this.closeTooltip()\r\n    }\r\n  },\r\n  triggerHeaderHelpEvent (evnt, params) {\r\n    const { column } = params\r\n    const { titleHelp } = column\r\n    if (titleHelp.message) {\r\n      const { $refs, tooltipStore } = this\r\n      const tooltip = $refs.tooltip\r\n      const content = UtilTools.getFuncText(titleHelp.message)\r\n      this.handleTargetEnterEvent()\r\n      tooltipStore.visible = true\r\n      if (tooltip) {\r\n        tooltip.open(evnt.currentTarget, content)\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * 触发表头 tooltip 事件\r\n   */\r\n  triggerHeaderTooltipEvent (evnt, params) {\r\n    const { tooltipStore } = this\r\n    const { column } = params\r\n    const titleElem = evnt.currentTarget\r\n    this.handleTargetEnterEvent()\r\n    if (tooltipStore.column !== column || !tooltipStore.visible) {\r\n      this.handleTooltip(evnt, titleElem, titleElem, null, params)\r\n    }\r\n  },\r\n  /**\r\n   * 触发单元格 tooltip 事件\r\n   */\r\n  triggerBodyTooltipEvent (evnt, params) {\r\n    const { editConfig, editOpts, editStore, tooltipStore } = this\r\n    const { actived } = editStore\r\n    const { row, column } = params\r\n    const cell = evnt.currentTarget\r\n    this.handleTargetEnterEvent()\r\n    if (editConfig) {\r\n      if ((editOpts.mode === 'row' && actived.row === row) || (actived.row === row && actived.column === column)) {\r\n        return\r\n      }\r\n    }\r\n    if (tooltipStore.column !== column || tooltipStore.row !== row || !tooltipStore.visible) {\r\n      let overflowElem\r\n      let tipElem\r\n      if (column.treeNode) {\r\n        overflowElem = cell.querySelector('.vxe-tree-cell')\r\n        if (column.type === 'html') {\r\n          tipElem = cell.querySelector('.vxe-cell--html')\r\n        }\r\n      } else {\r\n        tipElem = cell.querySelector(column.type === 'html' ? '.vxe-cell--html' : '.vxe-cell--label')\r\n      }\r\n      this.handleTooltip(evnt, cell, overflowElem || cell.children[0], tipElem, params)\r\n    }\r\n  },\r\n  /**\r\n   * 触发表尾 tooltip 事件\r\n   */\r\n  triggerFooterTooltipEvent (evnt, params) {\r\n    const { column } = params\r\n    const { tooltipStore } = this\r\n    const cell = evnt.currentTarget\r\n    this.handleTargetEnterEvent()\r\n    if (tooltipStore.column !== column || !tooltipStore.visible) {\r\n      this.handleTooltip(evnt, cell, cell.querySelector('.vxe-cell--item') || cell.children[0], null, params)\r\n    }\r\n  },\r\n  /**\r\n   * 处理显示 tooltip\r\n   * @param {Event} evnt 事件\r\n   * @param {ColumnInfo} column 列配置\r\n   * @param {Row} row 行对象\r\n   */\r\n  handleTooltip (evnt, cell, overflowElem, tipElem, params) {\r\n    params.cell = cell\r\n    const { $refs, tooltipOpts, tooltipStore } = this\r\n    const { column, row } = params\r\n    const { showAll, enabled, contentMethod } = tooltipOpts\r\n    const tooltip = $refs.tooltip\r\n    const customContent = contentMethod ? contentMethod(params) : null\r\n    const useCustom = contentMethod && !XEUtils.eqNull(customContent)\r\n    const content = useCustom ? customContent : (column.type === 'html' ? overflowElem.innerText : overflowElem.textContent).trim()\r\n    const isCellOverflow = overflowElem.scrollWidth > overflowElem.clientWidth\r\n    if (content && (showAll || enabled || useCustom || isCellOverflow)) {\r\n      Object.assign(tooltipStore, {\r\n        row,\r\n        column,\r\n        visible: true\r\n      })\r\n      if (tooltip) {\r\n        tooltip.open(isCellOverflow ? overflowElem : (tipElem || overflowElem), UtilTools.formatText(content))\r\n      }\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  openTooltip (target, content) {\r\n    const { $refs } = this\r\n    const commTip = $refs.commTip\r\n    if (commTip) {\r\n      return commTip.open(target, content)\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 关闭 tooltip\r\n   */\r\n  closeTooltip () {\r\n    const { $refs, tooltipStore } = this\r\n    const tooltip = $refs.tooltip\r\n    const commTip = $refs.commTip\r\n    if (tooltipStore.visible) {\r\n      Object.assign(tooltipStore, {\r\n        row: null,\r\n        column: null,\r\n        content: null,\r\n        visible: false\r\n      })\r\n      if (tooltip) {\r\n        tooltip.close()\r\n      }\r\n    }\r\n    if (commTip) {\r\n      commTip.close()\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 判断复选框是否全选\r\n   */\r\n  isAllCheckboxChecked () {\r\n    return this.isAllSelected\r\n  },\r\n  /**\r\n   * 判断复选框是否全选\r\n   */\r\n  isCheckboxIndeterminate () {\r\n    return !this.isAllSelected && this.isIndeterminate\r\n  },\r\n  /**\r\n   * 获取复选框半选状态的行数据\r\n   */\r\n  getCheckboxIndeterminateRecords () {\r\n    const { treeConfig, treeIndeterminates } = this\r\n    if (treeConfig) {\r\n      return treeIndeterminates.slice(0)\r\n    }\r\n    return []\r\n  },\r\n  /**\r\n   * 处理默认勾选\r\n   */\r\n  handleDefaultSelectionChecked () {\r\n    const { fullDataRowIdData, checkboxOpts } = this\r\n    const { checkAll, checkRowKeys } = checkboxOpts\r\n    if (checkAll) {\r\n      this.setAllCheckboxRow(true)\r\n    } else if (checkRowKeys) {\r\n      const defSelection = []\r\n      checkRowKeys.forEach(rowid => {\r\n        if (fullDataRowIdData[rowid]) {\r\n          defSelection.push(fullDataRowIdData[rowid].row)\r\n        }\r\n      })\r\n      this.setCheckboxRow(defSelection, true)\r\n    }\r\n  },\r\n  /**\r\n   * 用于多选行，设置行为选中状态，第二个参数为选中与否\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {Boolean} value 是否选中\r\n   */\r\n  setCheckboxRow (rows, value) {\r\n    if (rows && !XEUtils.isArray(rows)) {\r\n      rows = [rows]\r\n    }\r\n    rows.forEach(row => this.handleSelectRow({ row }, !!value))\r\n    return this.$nextTick()\r\n  },\r\n  isCheckedByCheckboxRow (row) {\r\n    const { checkField: property } = this.checkboxOpts\r\n    if (property) {\r\n      return XEUtils.get(row, property)\r\n    }\r\n    return this.selection.indexOf(row) > -1\r\n  },\r\n  /**\r\n   * 多选，行选中事件\r\n   * value 选中true 不选false 不确定-1\r\n   */\r\n  handleSelectRow ({ row }, value) {\r\n    const { selection, afterFullData, treeConfig, treeOpts, treeIndeterminates, checkboxOpts } = this\r\n    const { checkField: property, checkStrictly, checkMethod } = checkboxOpts\r\n    if (property) {\r\n      if (treeConfig && !checkStrictly) {\r\n        if (value === -1) {\r\n          if (treeIndeterminates.indexOf(row) === -1) {\r\n            treeIndeterminates.push(row)\r\n          }\r\n          XEUtils.set(row, property, false)\r\n        } else {\r\n          // 更新子节点状态\r\n          XEUtils.eachTree([row], (item) => {\r\n            if (row === item || (!checkMethod || checkMethod({ row: item }))) {\r\n              XEUtils.set(item, property, value)\r\n              XEUtils.remove(treeIndeterminates, half => half === item)\r\n              this.handleCheckboxReserveRow(row, value)\r\n            }\r\n          }, treeOpts)\r\n        }\r\n        // 如果存在父节点，更新父节点状态\r\n        const matchObj = XEUtils.findTree(afterFullData, item => item === row, treeOpts)\r\n        if (matchObj && matchObj.parent) {\r\n          let parentStatus\r\n          const vItems = checkMethod ? matchObj.items.filter((item) => checkMethod({ row: item })) : matchObj.items\r\n          const indeterminatesItem = XEUtils.find(matchObj.items, item => treeIndeterminates.indexOf(item) > -1)\r\n          if (indeterminatesItem) {\r\n            parentStatus = -1\r\n          } else {\r\n            const selectItems = matchObj.items.filter(item => XEUtils.get(item, property))\r\n            parentStatus = selectItems.filter(item => vItems.indexOf(item) > -1).length === vItems.length ? true : (selectItems.length || value === -1 ? -1 : false)\r\n          }\r\n          return this.handleSelectRow({ row: matchObj.parent }, parentStatus)\r\n        }\r\n      } else {\r\n        if (!checkMethod || checkMethod({ row })) {\r\n          XEUtils.set(row, property, value)\r\n          this.handleCheckboxReserveRow(row, value)\r\n        }\r\n      }\r\n    } else {\r\n      if (treeConfig && !checkStrictly) {\r\n        if (value === -1) {\r\n          if (treeIndeterminates.indexOf(row) === -1) {\r\n            treeIndeterminates.push(row)\r\n          }\r\n          XEUtils.remove(selection, item => item === row)\r\n        } else {\r\n          // 更新子节点状态\r\n          XEUtils.eachTree([row], (item) => {\r\n            if (row === item || (!checkMethod || checkMethod({ row: item }))) {\r\n              if (value) {\r\n                selection.push(item)\r\n              } else {\r\n                XEUtils.remove(selection, select => select === item)\r\n              }\r\n              XEUtils.remove(treeIndeterminates, half => half === item)\r\n              this.handleCheckboxReserveRow(row, value)\r\n            }\r\n          }, treeOpts)\r\n        }\r\n        // 如果存在父节点，更新父节点状态\r\n        const matchObj = XEUtils.findTree(afterFullData, item => item === row, treeOpts)\r\n        if (matchObj && matchObj.parent) {\r\n          let parentStatus\r\n          const vItems = checkMethod ? matchObj.items.filter((item) => checkMethod({ row: item })) : matchObj.items\r\n          const indeterminatesItem = XEUtils.find(matchObj.items, item => treeIndeterminates.indexOf(item) > -1)\r\n          if (indeterminatesItem) {\r\n            parentStatus = -1\r\n          } else {\r\n            const selectItems = matchObj.items.filter(item => selection.indexOf(item) > -1)\r\n            parentStatus = selectItems.filter(item => vItems.indexOf(item) > -1).length === vItems.length ? true : (selectItems.length || value === -1 ? -1 : false)\r\n          }\r\n          return this.handleSelectRow({ row: matchObj.parent }, parentStatus)\r\n        }\r\n      } else {\r\n        if (!checkMethod || checkMethod({ row })) {\r\n          if (value) {\r\n            if (selection.indexOf(row) === -1) {\r\n              selection.push(row)\r\n            }\r\n          } else {\r\n            XEUtils.remove(selection, item => item === row)\r\n          }\r\n          this.handleCheckboxReserveRow(row, value)\r\n        }\r\n      }\r\n    }\r\n    this.checkSelectionStatus()\r\n  },\r\n  handleToggleCheckRowEvent (evnt, params) {\r\n    const { selection, checkboxOpts } = this\r\n    const { checkField: property } = checkboxOpts\r\n    const { row } = params\r\n    const value = property ? !XEUtils.get(row, property) : selection.indexOf(row) === -1\r\n    if (evnt) {\r\n      this.triggerCheckRowEvent(evnt, params, value)\r\n    } else {\r\n      this.handleSelectRow(params, value)\r\n    }\r\n  },\r\n  triggerCheckRowEvent (evnt, params, value) {\r\n    const { checkMethod } = this.checkboxOpts\r\n    if (!checkMethod || checkMethod({ row: params.row })) {\r\n      this.handleSelectRow(params, value)\r\n      this.emitEvent('checkbox-change', Object.assign({ records: this.getCheckboxRecords(), reserves: this.getCheckboxReserveRecords(), indeterminates: this.getCheckboxIndeterminateRecords(), checked: value }, params), evnt)\r\n    }\r\n  },\r\n  /**\r\n   * 多选，切换某一行的选中状态\r\n   */\r\n  toggleCheckboxRow (row) {\r\n    this.handleToggleCheckRowEvent(null, { row })\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 用于多选行，设置所有行的选中状态\r\n   * @param {Boolean} value 是否选中\r\n   */\r\n  setAllCheckboxRow (value) {\r\n    const { afterFullData, treeConfig, treeOpts, selection, checkboxReserveRowMap, checkboxOpts } = this\r\n    const { checkField: property, reserve, checkStrictly, checkMethod } = checkboxOpts\r\n    let selectRows = []\r\n    const beforeSelection = treeConfig ? [] : selection.filter(row => afterFullData.indexOf(row) === -1)\r\n    if (checkStrictly) {\r\n      this.isAllSelected = value\r\n    } else {\r\n      /**\r\n       * 绑定属性方式（高性能，有污染）\r\n       * 必须在行数据存在对应的属性，否则将不响应\r\n       */\r\n      if (property) {\r\n        const checkValFn = (row) => {\r\n          if (!checkMethod || checkMethod({ row })) {\r\n            if (value) {\r\n              selectRows.push(row)\r\n            }\r\n            XEUtils.set(row, property, value)\r\n          }\r\n        }\r\n        // 如果存在选中方法\r\n        // 如果方法成立，则更新值，否则忽略该数据\r\n        if (treeConfig) {\r\n          XEUtils.eachTree(afterFullData, checkValFn, treeOpts)\r\n        } else {\r\n          afterFullData.forEach(checkValFn)\r\n        }\r\n      } else {\r\n        /**\r\n         * 默认方式（低性能，无污染）\r\n         * 无需任何属性，直接绑定\r\n         */\r\n        if (treeConfig) {\r\n          if (value) {\r\n            /**\r\n             * 如果是树勾选\r\n             * 如果方法成立，则添加到临时集合中\r\n             */\r\n            XEUtils.eachTree(afterFullData, (row) => {\r\n              if (!checkMethod || checkMethod({ row })) {\r\n                selectRows.push(row)\r\n              }\r\n            }, treeOpts)\r\n          } else {\r\n            /**\r\n             * 如果是树取消\r\n             * 如果方法成立，则不添加到临时集合中\r\n             */\r\n            if (checkMethod) {\r\n              XEUtils.eachTree(afterFullData, (row) => {\r\n                if (checkMethod({ row }) ? 0 : selection.indexOf(row) > -1) {\r\n                  selectRows.push(row)\r\n                }\r\n              }, treeOpts)\r\n            }\r\n          }\r\n        } else {\r\n          if (value) {\r\n            /**\r\n             * 如果是行勾选\r\n             * 如果存在选中方法且成立或者本身已勾选，则添加到临时集合中\r\n             * 如果不存在选中方法，则添加所有数据到临时集合中\r\n             */\r\n            if (checkMethod) {\r\n              selectRows = afterFullData.filter((row) => selection.indexOf(row) > -1 || checkMethod({ row }))\r\n            } else {\r\n              selectRows = afterFullData.slice(0)\r\n            }\r\n          } else {\r\n            /**\r\n             * 如果是行取消\r\n             * 如果方法成立，则不添加到临时集合中；如果方法不成立则判断当前是否已勾选，如果已被勾选则添加到新集合中\r\n             * 如果不存在选中方法，无需处理，临时集合默认为空\r\n             */\r\n            if (checkMethod) {\r\n              selectRows = afterFullData.filter((row) => checkMethod({ row }) ? 0 : selection.indexOf(row) > -1)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (reserve) {\r\n        if (value) {\r\n          selectRows.forEach(row => {\r\n            checkboxReserveRowMap[getRowid(this, row)] = row\r\n          })\r\n        } else {\r\n          afterFullData.forEach(row => this.handleCheckboxReserveRow(row, false))\r\n        }\r\n      }\r\n      this.selection = property ? [] : beforeSelection.concat(selectRows)\r\n    }\r\n    this.treeIndeterminates = []\r\n    this.checkSelectionStatus()\r\n  },\r\n  checkSelectionStatus () {\r\n    const { afterFullData, selection, treeIndeterminates, checkboxOpts, treeConfig } = this\r\n    const { checkField, halfField, checkStrictly, checkMethod } = checkboxOpts\r\n    if (!checkStrictly) {\r\n      let isAllSelected = false\r\n      let isIndeterminate = false\r\n      if (checkField) {\r\n        isAllSelected = afterFullData.length && afterFullData.every(\r\n          checkMethod\r\n            ? (row) => !checkMethod({ row }) || XEUtils.get(row, checkField)\r\n            : row => XEUtils.get(row, checkField)\r\n        )\r\n        if (treeConfig) {\r\n          if (halfField) {\r\n            isIndeterminate = !isAllSelected && afterFullData.some(row => XEUtils.get(row, checkField) || XEUtils.get(row, halfField) || treeIndeterminates.indexOf(row) > -1)\r\n          } else {\r\n            isIndeterminate = !isAllSelected && afterFullData.some(row => XEUtils.get(row, checkField) || treeIndeterminates.indexOf(row) > -1)\r\n          }\r\n        } else {\r\n          if (halfField) {\r\n            isIndeterminate = !isAllSelected && afterFullData.some(row => XEUtils.get(row, checkField) || XEUtils.get(row, halfField))\r\n          } else {\r\n            isIndeterminate = !isAllSelected && afterFullData.some(row => XEUtils.get(row, checkField))\r\n          }\r\n        }\r\n      } else {\r\n        isAllSelected = afterFullData.length && afterFullData.every(\r\n          checkMethod\r\n            ? (row) => !checkMethod({ row }) || selection.indexOf(row) > -1\r\n            : row => selection.indexOf(row) > -1\r\n        )\r\n        if (treeConfig) {\r\n          isIndeterminate = !isAllSelected && afterFullData.some(row => treeIndeterminates.indexOf(row) > -1 || selection.indexOf(row) > -1)\r\n        } else {\r\n          isIndeterminate = !isAllSelected && afterFullData.some(row => selection.indexOf(row) > -1)\r\n        }\r\n      }\r\n      this.isAllSelected = isAllSelected\r\n      this.isIndeterminate = isIndeterminate\r\n    }\r\n  },\r\n  // 还原展开、选中等相关状态\r\n  handleReserveStatus () {\r\n    const { expandColumn, treeOpts, treeConfig, fullDataRowIdData, fullAllDataRowMap, currentRow, selectRow, radioReserveRow, radioOpts, checkboxOpts, selection, rowExpandeds, treeExpandeds, expandOpts } = this\r\n    // 单选框\r\n    if (selectRow && !fullAllDataRowMap.has(selectRow)) {\r\n      this.selectRow = null // 刷新单选行状态\r\n    }\r\n    // 还原保留选中状态\r\n    if (radioOpts.reserve && radioReserveRow) {\r\n      const rowid = getRowid(this, radioReserveRow)\r\n      if (fullDataRowIdData[rowid]) {\r\n        this.setRadioRow(fullDataRowIdData[rowid].row)\r\n      }\r\n    }\r\n    // 复选框\r\n    this.selection = getRecoverRow(this, selection) // 刷新多选行状态\r\n    // 还原保留选中状态\r\n    if (checkboxOpts.reserve) {\r\n      this.setCheckboxRow(handleReserveRow(this, this.checkboxReserveRowMap), true)\r\n    }\r\n    if (currentRow && !fullAllDataRowMap.has(currentRow)) {\r\n      this.currentRow = null // 刷新当前行状态\r\n    }\r\n    // 行展开\r\n    this.rowExpandeds = expandColumn ? getRecoverRow(this, rowExpandeds) : [] // 刷新行展开状态\r\n    // 还原保留状态\r\n    if (expandColumn && expandOpts.reserve) {\r\n      this.setRowExpand(handleReserveRow(this, this.rowExpandedReserveRowMap), true)\r\n    }\r\n    // 树展开\r\n    this.treeExpandeds = treeConfig ? getRecoverRow(this, treeExpandeds) : [] // 刷新树展开状态\r\n    if (treeConfig && treeOpts.reserve) {\r\n      this.setTreeExpand(handleReserveRow(this, this.treeExpandedReserveRowMap), true)\r\n    }\r\n  },\r\n  /**\r\n   * 获取单选框保留选中的行\r\n   */\r\n  getRadioReserveRecord () {\r\n    const { fullDataRowIdData, radioReserveRow, radioOpts } = this\r\n    if (radioOpts.reserve && radioReserveRow) {\r\n      if (!fullDataRowIdData[getRowid(this, radioReserveRow)]) {\r\n        return radioReserveRow\r\n      }\r\n    }\r\n    return null\r\n  },\r\n  clearRadioReserve () {\r\n    this.radioReserveRow = null\r\n    return this.$nextTick()\r\n  },\r\n  handleRadioReserveRow (row) {\r\n    const { radioOpts } = this\r\n    if (radioOpts.reserve) {\r\n      this.radioReserveRow = row\r\n    }\r\n  },\r\n  /**\r\n   * 获取复选框保留选中的行\r\n   */\r\n  getCheckboxReserveRecords () {\r\n    const { fullDataRowIdData, checkboxReserveRowMap, checkboxOpts } = this\r\n    const reserveSelection = []\r\n    if (checkboxOpts.reserve) {\r\n      XEUtils.each(checkboxReserveRowMap, (row, rowid) => {\r\n        if (row && !fullDataRowIdData[rowid]) {\r\n          reserveSelection.push(row)\r\n        }\r\n      })\r\n    }\r\n    return reserveSelection\r\n  },\r\n  clearCheckboxReserve () {\r\n    this.checkboxReserveRowMap = {}\r\n    return this.$nextTick()\r\n  },\r\n  handleCheckboxReserveRow (row, checked) {\r\n    const { checkboxReserveRowMap, checkboxOpts } = this\r\n    if (checkboxOpts.reserve) {\r\n      const rowid = getRowid(this, row)\r\n      if (checked) {\r\n        checkboxReserveRowMap[rowid] = row\r\n      } else if (checkboxReserveRowMap[rowid]) {\r\n        delete checkboxReserveRowMap[rowid]\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * 多选，选中所有事件\r\n   */\r\n  triggerCheckAllEvent (evnt, value) {\r\n    this.setAllCheckboxRow(value)\r\n    this.emitEvent('checkbox-all', { records: this.getCheckboxRecords(), reserves: this.getCheckboxReserveRecords(), indeterminates: this.getCheckboxIndeterminateRecords(), checked: value }, evnt)\r\n  },\r\n  /**\r\n   * 多选，切换所有行的选中状态\r\n   */\r\n  toggleAllCheckboxRow () {\r\n    this.triggerCheckAllEvent(null, !this.isAllSelected)\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 用于多选行，手动清空用户的选择\r\n   * 清空行为不管是否被禁用还是保留记录，都将彻底清空选中状态\r\n   */\r\n  clearCheckboxRow () {\r\n    const { tableFullData, treeConfig, treeOpts, checkboxOpts } = this\r\n    const { checkField: property, reserve } = checkboxOpts\r\n    if (property) {\r\n      if (treeConfig) {\r\n        XEUtils.eachTree(tableFullData, item => XEUtils.set(item, property, false), treeOpts)\r\n      } else {\r\n        tableFullData.forEach(item => XEUtils.set(item, property, false))\r\n      }\r\n    }\r\n    if (reserve) {\r\n      tableFullData.forEach(row => this.handleCheckboxReserveRow(row, false))\r\n    }\r\n    this.isAllSelected = false\r\n    this.isIndeterminate = false\r\n    this.selection = []\r\n    this.treeIndeterminates = []\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 处理单选框默认勾选\r\n   */\r\n  handleDefaultRadioChecked () {\r\n    const { radioOpts, fullDataRowIdData } = this\r\n    const { checkRowKey: rowid, reserve } = radioOpts\r\n    if (rowid) {\r\n      if (fullDataRowIdData[rowid]) {\r\n        this.setRadioRow(fullDataRowIdData[rowid].row)\r\n      }\r\n      if (reserve) {\r\n        const rowkey = getRowkey(this)\r\n        this.radioReserveRow = { [rowkey]: rowid }\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * 单选，行选中事件\r\n   */\r\n  triggerRadioRowEvent (evnt, params) {\r\n    const isChange = this.selectRow !== params.row\r\n    this.setRadioRow(params.row)\r\n    if (isChange) {\r\n      this.emitEvent('radio-change', params, evnt)\r\n    }\r\n  },\r\n  triggerCurrentRowEvent (evnt, params) {\r\n    const isChange = this.currentRow !== params.row\r\n    this.setCurrentRow(params.row)\r\n    if (isChange) {\r\n      this.emitEvent('current-change', params, evnt)\r\n    }\r\n  },\r\n  /**\r\n   * 用于当前行，设置某一行为高亮状态\r\n   * @param {Row} row 行对象\r\n   */\r\n  setCurrentRow (row) {\r\n    const { $el } = this\r\n    this.clearCurrentRow()\r\n    this.clearCurrentColumn()\r\n    this.currentRow = row\r\n    if (this.highlightCurrentRow) {\r\n      if ($el) {\r\n        XEUtils.arrayEach($el.querySelectorAll(`[rowid=\"${getRowid(this, row)}\"]`), elem => {addClass(elem, 'row--current');elem.style['background-color'] = $_theme.selected_color})\r\n      }\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  isCheckedByRadioRow (row) {\r\n    return this.selectRow === row\r\n  },\r\n  /**\r\n   * 用于单选行，设置某一行为选中状态\r\n   * @param {Row} row 行对象\r\n   */\r\n  setRadioRow (row) {\r\n    const { radioOpts } = this\r\n    const { checkMethod } = radioOpts\r\n    if (row && (!checkMethod || checkMethod({ row }))) {\r\n      this.selectRow = row\r\n      this.handleRadioReserveRow(row)\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 用于当前行，手动清空当前高亮的状态\r\n   */\r\n  clearCurrentRow () {\r\n    const { $el } = this\r\n    this.currentRow = null\r\n    this.hoverRow = null\r\n    if ($el) {\r\n      XEUtils.arrayEach($el.querySelectorAll('.row--current'), elem => {removeClass(elem, 'row--current');elem.style['background-color'] = ''})\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 用于单选行，手动清空用户的选择\r\n   */\r\n  clearRadioRow () {\r\n    this.selectRow = null\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 用于当前行，获取当前行的数据\r\n   */\r\n  getCurrentRecord () {\r\n    return this.highlightCurrentRow ? this.currentRow : null\r\n  },\r\n  /**\r\n   * 用于单选行，获取当已选中的数据\r\n   */\r\n  getRadioRecord () {\r\n    return this.selectRow\r\n  },\r\n  /**\r\n   * 行 hover 事件\r\n   */\r\n  triggerHoverEvent (evnt, { row }) {\r\n    this.setHoverRow(row)\r\n  },\r\n  setHoverRow (row) {\r\n    const { $el } = this\r\n    const rowid = getRowid(this, row)\r\n    this.clearHoverRow()\r\n    if ($el) {\r\n      XEUtils.arrayEach($el.querySelectorAll(`[rowid=\"${rowid}\"]`), elem => addClass(elem, 'row--hover'))\r\n    }\r\n    this.hoverRow = row\r\n  },\r\n  clearHoverRow () {\r\n    const { $el } = this\r\n    if ($el) {\r\n      XEUtils.arrayEach($el.querySelectorAll('.vxe-body--row.row--hover'), elem => removeClass(elem, 'row--hover'))\r\n    }\r\n    this.hoverRow = null\r\n  },\r\n  triggerHeaderCellClickEvent (evnt, params) {\r\n    const { _lastResizeTime, sortOpts } = this\r\n    const { column } = params\r\n    const cell = evnt.currentTarget\r\n    const triggerResizable = _lastResizeTime && _lastResizeTime > Date.now() - 300\r\n    const triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag\r\n    const triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag\r\n    if (sortOpts.trigger === 'cell' && !(triggerResizable || triggerSort || triggerFilter)) {\r\n      this.triggerSortEvent(evnt, column, getNextSortOrder(this, column))\r\n    }\r\n    this.emitEvent('header-cell-click', Object.assign({ triggerResizable, triggerSort, triggerFilter, cell }, params), evnt)\r\n    if (this.highlightCurrentColumn) {\r\n      return this.setCurrentColumn(column)\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  triggerHeaderCellDblclickEvent (evnt, params) {\r\n    this.emitEvent('header-cell-dblclick', Object.assign({ cell: evnt.currentTarget }, params), evnt)\r\n  },\r\n  getCurrentColumn () {\r\n    return this.highlightCurrentColumn ? this.currentColumn : null\r\n  },\r\n  /**\r\n   * 用于当前列，设置某列行为高亮状态\r\n   * @param {ColumnInfo} fieldOrColumn 列配置\r\n   */\r\n  setCurrentColumn (fieldOrColumn) {\r\n    const column = handleFieldOrColumn(this, fieldOrColumn)\r\n    if (column) {\r\n      this.clearCurrentRow()\r\n      this.clearCurrentColumn()\r\n      this.currentColumn = column\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 用于当前列，手动清空当前高亮的状态\r\n   */\r\n  clearCurrentColumn () {\r\n    this.currentColumn = null\r\n    return this.$nextTick()\r\n  },\r\n  checkValidate (type) {\r\n    if (VXETable._valid) {\r\n      return this.triggerValidate(type)\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 当单元格发生改变时\r\n   * 如果存在规则，则校验\r\n   */\r\n  handleChangeCell (evnt, params) {\r\n    this.checkValidate('blur')\r\n      .catch(e => e)\r\n      .then(() => {\r\n        this.handleActived(params, evnt)\r\n          .then(() => this.checkValidate('change'))\r\n          .catch(e => e)\r\n      })\r\n  },\r\n  /**\r\n   * 列点击事件\r\n   * 如果是单击模式，则激活为编辑状态\r\n   * 如果是双击模式，则单击后选中状态\r\n   */\r\n  triggerCellClickEvent (evnt, params) {\r\n    const { highlightCurrentRow, editStore, radioOpts, expandOpts, treeOpts, editConfig, editOpts, checkboxOpts } = this\r\n    const { actived } = editStore\r\n    const { row, column } = params\r\n    const { type, treeNode } = column\r\n    const isRadioType = type === 'radio'\r\n    const isCheckboxType = type === 'checkbox'\r\n    const isExpandType = type === 'expand'\r\n    const cell = evnt.currentTarget\r\n    const triggerRadio = isRadioType && getEventTargetNode(evnt, cell, 'vxe-cell--radio').flag\r\n    const triggerCheckbox = isCheckboxType && getEventTargetNode(evnt, cell, 'vxe-cell--checkbox').flag\r\n    const triggerTreeNode = treeNode && getEventTargetNode(evnt, cell, 'vxe-tree--btn-wrapper').flag\r\n    const triggerExpandNode = isExpandType && getEventTargetNode(evnt, cell, 'vxe-table--expanded').flag\r\n    params = Object.assign({ cell, triggerRadio, triggerCheckbox, triggerTreeNode, triggerExpandNode }, params)\r\n    if (!triggerCheckbox && !triggerRadio) {\r\n      // 如果是展开行\r\n      if (!triggerExpandNode && (expandOpts.trigger === 'row' || (isExpandType && expandOpts.trigger === 'cell'))) {\r\n        this.triggerRowExpandEvent(evnt, params)\r\n      }\r\n      // 如果是树形表格\r\n      if ((treeOpts.trigger === 'row' || (treeNode && treeOpts.trigger === 'cell'))) {\r\n        this.triggerTreeExpandEvent(evnt, params)\r\n      }\r\n    }\r\n    // 如果点击了树节点\r\n    if (!triggerTreeNode) {\r\n      if (!triggerExpandNode) {\r\n        // 如果是高亮行\r\n        if (highlightCurrentRow) {\r\n          if (!triggerCheckbox && !triggerRadio) {\r\n            this.triggerCurrentRowEvent(evnt, params)\r\n          }\r\n        }\r\n        // 如果是单选框\r\n        if (!triggerRadio && (radioOpts.trigger === 'row' || (isRadioType && radioOpts.trigger === 'cell'))) {\r\n          this.triggerRadioRowEvent(evnt, params)\r\n        }\r\n        // 如果是复选框\r\n        if (!triggerCheckbox && (checkboxOpts.trigger === 'row' || (isCheckboxType && checkboxOpts.trigger === 'cell'))) {\r\n          this.handleToggleCheckRowEvent(evnt, params)\r\n        }\r\n      }\r\n      // 如果设置了单元格选中功能，则不会使用点击事件去处理（只能支持双击模式）\r\n      if (editConfig) {\r\n        if (editOpts.trigger === 'manual') {\r\n          if (actived.args && actived.row === row && column !== actived.column) {\r\n            this.handleChangeCell(evnt, params)\r\n          }\r\n        } else if (!actived.args || row !== actived.row || column !== actived.column) {\r\n          if (editOpts.trigger === 'click') {\r\n            this.handleChangeCell(evnt, params)\r\n          } else if (editOpts.trigger === 'dblclick') {\r\n            if (editOpts.mode === 'row' && actived.row === row) {\r\n              this.handleChangeCell(evnt, params)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.emitEvent('cell-click', params, evnt)\r\n  },\r\n  /**\r\n   * 列双击点击事件\r\n   * 如果是双击模式，则激活为编辑状态\r\n   */\r\n  triggerCellDblclickEvent (evnt, params) {\r\n    const { editStore, editConfig, editOpts } = this\r\n    const { actived } = editStore\r\n    const cell = evnt.currentTarget\r\n    params.cell = cell\r\n    if (editConfig && editOpts.trigger === 'dblclick') {\r\n      if (!actived.args || evnt.currentTarget !== actived.args.cell) {\r\n        if (editOpts.mode === 'row') {\r\n          this.checkValidate('blur')\r\n            .catch(e => e)\r\n            .then(() => {\r\n              this.handleActived(params, evnt)\r\n                .then(() => this.checkValidate('change'))\r\n                .catch(e => e)\r\n            })\r\n        } else if (editOpts.mode === 'cell') {\r\n          this.handleActived(params, evnt)\r\n            .then(() => this.checkValidate('change'))\r\n            .catch(e => e)\r\n        }\r\n      }\r\n    }\r\n    this.emitEvent('cell-dblclick', params, evnt)\r\n  },\r\n  handleDefaultSort () {\r\n    const { sortConfig, sortOpts } = this\r\n    let { defaultSort } = sortOpts\r\n    if (defaultSort) {\r\n      if (!XEUtils.isArray(defaultSort)) {\r\n        defaultSort = [defaultSort]\r\n      }\r\n      if (defaultSort.length) {\r\n        (sortConfig.multiple ? defaultSort : defaultSort.slice(0, 1)).forEach((item) => {\r\n          const { field, order } = item\r\n          if (field && order) {\r\n            const column = this.getColumnByField(field)\r\n            if (column && column.sortable) {\r\n              column.order = order\r\n              column.sortTime = Date.now()\r\n            }\r\n          }\r\n        })\r\n        if (!sortOpts.remote) {\r\n          this.handleTableData(true).then(this.updateStyle)\r\n        }\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * 点击排序事件\r\n   */\r\n  triggerSortEvent (evnt, column, order) {\r\n    const { sortOpts } = this\r\n    const property = column.property\r\n    if (column.sortable || column.remoteSort) {\r\n      let row = this.currentRow;//加\r\n      row && this.clearCurrentRow();//加\r\n      if (!order || column.order === order) {\r\n        this.clearSort(sortOpts.multiple ? column : null)\r\n      } else {\r\n//        this.sort({ field: property, order })//删\r\n        this.sort({ field: column, order })//加\r\n      }\r\n      const params = { column, property, order: column.order, sortList: this.getSortColumns() }\r\n      row && this.$nextTick(() => this.setCurrentRow(row));//加\r\n      this.emitEvent('sort-change', params, evnt)\r\n    }\r\n  },\r\n  sort (sortConfs, sortOrder) {\r\n    const { sortOpts } = this\r\n    const { multiple, remote, orders } = sortOpts\r\n    if (sortConfs) {\r\n      if (XEUtils.isString(sortConfs)) {\r\n        sortConfs = [\r\n          { field: sortConfs, order: sortOrder }\r\n        ]\r\n      }\r\n    }\r\n    if (!XEUtils.isArray(sortConfs)) {\r\n      sortConfs = [sortConfs]\r\n    }\r\n    if (sortConfs.length) {\r\n      let firstSortColumn\r\n      if (!multiple) {\r\n        clearAllSort(this)\r\n      }\r\n      (multiple ? sortConfs : [sortConfs[0]]).forEach((confs) => {\r\n        let { field, order } = confs\r\n        let column = field\r\n        if (XEUtils.isString(field)) {\r\n          column = this.getColumnByField(field)\r\n        }\r\n        if (column && (column.sortable || column.remoteSort)) {\r\n          if (!firstSortColumn) {\r\n            firstSortColumn = column\r\n          }\r\n          if (orders.indexOf(order) === -1) {\r\n            order = getNextSortOrder(this, column)\r\n          }\r\n          if (column.order !== order) {\r\n            column.order = order\r\n          }\r\n        }\r\n      })\r\n      // 如果是服务端排序，则跳过本地排序处理\r\n      if (!remote || (firstSortColumn && firstSortColumn.remoteSort)) {\r\n        this.handleTableData(true)\r\n      }\r\n      return this.$nextTick().then(this.updateStyle)\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 清空指定列的排序条件\r\n   * 如果为空则清空所有列的排序条件\r\n   * @param {String} column 列或字段名\r\n   */\r\n  clearSort (fieldOrColumn) {\r\n    const { sortOpts } = this\r\n    if (fieldOrColumn) {\r\n      const column = handleFieldOrColumn(this, fieldOrColumn)\r\n      if (column) {\r\n        column.order = null\r\n      }\r\n    } else {\r\n      clearAllSort(this)\r\n    }\r\n    if (!sortOpts.remote) {\r\n      return this.handleTableData(true)\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  // 在 v3 中废弃\r\n  getSortColumn () {\r\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\r\n      UtilTools.warn('vxe.error.delFunc', ['getSortColumn', 'getSortColumns'])\r\n    }\r\n    return XEUtils.find(this.tableFullColumn, column => (column.sortable || column.remoteSort) && column.order)\r\n  },\r\n  isSort (fieldOrColumn) {\r\n    if (fieldOrColumn) {\r\n      const column = handleFieldOrColumn(this, fieldOrColumn)\r\n      return column && column.sortable && !!column.order\r\n    }\r\n    return this.getSortColumns().length > 0\r\n  },\r\n  getSortColumns () {\r\n    const sortList = []\r\n    this.tableFullColumn.forEach((column) => {\r\n      const { order } = column\r\n      if ((column.sortable || column.remoteSort) && order) {\r\n        sortList.push({ column, property: column.property, order })\r\n      }\r\n    })\r\n    return sortList\r\n  },\r\n  /**\r\n   * 关闭筛选\r\n   * @param {Event} evnt 事件\r\n   */\r\n  closeFilter () {\r\n    Object.assign(this.filterStore, {\r\n      isAllSelected: false,\r\n      isIndeterminate: false,\r\n      options: [],\r\n      visible: false\r\n    })\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 判断指定列是否为筛选状态，如果为空则判断所有列\r\n   * @param {String} fieldOrColumn 字段名\r\n   */\r\n  isFilter (fieldOrColumn) {\r\n    const column = handleFieldOrColumn(this, fieldOrColumn)\r\n    if (column) {\r\n      return column.filters && column.filters.some(option => option.checked)\r\n    }\r\n    return this.getCheckedFilters().length > 0\r\n  },\r\n  /**\r\n   * 判断展开行是否懒加载完成\r\n   * @param {Row} row 行对象\r\n   */\r\n  isRowExpandLoaded (row) {\r\n    const rest = this.fullAllDataRowMap.get(row)\r\n    return rest && rest.expandLoaded\r\n  },\r\n  clearRowExpandLoaded (row) {\r\n    const { expandOpts, expandLazyLoadeds, fullAllDataRowMap } = this\r\n    const { lazy } = expandOpts\r\n    const rest = fullAllDataRowMap.get(row)\r\n    if (lazy && rest) {\r\n      rest.expandLoaded = false\r\n      XEUtils.remove(expandLazyLoadeds, item => row === item)\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 重新加载展开行的内容\r\n   * @param {Row} row 行对象\r\n   */\r\n  reloadExpandContent (row) {\r\n    const { expandOpts, expandLazyLoadeds } = this\r\n    const { lazy } = expandOpts\r\n    if (lazy && expandLazyLoadeds.indexOf(row) === -1) {\r\n      this.clearRowExpandLoaded(row)\r\n        .then(() => this.handleAsyncRowExpand(row))\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 展开行事件\r\n   */\r\n  triggerRowExpandEvent (evnt, params) {\r\n    const { expandOpts, expandLazyLoadeds, expandColumn: column } = this\r\n    const { row } = params\r\n    const { lazy } = expandOpts\r\n    if (!lazy || expandLazyLoadeds.indexOf(row) === -1) {\r\n      const expanded = !this.isExpandByRow(row)\r\n      const columnIndex = this.getColumnIndex(column)\r\n      const $columnIndex = this.getVMColumnIndex(column)\r\n      this.setRowExpand(row, expanded)\r\n      this.emitEvent('toggle-row-expand', { expanded, column, columnIndex, $columnIndex, row, rowIndex: this.getRowIndex(row), $rowIndex: this.getVMRowIndex(row) }, evnt)\r\n    }\r\n  },\r\n  /**\r\n   * 切换展开行\r\n   */\r\n  toggleRowExpand (row) {\r\n    return this.setRowExpand(row, !this.isExpandByRow(row))\r\n  },\r\n  /**\r\n   * 处理默认展开行\r\n   */\r\n  handleDefaultRowExpand () {\r\n    const { expandOpts, fullDataRowIdData } = this\r\n    const { expandAll, expandRowKeys } = expandOpts\r\n    if (expandAll) {\r\n      this.setAllRowExpand(true)\r\n    } else if (expandRowKeys) {\r\n      const defExpandeds = []\r\n      expandRowKeys.forEach(rowid => {\r\n        if (fullDataRowIdData[rowid]) {\r\n          defExpandeds.push(fullDataRowIdData[rowid].row)\r\n        }\r\n      })\r\n      this.setRowExpand(defExpandeds, true)\r\n    }\r\n  },\r\n  /**\r\n   * 设置所有行的展开与否\r\n   * @param {Boolean} expanded 是否展开\r\n   */\r\n  setAllRowExpand (expanded) {\r\n    return this.setRowExpand(this.expandOpts.lazy ? this.tableData : this.tableFullData, expanded)\r\n  },\r\n  handleAsyncRowExpand (row) {\r\n    const rest = this.fullAllDataRowMap.get(row)\r\n    return new Promise(resolve => {\r\n      this.expandLazyLoadeds.push(row)\r\n      this.expandOpts.loadMethod({ $table: this, row, rowIndex: this.getRowIndex(row), $rowIndex: this.getVMRowIndex(row) }).catch(e => e).then(() => {\r\n        rest.expandLoaded = true\r\n        XEUtils.remove(this.expandLazyLoadeds, item => item === row)\r\n        this.rowExpandeds.push(row)\r\n        resolve(this.$nextTick().then(this.recalculate))\r\n      })\r\n    })\r\n  },\r\n  /**\r\n   * 设置展开行，二个参数设置这一行展开与否\r\n   * 支持单行\r\n   * 支持多行\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {Boolean} expanded 是否展开\r\n   */\r\n  setRowExpand (rows, expanded) {\r\n    const { fullAllDataRowMap, expandLazyLoadeds, expandOpts, expandColumn: column } = this\r\n    let { rowExpandeds } = this\r\n    const { reserve, lazy, accordion, toggleMethod } = expandOpts\r\n    const lazyRests = []\r\n    const columnIndex = this.getColumnIndex(column)\r\n    const $columnIndex = this.getVMColumnIndex(column)\r\n    if (rows) {\r\n      if (!XEUtils.isArray(rows)) {\r\n        rows = [rows]\r\n      }\r\n      if (accordion) {\r\n        // 只能同时展开一个\r\n        rowExpandeds = []\r\n        rows = rows.slice(rows.length - 1, rows.length)\r\n      }\r\n      const validRows = toggleMethod ? rows.filter(row => toggleMethod({ expanded, column, columnIndex, $columnIndex, row, rowIndex: this.getRowIndex(row), $rowIndex: this.getVMRowIndex(row) })) : rows\r\n      if (expanded) {\r\n        validRows.forEach(row => {\r\n          if (rowExpandeds.indexOf(row) === -1) {\r\n            const rest = fullAllDataRowMap.get(row)\r\n            const isLoad = lazy && !rest.expandLoaded && expandLazyLoadeds.indexOf(row) === -1\r\n            if (isLoad) {\r\n              lazyRests.push(this.handleAsyncRowExpand(row))\r\n            } else {\r\n              rowExpandeds.push(row)\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        XEUtils.remove(rowExpandeds, row => validRows.indexOf(row) > -1)\r\n      }\r\n      if (reserve) {\r\n        validRows.forEach(row => this.handleRowExpandReserve(row, expanded))\r\n      }\r\n    }\r\n    this.rowExpandeds = rowExpandeds\r\n    return Promise.all(lazyRests).then(this.recalculate)\r\n  },\r\n  /**\r\n   * 判断行是否为展开状态\r\n   * @param {Row} row 行对象\r\n   */\r\n  isExpandByRow (row) {\r\n    return this.rowExpandeds.indexOf(row) > -1\r\n  },\r\n  /**\r\n   * 手动清空展开行状态，数据会恢复成未展开的状态\r\n   */\r\n  clearRowExpand () {\r\n    const { expandOpts, rowExpandeds, tableFullData } = this\r\n    const { reserve } = expandOpts\r\n    const isExists = rowExpandeds.length\r\n    this.rowExpandeds = []\r\n    if (reserve) {\r\n      tableFullData.forEach(row => this.handleRowExpandReserve(row, false))\r\n    }\r\n    return this.$nextTick().then(() => {\r\n      if (isExists) {\r\n        this.recalculate()\r\n      }\r\n    })\r\n  },\r\n  clearRowExpandReserve () {\r\n    this.rowExpandedReserveRowMap = {}\r\n    return this.$nextTick()\r\n  },\r\n  handleRowExpandReserve (row, expanded) {\r\n    const { rowExpandedReserveRowMap, expandOpts } = this\r\n    if (expandOpts.reserve) {\r\n      const rowid = getRowid(this, row)\r\n      if (expanded) {\r\n        rowExpandedReserveRowMap[rowid] = row\r\n      } else if (rowExpandedReserveRowMap[rowid]) {\r\n        delete rowExpandedReserveRowMap[rowid]\r\n      }\r\n    }\r\n  },\r\n  getRowExpandRecords () {\r\n    return this.rowExpandeds.slice(0)\r\n  },\r\n  getTreeExpandRecords () {\r\n    return this.treeExpandeds.slice(0)\r\n  },\r\n  /**\r\n   * 获取数表格状态\r\n   */\r\n  getTreeStatus () {\r\n    if (this.treeConfig) {\r\n      return {\r\n        config: this.treeOpts,\r\n        rowExpandeds: this.getTreeExpandRecords()\r\n      }\r\n    }\r\n    return null\r\n  },\r\n  /**\r\n   * 判断树节点是否懒加载完成\r\n   * @param {Row} row 行对象\r\n   */\r\n  isTreeExpandLoaded (row) {\r\n    const rest = this.fullAllDataRowMap.get(row)\r\n    return rest && rest.treeLoaded\r\n  },\r\n  clearTreeExpandLoaded (row) {\r\n    const { treeOpts, treeExpandeds, fullAllDataRowMap } = this\r\n    const { lazy } = treeOpts\r\n    const rest = fullAllDataRowMap.get(row)\r\n    if (lazy && rest) {\r\n      rest.treeLoaded = false\r\n      XEUtils.remove(treeExpandeds, item => row === item)\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 重新加载树的子节点\r\n   * @param {Row} row 行对象\r\n   */\r\n  reloadTreeChilds (row) {\r\n    const { treeOpts, treeLazyLoadeds } = this\r\n    const { lazy, hasChild } = treeOpts\r\n    if (lazy && row[hasChild] && treeLazyLoadeds.indexOf(row) === -1) {\r\n      this.clearTreeExpandLoaded(row)\r\n        .then(() => this.handleAsyncTreeExpandChilds(row))\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 展开树节点事件\r\n   */\r\n  triggerTreeExpandEvent (evnt, params) {\r\n    const { treeOpts, treeLazyLoadeds } = this\r\n    const { row, column } = params\r\n    const { lazy } = treeOpts\r\n    if (!lazy || treeLazyLoadeds.indexOf(row) === -1) {\r\n      const expanded = !this.isTreeExpandByRow(row)\r\n      const columnIndex = this.getColumnIndex(column)\r\n      const $columnIndex = this.getVMColumnIndex(column)\r\n      this.setTreeExpand(row, expanded)\r\n      this.emitEvent('toggle-tree-expand', { expanded, column, columnIndex, $columnIndex, row }, evnt)\r\n    }\r\n  },\r\n  /**\r\n   * 切换/展开树节点\r\n   */\r\n  toggleTreeExpand (row) {\r\n    return this.setTreeExpand(row, !this.isTreeExpandByRow(row))\r\n  },\r\n  /**\r\n   * 处理默认展开树节点\r\n   */\r\n  handleDefaultTreeExpand () {\r\n    const { treeConfig, treeOpts, tableFullData } = this\r\n    if (treeConfig) {\r\n      const { expandAll, expandRowKeys } = treeOpts\r\n      if (expandAll) {\r\n        this.setAllTreeExpand(true)\r\n      } else if (expandRowKeys) {\r\n        const defExpandeds = []\r\n        const rowkey = getRowkey(this)\r\n        expandRowKeys.forEach(rowid => {\r\n          const matchObj = XEUtils.findTree(tableFullData, item => rowid === XEUtils.get(item, rowkey), treeOpts)\r\n          if (matchObj) {\r\n            defExpandeds.push(matchObj.item)\r\n          }\r\n        })\r\n        this.setTreeExpand(defExpandeds, true)\r\n      }\r\n    }\r\n  },\r\n  handleAsyncTreeExpandChilds (row) {\r\n    const { fullAllDataRowMap, treeExpandeds, treeOpts, treeLazyLoadeds, checkboxOpts } = this\r\n    const { loadMethod } = treeOpts\r\n    const { checkStrictly } = checkboxOpts\r\n    const rest = fullAllDataRowMap.get(row)\r\n    return new Promise(resolve => {\r\n      treeLazyLoadeds.push(row)\r\n      loadMethod({ $table: this, row }).catch(() => []).then(childRecords => {\r\n        rest.treeLoaded = true\r\n        XEUtils.remove(treeLazyLoadeds, item => item === row)\r\n        if (!XEUtils.isArray(childRecords)) {\r\n          childRecords = []\r\n        }\r\n        if (childRecords) {\r\n          this.loadChildren(row, childRecords).then(childRows => {\r\n            if (childRows.length && treeExpandeds.indexOf(row) === -1) {\r\n              treeExpandeds.push(row)\r\n            }\r\n            // 如果当前节点已选中，则展开后子节点也被选中\r\n            if (!checkStrictly && this.isCheckedByCheckboxRow(row)) {\r\n              this.setCheckboxRow(childRows, true)\r\n            }\r\n          })\r\n        }\r\n        resolve(this.$nextTick().then(this.recalculate))\r\n      })\r\n    })\r\n  },\r\n  /**\r\n   * 设置所有树节点的展开与否\r\n   * @param {Boolean} expanded 是否展开\r\n   */\r\n  setAllTreeExpand (expanded) {\r\n    const { tableFullData, treeOpts } = this\r\n    const { lazy, children } = treeOpts\r\n    const expandeds = []\r\n    XEUtils.eachTree(tableFullData, row => {\r\n      const rowChildren = row[children]\r\n      if (lazy || (rowChildren && rowChildren.length)) {\r\n        expandeds.push(row)\r\n      }\r\n    }, treeOpts)\r\n    return this.setTreeExpand(expandeds, expanded)\r\n  },\r\n  /**\r\n   * 设置展开树形节点，二个参数设置这一行展开与否\r\n   * 支持单行\r\n   * 支持多行\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {Boolean} expanded 是否展开\r\n   */\r\n  setTreeExpand (rows, expanded) {\r\n    const { fullAllDataRowMap, tableFullData, treeExpandeds, treeOpts, treeLazyLoadeds, treeNodeColumn } = this\r\n    const { reserve, lazy, hasChild, children, accordion, toggleMethod } = treeOpts\r\n    const result = []\r\n    const columnIndex = this.getColumnIndex(treeNodeColumn)\r\n    const $columnIndex = this.getVMColumnIndex(treeNodeColumn)\r\n    if (rows) {\r\n      if (!XEUtils.isArray(rows)) {\r\n        rows = [rows]\r\n      }\r\n      if (rows.length) {\r\n        let validRows = toggleMethod ? rows.filter(row => toggleMethod({ expanded, column: treeNodeColumn, columnIndex, $columnIndex, row })) : rows\r\n        if (accordion) {\r\n          validRows = validRows.length ? [validRows[validRows.length - 1]] : []\r\n          // 同一级只能展开一个\r\n          const matchObj = XEUtils.findTree(tableFullData, item => item === validRows[0], treeOpts)\r\n          if (matchObj) {\r\n            XEUtils.remove(treeExpandeds, item => matchObj.items.indexOf(item) > -1)\r\n          }\r\n        }\r\n        if (expanded) {\r\n          validRows.forEach(row => {\r\n            if (treeExpandeds.indexOf(row) === -1) {\r\n              const rest = fullAllDataRowMap.get(row)\r\n              const isLoad = lazy && row[hasChild] && !rest.treeLoaded && treeLazyLoadeds.indexOf(row) === -1\r\n              // 是否使用懒加载\r\n              if (isLoad) {\r\n                result.push(this.handleAsyncTreeExpandChilds(row))\r\n              } else {\r\n                if (row[children] && row[children].length) {\r\n                  treeExpandeds.push(row)\r\n                }\r\n              }\r\n            }\r\n          })\r\n        } else {\r\n          XEUtils.remove(treeExpandeds, row => validRows.indexOf(row) > -1)\r\n        }\r\n        if (reserve) {\r\n          validRows.forEach(row => this.handleTreeExpandReserve(row, expanded))\r\n        }\r\n        return Promise.all(result).then(this.recalculate)\r\n      }\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 判断行是否为树形节点展开状态\r\n   * @param {Row} row 行对象\r\n   */\r\n  isTreeExpandByRow (row) {\r\n    return this.treeExpandeds.indexOf(row) > -1\r\n  },\r\n  /**\r\n   * 手动清空树形节点的展开状态，数据会恢复成未展开的状态\r\n   */\r\n  clearTreeExpand () {\r\n    const { treeOpts, treeExpandeds, tableFullData } = this\r\n    const { reserve } = treeOpts\r\n    const isExists = treeExpandeds.length\r\n    this.treeExpandeds = []\r\n    if (reserve) {\r\n      XEUtils.eachTree(tableFullData, row => this.handleTreeExpandReserve(row, false), treeOpts)\r\n    }\r\n    return this.$nextTick().then(() => {\r\n      if (isExists) {\r\n        this.recalculate()\r\n      }\r\n    })\r\n  },\r\n  clearTreeExpandReserve () {\r\n    this.treeExpandedReserveRowMap = {}\r\n    return this.$nextTick()\r\n  },\r\n  handleTreeExpandReserve (row, expanded) {\r\n    const { treeExpandedReserveRowMap, treeOpts } = this\r\n    if (treeOpts.reserve) {\r\n      const rowid = getRowid(this, row)\r\n      if (expanded) {\r\n        treeExpandedReserveRowMap[rowid] = row\r\n      } else if (treeExpandedReserveRowMap[rowid]) {\r\n        delete treeExpandedReserveRowMap[rowid]\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * 获取表格的滚动状态\r\n   */\r\n  getScroll () {\r\n    const { $refs, scrollXLoad, scrollYLoad } = this\r\n    const bodyElem = $refs.tableBody.$el\r\n    return {\r\n      virtualX: scrollXLoad,\r\n      virtualY: scrollYLoad,\r\n      scrollTop: bodyElem.scrollTop,\r\n      scrollLeft: bodyElem.scrollLeft\r\n    }\r\n  },\r\n  /**\r\n   * 横向 X 可视渲染事件处理\r\n   */\r\n  triggerScrollXEvent () {\r\n    this.loadScrollXData()\r\n  },\r\n  loadScrollXData () {\r\n    const { mergeList, mergeFooterList, scrollXStore } = this\r\n    const { startIndex, endIndex, offsetSize } = scrollXStore\r\n    const { toVisibleIndex, visibleSize } = computeVirtualX(this)\r\n    const offsetItem = {\r\n      startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),\r\n      endIndex: toVisibleIndex + visibleSize + offsetSize\r\n    }\r\n    calculateMergerOffserIndex(mergeList.concat(mergeFooterList), offsetItem, 'col')\r\n    const { startIndex: offsetStartIndex, endIndex: offsetEndIndex } = offsetItem\r\n    if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\r\n      if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\r\n        scrollXStore.startIndex = offsetStartIndex\r\n        scrollXStore.endIndex = offsetEndIndex\r\n        this.updateScrollXData()\r\n      }\r\n    }\r\n    this.closeTooltip()\r\n  },\r\n  /**\r\n   * 纵向 Y 可视渲染事件处理\r\n   */\r\n  triggerScrollYEvent (evnt) {\r\n    let row = this.currentRow;//加\r\n    row && this.clearCurrentRow();//加\r\n    const { scrollYStore } = this\r\n    const { adaptive, offsetSize, visibleSize } = scrollYStore\r\n    // webkit 浏览器使用最佳的渲染方式，且最高渲染量不能大于 40 条\r\n    if (isWebkit && adaptive && (offsetSize * 2 + visibleSize) <= 40) {\r\n      this.loadScrollYData(evnt)\r\n    } else {\r\n      this.debounceScrollY(evnt)\r\n    }\r\n    row && this.$nextTick(() => this.setCurrentRow(row));//加\r\n  },\r\n  debounceScrollY: XEUtils.debounce(function (evnt) {\r\n    this.loadScrollYData(evnt)\r\n  }, debounceScrollYDuration, { leading: false, trailing: true }),\r\n  /**\r\n   * 纵向 Y 可视渲染处理\r\n   */\r\n  loadScrollYData (evnt) {\r\n    const { mergeList, scrollYStore } = this\r\n    const { startIndex, endIndex, visibleSize, offsetSize, rowHeight } = scrollYStore\r\n    const scrollBodyElem = evnt.currentTarget || evnt.target\r\n    const scrollTop = scrollBodyElem.scrollTop\r\n    const toVisibleIndex = Math.floor(scrollTop / rowHeight)\r\n    const offsetItem = {\r\n      startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),\r\n      endIndex: toVisibleIndex + visibleSize + offsetSize\r\n    }\r\n    calculateMergerOffserIndex(mergeList, offsetItem, 'row')\r\n    const { startIndex: offsetStartIndex, endIndex: offsetEndIndex } = offsetItem\r\n    if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\r\n      if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\r\n        scrollYStore.startIndex = offsetStartIndex\r\n        scrollYStore.endIndex = offsetEndIndex\r\n        this.updateScrollYData()\r\n      }\r\n    }\r\n  },\r\n  // 计算可视渲染相关数据\r\n  computeScrollLoad () {\r\n    return this.$nextTick().then(() => {\r\n      const { sYOpts, sXOpts, scrollXLoad, scrollYLoad, scrollXStore, scrollYStore } = this\r\n      // 计算 X 逻辑\r\n      if (scrollXLoad) {\r\n        const { visibleSize: visibleXSize } = computeVirtualX(this)\r\n        const offsetXSize = sXOpts.oSize ? XEUtils.toNumber(sXOpts.oSize) : browse.msie ? 10 : (browse.edge ? 5 : 0)\r\n        scrollXStore.offsetSize = offsetXSize\r\n        scrollXStore.visibleSize = visibleXSize\r\n        scrollXStore.endIndex = Math.max(scrollXStore.startIndex + scrollXStore.visibleSize + offsetXSize, scrollXStore.endIndex)\r\n        this.updateScrollXData()\r\n      } else {\r\n        this.updateScrollXSpace()\r\n      }\r\n      // 计算 Y 逻辑\r\n      const { rowHeight, visibleSize: visibleYSize } = computeVirtualY(this)\r\n      scrollYStore.rowHeight = rowHeight\r\n      if (scrollYLoad) {\r\n        const offsetYSize = sYOpts.oSize ? XEUtils.toNumber(sYOpts.oSize) : browse.msie ? 20 : (browse.edge ? 10 : 0)\r\n        scrollYStore.offsetSize = offsetYSize\r\n        scrollYStore.visibleSize = visibleYSize\r\n        scrollYStore.endIndex = Math.max(scrollYStore.startIndex + visibleYSize + offsetYSize, scrollYStore.endIndex)\r\n        this.updateScrollYData()\r\n      } else {\r\n        this.updateScrollYSpace()\r\n      }\r\n      this.rowHeight = rowHeight\r\n      this.$nextTick(this.updateStyle)\r\n    })\r\n  },\r\n  handleTableColumn () {\r\n    const { scrollXLoad, visibleColumn, scrollXStore } = this\r\n    this.tableColumn = scrollXLoad ? visibleColumn.slice(scrollXStore.startIndex, scrollXStore.endIndex) : visibleColumn.slice(0)\r\n  },\r\n  updateScrollXData () {\r\n    this.handleTableColumn()\r\n    this.updateScrollXSpace()\r\n  },\r\n  // 更新横向 X 可视渲染上下剩余空间大小\r\n  updateScrollXSpace () {\r\n    const { $refs, elemStore, visibleColumn, scrollXStore, scrollXLoad, tableWidth, scrollbarWidth } = this\r\n    const { tableHeader, tableBody, tableFooter } = $refs\r\n    const tableBodyElem = tableBody ? tableBody.$el : null\r\n    if (tableBodyElem) {\r\n      const tableHeaderElem = tableHeader ? tableHeader.$el : null\r\n      const tableFooterElem = tableFooter ? tableFooter.$el : null\r\n      const headerElem = tableHeaderElem ? tableHeaderElem.querySelector('.vxe-table--header') : null\r\n      const bodyElem = tableBodyElem.querySelector('.vxe-table--body')\r\n      const footerElem = tableFooterElem ? tableFooterElem.querySelector('.vxe-table--footer') : null\r\n      const leftSpaceWidth = visibleColumn.slice(0, scrollXStore.startIndex).reduce((previous, column) => previous + column.renderWidth, 0)\r\n      let marginLeft = ''\r\n      if (scrollXLoad) {\r\n        marginLeft = `${leftSpaceWidth}px`\r\n      }\r\n      if (headerElem) {\r\n        headerElem.style.marginLeft = marginLeft\r\n      }\r\n      bodyElem.style.marginLeft = marginLeft\r\n      if (footerElem) {\r\n        footerElem.style.marginLeft = marginLeft\r\n      }\r\n      const containerList = ['main']\r\n      containerList.forEach(name => {\r\n        const layoutList = ['header', 'body', 'footer']\r\n        layoutList.forEach(layout => {\r\n          const xSpaceElem = elemStore[`${name}-${layout}-xSpace`]\r\n          if (xSpaceElem) {\r\n            xSpaceElem.style.width = scrollXLoad ? `${tableWidth + (layout === 'header' ? scrollbarWidth : 0)}px` : ''\r\n          }\r\n        })\r\n      })\r\n      this.$nextTick(this.updateStyle)\r\n    }\r\n  },\r\n  updateScrollYData () {\r\n    this.handleTableData()\r\n    this.updateScrollYSpace()\r\n  },\r\n  // 更新纵向 Y 可视渲染上下剩余空间大小\r\n  updateScrollYSpace () {\r\n    const { elemStore, scrollYStore, scrollYLoad, afterFullData } = this\r\n    const { startIndex, rowHeight } = scrollYStore\r\n    const bodyHeight = afterFullData.length * rowHeight\r\n    const topSpaceHeight = Math.max(0, startIndex * rowHeight)\r\n    const containerList = ['main', 'left', 'right']\r\n    let marginTop = ''\r\n    let ySpaceHeight = ''\r\n    if (scrollYLoad) {\r\n      marginTop = `${topSpaceHeight}px`\r\n      ySpaceHeight = `${bodyHeight}px`\r\n    }\r\n    containerList.forEach(name => {\r\n      const layoutList = ['header', 'body', 'footer']\r\n      const tableElem = elemStore[`${name}-body-table`]\r\n      if (tableElem) {\r\n        tableElem.style.marginTop = marginTop\r\n      }\r\n      layoutList.forEach(layout => {\r\n        const ySpaceElem = elemStore[`${name}-${layout}-ySpace`]\r\n        if (ySpaceElem) {\r\n          ySpaceElem.style.height = ySpaceHeight\r\n        }\r\n      })\r\n    })\r\n    this.$nextTick(this.updateStyle)\r\n  },\r\n  /**\r\n   * 如果有滚动条，则滚动到对应的位置\r\n   * @param {Number} scrollLeft 左距离\r\n   * @param {Number} scrollTop 上距离\r\n   */\r\n  scrollTo (scrollLeft, scrollTop) {\r\n    const { $refs } = this\r\n    const { tableBody, rightBody, tableFooter } = $refs\r\n    const tableBodyElem = tableBody ? tableBody.$el : null\r\n    const rightBodyElem = rightBody ? rightBody.$el : null\r\n    const tableFooterElem = tableFooter ? tableFooter.$el : null\r\n    if (XEUtils.isNumber(scrollLeft)) {\r\n      setScrollLeft(tableFooterElem || tableBodyElem, scrollLeft)\r\n    }\r\n    if (XEUtils.isNumber(scrollTop)) {\r\n      setScrollTop(rightBodyElem || tableBodyElem, scrollTop)\r\n    }\r\n    if (this.scrollXLoad || this.scrollYLoad) {\r\n      return new Promise(resolve => setTimeout(() => resolve(this.$nextTick()), 50))\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 如果有滚动条，则滚动到对应的行\r\n   * @param {Row} row 行对象\r\n   * @param {ColumnInfo} column 列配置\r\n   */\r\n  scrollToRow (row, fieldOrColumn) {\r\n    const rest = []\r\n    if (row) {\r\n      if (this.treeConfig) {\r\n        rest.push(this.scrollToTreeRow(row))\r\n      } else {\r\n        rest.push(DomTools.rowToVisible(this, row))\r\n      }\r\n    }\r\n    if (fieldOrColumn) {\r\n      rest.push(this.scrollToColumn(fieldOrColumn))\r\n    }\r\n    return Promise.all(rest)\r\n  },\r\n  /**\r\n   * 如果有滚动条，则滚动到对应的列\r\n   * @param {ColumnInfo} column 列配置\r\n   */\r\n  scrollToColumn (fieldOrColumn) {\r\n    const column = handleFieldOrColumn(this, fieldOrColumn)\r\n    if (column && this.fullColumnMap.has(column)) {\r\n      return DomTools.colToVisible(this, column)\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 对于树形结构中，可以直接滚动到指定深层节点中\r\n   * 对于某些特定的场景可能会用到，比如定位到某一节点\r\n   * @param {Row} row 行对象\r\n   */\r\n  scrollToTreeRow (row) {\r\n    const { tableFullData, treeConfig, treeOpts } = this\r\n    if (treeConfig) {\r\n      const matchObj = XEUtils.findTree(tableFullData, item => item === row, treeOpts)\r\n      if (matchObj) {\r\n        const nodes = matchObj.nodes\r\n        nodes.forEach((row, index) => {\r\n          if (index < nodes.length - 1 && !this.isTreeExpandByRow(row)) {\r\n            this.setTreeExpand(row, true)\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 手动清除滚动相关信息，还原到初始状态\r\n   */\r\n  clearScroll () {\r\n    const { $refs } = this\r\n    const { tableBody, rightBody, tableFooter } = $refs\r\n    const tableBodyElem = tableBody ? tableBody.$el : null\r\n    const rightBodyElem = rightBody ? rightBody.$el : null\r\n    const tableFooterElem = tableFooter ? tableFooter.$el : null\r\n    if (rightBodyElem) {\r\n      rightBodyElem.scrollTop = 0\r\n    }\r\n    if (tableFooterElem) {\r\n      tableFooterElem.scrollLeft = 0\r\n    }\r\n    if (tableBodyElem) {\r\n      tableBodyElem.scrollTop = 0\r\n      tableBodyElem.scrollLeft = 0\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 更新表尾合计\r\n   */\r\n  updateFooter () {\r\n    const { showFooter, visibleColumn, footerMethod } = this\r\n    if (showFooter && footerMethod) {\r\n      this.footerTableData = visibleColumn.length ? footerMethod({ columns: visibleColumn, data: this.afterFullData, $table: this, $grid: this.$xegrid }) : []\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n  /**\r\n   * 更新列状态\r\n   * 如果组件值 v-model 发生 change 时，调用改函数用于更新某一列编辑状态\r\n   * 如果单元格配置了校验规则，则会进行校验\r\n   */\r\n  updateStatus (scope, cellValue) {\r\n    const customVal = !XEUtils.isUndefined(cellValue)\r\n    return this.$nextTick().then(() => {\r\n      const { $refs, editRules, validStore } = this\r\n      if (scope && $refs.tableBody && editRules) {\r\n        const { row, column } = scope\r\n        const type = 'change'\r\n        if (this.hasCellRules(type, row, column)) {\r\n          const cell = this.getCell(row, column)\r\n          if (cell) {\r\n            return this.validCellRules(type, row, column, cellValue)\r\n              .then(() => {\r\n                if (customVal && validStore.visible) {\r\n                  setCellValue(row, column, cellValue)\r\n                }\r\n                this.clearValidate()\r\n              })\r\n              .catch(({ rule }) => {\r\n                if (customVal) {\r\n                  setCellValue(row, column, cellValue)\r\n                }\r\n                this.showValidTooltip({ rule, row, column, cell })\r\n              })\r\n          }\r\n        }\r\n      }\r\n    })\r\n  },\r\n  handleDefaultMergeCells () {\r\n    this.setMergeCells(this.mergeCells)\r\n  },\r\n  /**\r\n   * 设置合并单元格\r\n   * @param {TableMergeConfig[]} merges { row: Row|number, column: ColumnInfo|number, rowspan: number, colspan: number }\r\n   */\r\n  setMergeCells (merges) {\r\n    if (this.spanMethod) {\r\n      UtilTools.error('vxe.error.errConflicts', ['merge-cells', 'span-method'])\r\n    }\r\n    setMerges(this, merges, this.mergeList, this.afterFullData)\r\n    return this.$nextTick().then(() => this.updateCellAreas())\r\n  },\r\n  /**\r\n   * 移除单元格合并\r\n   * @param {TableMergeConfig[]} merges 多个或数组 [{row:Row|number, col:ColumnInfo|number}]\r\n   */\r\n  removeMergeCells (merges) {\r\n    if (this.spanMethod) {\r\n      UtilTools.error('vxe.error.errConflicts', ['merge-cells', 'span-method'])\r\n    }\r\n    const rest = removeMerges(this, merges, this.mergeList, this.afterFullData)\r\n    return this.$nextTick().then(() => {\r\n      this.updateCellAreas()\r\n      return rest\r\n    })\r\n  },\r\n  /**\r\n   * 获取所有被合并的单元格\r\n   */\r\n  getMergeCells () {\r\n    return this.mergeList.slice(0)\r\n  },\r\n  /**\r\n   * 清除所有单元格合并\r\n   */\r\n  clearMergeCells () {\r\n    this.mergeList = []\r\n    return this.$nextTick()\r\n  },\r\n  handleDefaultMergeFooterItems () {\r\n    this.setMergeFooterItems(this.mergeFooterItems)\r\n  },\r\n  setMergeFooterItems (merges) {\r\n    if (this.footerSpanMethod) {\r\n      UtilTools.error('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method'])\r\n    }\r\n    setMerges(this, merges, this.mergeFooterList, null)\r\n    return this.$nextTick().then(() => this.updateCellAreas())\r\n  },\r\n  removeMergeFooterItems (merges) {\r\n    if (this.footerSpanMethod) {\r\n      UtilTools.error('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method'])\r\n    }\r\n    const rest = removeMerges(this, merges, this.mergeFooterList, null)\r\n    return this.$nextTick().then(() => {\r\n      this.updateCellAreas()\r\n      return rest\r\n    })\r\n  },\r\n  /**\r\n   * 获取所有被合并的表尾\r\n   */\r\n  getMergeFooterItems () {\r\n    return this.mergeFooterList.slice(0)\r\n  },\r\n  /**\r\n   * 清除所有表尾合并\r\n   */\r\n  clearMergeFooterItems () {\r\n    this.mergeFooterList = []\r\n    return this.$nextTick()\r\n  },\r\n  updateZindex () {\r\n    if (this.zIndex) {\r\n      this.tZindex = this.zIndex\r\n    } else if (this.tZindex < UtilTools.getLastZIndex()) {\r\n      this.tZindex = UtilTools.nextZIndex()\r\n    }\r\n  },\r\n  updateCellAreas () {\r\n    if (this.mouseConfig && this.mouseOpts.area && this.handleUpdateCellAreas) {\r\n      this.handleUpdateCellAreas()\r\n    }\r\n  },\r\n  emitEvent (type, params, evnt) {\r\n    this.$emit(type, Object.assign({ $table: this, $grid: this.$xegrid, $event: evnt }, params))\r\n  },\r\n  focus () {\r\n    this.isActivated = true\r\n    return this.$nextTick()\r\n  },\r\n  blur () {\r\n    this.isActivated = false\r\n    return this.$nextTick()\r\n  },\r\n  // 连接工具栏\r\n  connect ($toolbar) {\r\n    if ($toolbar && $toolbar.syncUpdate) {\r\n      $toolbar.syncUpdate({ collectColumn: this.collectColumn, $table: this })\r\n      this.$toolbar = $toolbar\r\n    } else {\r\n      UtilTools.error('vxe.error.barUnableLink')\r\n    }\r\n    return this.$nextTick()\r\n  },\r\n\r\n  /*************************\r\n   * Publish methods\r\n   *************************/\r\n  getCell (row, column) {\r\n    const { $refs } = this\r\n    const rowid = getRowid(this, row)\r\n    const bodyElem = $refs[`${column.fixed || 'table'}Body`] || $refs.tableBody\r\n    if (bodyElem && bodyElem.$el) {\r\n      return bodyElem.$el.querySelector(`.vxe-body--row[rowid=\"${rowid}\"] .${column.id}`)\r\n    }\r\n    return null\r\n  },\r\n  getCellLabel (row, column) {\r\n    const formatter = column.formatter\r\n    const cellValue = UtilTools.getCellValue(row, column)\r\n    let cellLabel = cellValue\r\n    if (formatter) {\r\n      let rest, formatData\r\n      const { fullAllDataRowMap } = this\r\n      const colid = column.id\r\n      const cacheFormat = fullAllDataRowMap.has(row)\r\n      if (cacheFormat) {\r\n        rest = fullAllDataRowMap.get(row)\r\n        formatData = rest.formatData\r\n        if (!formatData) {\r\n          formatData = fullAllDataRowMap.get(row).formatData = {}\r\n        }\r\n        if (rest && formatData[colid]) {\r\n          if (formatData[colid].value === cellValue) {\r\n            return formatData[colid].label\r\n          }\r\n        }\r\n      }\r\n      const formatParams = { cellValue, row, rowIndex: this.getRowIndex(row), column, columnIndex: this.getColumnIndex(column) }\r\n      if (XEUtils.isString(formatter)) {\r\n        const globalFunc = formats.get(formatter)\r\n        cellLabel = globalFunc ? globalFunc(formatParams) : ''\r\n      } else if (XEUtils.isArray(formatter)) {\r\n        const globalFunc = formats.get(formatter[0])\r\n        cellLabel = globalFunc ? globalFunc(formatParams, ...formatter.slice(1)) : ''\r\n      } else {\r\n        cellLabel = formatter(formatParams)\r\n      }\r\n      if (formatData) {\r\n        formatData[colid] = { value: cellValue, label: cellLabel }\r\n      }\r\n    }\r\n    return cellLabel\r\n  }\r\n  /*************************\r\n   * Publish methods\r\n   *************************/\r\n}\r\n\r\n// Module methods\r\nconst funcs = 'setFilter,clearFilter,getCheckedFilters,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,clearCopyCellArea,setCellAreas,openFind,openReplace,getSelectedCell,clearSelected,insert,insertAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearActived,getActiveRecord,isActiveByRow,setActiveRow,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print'.split(',')\r\n\r\nfuncs.forEach(name => {\r\n  Methods[name] = function (...args) {\r\n    return this[`_${name}`] ? this[`_${name}`](...args) : null\r\n  }\r\n})\r\n\r\nexport default Methods\r\n"]}]}