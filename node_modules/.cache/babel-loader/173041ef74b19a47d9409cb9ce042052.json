{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\export\\src\\mixin.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\export\\src\\mixin.js","mtime":1635230120954},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.string.repeat\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.string.repeat\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport VXETable from \"../../v-x-e-table\";\nimport { UtilTools } from \"../../tools\";\nimport { mergeBodyMethod } from \"../../table/src/util\";\nimport { browse } from \"../../tools/src/dom\";\nvar formatText = UtilTools.formatText; // 默认导出或打印的 HTML 样式\n\nvar defaultHtmlStyle = 'body{margin:0;color:#333333;font-size:14px;font-family:\"Microsoft YaHei\",微软雅黑,\"MicrosoftJhengHei\",华文细黑,STHeiti,MingLiu}body *{-webkit-box-sizing:border-box;box-sizing:border-box}.vxe-table{border-collapse:collapse;text-align:left;border-spacing:0}.vxe-table:not(.is--print){table-layout:fixed}.vxe-table,.vxe-table th,.vxe-table td,.vxe-table td{border-color:#D0D0D0;border-style:solid;border-width:0}.vxe-table.is--print{width:100%}.border--default,.border--full,.border--outer{border-top-width:1px}.border--default,.border--full,.border--outer{border-left-width:1px}.border--outer,.border--default th,.border--default td,.border--full th,.border--full td,.border--outer th,.border--inner th,.border--inner td{border-bottom-width:1px}.border--default,.border--outer,.border--full th,.border--full td{border-right-width:1px}.border--default th,.border--full th,.border--outer th{background-color:#f8f8f9}.vxe-table td>div,.vxe-table th>div{padding:.5em .4em}.col--center{text-align:center}.col--right{text-align:right}.vxe-table:not(.is--print) .col--ellipsis>div{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-break:break-all}.vxe-table--tree-node{text-align:left}.vxe-table--tree-node-wrapper{position:relative}.vxe-table--tree-icon-wrapper{position:absolute;top:50%;width:1em;height:1em;text-align:center;-webkit-transform:translateY(-50%);transform:translateY(-50%);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.vxe-table--tree-unfold-icon,.vxe-table--tree-fold-icon{position:absolute;width:0;height:0;border-style:solid;border-width:.5em;border-right-color:transparent;border-bottom-color:transparent}.vxe-table--tree-unfold-icon{left:.3em;top:0;border-left-color:#939599;border-top-color:transparent}.vxe-table--tree-fold-icon{left:0;top:.3em;border-left-color:transparent;border-top-color:#939599}.vxe-table--tree-cell{display:block;padding-left:1.5em}.vxe-table input[type=\"checkbox\"]{margin:0}.vxe-table input[type=\"checkbox\"],.vxe-table input[type=\"radio\"],.vxe-table input[type=\"checkbox\"]+span,.vxe-table input[type=\"radio\"]+span{vertical-align:middle;padding-left:0.4em}';\nvar htmlCellElem; // 导入\n\nvar fileForm;\nvar fileInput; // 打印\n\nvar printFrame;\nvar csvBOM = \"\\uFEFF\";\nvar enterSymbol = '\\r\\n';\n\nfunction createFrame() {\n  var frame = document.createElement('iframe');\n  frame.className = 'vxe-table--print-frame';\n  return frame;\n}\n\nfunction getExportBlobByContent(content, options) {\n  if (window.Blob) {\n    return new Blob([content], {\n      type: \"text/\".concat(options.type)\n    });\n  }\n\n  return null;\n}\n\nfunction hasTreeChildren($xetable, row) {\n  var treeOpts = $xetable.treeOpts;\n  return row[treeOpts.children] && row[treeOpts.children].length > 0;\n}\n\nfunction getSeq($xetable, row, rowIndex, column, columnIndex) {\n  var seqOpts = $xetable.seqOpts;\n  var seqMethod = seqOpts.seqMethod || column.seqMethod;\n  return seqMethod ? seqMethod({\n    row: row,\n    rowIndex: rowIndex,\n    column: column,\n    columnIndex: columnIndex\n  }) : seqOpts.startIndex + rowIndex + 1;\n}\n\nfunction defaultFilterExportColumn(column) {\n  return column.property || ['seq', 'index', 'checkbox', 'radio'].indexOf(column.type) > -1;\n}\n\nfunction toTableBorder(border) {\n  if (border === true) {\n    return 'full';\n  }\n\n  if (border) {\n    return border;\n  }\n\n  return 'default';\n}\n\nfunction toBooleanValue(cellValue) {\n  return XEUtils.isBoolean(cellValue) ? cellValue ? 'TRUE' : 'FALSE' : cellValue;\n}\n\nfunction getLabelData($xetable, opts, columns, datas) {\n  var isAllExpand = opts.isAllExpand;\n  var treeConfig = $xetable.treeConfig,\n      treeOpts = $xetable.treeOpts,\n      radioOpts = $xetable.radioOpts,\n      checkboxOpts = $xetable.checkboxOpts;\n\n  if (!htmlCellElem) {\n    htmlCellElem = document.createElement('div');\n  }\n\n  if (treeConfig) {\n    // 如果是树表格只允许导出数据源\n    var rest = [];\n    XEUtils.eachTree(datas, function (item, rowIndex, items, path, parent, nodes) {\n      var row = item._row || item;\n      var parentRow = parent && parent._row ? parent._row : parent;\n\n      if (isAllExpand || !parentRow || $xetable.isTreeExpandByRow(parentRow)) {\n        var hasRowChild = hasTreeChildren($xetable, row);\n        var _item = {\n          _row: row,\n          _level: nodes.length - 1,\n          _hasChild: hasRowChild,\n          _expand: hasRowChild && $xetable.isTreeExpandByRow(row)\n        };\n        columns.forEach(function (column, columnIndex) {\n          var cellValue = '';\n          var renderOpts = column.editRender || column.cellRender;\n          var exportLabelMethod = column.exportMethod;\n\n          if (!exportLabelMethod && renderOpts && renderOpts.name) {\n            var compConf = VXETable.renderer.get(renderOpts.name);\n\n            if (compConf) {\n              exportLabelMethod = compConf.exportMethod || compConf.cellExportMethod;\n            }\n          }\n\n          if (exportLabelMethod) {\n            cellValue = exportLabelMethod({\n              $table: $xetable,\n              row: row,\n              column: column,\n              options: opts\n            });\n          } else {\n            switch (column.type) {\n              case 'index':\n              case 'seq':\n                cellValue = getSeq($xetable, row, rowIndex, column, columnIndex);\n                break;\n\n              case 'checkbox':\n                cellValue = toBooleanValue($xetable.isCheckedByCheckboxRow(row));\n                _item._checkboxLabel = checkboxOpts.labelField ? XEUtils.get(row, checkboxOpts.labelField) : '';\n                _item._checkboxDisabled = checkboxOpts.checkMethod && !checkboxOpts.checkMethod({\n                  row: row\n                });\n                break;\n\n              case 'radio':\n                cellValue = toBooleanValue($xetable.isCheckedByRadioRow(row));\n                _item._radioLabel = radioOpts.labelField ? XEUtils.get(row, radioOpts.labelField) : '';\n                _item._radioDisabled = radioOpts.checkMethod && !radioOpts.checkMethod({\n                  row: row\n                });\n                break;\n\n              default:\n                if (opts.original) {\n                  cellValue = UtilTools.getCellValue(row, column);\n                } else {\n                  cellValue = $xetable.getCellLabel(row, column);\n\n                  if (column.type === 'html') {\n                    htmlCellElem.innerHTML = cellValue;\n                    cellValue = htmlCellElem.innerText.trim();\n                  } else {\n                    var cell = $xetable.getCell(row, column);\n\n                    if (cell) {\n                      cellValue = cell.innerText.trim();\n                    }\n                  }\n                }\n\n            }\n          }\n\n          _item[column.id] = XEUtils.toString(cellValue);\n        });\n        rest.push(Object.assign(_item, row));\n      }\n    }, treeOpts);\n    return rest;\n  }\n\n  return datas.map(function (row, rowIndex) {\n    var item = {\n      _row: row\n    };\n    columns.forEach(function (column, columnIndex) {\n      var cellValue = '';\n      var renderOpts = column.editRender || column.cellRender;\n      var exportLabelMethod = column.exportMethod;\n\n      if (!exportLabelMethod && renderOpts && renderOpts.name) {\n        var compConf = VXETable.renderer.get(renderOpts.name);\n\n        if (compConf) {\n          exportLabelMethod = compConf.exportMethod || compConf.cellExportMethod;\n        }\n      }\n\n      if (exportLabelMethod) {\n        cellValue = exportLabelMethod({\n          $table: $xetable,\n          row: row,\n          column: column,\n          options: opts\n        });\n      } else {\n        switch (column.type) {\n          case 'index':\n          case 'seq':\n            cellValue = getSeq($xetable, row, rowIndex, column, columnIndex);\n            break;\n\n          case 'checkbox':\n            cellValue = toBooleanValue($xetable.isCheckedByCheckboxRow(row));\n            item._checkboxLabel = checkboxOpts.labelField ? XEUtils.get(row, checkboxOpts.labelField) : '';\n            item._checkboxDisabled = checkboxOpts.checkMethod && !checkboxOpts.checkMethod({\n              row: row\n            });\n            break;\n\n          case 'radio':\n            cellValue = toBooleanValue($xetable.isCheckedByRadioRow(row));\n            item._radioLabel = radioOpts.labelField ? XEUtils.get(row, radioOpts.labelField) : '';\n            item._radioDisabled = radioOpts.checkMethod && !radioOpts.checkMethod({\n              row: row\n            });\n            break;\n\n          default:\n            if (opts.original) {\n              cellValue = UtilTools.getCellValue(row, column);\n            } else {\n              cellValue = $xetable.getCellLabel(row, column);\n\n              if (column.type === 'html') {\n                htmlCellElem.innerHTML = cellValue;\n                cellValue = htmlCellElem.innerText.trim();\n              } else {\n                var cell = $xetable.getCell(row, column);\n\n                if (cell) {\n                  cellValue = cell.innerText.trim();\n                }\n              }\n            }\n\n        }\n      }\n\n      item[column.id] = XEUtils.toString(cellValue);\n    });\n    return item;\n  });\n}\n\nfunction getExportData($xetable, opts) {\n  var columns = opts.columns,\n      dataFilterMethod = opts.dataFilterMethod;\n  var datas = opts.data;\n\n  if (dataFilterMethod) {\n    datas = datas.filter(function (row, index) {\n      return dataFilterMethod({\n        row: row,\n        $rowIndex: index\n      });\n    });\n  }\n\n  return getLabelData($xetable, opts, columns, datas);\n}\n\nfunction getBooleanValue(cellValue) {\n  return cellValue === 'TRUE' || cellValue === 'true' || cellValue === true;\n}\n\nfunction getHeaderTitle(opts, column) {\n  return (opts.original ? column.property : column.getTitle()) || '';\n}\n\nfunction getFooterCellValue($xetable, opts, items, column) {\n  var renderOpts = column.editRender || column.cellRender;\n  var exportLabelMethod = column.footerExportMethod;\n\n  if (!exportLabelMethod && renderOpts && renderOpts.name) {\n    var compConf = VXETable.renderer.get(renderOpts.name);\n\n    if (compConf) {\n      exportLabelMethod = compConf.footerExportMethod || compConf.footerCellExportMethod;\n    }\n  }\n\n  var _columnIndex = $xetable.getVTColumnIndex(column);\n\n  var cellValue = exportLabelMethod ? exportLabelMethod({\n    $table: $xetable,\n    items: items,\n    itemIndex: _columnIndex,\n    _columnIndex: _columnIndex,\n    column: column,\n    options: opts\n  }) : XEUtils.toString(items[_columnIndex]);\n  return cellValue;\n}\n\nfunction getFooterData(opts, footerTableData) {\n  var footerFilterMethod = opts.footerFilterMethod;\n  return footerFilterMethod ? footerTableData.filter(function (items, index) {\n    return footerFilterMethod({\n      items: items,\n      $rowIndex: index\n    });\n  }) : footerTableData;\n}\n\nfunction getCsvCellTypeLabel(column, cellValue) {\n  if (cellValue) {\n    switch (column.cellType) {\n      case 'string':\n        if (!isNaN(cellValue)) {\n          return \"\\t\".concat(cellValue);\n        }\n\n        break;\n\n      case 'number':\n        break;\n\n      default:\n        if (cellValue.length >= 12 && !isNaN(cellValue)) {\n          return \"\\t\".concat(cellValue);\n        }\n\n        break;\n    }\n  }\n\n  return cellValue;\n}\n\nfunction toTxtCellLabel(val) {\n  if (/[\",\\s\\n]/.test(val)) {\n    return \"\\\"\".concat(val.replace(/\"/g, '\"\"'), \"\\\"\");\n  }\n\n  return val;\n}\n\nfunction toCsv($xetable, opts, columns, datas) {\n  var content = csvBOM;\n\n  if (opts.isHeader) {\n    content += columns.map(function (column) {\n      return toTxtCellLabel(getHeaderTitle(opts, column));\n    }).join(',') + enterSymbol;\n  }\n\n  datas.forEach(function (row) {\n    content += columns.map(function (column) {\n      return toTxtCellLabel(getCsvCellTypeLabel(column, row[column.id]));\n    }).join(',') + enterSymbol;\n  });\n\n  if (opts.isFooter) {\n    var footerTableData = $xetable.footerTableData;\n    var footers = getFooterData(opts, footerTableData);\n    footers.forEach(function (rows) {\n      content += columns.map(function (column) {\n        return toTxtCellLabel(getFooterCellValue($xetable, opts, rows, column));\n      }).join(',') + enterSymbol;\n    });\n  }\n\n  return content;\n}\n\nfunction toTxt($xetable, opts, columns, datas) {\n  var content = '';\n\n  if (opts.isHeader) {\n    content += columns.map(function (column) {\n      return toTxtCellLabel(getHeaderTitle(opts, column));\n    }).join('\\t') + enterSymbol;\n  }\n\n  datas.forEach(function (row) {\n    content += columns.map(function (column) {\n      return toTxtCellLabel(row[column.id]);\n    }).join('\\t') + enterSymbol;\n  });\n\n  if (opts.isFooter) {\n    var footerTableData = $xetable.footerTableData;\n    var footers = getFooterData(opts, footerTableData);\n    footers.forEach(function (rows) {\n      content += columns.map(function (column) {\n        return toTxtCellLabel(getFooterCellValue($xetable, opts, rows, column));\n      }).join(',') + enterSymbol;\n    });\n  }\n\n  return content;\n}\n\nfunction hasEllipsis($xetable, column, property, allColumnOverflow) {\n  var columnOverflow = column[property];\n  var headOverflow = XEUtils.isUndefined(columnOverflow) || XEUtils.isNull(columnOverflow) ? allColumnOverflow : columnOverflow;\n  var showEllipsis = headOverflow === 'ellipsis';\n  var showTitle = headOverflow === 'title';\n  var showTooltip = headOverflow === true || headOverflow === 'tooltip';\n  var isEllipsis = showTitle || showTooltip || showEllipsis; // 虚拟滚动不支持动态高度\n\n  if (($xetable.scrollXLoad || $xetable.scrollYLoad) && !isEllipsis) {\n    isEllipsis = true;\n  }\n\n  return isEllipsis;\n}\n\nfunction createHtmlPage(opts, content) {\n  var style = opts.style;\n  return ['<!DOCTYPE html><html>', '<head>', '<meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui\">', \"<title>\".concat(opts.sheetName, \"</title>\"), \"<style>\".concat(defaultHtmlStyle, \"</style>\"), style ? \"<style>\".concat(style, \"</style>\") : '', '</head>', \"<body>\".concat(content, \"</body>\"), '</html>'].join('');\n}\n\nfunction toHtml($xetable, opts, columns, datas) {\n  var id = $xetable.id,\n      border = $xetable.border,\n      treeConfig = $xetable.treeConfig,\n      treeOpts = $xetable.treeOpts,\n      isAllSelected = $xetable.isAllSelected,\n      isIndeterminate = $xetable.isIndeterminate,\n      allHeaderAlign = $xetable.headerAlign,\n      allAlign = $xetable.align,\n      allFooterAlign = $xetable.footerAlign,\n      allColumnOverflow = $xetable.showOverflow,\n      allColumnHeaderOverflow = $xetable.showHeaderOverflow,\n      mergeList = $xetable.mergeList;\n  var isPrint = opts.print,\n      isHeader = opts.isHeader,\n      isFooter = opts.isFooter,\n      isColgroup = opts.isColgroup,\n      isMerge = opts.isMerge,\n      colgroups = opts.colgroups,\n      original = opts.original;\n  var allCls = 'check-all';\n  var clss = ['vxe-table', \"border--\".concat(toTableBorder(border)), isPrint ? 'is--print' : '', isHeader ? 'is--header' : ''].filter(function (cls) {\n    return cls;\n  });\n  var tables = [\"<table class=\\\"\".concat(clss.join(' '), \"\\\" border=\\\"0\\\" cellspacing=\\\"0\\\" cellpadding=\\\"0\\\">\"), \"<colgroup>\".concat(columns.map(function (column) {\n    return \"<col style=\\\"width:\".concat(column.renderWidth, \"px\\\">\");\n  }).join(''), \"</colgroup>\")];\n\n  if (isHeader) {\n    tables.push('<thead>');\n\n    if (isColgroup && !original) {\n      colgroups.forEach(function (cols) {\n        tables.push(\"<tr>\".concat(cols.map(function (column) {\n          var headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign;\n          var classNames = hasEllipsis($xetable, column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : [];\n          var cellTitle = getHeaderTitle(opts, column);\n          var childWidth = 0;\n          var countChild = 0;\n          XEUtils.eachTree([column], function (item) {\n            if (!item.childNodes || !column.childNodes.length) {\n              countChild++;\n            }\n\n            childWidth += item.renderWidth;\n          }, {\n            children: 'childNodes'\n          });\n          var cellWidth = childWidth - countChild;\n\n          if (headAlign) {\n            classNames.push(\"col--\".concat(headAlign));\n          }\n\n          if (column.type === 'checkbox') {\n            return \"<th class=\\\"\".concat(classNames.join(' '), \"\\\" colspan=\\\"\").concat(column._colSpan, \"\\\" rowspan=\\\"\").concat(column._rowSpan, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(cellWidth, \"px\\\"\"), \"><input type=\\\"checkbox\\\" class=\\\"\").concat(allCls, \"\\\" \").concat(isAllSelected ? 'checked' : '', \"><span>\").concat(cellTitle, \"</span></div></th>\");\n          }\n\n          return \"<th class=\\\"\".concat(classNames.join(' '), \"\\\" colspan=\\\"\").concat(column._colSpan, \"\\\" rowspan=\\\"\").concat(column._rowSpan, \"\\\" title=\\\"\").concat(cellTitle, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(cellWidth, \"px\\\"\"), \"><span>\").concat(formatText(cellTitle, true), \"</span></div></th>\");\n        }).join(''), \"</tr>\"));\n      });\n    } else {\n      tables.push(\"<tr>\".concat(columns.map(function (column) {\n        var headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign;\n        var classNames = hasEllipsis($xetable, column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : [];\n        var cellTitle = getHeaderTitle(opts, column);\n\n        if (headAlign) {\n          classNames.push(\"col--\".concat(headAlign));\n        }\n\n        if (column.type === 'checkbox') {\n          return \"<th class=\\\"\".concat(classNames.join(' '), \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><input type=\\\"checkbox\\\" class=\\\"\").concat(allCls, \"\\\" \").concat(isAllSelected ? 'checked' : '', \"><span>\").concat(cellTitle, \"</span></div></th>\");\n        }\n\n        return \"<th class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellTitle, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><span>\").concat(formatText(cellTitle, true), \"</span></div></th>\");\n      }).join(''), \"</tr>\"));\n    }\n\n    tables.push('</thead>');\n  }\n\n  if (datas.length) {\n    tables.push('<tbody>');\n\n    if (treeConfig) {\n      datas.forEach(function (item) {\n        tables.push('<tr>' + columns.map(function (column) {\n          var cellAlign = column.align || allAlign;\n          var classNames = hasEllipsis($xetable, column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n          var cellValue = item[column.id];\n\n          if (cellAlign) {\n            classNames.push(\"col--\".concat(cellAlign));\n          }\n\n          if (column.treeNode) {\n            var treeIcon = '';\n\n            if (item._hasChild) {\n              treeIcon = \"<i class=\\\"\".concat(item._expand ? 'vxe-table--tree-fold-icon' : 'vxe-table--tree-unfold-icon', \"\\\"></i>\");\n            }\n\n            classNames.push('vxe-table--tree-node');\n\n            if (column.type === 'radio') {\n              return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><div class=\\\"vxe-table--tree-node-wrapper\\\" style=\\\"padding-left: \").concat(item._level * treeOpts.indent, \"px\\\"><div class=\\\"vxe-table--tree-icon-wrapper\\\">\").concat(treeIcon, \"</div><div class=\\\"vxe-table--tree-cell\\\"><input type=\\\"radio\\\" name=\\\"radio_\").concat(id, \"\\\" \").concat(item._radioDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._radioLabel, \"</span></div></div></div></td>\");\n            } else if (column.type === 'checkbox') {\n              return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><div class=\\\"vxe-table--tree-node-wrapper\\\" style=\\\"padding-left: \").concat(item._level * treeOpts.indent, \"px\\\"><div class=\\\"vxe-table--tree-icon-wrapper\\\">\").concat(treeIcon, \"</div><div class=\\\"vxe-table--tree-cell\\\"><input type=\\\"checkbox\\\" \").concat(item._checkboxDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._checkboxLabel, \"</span></div></div></div></td>\");\n            }\n\n            return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><div class=\\\"vxe-table--tree-node-wrapper\\\" style=\\\"padding-left: \").concat(item._level * treeOpts.indent, \"px\\\"><div class=\\\"vxe-table--tree-icon-wrapper\\\">\").concat(treeIcon, \"</div><div class=\\\"vxe-table--tree-cell\\\">\").concat(cellValue, \"</div></div></div></td>\");\n          }\n\n          if (column.type === 'radio') {\n            return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><input type=\\\"radio\\\" name=\\\"radio_\").concat(id, \"\\\" \").concat(item._radioDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._radioLabel, \"</span></div></td>\");\n          } else if (column.type === 'checkbox') {\n            return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><input type=\\\"checkbox\\\" \").concat(item._checkboxDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._checkboxLabel, \"</span></div></td>\");\n          }\n\n          return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \">\").concat(formatText(cellValue, true), \"</div></td>\");\n        }).join('') + '</tr>');\n      });\n    } else {\n      datas.forEach(function (item) {\n        tables.push('<tr>' + columns.map(function (column) {\n          var cellAlign = column.align || allAlign;\n          var classNames = hasEllipsis($xetable, column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n          var cellValue = item[column.id];\n          var rowSpan = 1;\n          var colSpan = 1;\n\n          if (isMerge && mergeList.length) {\n            var _rowIndex = $xetable.getVTRowIndex(item._row);\n\n            var _columnIndex = $xetable.getVTColumnIndex(column);\n\n            var spanRest = mergeBodyMethod(mergeList, _rowIndex, _columnIndex);\n\n            if (spanRest) {\n              var rowspan = spanRest.rowspan,\n                  colspan = spanRest.colspan;\n\n              if (!rowspan || !colspan) {\n                return '';\n              }\n\n              if (rowspan > 1) {\n                rowSpan = rowspan;\n              }\n\n              if (colspan > 1) {\n                colSpan = colspan;\n              }\n            }\n          }\n\n          if (cellAlign) {\n            classNames.push(\"col--\".concat(cellAlign));\n          }\n\n          if (column.type === 'radio') {\n            return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" rowspan=\\\"\").concat(rowSpan, \"\\\" colspan=\\\"\").concat(colSpan, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><input type=\\\"radio\\\" name=\\\"radio_\").concat(id, \"\\\" \").concat(item._radioDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._radioLabel, \"</span></div></td>\");\n          } else if (column.type === 'checkbox') {\n            return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" rowspan=\\\"\").concat(rowSpan, \"\\\" colspan=\\\"\").concat(colSpan, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \"><input type=\\\"checkbox\\\" \").concat(item._checkboxDisabled ? 'disabled ' : '').concat(getBooleanValue(cellValue) ? 'checked' : '', \"><span>\").concat(item._checkboxLabel, \"</span></div></td>\");\n          }\n\n          return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" rowspan=\\\"\").concat(rowSpan, \"\\\" colspan=\\\"\").concat(colSpan, \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \">\").concat(formatText(cellValue, true), \"</div></td>\");\n        }).join('') + '</tr>');\n      });\n    }\n\n    tables.push('</tbody>');\n  }\n\n  if (isFooter) {\n    var footerTableData = $xetable.footerTableData;\n    var footers = getFooterData(opts, footerTableData);\n\n    if (footers.length) {\n      tables.push('<tfoot>');\n      footers.forEach(function (rows) {\n        tables.push(\"<tr>\".concat(columns.map(function (column) {\n          var footAlign = column.footerAlign || column.align || allFooterAlign || allAlign;\n          var classNames = hasEllipsis($xetable, column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n          var cellValue = getFooterCellValue($xetable, opts, rows, column);\n\n          if (footAlign) {\n            classNames.push(\"col--\".concat(footAlign));\n          }\n\n          return \"<td class=\\\"\".concat(classNames.join(' '), \"\\\" title=\\\"\").concat(cellValue, \"\\\"><div \").concat(isPrint ? '' : \"style=\\\"width: \".concat(column.renderWidth, \"px\\\"\"), \">\").concat(formatText(cellValue, true), \"</div></td>\");\n        }).join(''), \"</tr>\"));\n      });\n      tables.push('</tfoot>');\n    }\n  } // 是否半选状态\n\n\n  var script = !isAllSelected && isIndeterminate ? \"<script>(function(){var a=document.querySelector(\\\".\".concat(allCls, \"\\\");if(a){a.indeterminate=true}})()</script>\") : '';\n  tables.push('</table>', script);\n  return isPrint ? tables.join('') : createHtmlPage(opts, tables.join(''));\n}\n\nfunction toXML($xetable, opts, columns, datas) {\n  var xml = ['<?xml version=\"1.0\"?>', '<?mso-application progid=\"Excel.Sheet\"?>', '<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:html=\"http://www.w3.org/TR/REC-html40\">', '<DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">', '<Version>16.00</Version>', '</DocumentProperties>', '<ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\">', '<WindowHeight>7920</WindowHeight>', '<WindowWidth>21570</WindowWidth>', '<WindowTopX>32767</WindowTopX>', '<WindowTopY>32767</WindowTopY>', '<ProtectStructure>False</ProtectStructure>', '<ProtectWindows>False</ProtectWindows>', '</ExcelWorkbook>', \"<Worksheet ss:Name=\\\"\".concat(opts.sheetName, \"\\\">\"), '<Table>', columns.map(function (column) {\n    return \"<Column ss:Width=\\\"\".concat(column.renderWidth, \"\\\"/>\");\n  }).join('')].join('');\n\n  if (opts.isHeader) {\n    xml += \"<Row>\".concat(columns.map(function (column) {\n      return \"<Cell><Data ss:Type=\\\"String\\\">\".concat(getHeaderTitle(opts, column), \"</Data></Cell>\");\n    }).join(''), \"</Row>\");\n  }\n\n  datas.forEach(function (row) {\n    xml += '<Row>' + columns.map(function (column) {\n      return \"<Cell><Data ss:Type=\\\"String\\\">\".concat(row[column.id], \"</Data></Cell>\");\n    }).join('') + '</Row>';\n  });\n\n  if (opts.isFooter) {\n    var footerTableData = $xetable.footerTableData;\n    var footers = getFooterData(opts, footerTableData);\n    footers.forEach(function (rows) {\n      xml += \"<Row>\".concat(columns.map(function (column) {\n        return \"<Cell><Data ss:Type=\\\"String\\\">\".concat(getFooterCellValue($xetable, opts, rows, column), \"</Data></Cell>\");\n      }).join(''), \"</Row>\");\n    });\n  }\n\n  return \"\".concat(xml, \"</Table></Worksheet></Workbook>\");\n}\n\nfunction getContent($xetable, opts, columns, datas) {\n  if (columns.length) {\n    switch (opts.type) {\n      case 'csv':\n        return toCsv($xetable, opts, columns, datas);\n\n      case 'txt':\n        return toTxt($xetable, opts, columns, datas);\n\n      case 'html':\n        return toHtml($xetable, opts, columns, datas);\n\n      case 'xml':\n        return toXML($xetable, opts, columns, datas);\n    }\n  }\n\n  return '';\n}\n/**\r\n * 保存文件到本地\r\n * @param {*} options 参数\r\n */\n\n\nexport function saveLocalFile(options) {\n  var filename = options.filename,\n      type = options.type,\n      content = options.content;\n  var name = \"\".concat(filename, \".\").concat(type);\n\n  if (window.Blob) {\n    var blob = content instanceof Blob ? content : getExportBlobByContent(XEUtils.toString(content), options);\n\n    if (navigator.msSaveBlob) {\n      navigator.msSaveBlob(blob, name);\n    } else {\n      var linkElem = document.createElement('a');\n      linkElem.target = '_blank';\n      linkElem.download = name;\n      linkElem.href = URL.createObjectURL(blob);\n      document.body.appendChild(linkElem);\n      linkElem.click();\n      document.body.removeChild(linkElem);\n    }\n\n    return Promise.resolve();\n  }\n\n  return Promise.reject(new Error(UtilTools.getLog('vxe.error.notExp')));\n}\n\nfunction downloadFile($xetable, opts, content) {\n  var filename = opts.filename,\n      type = opts.type,\n      download = opts.download;\n\n  if (!download) {\n    var blob = getExportBlobByContent(content, opts);\n    return Promise.resolve({\n      type: type,\n      content: content,\n      blob: blob\n    });\n  }\n\n  saveLocalFile({\n    filename: filename,\n    type: type,\n    content: content\n  }).then(function () {\n    if (opts.message !== false) {\n      VXETable.modal.message({\n        content: GlobalConfig.i18n('vxe.table.expSuccess'),\n        status: 'success'\n      });\n    }\n  });\n}\n\nfunction clearColumnConvert(columns) {\n  XEUtils.eachTree(columns, function (column) {\n    delete column._level;\n    delete column._colSpan;\n    delete column._rowSpan;\n    delete column._children;\n    delete column.childNodes;\n  }, {\n    children: 'children'\n  });\n}\n\nfunction handleExport($xetable, opts) {\n  var remote = opts.remote,\n      columns = opts.columns,\n      colgroups = opts.colgroups,\n      exportMethod = opts.exportMethod,\n      afterExportMethod = opts.afterExportMethod;\n  return new Promise(function (resolve) {\n    if (remote) {\n      var params = {\n        options: opts,\n        $table: $xetable,\n        $grid: $xetable.$xegrid\n      };\n      resolve(exportMethod ? exportMethod(params) : params);\n    } else {\n      var datas = getExportData($xetable, opts);\n      resolve($xetable.preventEvent(null, 'event.export', {\n        options: opts,\n        columns: columns,\n        colgroups: colgroups,\n        datas: datas\n      }, function () {\n        return downloadFile($xetable, opts, getContent($xetable, opts, columns, datas));\n      }));\n    }\n  }).then(function (params) {\n    clearColumnConvert(columns);\n\n    if (!opts.print) {\n      if (afterExportMethod) {\n        afterExportMethod({\n          status: true,\n          options: opts,\n          $table: $xetable,\n          $grid: $xetable.$xegrid\n        });\n      }\n    }\n\n    return Object.assign({\n      status: true\n    }, params);\n  }).catch(function () {\n    clearColumnConvert(columns);\n\n    if (!opts.print) {\n      if (afterExportMethod) {\n        afterExportMethod({\n          status: false,\n          options: opts,\n          $table: $xetable,\n          $grid: $xetable.$xegrid\n        });\n      }\n    }\n\n    var params = {\n      status: false\n    };\n    return Promise.reject(params);\n  });\n}\n\nfunction getElementsByTagName(elem, qualifiedName) {\n  return elem.getElementsByTagName(qualifiedName);\n}\n\nfunction getTxtCellKey(now) {\n  return \"#\".concat(now, \"@\").concat(XEUtils.uniqueId());\n}\n\nfunction replaceTxtCell(cell, vMaps) {\n  return cell.replace(/#\\d+@\\d+/g, function (key) {\n    return XEUtils.hasOwnProp(vMaps, key) ? vMaps[key] : key;\n  });\n}\n\nfunction getTxtCellValue(val, vMaps) {\n  var rest = replaceTxtCell(val, vMaps);\n  return rest.replace(/^\"+$/g, function (qVal) {\n    return '\"'.repeat(Math.ceil(qVal.length / 2));\n  });\n}\n\nfunction parseCsvAndTxt(columns, content, cellSeparator) {\n  var list = content.split(enterSymbol);\n  var rows = [];\n  var fields = [];\n\n  if (list.length) {\n    var vMaps = {};\n    var now = Date.now();\n    list.forEach(function (rVal) {\n      if (rVal) {\n        var item = {};\n        rVal = rVal.replace(/(\"\")|(\\n)/g, function (text, dVal) {\n          var key = getTxtCellKey(now);\n          vMaps[key] = dVal ? '\"' : '\\n';\n          return key;\n        }).replace(/\"(.*?)\"/g, function (text, cVal) {\n          var key = getTxtCellKey(now);\n          vMaps[key] = replaceTxtCell(cVal, vMaps);\n          return key;\n        });\n        var cells = rVal.split(cellSeparator);\n\n        if (!fields.length) {\n          fields = cells.map(function (val) {\n            return getTxtCellValue(val.trim(), vMaps);\n          });\n        } else {\n          cells.forEach(function (val, colIndex) {\n            if (colIndex < fields.length) {\n              item[fields[colIndex]] = getTxtCellValue(val, vMaps);\n            }\n          });\n          rows.push(item);\n        }\n      }\n    });\n  }\n\n  return {\n    fields: fields,\n    rows: rows\n  };\n}\n\nfunction parseCsv(columns, content) {\n  return parseCsvAndTxt(columns, content, ',');\n}\n\nfunction parseTxt(columns, content) {\n  return parseCsvAndTxt(columns, content, '\\t');\n}\n\nfunction parseHTML(columns, content) {\n  var domParser = new DOMParser();\n  var xmlDoc = domParser.parseFromString(content, 'text/html');\n  var bodyNodes = getElementsByTagName(xmlDoc, 'body');\n  var rows = [];\n  var fields = [];\n\n  if (bodyNodes.length) {\n    var tableNodes = getElementsByTagName(bodyNodes[0], 'table');\n\n    if (tableNodes.length) {\n      var theadNodes = getElementsByTagName(tableNodes[0], 'thead');\n\n      if (theadNodes.length) {\n        XEUtils.arrayEach(getElementsByTagName(theadNodes[0], 'tr'), function (rowNode) {\n          XEUtils.arrayEach(getElementsByTagName(rowNode, 'th'), function (cellNode) {\n            fields.push(cellNode.textContent);\n          });\n        });\n        var tbodyNodes = getElementsByTagName(tableNodes[0], 'tbody');\n\n        if (tbodyNodes.length) {\n          XEUtils.arrayEach(getElementsByTagName(tbodyNodes[0], 'tr'), function (rowNode) {\n            var item = {};\n            XEUtils.arrayEach(getElementsByTagName(rowNode, 'td'), function (cellNode, colIndex) {\n              if (fields[colIndex]) {\n                item[fields[colIndex]] = cellNode.textContent || '';\n              }\n            });\n            rows.push(item);\n          });\n        }\n      }\n    }\n  }\n\n  return {\n    fields: fields,\n    rows: rows\n  };\n}\n\nfunction parseXML(columns, content) {\n  var domParser = new DOMParser();\n  var xmlDoc = domParser.parseFromString(content, 'application/xml');\n  var sheetNodes = getElementsByTagName(xmlDoc, 'Worksheet');\n  var rows = [];\n  var fields = [];\n\n  if (sheetNodes.length) {\n    var tableNodes = getElementsByTagName(sheetNodes[0], 'Table');\n\n    if (tableNodes.length) {\n      var rowNodes = getElementsByTagName(tableNodes[0], 'Row');\n\n      if (rowNodes.length) {\n        XEUtils.arrayEach(getElementsByTagName(rowNodes[0], 'Cell'), function (cellNode) {\n          fields.push(cellNode.textContent);\n        });\n        XEUtils.arrayEach(rowNodes, function (rowNode, index) {\n          if (index) {\n            var item = {};\n            var cellNodes = getElementsByTagName(rowNode, 'Cell');\n            XEUtils.arrayEach(cellNodes, function (cellNode, colIndex) {\n              if (fields[colIndex]) {\n                item[fields[colIndex]] = cellNode.textContent;\n              }\n            });\n            rows.push(item);\n          }\n        });\n      }\n    }\n  }\n\n  return {\n    fields: fields,\n    rows: rows\n  };\n}\n/**\r\n * 检查导入的列是否完整\r\n * @param {Array} fields 字段名列表\r\n * @param {Array} rows 数据列表\r\n */\n\n\nfunction checkImportData(columns, fields) {\n  var tableFields = [];\n  columns.forEach(function (column) {\n    var field = column.property;\n\n    if (field) {\n      tableFields.push(field);\n    }\n  });\n  return fields.some(function (field) {\n    return tableFields.indexOf(field) > -1;\n  });\n}\n\nfunction handleImport($xetable, content, opts) {\n  var tableFullColumn = $xetable.tableFullColumn,\n      _importResolve = $xetable._importResolve,\n      _importReject = $xetable._importReject;\n  var rest = {\n    fields: [],\n    rows: []\n  };\n\n  switch (opts.type) {\n    case 'csv':\n      rest = parseCsv(tableFullColumn, content);\n      break;\n\n    case 'txt':\n      rest = parseTxt(tableFullColumn, content);\n      break;\n\n    case 'html':\n      rest = parseHTML(tableFullColumn, content);\n      break;\n\n    case 'xml':\n      rest = parseXML(tableFullColumn, content);\n      break;\n  }\n\n  var _rest = rest,\n      fields = _rest.fields,\n      rows = _rest.rows;\n  var status = checkImportData(tableFullColumn, fields);\n\n  if (status) {\n    $xetable.createData(rows).then(function (data) {\n      var loadRest;\n\n      if (opts.mode === 'insert') {\n        loadRest = $xetable.insert(data);\n      } else {\n        loadRest = $xetable.reloadData(data);\n      }\n\n      if (opts.message !== false) {\n        VXETable.modal.message({\n          content: GlobalConfig.i18n('vxe.table.impSuccess', [rows.length]),\n          status: 'success'\n        });\n      }\n\n      return loadRest.then(function () {\n        if (_importResolve) {\n          _importResolve({\n            status: true\n          });\n        }\n      });\n    });\n  } else if (opts.message !== false) {\n    VXETable.modal.message({\n      content: GlobalConfig.i18n('vxe.error.impFields'),\n      status: 'error'\n    });\n\n    if (_importReject) {\n      _importReject({\n        status: false\n      });\n    }\n  }\n}\n\nfunction handleFileImport($xetable, file, opts) {\n  var importMethod = opts.importMethod,\n      afterImportMethod = opts.afterImportMethod;\n\n  var _UtilTools$parseFile = UtilTools.parseFile(file),\n      type = _UtilTools$parseFile.type,\n      filename = _UtilTools$parseFile.filename; // 检查类型，如果为自定义导出，则不需要校验类型\n\n\n  if (!importMethod && !XEUtils.includes(VXETable.config.importTypes, type)) {\n    if (opts.message !== false) {\n      VXETable.modal.message({\n        content: GlobalConfig.i18n('vxe.error.notType', [type]),\n        status: 'error'\n      });\n    }\n\n    var params = {\n      status: false\n    };\n    return Promise.reject(params);\n  }\n\n  var rest = new Promise(function (resolve, reject) {\n    var _importResolve = function _importResolve(params) {\n      resolve(params);\n      $xetable._importResolve = null;\n      $xetable._importReject = null;\n    };\n\n    var _importReject = function _importReject(params) {\n      reject(params);\n      $xetable._importResolve = null;\n      $xetable._importReject = null;\n    };\n\n    $xetable._importResolve = _importResolve;\n    $xetable._importReject = _importReject;\n\n    if (window.FileReader) {\n      var options = Object.assign({\n        mode: 'insert'\n      }, opts, {\n        type: type,\n        filename: filename\n      });\n\n      if (options.remote) {\n        if (importMethod) {\n          Promise.resolve(importMethod({\n            file: file,\n            options: options,\n            $table: $xetable\n          })).then(function () {\n            _importResolve({\n              status: true\n            });\n          }).catch(function () {\n            _importResolve({\n              status: true\n            });\n          });\n        } else {\n          _importResolve({\n            status: true\n          });\n        }\n      } else {\n        $xetable.preventEvent(null, 'event.import', {\n          file: file,\n          options: options,\n          columns: $xetable.tableFullColumn\n        }, function () {\n          var reader = new FileReader();\n\n          reader.onerror = function () {\n            UtilTools.error('vxe.error.notType', [type]);\n\n            _importReject({\n              status: false\n            });\n          };\n\n          reader.onload = function (e) {\n            handleImport($xetable, e.target.result, options);\n          };\n\n          reader.readAsText(file, 'UTF-8');\n        });\n      }\n    } else {\n      // 不支持的浏览器\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        UtilTools.error('vxe.error.notExp');\n      }\n\n      _importResolve({\n        status: true\n      });\n    }\n  });\n  return rest.then(function () {\n    if (afterImportMethod) {\n      afterImportMethod({\n        status: true,\n        options: opts,\n        $table: $xetable\n      });\n    }\n  }).catch(function (e) {\n    if (afterImportMethod) {\n      afterImportMethod({\n        status: false,\n        options: opts,\n        $table: $xetable\n      });\n    }\n\n    return Promise.reject(e);\n  });\n}\n/**\r\n * 读取本地文件\r\n * @param {*} options 参数\r\n */\n\n\nexport function readLocalFile() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!fileForm) {\n    fileForm = document.createElement('form');\n    fileInput = document.createElement('input');\n    fileForm.className = 'vxe-table--file-form';\n    fileInput.name = 'file';\n    fileInput.type = 'file';\n    fileForm.appendChild(fileInput);\n    document.body.appendChild(fileForm);\n  }\n\n  return new Promise(function (resolve, reject) {\n    var types = options.types || [];\n    var isAllType = !types.length || types.some(function (type) {\n      return type === '*';\n    });\n    fileInput.multiple = !!options.multiple;\n    fileInput.accept = isAllType ? '' : \".\".concat(types.join(', .'));\n\n    fileInput.onchange = function (evnt) {\n      var files = evnt.target.files;\n      var file = files[0];\n      var errType; // 校验类型\n\n      if (!isAllType) {\n        for (var fIndex = 0; fIndex < files.length; fIndex++) {\n          var _UtilTools$parseFile2 = UtilTools.parseFile(files[fIndex]),\n              type = _UtilTools$parseFile2.type;\n\n          if (!XEUtils.includes(types, type)) {\n            errType = type;\n            break;\n          }\n        }\n      }\n\n      if (!errType) {\n        resolve({\n          status: true,\n          files: files,\n          file: file\n        });\n      } else {\n        if (options.message !== false) {\n          VXETable.modal.message({\n            content: GlobalConfig.i18n('vxe.error.notType', [errType]),\n            status: 'error'\n          });\n        }\n\n        var params = {\n          status: false,\n          files: files,\n          file: file\n        };\n        reject(params);\n      }\n    };\n\n    fileForm.reset();\n    fileInput.click();\n  });\n}\n\nfunction removePrintFrame() {\n  if (printFrame) {\n    if (printFrame.parentNode) {\n      try {\n        printFrame.contentDocument.write('');\n        printFrame.contentDocument.clear();\n      } catch (e) {}\n\n      printFrame.parentNode.removeChild(printFrame);\n    }\n\n    printFrame = null;\n  }\n}\n\nfunction appendPrintFrame() {\n  if (!printFrame.parentNode) {\n    document.body.appendChild(printFrame);\n  }\n}\n\nfunction afterPrintEvent() {\n  removePrintFrame();\n}\n\nexport function handlePrint($xetable, opts, content) {\n  var beforePrintMethod = opts.beforePrintMethod;\n\n  if (beforePrintMethod) {\n    content = beforePrintMethod({\n      content: content,\n      options: opts,\n      $table: $xetable\n    }) || '';\n  }\n\n  content = createHtmlPage(opts, content);\n  var blob = getExportBlobByContent(content, opts);\n\n  if (browse.msie) {\n    removePrintFrame();\n    printFrame = createFrame();\n    appendPrintFrame();\n    printFrame.contentDocument.write(content);\n    printFrame.contentDocument.execCommand('print');\n  } else {\n    if (!printFrame) {\n      printFrame = createFrame();\n\n      printFrame.onload = function (evnt) {\n        if (evnt.target.src) {\n          evnt.target.contentWindow.onafterprint = afterPrintEvent;\n          evnt.target.contentWindow.print();\n        }\n      };\n    }\n\n    appendPrintFrame();\n    printFrame.src = URL.createObjectURL(blob);\n  }\n}\n\nfunction handleExportAndPrint($xetable, options, isPrint) {\n  var initStore = $xetable.initStore,\n      customOpts = $xetable.customOpts,\n      collectColumn = $xetable.collectColumn,\n      footerTableData = $xetable.footerTableData,\n      treeConfig = $xetable.treeConfig,\n      mergeList = $xetable.mergeList,\n      isGroup = $xetable.isGroup,\n      exportParams = $xetable.exportParams;\n  var selectRecords = $xetable.getCheckboxRecords();\n  var hasFooter = !!footerTableData.length;\n  var hasTree = treeConfig;\n  var hasMerge = !hasTree && mergeList.length;\n  var defOpts = Object.assign({\n    message: true,\n    isHeader: true\n  }, options);\n  var types = defOpts.types || VXETable.config.exportTypes;\n  var modes = defOpts.modes;\n  var checkMethod = customOpts.checkMethod;\n  var exportColumns = collectColumn.slice(0);\n  var columns = defOpts.columns; // 处理类型\n\n  var typeList = types.map(function (value) {\n    return {\n      value: value,\n      label: \"vxe.export.types.\".concat(value)\n    };\n  });\n  var modeList = modes.map(function (value) {\n    return {\n      value: value,\n      label: \"vxe.export.modes.\".concat(value)\n    };\n  }); // 默认选中\n\n  XEUtils.eachTree(exportColumns, function (column, index, items, path, parent) {\n    var isColGroup = column.children && column.children.length;\n\n    if (isColGroup || defaultFilterExportColumn(column)) {\n      column.checked = columns ? columns.some(function (item) {\n        if (UtilTools.isColumn(item)) {\n          return column === item;\n        } else if (XEUtils.isString(item)) {\n          return column.field === item;\n        } else {\n          var colid = item.id || item.colId;\n          var type = item.type;\n          var field = item.property || item.field;\n\n          if (colid) {\n            return column.id === colid;\n          } else if (field && type) {\n            return column.property === field && column.type === type;\n          } else if (field) {\n            return column.property === field;\n          } else if (type) {\n            return column.type === type;\n          }\n        }\n      }) : column.visible;\n      column.halfChecked = false;\n      column.disabled = parent && parent.disabled || (checkMethod ? !checkMethod({\n        column: column\n      }) : false);\n    }\n  }); // 更新条件\n\n  Object.assign($xetable.exportStore, {\n    columns: exportColumns,\n    typeList: typeList,\n    modeList: modeList,\n    hasFooter: hasFooter,\n    hasMerge: hasMerge,\n    hasTree: hasTree,\n    isPrint: isPrint,\n    hasColgroup: isGroup,\n    visible: true\n  }); // 默认参数\n\n  if (!initStore.export) {\n    Object.assign(exportParams, {\n      mode: selectRecords.length ? 'selected' : 'current'\n    }, defOpts);\n  }\n\n  if (modes.indexOf(exportParams.mode) === -1) {\n    exportParams.mode = modes[0];\n  }\n\n  if (types.indexOf(exportParams.type) === -1) {\n    exportParams.type = types[0];\n  }\n\n  initStore.export = true;\n  return $xetable.$nextTick();\n}\n\nvar getConvertColumns = function getConvertColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.childNodes && column.childNodes.length) {\n      result.push(column);\n      result.push.apply(result, _toConsumableArray(getConvertColumns(column.childNodes)));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\n\nvar convertToRows = function convertToRows(originColumns) {\n  var maxLevel = 1;\n\n  var traverse = function traverse(column, parent) {\n    if (parent) {\n      column._level = parent._level + 1;\n\n      if (maxLevel < column._level) {\n        maxLevel = column._level;\n      }\n    }\n\n    if (column.childNodes && column.childNodes.length) {\n      var colSpan = 0;\n      column.childNodes.forEach(function (subColumn) {\n        traverse(subColumn, column);\n        colSpan += subColumn._colSpan;\n      });\n      column._colSpan = colSpan;\n    } else {\n      column._colSpan = 1;\n    }\n  };\n\n  originColumns.forEach(function (column) {\n    column._level = 1;\n    traverse(column);\n  });\n  var rows = [];\n\n  for (var i = 0; i < maxLevel; i++) {\n    rows.push([]);\n  }\n\n  var allColumns = getConvertColumns(originColumns);\n  allColumns.forEach(function (column) {\n    if (column.childNodes && column.childNodes.length) {\n      column._rowSpan = 1;\n    } else {\n      column._rowSpan = maxLevel - column._level + 1;\n    }\n\n    rows[column._level - 1].push(column);\n  });\n  return rows;\n};\n\nexport default {\n  methods: {\n    /**\r\n     * 导出文件，支持 csv/html/xml/txt\r\n     * 如果是树表格，则默认是导出所有节点\r\n     * 如果是启用了虚拟滚动，则只能导出数据源，可以配合 dataFilterMethod 函数自行转换数据\r\n     * @param {Object} options 参数\r\n     */\n    _exportData: function _exportData(options) {\n      var _this = this;\n\n      var $xegrid = this.$xegrid,\n          isGroup = this.isGroup,\n          tableGroupColumn = this.tableGroupColumn,\n          tableFullColumn = this.tableFullColumn,\n          afterFullData = this.afterFullData,\n          treeConfig = this.treeConfig,\n          treeOpts = this.treeOpts,\n          exportOpts = this.exportOpts;\n      var opts = Object.assign({\n        // filename: '',\n        // sheetName: '',\n        // original: false,\n        // message: false,\n        isHeader: true,\n        isFooter: true,\n        isColgroup: true,\n        isMerge: false,\n        isAllExpand: false,\n        download: true,\n        type: 'csv',\n        mode: 'current' // data: null,\n        // remote: false,\n        // dataFilterMethod: null,\n        // footerFilterMethod: null,\n        // exportMethod: null,\n        // columnFilterMethod: null,\n        // beforeExportMethod: null,\n        // afterExportMethod: null\n\n      }, exportOpts, {\n        print: false\n      }, options);\n      var type = opts.type,\n          mode = opts.mode,\n          columns = opts.columns,\n          original = opts.original,\n          beforeExportMethod = opts.beforeExportMethod;\n      var groups = [];\n      var customCols = columns && columns.length ? columns : null; // 如果设置源数据，则默认导出设置了字段的列\n\n      var columnFilterMethod = opts.columnFilterMethod;\n\n      if (!customCols && !columnFilterMethod) {\n        columnFilterMethod = original ? function (_ref) {\n          var column = _ref.column;\n          return column.property;\n        } : function (_ref2) {\n          var column = _ref2.column;\n          return defaultFilterExportColumn(column);\n        };\n      }\n\n      if (customCols) {\n        groups = XEUtils.searchTree(XEUtils.mapTree(customCols, function (item) {\n          var targetColumn;\n\n          if (item) {\n            if (UtilTools.isColumn(item)) {\n              targetColumn = item;\n            } else if (XEUtils.isString(item)) {\n              targetColumn = _this.getColumnByField(item);\n            } else {\n              var colid = item.id || item.colId;\n              var _type = item.type;\n              var field = item.property || item.field;\n\n              if (colid) {\n                targetColumn = _this.getColumnById(colid);\n              } else if (field && _type) {\n                targetColumn = tableFullColumn.find(function (column) {\n                  return column.property === field && column.type === _type;\n                });\n              } else if (field) {\n                targetColumn = _this.getColumnByField(field);\n              } else if (_type) {\n                targetColumn = tableFullColumn.find(function (column) {\n                  return column.type === _type;\n                });\n              }\n            }\n\n            return targetColumn || {};\n          }\n        }, {\n          children: 'childNodes',\n          mapChildren: '_children'\n        }), function (column, index) {\n          return UtilTools.isColumn(column) && (!columnFilterMethod || columnFilterMethod({\n            column: column,\n            $columnIndex: index\n          }));\n        }, {\n          children: '_children',\n          mapChildren: 'childNodes',\n          original: true\n        });\n      } else {\n        groups = XEUtils.searchTree(isGroup ? tableGroupColumn : tableFullColumn, function (column, index) {\n          return column.visible && (!columnFilterMethod || columnFilterMethod({\n            column: column,\n            $columnIndex: index\n          }));\n        }, {\n          children: 'children',\n          mapChildren: 'childNodes',\n          original: true\n        });\n      } // 获取所有列\n\n\n      var cols = [];\n      XEUtils.eachTree(groups, function (column) {\n        var isColGroup = column.children && column.children.length;\n\n        if (!isColGroup) {\n          cols.push(column);\n        }\n      }, {\n        children: 'childNodes'\n      }); // 构建分组层级\n\n      opts.columns = cols;\n      opts.colgroups = convertToRows(groups);\n\n      if (!opts.filename) {\n        opts.filename = GlobalConfig.i18n(opts.original ? 'vxe.table.expOriginFilename' : 'vxe.table.expFilename', [XEUtils.toDateString(Date.now(), 'yyyyMMddHHmmss')]);\n      }\n\n      if (!opts.sheetName) {\n        opts.sheetName = document.title;\n      } // 检查类型，如果为自定义导出，则不需要校验类型\n\n\n      if (!opts.exportMethod && !XEUtils.includes(VXETable.config.exportTypes, type)) {\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          UtilTools.error('vxe.error.notType', [type]);\n        }\n\n        var params = {\n          status: false\n        };\n        return Promise.reject(params);\n      }\n\n      if (!opts.print) {\n        if (beforeExportMethod) {\n          beforeExportMethod({\n            options: opts,\n            $table: this,\n            $grid: $xegrid\n          });\n        }\n      }\n\n      if (!opts.data) {\n        opts.data = afterFullData;\n\n        if (mode === 'selected') {\n          var selectRecords = this.getCheckboxRecords();\n\n          if (['html', 'pdf'].indexOf(type) > -1 && treeConfig) {\n            opts.data = XEUtils.searchTree(this.getTableData().fullData, function (item) {\n              return selectRecords.indexOf(item) > -1;\n            }, Object.assign({}, treeOpts, {\n              data: '_row'\n            }));\n          } else {\n            opts.data = selectRecords;\n          }\n        } else if (mode === 'all') {\n          if ($xegrid && !opts.remote) {\n            var _$xegrid$proxyOpts = $xegrid.proxyOpts,\n                beforeQueryAll = _$xegrid$proxyOpts.beforeQueryAll,\n                afterQueryAll = _$xegrid$proxyOpts.afterQueryAll,\n                _$xegrid$proxyOpts$aj = _$xegrid$proxyOpts.ajax,\n                ajax = _$xegrid$proxyOpts$aj === void 0 ? {} : _$xegrid$proxyOpts$aj,\n                _$xegrid$proxyOpts$pr = _$xegrid$proxyOpts.props,\n                props = _$xegrid$proxyOpts$pr === void 0 ? {} : _$xegrid$proxyOpts$pr;\n            var ajaxMethods = ajax.queryAll;\n\n            if (ajaxMethods) {\n              var _params = {\n                $table: this,\n                $grid: $xegrid,\n                sort: $xegrid.sortData,\n                filters: $xegrid.filterData,\n                form: $xegrid.formData,\n                target: ajaxMethods,\n                options: opts\n              };\n              return Promise.resolve((beforeQueryAll || ajaxMethods)(_params)).catch(function (e) {\n                return e;\n              }).then(function (rest) {\n                opts.data = (props.list ? XEUtils.get(rest, props.list) : rest) || [];\n\n                if (afterQueryAll) {\n                  afterQueryAll(_params);\n                }\n\n                return handleExport(_this, opts);\n              });\n            }\n          }\n        }\n      }\n\n      return handleExport(this, opts);\n    },\n    _importByFile: function _importByFile(file, options) {\n      var opts = Object.assign({}, options);\n      var beforeImportMethod = opts.beforeImportMethod;\n\n      if (beforeImportMethod) {\n        beforeImportMethod({\n          options: opts,\n          $table: this\n        });\n      }\n\n      return handleFileImport(this, file, opts);\n    },\n    _importData: function _importData(options) {\n      var _this2 = this;\n\n      var opts = Object.assign({\n        types: VXETable.config.importTypes // beforeImportMethod: null,\n        // afterImportMethod: null\n\n      }, this.importOpts, options);\n      var beforeImportMethod = opts.beforeImportMethod,\n          afterImportMethod = opts.afterImportMethod;\n\n      if (beforeImportMethod) {\n        beforeImportMethod({\n          options: opts,\n          $table: this\n        });\n      }\n\n      return readLocalFile(opts).catch(function (e) {\n        if (afterImportMethod) {\n          afterImportMethod({\n            status: false,\n            options: opts,\n            $table: _this2\n          });\n        }\n\n        return Promise.reject(e);\n      }).then(function (params) {\n        var file = params.file;\n        return handleFileImport(_this2, file, opts);\n      });\n    },\n    _saveFile: function _saveFile(options) {\n      return saveLocalFile(options);\n    },\n    _readFile: function _readFile(options) {\n      return readLocalFile(options);\n    },\n    _print: function _print(options) {\n      var _this3 = this;\n\n      var opts = Object.assign({\n        original: false // beforePrintMethod\n\n      }, this.printOpts, options, {\n        type: 'html',\n        download: false,\n        remote: false,\n        print: true\n      });\n\n      if (!opts.sheetName) {\n        opts.sheetName = document.title;\n      }\n\n      return new Promise(function (resolve) {\n        if (opts.content) {\n          resolve(handlePrint(_this3, opts, opts.content));\n        } else {\n          resolve(_this3.exportData(opts).then(function (_ref3) {\n            var content = _ref3.content;\n            return handlePrint(_this3, opts, content);\n          }));\n        }\n      });\n    },\n    _openImport: function _openImport(options) {\n      var defOpts = Object.assign({\n        mode: 'insert',\n        message: true,\n        types: VXETable.config.importTypes\n      }, options, this.importOpts);\n      var types = defOpts.types;\n      var isTree = !!this.getTreeStatus();\n\n      if (isTree) {\n        if (defOpts.message) {\n          VXETable.modal.message({\n            content: GlobalConfig.i18n('vxe.error.treeNotImp'),\n            status: 'error'\n          });\n        }\n\n        return;\n      }\n\n      if (!this.importConfig) {\n        UtilTools.error('vxe.error.reqProp', ['import-config']);\n      } // 处理类型\n\n\n      var typeList = types.map(function (value) {\n        return {\n          value: value,\n          label: \"vxe.export.types.\".concat(value)\n        };\n      });\n      var modeList = defOpts.modes.map(function (value) {\n        return {\n          value: value,\n          label: \"vxe.import.modes.\".concat(value)\n        };\n      });\n      Object.assign(this.importStore, {\n        file: null,\n        type: '',\n        filename: '',\n        modeList: modeList,\n        typeList: typeList,\n        visible: true\n      });\n      Object.assign(this.importParams, defOpts);\n      this.initStore.import = true;\n    },\n    _openExport: function _openExport(options) {\n      var exportOpts = this.exportOpts;\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (!this.exportConfig) {\n          UtilTools.error('vxe.error.reqProp', ['export-config']);\n        }\n      }\n\n      return handleExportAndPrint(this, Object.assign({}, exportOpts, options));\n    },\n    _openPrint: function _openPrint(options) {\n      var printOpts = this.printOpts;\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (!this.printConfig) {\n          UtilTools.error('vxe.error.reqProp', ['print-config']);\n        }\n      }\n\n      return handleExportAndPrint(this, Object.assign({}, printOpts, options), true);\n    }\n  }\n};",null]}