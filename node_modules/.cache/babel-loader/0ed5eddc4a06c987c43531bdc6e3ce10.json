{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\input\\src\\input.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\input\\src\\input.js","mtime":1635230121340},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport vSize from '../../mixins/size';\nimport { UtilTools, DomTools, GlobalEvent } from '../../tools';\nconst yearSize = 20;\nconst monthSize = 20;\nconst quarterSize = 8;\n\nfunction toStringTimeDate(str) {\n  if (str) {\n    const rest = new Date();\n    let h, m, s;\n\n    if (XEUtils.isDate(str)) {\n      h = str.getHours();\n      m = str.getMinutes();\n      s = str.getSeconds();\n    } else {\n      str = XEUtils.toString(str);\n      const parses = str.match(/^(\\d{1,2})(:(\\d{1,2}))?(:(\\d{1,2}))?/);\n\n      if (parses) {\n        h = parses[1];\n        m = parses[3];\n        s = parses[5];\n      }\n    }\n\n    rest.setHours(h || 0);\n    rest.setMinutes(m || 0);\n    rest.setSeconds(s || 0);\n    return rest;\n  }\n\n  return new Date('');\n}\n\nfunction getDateQuarter(date) {\n  const month = date.getMonth();\n\n  if (month < 3) {\n    return 1;\n  } else if (month < 6) {\n    return 2;\n  } else if (month < 9) {\n    return 3;\n  }\n\n  return 4;\n}\n\nfunction getNumberValue(_vm, val) {\n  const type = _vm.type,\n        exponential = _vm.exponential,\n        digitsValue = _vm.digitsValue,\n        inpMaxlength = _vm.inpMaxlength;\n  const restVal = type === 'float' ? XEUtils.toFixed(XEUtils.floor(val, digitsValue), digitsValue) : XEUtils.toString(val);\n\n  if (exponential && (val === restVal || XEUtils.toString(val).toLowerCase() === XEUtils.toNumber(restVal).toExponential())) {\n    return val;\n  }\n\n  return restVal.slice(0, inpMaxlength);\n}\n\nfunction renderDateLabel(h, _vm, item, label) {\n  const festivalMethod = _vm.festivalMethod;\n\n  if (festivalMethod) {\n    const festivalRest = festivalMethod(_objectSpread({\n      $input: _vm,\n      type: _vm.datePanelType,\n      viewType: _vm.datePanelType\n    }, item));\n    const festivalItem = festivalRest ? XEUtils.isString(festivalRest) ? {\n      label: festivalRest\n    } : festivalRest : {};\n    const extraItem = festivalItem.extra ? XEUtils.isString(festivalItem.extra) ? {\n      label: festivalItem.extra\n    } : festivalItem.extra : null;\n    const labels = [h('span', {\n      class: ['vxe-input--date-label', {\n        'is-notice': festivalItem.notice\n      }]\n    }, extraItem && extraItem.label ? [h('span', label), h('span', {\n      class: ['vxe-input--date-label--extra', extraItem.important ? 'is-important' : '', extraItem.className],\n      style: extraItem.style\n    }, XEUtils.toString(extraItem.label))] : label)];\n    const festivalLabel = festivalItem.label;\n\n    if (festivalLabel) {\n      // 默认最多支持3个节日重叠\n      const festivalLabels = XEUtils.toString(festivalLabel).split(',');\n      labels.push(h('span', {\n        class: ['vxe-input--date-festival', festivalItem.important ? 'is-important' : '', festivalItem.className],\n        style: festivalItem.style\n      }, [festivalLabels.length > 1 ? h('span', {\n        class: ['vxe-input--date-festival--overlap', `overlap--${festivalLabels.length}`]\n      }, festivalLabels.map(label => h('span', label.substring(0, 3)))) : h('span', {\n        class: 'vxe-input--date-festival--label'\n      }, festivalLabels[0].substring(0, 3))]));\n    }\n\n    return labels;\n  }\n\n  return label;\n}\n\nfunction isDateDisabled(_vm, item) {\n  const disabledMethod = _vm.disabledMethod;\n  return disabledMethod && disabledMethod({\n    $input: _vm,\n    type: _vm.datePanelType,\n    viewType: _vm.datePanelType,\n    date: item.date\n  });\n}\n\nfunction renderDateDayTable(h, _vm) {\n  const datePanelType = _vm.datePanelType,\n        dateValue = _vm.dateValue,\n        datePanelValue = _vm.datePanelValue,\n        dateHeaders = _vm.dateHeaders,\n        dayDatas = _vm.dayDatas;\n  const matchFormat = 'yyyy-MM-dd';\n  return [h('table', {\n    class: `vxe-input--date-${datePanelType}-view`,\n    attrs: {\n      cellspacing: 0,\n      cellpadding: 0,\n      border: 0\n    }\n  }, [h('thead', [h('tr', dateHeaders.map(item => {\n    return h('th', item.label);\n  }))]), h('tbody', dayDatas.map(rows => {\n    return h('tr', rows.map(item => {\n      return h('td', {\n        class: {\n          'is--prev': item.isPrev,\n          'is--current': item.isCurrent,\n          'is--now': item.isNow,\n          'is--next': item.isNext,\n          'is--disabled': isDateDisabled(_vm, item),\n          'is--selected': XEUtils.isDateSame(dateValue, item.date, matchFormat),\n          'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n        },\n        on: {\n          click: () => _vm.dateSelectEvent(item),\n          mouseenter: () => _vm.dateMouseenterEvent(item)\n        }\n      }, renderDateLabel(h, _vm, item, item.label));\n    }));\n  }))])];\n}\n\nfunction renderDateWeekTable(h, _vm) {\n  const datePanelType = _vm.datePanelType,\n        dateValue = _vm.dateValue,\n        datePanelValue = _vm.datePanelValue,\n        weekHeaders = _vm.weekHeaders,\n        weekDates = _vm.weekDates;\n  const matchFormat = 'yyyyMMdd';\n  return [h('table', {\n    class: `vxe-input--date-${datePanelType}-view`,\n    attrs: {\n      cellspacing: 0,\n      cellpadding: 0,\n      border: 0\n    }\n  }, [h('thead', [h('tr', weekHeaders.map(item => {\n    return h('th', item.label);\n  }))]), h('tbody', weekDates.map(rows => {\n    const isSelected = rows.some(item => XEUtils.isDateSame(dateValue, item.date, matchFormat));\n    const isHover = rows.some(item => XEUtils.isDateSame(datePanelValue, item.date, matchFormat));\n    return h('tr', rows.map(item => {\n      return h('td', {\n        class: {\n          'is--prev': item.isPrev,\n          'is--current': item.isCurrent,\n          'is--now': item.isNow,\n          'is--next': item.isNext,\n          'is--disabled': isDateDisabled(_vm, item),\n          'is--selected': isSelected,\n          'is--hover': isHover\n        },\n        on: {\n          click: () => _vm.dateSelectEvent(item),\n          mouseenter: () => _vm.dateMouseenterEvent(item)\n        }\n      }, renderDateLabel(h, _vm, item, item.label));\n    }));\n  }))])];\n}\n\nfunction renderDateMonthTable(h, _vm) {\n  const dateValue = _vm.dateValue,\n        datePanelType = _vm.datePanelType,\n        monthDatas = _vm.monthDatas,\n        datePanelValue = _vm.datePanelValue;\n  const matchFormat = 'yyyyMM';\n  return [h('table', {\n    class: `vxe-input--date-${datePanelType}-view`,\n    attrs: {\n      cellspacing: 0,\n      cellpadding: 0,\n      border: 0\n    }\n  }, [h('tbody', monthDatas.map(rows => {\n    return h('tr', rows.map(item => {\n      return h('td', {\n        class: {\n          'is--prev': item.isPrev,\n          'is--current': item.isCurrent,\n          'is--now': item.isNow,\n          'is--next': item.isNext,\n          'is--disabled': isDateDisabled(_vm, item),\n          'is--selected': XEUtils.isDateSame(dateValue, item.date, matchFormat),\n          'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n        },\n        on: {\n          click: () => _vm.dateSelectEvent(item),\n          mouseenter: () => _vm.dateMouseenterEvent(item)\n        }\n      }, renderDateLabel(h, _vm, item, GlobalConfig.i18n(`vxe.input.date.months.m${item.month}`)));\n    }));\n  }))])];\n}\n\nfunction renderDateQuarterTable(h, _vm) {\n  const dateValue = _vm.dateValue,\n        datePanelType = _vm.datePanelType,\n        quarterDatas = _vm.quarterDatas,\n        datePanelValue = _vm.datePanelValue;\n  const matchFormat = 'yyyyq';\n  return [h('table', {\n    class: `vxe-input--date-${datePanelType}-view`,\n    attrs: {\n      cellspacing: 0,\n      cellpadding: 0,\n      border: 0\n    }\n  }, [h('tbody', quarterDatas.map(rows => {\n    return h('tr', rows.map(item => {\n      return h('td', {\n        class: {\n          'is--prev': item.isPrev,\n          'is--current': item.isCurrent,\n          'is--now': item.isNow,\n          'is--next': item.isNext,\n          'is--disabled': isDateDisabled(_vm, item),\n          'is--selected': XEUtils.isDateSame(dateValue, item.date, matchFormat),\n          'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n        },\n        on: {\n          click: () => _vm.dateSelectEvent(item),\n          mouseenter: () => _vm.dateMouseenterEvent(item)\n        }\n      }, renderDateLabel(h, _vm, item, GlobalConfig.i18n(`vxe.input.date.quarters.q${item.quarter}`)));\n    }));\n  }))])];\n}\n\nfunction renderDateYearTable(h, _vm) {\n  const dateValue = _vm.dateValue,\n        datePanelType = _vm.datePanelType,\n        yearDatas = _vm.yearDatas,\n        datePanelValue = _vm.datePanelValue;\n  const matchFormat = 'yyyy';\n  return [h('table', {\n    class: `vxe-input--date-${datePanelType}-view`,\n    attrs: {\n      cellspacing: 0,\n      cellpadding: 0,\n      border: 0\n    }\n  }, [h('tbody', yearDatas.map(rows => {\n    return h('tr', rows.map(item => {\n      return h('td', {\n        class: {\n          'is--disabled': isDateDisabled(_vm, item),\n          'is--current': item.isCurrent,\n          'is--now': item.isNow,\n          'is--selected': XEUtils.isDateSame(dateValue, item.date, matchFormat),\n          'is--hover': XEUtils.isDateSame(datePanelValue, item.date, matchFormat)\n        },\n        on: {\n          click: () => _vm.dateSelectEvent(item),\n          mouseenter: () => _vm.dateMouseenterEvent(item)\n        }\n      }, renderDateLabel(h, _vm, item, item.year));\n    }));\n  }))])];\n}\n\nfunction renderDateTable(h, _vm) {\n  const datePanelType = _vm.datePanelType;\n\n  switch (datePanelType) {\n    case 'week':\n      return renderDateWeekTable(h, _vm);\n\n    case 'month':\n      return renderDateMonthTable(h, _vm);\n\n    case 'quarter':\n      return renderDateQuarterTable(h, _vm);\n\n    case 'year':\n      return renderDateYearTable(h, _vm);\n  }\n\n  return renderDateDayTable(h, _vm);\n}\n\nfunction renderDatePanel(h, _vm) {\n  const datePanelType = _vm.datePanelType,\n        selectDatePanelLabel = _vm.selectDatePanelLabel,\n        isDisabledPrevDateBtn = _vm.isDisabledPrevDateBtn,\n        isDisabledNextDateBtn = _vm.isDisabledNextDateBtn;\n  return [h('div', {\n    class: 'vxe-input--date-picker-header'\n  }, [h('div', {\n    class: 'vxe-input--date-picker-type-wrapper'\n  }, [datePanelType === 'year' ? h('span', {\n    class: 'vxe-input--date-picker-label'\n  }, selectDatePanelLabel) : h('span', {\n    class: 'vxe-input--date-picker-btn',\n    on: {\n      click: _vm.dateToggleTypeEvent\n    }\n  }, selectDatePanelLabel)]), h('div', {\n    class: 'vxe-input--date-picker-btn-wrapper'\n  }, [h('span', {\n    class: ['vxe-input--date-picker-btn vxe-input--date-picker-prev-btn', {\n      'is--disabled': isDisabledPrevDateBtn\n    }],\n    on: {\n      click: _vm.datePrevEvent\n    }\n  }, [h('i', {\n    class: 'vxe-icon--caret-left'\n  })]), h('span', {\n    class: 'vxe-input--date-picker-btn vxe-input--date-picker-current-btn',\n    on: {\n      click: _vm.dateTodayMonthEvent\n    }\n  }, [h('i', {\n    class: 'vxe-icon--dot'\n  })]), h('span', {\n    class: ['vxe-input--date-picker-btn vxe-input--date-picker-next-btn', {\n      'is--disabled': isDisabledNextDateBtn\n    }],\n    on: {\n      click: _vm.dateNextEvent\n    }\n  }, [h('i', {\n    class: 'vxe-icon--caret-right'\n  })])])]), h('div', {\n    class: 'vxe-input--date-picker-body'\n  }, renderDateTable(h, _vm))];\n}\n\nfunction renderTimePanel(h, _vm) {\n  const dateTimeLabel = _vm.dateTimeLabel,\n        datetimePanelValue = _vm.datetimePanelValue,\n        hourList = _vm.hourList,\n        minuteList = _vm.minuteList,\n        secondList = _vm.secondList;\n  return [h('div', {\n    class: 'vxe-input--time-picker-header'\n  }, [h('span', {\n    class: 'vxe-input--time-picker-title'\n  }, dateTimeLabel), h('button', {\n    class: 'vxe-input--time-picker-confirm',\n    attrs: {\n      type: 'button'\n    },\n    on: {\n      click: _vm.dateConfirmEvent\n    }\n  }, GlobalConfig.i18n('vxe.button.confirm'))]), h('div', {\n    ref: 'timeBody',\n    class: 'vxe-input--time-picker-body'\n  }, [h('ul', {\n    class: 'vxe-input--time-picker-hour-list'\n  }, hourList.map((item, index) => {\n    return h('li', {\n      key: index,\n      class: {\n        'is--selected': datetimePanelValue && datetimePanelValue.getHours() === item.value\n      },\n      on: {\n        click: evnt => _vm.dateHourEvent(evnt, item)\n      }\n    }, item.label);\n  })), h('ul', {\n    class: 'vxe-input--time-picker-minute-list'\n  }, minuteList.map((item, index) => {\n    return h('li', {\n      key: index,\n      class: {\n        'is--selected': datetimePanelValue && datetimePanelValue.getMinutes() === item.value\n      },\n      on: {\n        click: evnt => _vm.dateMinuteEvent(evnt, item)\n      }\n    }, item.label);\n  })), h('ul', {\n    class: 'vxe-input--time-picker-second-list'\n  }, secondList.map((item, index) => {\n    return h('li', {\n      key: index,\n      class: {\n        'is--selected': datetimePanelValue && datetimePanelValue.getSeconds() === item.value\n      },\n      on: {\n        click: evnt => _vm.dateSecondEvent(evnt, item)\n      }\n    }, item.label);\n  }))])];\n}\n\nfunction renderPanel(h, _vm) {\n  const type = _vm.type,\n        vSize = _vm.vSize,\n        isDatePickerType = _vm.isDatePickerType,\n        transfer = _vm.transfer,\n        animatVisible = _vm.animatVisible,\n        visiblePanel = _vm.visiblePanel,\n        panelPlacement = _vm.panelPlacement,\n        panelStyle = _vm.panelStyle;\n  const renders = [];\n\n  if (isDatePickerType) {\n    if (type === 'datetime') {\n      renders.push(h('div', {\n        class: 'vxe-input--panel-layout-wrapper'\n      }, [h('div', {\n        class: 'vxe-input--panel-left-wrapper'\n      }, renderDatePanel(h, _vm)), h('div', {\n        class: 'vxe-input--panel-right-wrapper'\n      }, renderTimePanel(h, _vm))]));\n    } else if (type === 'time') {\n      renders.push(h('div', {\n        class: 'vxe-input--panel-wrapper'\n      }, renderTimePanel(h, _vm)));\n    } else {\n      renders.push(h('div', {\n        class: 'vxe-input--panel-wrapper'\n      }, renderDatePanel(h, _vm)));\n    }\n\n    return h('div', {\n      ref: 'panel',\n      class: ['vxe-table--ignore-clear vxe-input--panel', `type--${type}`, {\n        [`size--${vSize}`]: vSize,\n        'is--transfer': transfer,\n        'animat--leave': animatVisible,\n        'animat--enter': visiblePanel\n      }],\n      attrs: {\n        placement: panelPlacement\n      },\n      style: panelStyle\n    }, renders);\n  }\n\n  return null;\n}\n\nfunction renderNumberIcon(h, _vm) {\n  return h('span', {\n    class: 'vxe-input--number-suffix'\n  }, [h('span', {\n    class: 'vxe-input--number-prev is--prev',\n    on: {\n      mousedown: _vm.numberMousedownEvent,\n      mouseup: _vm.numberStopDown,\n      mouseleave: _vm.numberStopDown\n    }\n  }, [h('i', {\n    class: ['vxe-input--number-prev-icon', GlobalConfig.icon.INPUT_PREV_NUM]\n  })]), h('span', {\n    class: 'vxe-input--number-next is--next',\n    on: {\n      mousedown: _vm.numberMousedownEvent,\n      mouseup: _vm.numberStopDown,\n      mouseleave: _vm.numberStopDown\n    }\n  }, [h('i', {\n    class: ['vxe-input--number-next-icon', GlobalConfig.icon.INPUT_NEXT_NUM]\n  })])]);\n}\n\nfunction renderDatePickerIcon(h, _vm) {\n  return h('span', {\n    class: 'vxe-input--date-picker-suffix',\n    on: {\n      click: _vm.datePickerOpenEvent\n    }\n  }, [h('i', {\n    class: ['vxe-input--date-picker-icon', GlobalConfig.icon.INPUT_DATE]\n  })]);\n}\n\nfunction renderSearchIcon(h, _vm) {\n  return h('span', {\n    class: 'vxe-input--search-suffix',\n    on: {\n      click: _vm.searchEvent\n    }\n  }, [h('i', {\n    class: ['vxe-input--search-icon', GlobalConfig.icon.INPUT_SEARCH]\n  })]);\n}\n\nfunction renderPasswordIcon(h, _vm) {\n  const showPwd = _vm.showPwd;\n  return h('span', {\n    class: 'vxe-input--password-suffix',\n    on: {\n      click: _vm.passwordToggleEvent\n    }\n  }, [h('i', {\n    class: ['vxe-input--password-icon', showPwd ? GlobalConfig.icon.INPUT_SHOW_PWD : GlobalConfig.icon.INPUT_PWD]\n  })]);\n}\n\nfunction rendePrefixIcon(h, _vm) {\n  const $scopedSlots = _vm.$scopedSlots,\n        prefixIcon = _vm.prefixIcon;\n  const icons = [];\n\n  if ($scopedSlots.prefix) {\n    icons.push(h('span', {\n      class: 'vxe-input--prefix-icon'\n    }, $scopedSlots.prefix.call(this, {}, h)));\n  } else if (prefixIcon) {\n    icons.push(h('i', {\n      class: ['vxe-input--prefix-icon', prefixIcon]\n    }));\n  }\n\n  return icons.length ? h('span', {\n    class: 'vxe-input--prefix',\n    on: {\n      click: _vm.clickPrefixEvent\n    }\n  }, icons) : null;\n}\n\nfunction renderSuffixIcon(h, _vm) {\n  const $scopedSlots = _vm.$scopedSlots,\n        inputValue = _vm.inputValue,\n        isClearable = _vm.isClearable,\n        disabled = _vm.disabled,\n        suffixIcon = _vm.suffixIcon;\n  const icons = [];\n\n  if ($scopedSlots.suffix) {\n    icons.push(h('span', {\n      class: 'vxe-input--suffix-icon'\n    }, $scopedSlots.suffix.call(this, {}, h)));\n  } else if (suffixIcon) {\n    icons.push(h('i', {\n      class: ['vxe-input--suffix-icon', suffixIcon]\n    }));\n  }\n\n  if (isClearable) {\n    icons.push(h('i', {\n      class: ['vxe-input--clear-icon', GlobalConfig.icon.INPUT_CLEAR]\n    }));\n  }\n\n  return icons.length ? h('span', {\n    class: ['vxe-input--suffix', {\n      'is--clear': isClearable && !disabled && !(inputValue === '' || XEUtils.eqNull(inputValue))\n    }],\n    on: {\n      click: _vm.clickSuffixEvent\n    }\n  }, icons) : null;\n}\n\nfunction renderExtraSuffixIcon(h, _vm) {\n  const controls = _vm.controls,\n        isPawdType = _vm.isPawdType,\n        isNumType = _vm.isNumType,\n        isDatePickerType = _vm.isDatePickerType,\n        isSearch = _vm.isSearch;\n  let icons;\n\n  if (isPawdType) {\n    icons = renderPasswordIcon(h, _vm);\n  } else if (isNumType) {\n    if (controls) {\n      icons = renderNumberIcon(h, _vm);\n    }\n  } else if (isDatePickerType) {\n    icons = renderDatePickerIcon(h, _vm);\n  } else if (isSearch) {\n    icons = renderSearchIcon(h, _vm);\n  }\n\n  return icons ? h('span', {\n    class: 'vxe-input--extra-suffix'\n  }, [icons]) : null;\n}\n\nexport default {\n  name: 'VxeInput',\n  mixins: [vSize],\n  model: {\n    prop: 'value',\n    event: 'modelValue'\n  },\n  props: {\n    value: [String, Number, Date],\n    immediate: {\n      type: Boolean,\n      default: true\n    },\n    name: String,\n    type: {\n      type: String,\n      default: 'text'\n    },\n    clearable: {\n      type: Boolean,\n      default: () => GlobalConfig.input.clearable\n    },\n    readonly: Boolean,\n    disabled: Boolean,\n    placeholder: String,\n    maxlength: [String, Number],\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    align: String,\n    form: String,\n    className: String,\n    size: {\n      type: String,\n      default: () => GlobalConfig.input.size || GlobalConfig.size\n    },\n    // number、integer、float\n    min: {\n      type: [String, Number],\n      default: null\n    },\n    max: {\n      type: [String, Number],\n      default: null\n    },\n    step: [String, Number],\n    exponential: {\n      type: Boolean,\n      default: () => GlobalConfig.input.exponential\n    },\n    // number、integer、float、password\n    controls: {\n      type: Boolean,\n      default: () => GlobalConfig.input.controls\n    },\n    // float\n    digits: {\n      type: [String, Number],\n      default: () => GlobalConfig.input.digits\n    },\n    // date、week、month、year\n    dateConfig: Object,\n    minDate: {\n      type: [String, Number, Date],\n      default: () => GlobalConfig.input.minDate\n    },\n    maxDate: {\n      type: [String, Number, Date],\n      default: () => GlobalConfig.input.maxDate\n    },\n    // 已废弃 startWeek，被 startDay 替换\n    startWeek: Number,\n    startDay: {\n      type: [String, Number],\n      default: () => GlobalConfig.input.startDay\n    },\n    labelFormat: {\n      type: String,\n      default: () => GlobalConfig.input.labelFormat\n    },\n    valueFormat: {\n      type: String,\n      default: () => GlobalConfig.input.valueFormat\n    },\n    editable: {\n      type: Boolean,\n      default: true\n    },\n    festivalMethod: {\n      type: Function,\n      default: () => GlobalConfig.input.festivalMethod\n    },\n    disabledMethod: {\n      type: Function,\n      default: () => GlobalConfig.input.disabledMethod\n    },\n    // week\n    selectDay: {\n      type: Number,\n      default: () => GlobalConfig.input.selectDay\n    },\n    prefixIcon: String,\n    suffixIcon: String,\n    placement: String,\n    transfer: {\n      type: Boolean,\n      default: () => GlobalConfig.input.transfer\n    }\n  },\n\n  data() {\n    return {\n      panelIndex: 0,\n      showPwd: false,\n      visiblePanel: false,\n      animatVisible: false,\n      panelStyle: null,\n      panelPlacement: null,\n      isActivated: false,\n      inputValue: this.value,\n      datetimePanelValue: null,\n      datePanelValue: null,\n      datePanelLabel: '',\n      datePanelType: 'day',\n      selectMonth: null,\n      currentDate: null\n    };\n  },\n\n  computed: {\n    isNumType() {\n      return ['number', 'integer', 'float'].indexOf(this.type) > -1;\n    },\n\n    isDatePickerType() {\n      return this.hasTime || ['date', 'week', 'month', 'quarter', 'year'].indexOf(this.type) > -1;\n    },\n\n    hasTime() {\n      const type = this.type;\n      return type === 'time' || type === 'datetime';\n    },\n\n    isPawdType() {\n      return this.type === 'password';\n    },\n\n    isSearch() {\n      return this.type === 'search';\n    },\n\n    stepValue() {\n      const type = this.type,\n            step = this.step;\n\n      if (type === 'integer') {\n        return XEUtils.toInteger(step) || 1;\n      } else if (type === 'float') {\n        return XEUtils.toNumber(step) || 1 / Math.pow(10, this.digitsValue);\n      }\n\n      return XEUtils.toNumber(step) || 1;\n    },\n\n    digitsValue() {\n      return XEUtils.toInteger(this.digits) || 1;\n    },\n\n    isClearable() {\n      return this.clearable && (this.isPawdType || this.isNumType || this.isDatePickerType || this.type === 'text' || this.type === 'search');\n    },\n\n    isDisabledPrevDateBtn() {\n      const selectMonth = this.selectMonth,\n            dateMinTime = this.dateMinTime;\n\n      if (selectMonth) {\n        return selectMonth <= dateMinTime;\n      }\n\n      return false;\n    },\n\n    isDisabledNextDateBtn() {\n      const selectMonth = this.selectMonth,\n            dateMaxTime = this.dateMaxTime;\n\n      if (selectMonth) {\n        return selectMonth >= dateMaxTime;\n      }\n\n      return false;\n    },\n\n    dateMinTime() {\n      return this.minDate ? XEUtils.toStringDate(this.minDate) : null;\n    },\n\n    dateMaxTime() {\n      return this.maxDate ? XEUtils.toStringDate(this.maxDate) : null;\n    },\n\n    dateValue() {\n      const value = this.value,\n            isDatePickerType = this.isDatePickerType,\n            type = this.type,\n            dateValueFormat = this.dateValueFormat;\n      let val = null;\n\n      if (value && isDatePickerType) {\n        let date;\n\n        if (type === 'time') {\n          date = toStringTimeDate(value);\n        } else {\n          date = XEUtils.toStringDate(value, dateValueFormat);\n        }\n\n        if (XEUtils.isValidDate(date)) {\n          val = date;\n        }\n      }\n\n      return val;\n    },\n\n    dateTimeLabel() {\n      const datetimePanelValue = this.datetimePanelValue;\n\n      if (datetimePanelValue) {\n        return XEUtils.toDateString(datetimePanelValue, 'HH:mm:ss');\n      }\n\n      return '';\n    },\n\n    hmsTime() {\n      const dateValue = this.dateValue;\n      return dateValue && this.hasTime ? (dateValue.getHours() * 3600 + dateValue.getMinutes() * 60 + dateValue.getSeconds()) * 1000 : 0;\n    },\n\n    dateLabelFormat() {\n      if (this.isDatePickerType) {\n        return this.labelFormat || GlobalConfig.i18n(`vxe.input.date.labelFormat.${this.type}`);\n      }\n\n      return null;\n    },\n\n    dateValueFormat() {\n      const type = this.type;\n      return type === 'time' ? 'HH:mm:ss' : this.valueFormat || (type === 'datetime' ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd');\n    },\n\n    selectDatePanelLabel() {\n      if (this.isDatePickerType) {\n        const datePanelType = this.datePanelType,\n              selectMonth = this.selectMonth,\n              yearList = this.yearList;\n        let year = '';\n        let month;\n\n        if (selectMonth) {\n          year = selectMonth.getFullYear();\n          month = selectMonth.getMonth() + 1;\n        }\n\n        if (datePanelType === 'quarter') {\n          return GlobalConfig.i18n('vxe.input.date.quarterLabel', [year]);\n        } else if (datePanelType === 'month') {\n          return GlobalConfig.i18n('vxe.input.date.monthLabel', [year]);\n        } else if (datePanelType === 'year') {\n          return yearList.length ? `${yearList[0].year} - ${yearList[yearList.length - 1].year}` : '';\n        }\n\n        return GlobalConfig.i18n('vxe.input.date.dayLabel', [year, month ? GlobalConfig.i18n(`vxe.input.date.m${month}`) : '-']);\n      }\n\n      return '';\n    },\n\n    weekDatas() {\n      const weeks = [];\n\n      if (this.isDatePickerType) {\n        const startDay = this.startDay,\n              startWeek = this.startWeek;\n        let sWeek = XEUtils.toNumber(XEUtils.isNumber(startDay) || XEUtils.isString(startDay) ? startDay : startWeek);\n        weeks.push(sWeek);\n\n        for (let index = 0; index < 6; index++) {\n          if (sWeek >= 6) {\n            sWeek = 0;\n          } else {\n            sWeek++;\n          }\n\n          weeks.push(sWeek);\n        }\n      }\n\n      return weeks;\n    },\n\n    dateHeaders() {\n      if (this.isDatePickerType) {\n        return this.weekDatas.map(day => {\n          return {\n            value: day,\n            label: GlobalConfig.i18n(`vxe.input.date.weeks.w${day}`)\n          };\n        });\n      }\n\n      return [];\n    },\n\n    weekHeaders() {\n      if (this.isDatePickerType) {\n        return [{\n          label: GlobalConfig.i18n('vxe.input.date.weeks.w')\n        }].concat(this.dateHeaders);\n      }\n\n      return [];\n    },\n\n    yearList() {\n      const selectMonth = this.selectMonth,\n            currentDate = this.currentDate;\n      const months = [];\n\n      if (selectMonth && currentDate) {\n        const currFullYear = currentDate.getFullYear();\n        const startYear = new Date(('' + selectMonth.getFullYear()).replace(/\\d{1}$/, '0'), 0, 1);\n\n        for (let index = -10; index < yearSize - 10; index++) {\n          const date = XEUtils.getWhatYear(startYear, index, 'first');\n          const itemFullYear = date.getFullYear();\n          months.push({\n            date,\n            isCurrent: true,\n            isNow: currFullYear === itemFullYear,\n            year: itemFullYear\n          });\n        }\n      }\n\n      return months;\n    },\n\n    yearDatas() {\n      return XEUtils.chunk(this.yearList, 4);\n    },\n\n    quarterList() {\n      const selectMonth = this.selectMonth,\n            currentDate = this.currentDate;\n      const quarters = [];\n\n      if (selectMonth && currentDate) {\n        const currFullYear = currentDate.getFullYear();\n        const currQuarter = getDateQuarter(currentDate);\n        const firstYear = XEUtils.getWhatYear(selectMonth, 0, 'first');\n        const selFullYear = firstYear.getFullYear();\n\n        for (let index = -2; index < quarterSize - 2; index++) {\n          const date = XEUtils.getWhatQuarter(firstYear, index);\n          const itemFullYear = date.getFullYear();\n          const itemQuarter = getDateQuarter(date);\n          const isPrev = itemFullYear < selFullYear;\n          quarters.push({\n            date,\n            isPrev,\n            isCurrent: itemFullYear === selFullYear,\n            isNow: itemFullYear === currFullYear && itemQuarter === currQuarter,\n            isNext: !isPrev && itemFullYear > selFullYear,\n            quarter: itemQuarter\n          });\n        }\n      }\n\n      return quarters;\n    },\n\n    quarterDatas() {\n      return XEUtils.chunk(this.quarterList, 2);\n    },\n\n    monthList() {\n      const selectMonth = this.selectMonth,\n            currentDate = this.currentDate;\n      const months = [];\n\n      if (selectMonth && currentDate) {\n        const currFullYear = currentDate.getFullYear();\n        const currMonth = currentDate.getMonth();\n        const selFullYear = XEUtils.getWhatYear(selectMonth, 0, 'first').getFullYear();\n\n        for (let index = -4; index < monthSize - 4; index++) {\n          const date = XEUtils.getWhatYear(selectMonth, 0, index);\n          const itemFullYear = date.getFullYear();\n          const itemMonth = date.getMonth();\n          const isPrev = itemFullYear < selFullYear;\n          months.push({\n            date,\n            isPrev,\n            isCurrent: itemFullYear === selFullYear,\n            isNow: itemFullYear === currFullYear && itemMonth === currMonth,\n            isNext: !isPrev && itemFullYear > selFullYear,\n            month: itemMonth\n          });\n        }\n      }\n\n      return months;\n    },\n\n    monthDatas() {\n      return XEUtils.chunk(this.monthList, 4);\n    },\n\n    dayList() {\n      const weekDatas = this.weekDatas,\n            selectMonth = this.selectMonth,\n            currentDate = this.currentDate,\n            hmsTime = this.hmsTime;\n      const days = [];\n\n      if (selectMonth && currentDate) {\n        const currFullYear = currentDate.getFullYear();\n        const currMonth = currentDate.getMonth();\n        const currDate = currentDate.getDate();\n        const selFullYear = selectMonth.getFullYear();\n        const selMonth = selectMonth.getMonth();\n        const selDay = selectMonth.getDay();\n        const prevOffsetDate = -weekDatas.indexOf(selDay);\n        const startDate = new Date(XEUtils.getWhatDay(selectMonth, prevOffsetDate).getTime() + hmsTime);\n\n        for (let index = 0; index < 42; index++) {\n          const date = XEUtils.getWhatDay(startDate, index);\n          const itemFullYear = date.getFullYear();\n          const itemMonth = date.getMonth();\n          const itemDate = date.getDate();\n          const isPrev = date < selectMonth;\n          days.push({\n            date,\n            isPrev,\n            isCurrent: itemFullYear === selFullYear && itemMonth === selMonth,\n            isNow: itemFullYear === currFullYear && itemMonth === currMonth && itemDate === currDate,\n            isNext: !isPrev && selMonth !== itemMonth,\n            label: itemDate\n          });\n        }\n      }\n\n      return days;\n    },\n\n    dayDatas() {\n      return XEUtils.chunk(this.dayList, 7);\n    },\n\n    weekDates() {\n      return this.dayDatas.map(list => {\n        const firstItem = list[0];\n        const item = {\n          date: firstItem.date,\n          isWeekNumber: true,\n          isPrev: false,\n          isCurrent: false,\n          isNow: false,\n          isNext: false,\n          label: XEUtils.getYearWeek(firstItem.date)\n        };\n        return [item].concat(list);\n      });\n    },\n\n    hourList() {\n      const list = [];\n\n      if (this.hasTime) {\n        for (let index = 0; index < 24; index++) {\n          list.push({\n            value: index,\n            label: ('' + index).padStart(2, 0)\n          });\n        }\n      }\n\n      return list;\n    },\n\n    minuteList() {\n      const list = [];\n\n      if (this.hasTime) {\n        for (let index = 0; index < 60; index++) {\n          list.push({\n            value: index,\n            label: ('' + index).padStart(2, 0)\n          });\n        }\n      }\n\n      return list;\n    },\n\n    secondList() {\n      return this.minuteList;\n    },\n\n    inpImmediate() {\n      const type = this.type,\n            immediate = this.immediate;\n      return immediate || !(type === 'text' || type === 'number' || type === 'integer' || type === 'float');\n    },\n\n    inpPlaceholder() {\n      const placeholder = this.placeholder;\n\n      if (placeholder) {\n        return UtilTools.getFuncText(placeholder);\n      }\n\n      return '';\n    },\n\n    inputType() {\n      const isDatePickerType = this.isDatePickerType,\n            isNumType = this.isNumType,\n            isPawdType = this.isPawdType,\n            type = this.type,\n            showPwd = this.showPwd;\n\n      if (isDatePickerType || isNumType || isPawdType && showPwd || type === 'number') {\n        return 'text';\n      }\n\n      return type;\n    },\n\n    inpMaxlength() {\n      const isNumType = this.isNumType,\n            maxlength = this.maxlength; // 数值最大长度限制 16 位，包含小数\n\n      return isNumType && !XEUtils.toNumber(maxlength) ? 16 : maxlength;\n    },\n\n    inpReadonly() {\n      const type = this.type,\n            readonly = this.readonly,\n            editable = this.editable;\n      return readonly || !editable || type === 'week' || type === 'quarter';\n    }\n\n  },\n  watch: {\n    value(val) {\n      this.inputValue = val;\n      this.changeValue();\n    },\n\n    dateLabelFormat() {\n      this.dateParseValue(this.datePanelValue);\n      this.inputValue = this.datePanelLabel;\n    }\n\n  },\n\n  created() {\n    this.initValue();\n    GlobalEvent.on(this, 'mousewheel', this.handleGlobalMousewheelEvent);\n    GlobalEvent.on(this, 'mousedown', this.handleGlobalMousedownEvent);\n    GlobalEvent.on(this, 'keydown', this.handleGlobalKeydownEvent);\n    GlobalEvent.on(this, 'blur', this.handleGlobalBlurEvent);\n  },\n\n  mounted() {\n    if (this.dateConfig) {\n      UtilTools.warn('vxe.error.removeProp', ['date-config']);\n    }\n\n    if (this.isDatePickerType) {\n      if (this.transfer) {\n        document.body.appendChild(this.$refs.panel);\n      }\n    }\n  },\n\n  beforeDestroy() {\n    const panelElem = this.$refs.panel;\n\n    if (panelElem && panelElem.parentNode) {\n      panelElem.parentNode.removeChild(panelElem);\n    }\n  },\n\n  destroyed() {\n    this.numberStopDown();\n    GlobalEvent.off(this, 'mousewheel');\n    GlobalEvent.off(this, 'mousedown');\n    GlobalEvent.off(this, 'keydown');\n    GlobalEvent.off(this, 'blur');\n  },\n\n  render(h) {\n    const name = this.name,\n          form = this.form,\n          inputType = this.inputType,\n          inpPlaceholder = this.inpPlaceholder,\n          inpMaxlength = this.inpMaxlength,\n          inpReadonly = this.inpReadonly,\n          className = this.className,\n          controls = this.controls,\n          inputValue = this.inputValue,\n          isDatePickerType = this.isDatePickerType,\n          visiblePanel = this.visiblePanel,\n          isActivated = this.isActivated,\n          vSize = this.vSize,\n          type = this.type,\n          align = this.align,\n          readonly = this.readonly,\n          disabled = this.disabled,\n          autocomplete = this.autocomplete;\n    const childs = [];\n    const prefix = rendePrefixIcon(h, this);\n    const suffix = renderSuffixIcon(h, this); // 前缀图标\n\n    if (prefix) {\n      childs.push(prefix);\n    } // 输入框\n\n\n    childs.push(h('input', {\n      ref: 'input',\n      class: 'vxe-input--inner',\n      domProps: {\n        value: inputValue\n      },\n      attrs: {\n        name,\n        form,\n        type: inputType,\n        placeholder: inpPlaceholder,\n        maxlength: inpMaxlength,\n        readonly: inpReadonly,\n        disabled,\n        autocomplete\n      },\n      on: {\n        keydown: this.keydownEvent,\n        keyup: this.triggerEvent,\n        wheel: this.wheelEvent,\n        click: this.clickEvent,\n        input: this.inputEvent,\n        change: this.changeEvent,\n        focus: this.focusEvent,\n        blur: this.blurEvent\n      }\n    })); // 后缀图标\n\n    if (suffix) {\n      childs.push(suffix);\n    } // 特殊功能图标\n\n\n    childs.push(renderExtraSuffixIcon(h, this)); // 面板容器\n\n    if (isDatePickerType) {\n      childs.push(renderPanel(h, this));\n    }\n\n    return h('div', {\n      class: ['vxe-input', `type--${type}`, className, {\n        [`size--${vSize}`]: vSize,\n        [`is--${align}`]: align,\n        'is--controls': controls,\n        'is--prefix': !!prefix,\n        'is--suffix': !!suffix,\n        'is--readonly': readonly,\n        'is--visivle': visiblePanel,\n        'is--disabled': disabled,\n        'is--active': isActivated\n      }]\n    }, childs);\n  },\n\n  methods: {\n    focus() {\n      this.isActivated = true;\n      this.$refs.input.focus();\n      return this.$nextTick();\n    },\n\n    blur() {\n      this.$refs.input.blur();\n      this.isActivated = false;\n      return this.$nextTick();\n    },\n\n    triggerEvent(evnt) {\n      const $refs = this.$refs,\n            inputValue = this.inputValue;\n      this.$emit(evnt.type, {\n        $panel: $refs.panel,\n        value: inputValue,\n        $event: evnt\n      });\n    },\n\n    emitModel(value, evnt) {\n      this.inputValue = value;\n      this.$emit('modelValue', value);\n      this.$emit('input', {\n        value,\n        $event: evnt\n      });\n\n      if (XEUtils.toString(this.value) !== value) {\n        this.$emit('change', {\n          value,\n          $event: evnt\n        });\n      }\n    },\n\n    emitInputEvent(value, evnt) {\n      const inpImmediate = this.inpImmediate,\n            isDatePickerType = this.isDatePickerType;\n      this.inputValue = value;\n\n      if (!isDatePickerType) {\n        if (inpImmediate) {\n          this.emitModel(value, evnt);\n        } else {\n          this.$emit('input', {\n            value,\n            $event: evnt\n          });\n        }\n      }\n    },\n\n    inputEvent(evnt) {\n      const value = evnt.target.value;\n      this.emitInputEvent(value, evnt);\n    },\n\n    changeEvent(evnt) {\n      const inpImmediate = this.inpImmediate;\n\n      if (!inpImmediate) {\n        this.triggerEvent(evnt);\n      }\n    },\n\n    focusEvent(evnt) {\n      this.isActivated = true;\n      this.triggerEvent(evnt);\n    },\n\n    blurEvent(evnt) {\n      const inputValue = this.inputValue,\n            inpImmediate = this.inpImmediate;\n      const value = inputValue;\n\n      if (!inpImmediate) {\n        this.emitModel(value, evnt);\n      }\n\n      this.afterCheckValue();\n\n      if (!this.visiblePanel) {\n        this.isActivated = false;\n      }\n\n      this.$emit('blur', {\n        value,\n        $event: evnt\n      });\n    },\n\n    keydownEvent(evnt) {\n      const exponential = this.exponential,\n            controls = this.controls,\n            isNumType = this.isNumType;\n\n      if (isNumType) {\n        const isCtrlKey = evnt.ctrlKey;\n        const isShiftKey = evnt.shiftKey;\n        const isAltKey = evnt.altKey;\n        const keyCode = evnt.keyCode;\n\n        if (!isCtrlKey && !isShiftKey && !isAltKey && (keyCode === 32 || (!exponential || keyCode !== 69) && keyCode >= 65 && keyCode <= 90 || keyCode >= 186 && keyCode <= 188 || keyCode >= 191)) {\n          evnt.preventDefault();\n        }\n\n        if (controls) {\n          this.numberKeydownEvent(evnt);\n        }\n      }\n\n      this.triggerEvent(evnt);\n    },\n\n    wheelEvent(evnt) {\n      if (this.isNumType && this.controls) {\n        if (this.isActivated) {\n          const delta = evnt.deltaY;\n\n          if (delta > 0) {\n            this.numberNextEvent(evnt);\n          } else if (delta < 0) {\n            this.numberPrevEvent(evnt);\n          }\n\n          evnt.preventDefault();\n        }\n      }\n\n      this.triggerEvent(evnt);\n    },\n\n    clickEvent(evnt) {\n      const isDatePickerType = this.isDatePickerType;\n\n      if (isDatePickerType) {\n        this.datePickerOpenEvent(evnt);\n      }\n\n      this.triggerEvent(evnt);\n    },\n\n    clickPrefixEvent(evnt) {\n      const $refs = this.$refs,\n            disabled = this.disabled,\n            inputValue = this.inputValue;\n\n      if (!disabled) {\n        this.$emit('prefix-click', {\n          $panel: $refs.panel,\n          value: inputValue,\n          $event: evnt\n        });\n      }\n    },\n\n    clickSuffixEvent(evnt) {\n      const $refs = this.$refs,\n            disabled = this.disabled,\n            inputValue = this.inputValue;\n\n      if (!disabled) {\n        if (DomTools.hasClass(evnt.currentTarget, 'is--clear')) {\n          this.emitModel('', evnt);\n          this.clearValueEvent(evnt, '');\n        } else {\n          this.$emit('suffix-click', {\n            $panel: $refs.panel,\n            value: inputValue,\n            $event: evnt\n          });\n        }\n      }\n    },\n\n    clearValueEvent(evnt, value) {\n      const $refs = this.$refs,\n            type = this.type,\n            isNumType = this.isNumType;\n\n      if (this.isDatePickerType) {\n        this.hidePanel();\n      }\n\n      if (isNumType || ['text', 'search', 'password'].indexOf(type) > -1) {\n        this.focus();\n      }\n\n      this.$emit('clear', {\n        $panel: $refs.panel,\n        value,\n        $event: evnt\n      });\n    },\n\n    /**\r\n     * 检查初始值\r\n     */\n    initValue() {\n      const type = this.type,\n            isDatePickerType = this.isDatePickerType,\n            inputValue = this.inputValue,\n            digitsValue = this.digitsValue;\n\n      if (isDatePickerType) {\n        this.changeValue();\n      } else if (type === 'float') {\n        if (inputValue) {\n          const validValue = XEUtils.toFixed(XEUtils.floor(inputValue, digitsValue), digitsValue);\n\n          if (inputValue !== validValue) {\n            this.emitModel(validValue, {\n              type: 'init'\n            });\n          }\n        }\n      }\n    },\n\n    /**\r\n     * 值变化时处理\r\n     */\n    changeValue() {\n      if (this.isDatePickerType) {\n        this.dateParseValue(this.inputValue);\n        this.inputValue = this.datePanelLabel;\n      }\n    },\n\n    afterCheckValue() {\n      const type = this.type,\n            exponential = this.exponential,\n            inpReadonly = this.inpReadonly,\n            inputValue = this.inputValue,\n            isDatePickerType = this.isDatePickerType,\n            isNumType = this.isNumType,\n            datetimePanelValue = this.datetimePanelValue,\n            dateLabelFormat = this.dateLabelFormat,\n            min = this.min,\n            max = this.max;\n\n      if (!inpReadonly) {\n        if (isNumType) {\n          if (inputValue) {\n            let inpNumVal = type === 'integer' ? XEUtils.toInteger(inputValue) : XEUtils.toNumber(inputValue);\n\n            if (!this.vaildMinNum(inpNumVal)) {\n              inpNumVal = min;\n            } else if (!this.vaildMaxNum(inpNumVal)) {\n              inpNumVal = max;\n            }\n\n            if (exponential) {\n              const inpStringVal = XEUtils.toString(inputValue).toLowerCase();\n\n              if (inpStringVal === XEUtils.toNumber(inpNumVal).toExponential()) {\n                inpNumVal = inpStringVal;\n              }\n            }\n\n            this.emitModel(getNumberValue(this, inpNumVal), {\n              type: 'check'\n            });\n          }\n        } else if (isDatePickerType) {\n          if (inputValue) {\n            if (type === 'week' || type === 'quarter') {// 周和季度选择器不支持解析，无需处理\n            } else {\n              let inpDateVal;\n\n              if (type === 'time') {\n                inpDateVal = toStringTimeDate(inputValue);\n              } else {\n                inpDateVal = XEUtils.toStringDate(inputValue, dateLabelFormat);\n              }\n\n              if (XEUtils.isValidDate(inpDateVal)) {\n                if (type === 'time') {\n                  inpDateVal = toStringTimeDate(inpDateVal);\n\n                  if (inputValue !== inpDateVal) {\n                    this.emitModel(inpDateVal, {\n                      type: 'check'\n                    });\n                  }\n\n                  this.inputValue = inpDateVal;\n                } else {\n                  let isChange = false;\n\n                  if (type === 'datetime') {\n                    if (inputValue !== XEUtils.toDateString(this.dateValue, dateLabelFormat) || inputValue !== XEUtils.toDateString(inpDateVal, dateLabelFormat)) {\n                      isChange = true;\n                      datetimePanelValue.setHours(inpDateVal.getHours());\n                      datetimePanelValue.setMinutes(inpDateVal.getMinutes());\n                      datetimePanelValue.setSeconds(inpDateVal.getSeconds());\n                    }\n                  } else {\n                    isChange = true;\n                  }\n\n                  this.inputValue = XEUtils.toDateString(inpDateVal, dateLabelFormat);\n\n                  if (isChange) {\n                    this.dateChange(inpDateVal);\n                  }\n                }\n              } else {\n                this.dateRevert();\n              }\n            }\n          } else {\n            this.emitModel('', {\n              type: 'check'\n            });\n          }\n        }\n      }\n    },\n\n    // 密码\n    passwordToggleEvent(evnt) {\n      const disabled = this.disabled,\n            readonly = this.readonly,\n            showPwd = this.showPwd;\n\n      if (!disabled && !readonly) {\n        this.showPwd = !showPwd;\n      }\n\n      this.$emit('toggle-visible', {\n        visible: this.showPwd,\n        $event: evnt\n      });\n    },\n\n    // 密码\n    // 搜索\n    searchEvent(evnt) {\n      this.$emit('search-click', {\n        $event: evnt\n      });\n    },\n\n    // 搜索\n    // 数值\n    vaildMinNum(num) {\n      return this.min === null || num >= XEUtils.toNumber(this.min);\n    },\n\n    vaildMaxNum(num) {\n      return this.max === null || num <= XEUtils.toNumber(this.max);\n    },\n\n    numberStopDown() {\n      clearTimeout(this.downbumTimeout);\n    },\n\n    numberDownPrevEvent(evnt) {\n      this.downbumTimeout = setTimeout(() => {\n        this.numberPrevEvent(evnt);\n        this.numberDownPrevEvent(evnt);\n      }, 60);\n    },\n\n    numberDownNextEvent(evnt) {\n      this.downbumTimeout = setTimeout(() => {\n        this.numberNextEvent(evnt);\n        this.numberDownNextEvent(evnt);\n      }, 60);\n    },\n\n    numberKeydownEvent(evnt) {\n      const keyCode = evnt.keyCode;\n      const isUpArrow = keyCode === 38;\n      const isDwArrow = keyCode === 40;\n\n      if (isUpArrow || isDwArrow) {\n        evnt.preventDefault();\n\n        if (isUpArrow) {\n          this.numberPrevEvent(evnt);\n        } else {\n          this.numberNextEvent(evnt);\n        }\n      }\n    },\n\n    numberMousedownEvent(evnt) {\n      this.numberStopDown();\n\n      if (evnt.button === 0) {\n        const isPrevNumber = DomTools.hasClass(evnt.currentTarget, 'is--prev');\n\n        if (isPrevNumber) {\n          this.numberPrevEvent(evnt);\n        } else {\n          this.numberNextEvent(evnt);\n        }\n\n        this.downbumTimeout = setTimeout(() => {\n          if (isPrevNumber) {\n            this.numberDownPrevEvent(evnt);\n          } else {\n            this.numberDownNextEvent(evnt);\n          }\n        }, 500);\n      }\n    },\n\n    numberPrevEvent(evnt) {\n      const disabled = this.disabled,\n            readonly = this.readonly;\n      clearTimeout(this.downbumTimeout);\n\n      if (!disabled && !readonly) {\n        this.numberChange(true, evnt);\n      }\n\n      this.$emit('prev-number', {\n        $event: evnt\n      });\n    },\n\n    numberNextEvent(evnt) {\n      const disabled = this.disabled,\n            readonly = this.readonly;\n      clearTimeout(this.downbumTimeout);\n\n      if (!disabled && !readonly) {\n        this.numberChange(false, evnt);\n      }\n\n      this.$emit('next-number', {\n        $event: evnt\n      });\n    },\n\n    numberChange(isPlus, evnt) {\n      const min = this.min,\n            max = this.max,\n            type = this.type,\n            inputValue = this.inputValue,\n            stepValue = this.stepValue;\n      const numValue = type === 'integer' ? XEUtils.toInteger(inputValue) : XEUtils.toNumber(inputValue);\n      const newValue = isPlus ? XEUtils.add(numValue, stepValue) : XEUtils.subtract(numValue, stepValue);\n      let restNum;\n\n      if (!this.vaildMinNum(newValue)) {\n        restNum = min;\n      } else if (!this.vaildMaxNum(newValue)) {\n        restNum = max;\n      } else {\n        restNum = newValue;\n      }\n\n      this.emitInputEvent(getNumberValue(this, restNum), evnt);\n    },\n\n    // 数值\n    // 日期\n    datePickerOpenEvent(evnt) {\n      const readonly = this.readonly;\n\n      if (!readonly) {\n        evnt.preventDefault();\n        this.showPanel();\n      }\n    },\n\n    dateMonthHandle(date, offsetMonth) {\n      this.selectMonth = XEUtils.getWhatMonth(date, offsetMonth, 'first');\n    },\n\n    dateNowHandle() {\n      const currentDate = XEUtils.getWhatDay(Date.now(), 0, 'first');\n      this.currentDate = currentDate;\n      this.dateMonthHandle(currentDate, 0);\n    },\n\n    dateToggleTypeEvent() {\n      let datePanelType = this.datePanelType;\n\n      if (datePanelType === 'month' || datePanelType === 'quarter') {\n        datePanelType = 'year';\n      } else {\n        datePanelType = 'month';\n      }\n\n      this.datePanelType = datePanelType;\n    },\n\n    datePrevEvent(evnt) {\n      const isDisabledPrevDateBtn = this.isDisabledPrevDateBtn,\n            type = this.type,\n            datePanelType = this.datePanelType;\n\n      if (!isDisabledPrevDateBtn) {\n        if (type === 'year') {\n          this.selectMonth = XEUtils.getWhatYear(this.selectMonth, -yearSize, 'first');\n        } else if (type === 'month' || type === 'quarter') {\n          if (datePanelType === 'year') {\n            this.selectMonth = XEUtils.getWhatYear(this.selectMonth, -yearSize, 'first');\n          } else {\n            this.selectMonth = XEUtils.getWhatYear(this.selectMonth, -1, 'first');\n          }\n        } else {\n          if (datePanelType === 'year') {\n            this.selectMonth = XEUtils.getWhatYear(this.selectMonth, -yearSize, 'first');\n          } else if (datePanelType === 'month') {\n            this.selectMonth = XEUtils.getWhatYear(this.selectMonth, -1, 'first');\n          } else {\n            this.selectMonth = XEUtils.getWhatMonth(this.selectMonth, -1, 'first');\n          }\n        }\n\n        this.$emit('date-prev', {\n          type,\n          $event: evnt\n        });\n      }\n    },\n\n    dateTodayMonthEvent(evnt) {\n      this.dateNowHandle();\n      this.dateChange(this.currentDate);\n      this.hidePanel();\n      this.$emit('date-today', {\n        type: this.type,\n        $event: evnt\n      });\n    },\n\n    dateNextEvent(evnt) {\n      const isDisabledNextDateBtn = this.isDisabledNextDateBtn,\n            type = this.type,\n            datePanelType = this.datePanelType;\n\n      if (!isDisabledNextDateBtn) {\n        if (type === 'year') {\n          this.selectMonth = XEUtils.getWhatYear(this.selectMonth, yearSize, 'first');\n        } else if (type === 'month' || type === 'quarter') {\n          if (datePanelType === 'year') {\n            this.selectMonth = XEUtils.getWhatYear(this.selectMonth, yearSize, 'first');\n          } else {\n            this.selectMonth = XEUtils.getWhatYear(this.selectMonth, 1, 'first');\n          }\n        } else {\n          if (datePanelType === 'year') {\n            this.selectMonth = XEUtils.getWhatYear(this.selectMonth, yearSize, 'first');\n          } else if (datePanelType === 'month') {\n            this.selectMonth = XEUtils.getWhatYear(this.selectMonth, 1, 'first');\n          } else {\n            this.selectMonth = XEUtils.getWhatMonth(this.selectMonth, 1, 'first');\n          }\n        }\n\n        this.$emit('date-next', {\n          type,\n          $event: evnt\n        });\n      }\n    },\n\n    dateSelectEvent(item) {\n      if (!isDateDisabled(this, item)) {\n        this.dateSelectItem(item.date);\n      }\n    },\n\n    dateSelectItem(date) {\n      const type = this.type,\n            datePanelType = this.datePanelType;\n      const isWeekType = type === 'week';\n\n      if (type === 'month') {\n        if (datePanelType === 'year') {\n          this.datePanelType = 'month';\n          this.dateCheckMonth(date);\n        } else {\n          this.dateChange(date);\n          this.hidePanel();\n        }\n      } else if (type === 'year') {\n        this.hidePanel();\n        this.dateChange(date);\n      } else if (type === 'quarter') {\n        if (datePanelType === 'year') {\n          this.datePanelType = 'quarter';\n          this.dateCheckMonth(date);\n        } else {\n          this.dateChange(date);\n          this.hidePanel();\n        }\n      } else {\n        if (datePanelType === 'month') {\n          this.datePanelType = type === 'week' ? type : 'day';\n          this.dateCheckMonth(date);\n        } else if (datePanelType === 'year') {\n          this.datePanelType = 'month';\n          this.dateCheckMonth(date);\n        } else {\n          this.dateChange(date);\n          this.hidePanel();\n        }\n      }\n\n      if (isWeekType) {\n        this.changeValue();\n      }\n    },\n\n    dateMouseenterEvent(item) {\n      if (!isDateDisabled(this, item)) {\n        const datePanelType = this.datePanelType;\n\n        if (datePanelType === 'month') {\n          this.dateMoveMonth(item.date);\n        } else if (datePanelType === 'quarter') {\n          this.dateMoveQuarter(item.date);\n        } else if (datePanelType === 'year') {\n          this.dateMoveYear(item.date);\n        } else {\n          this.dateMoveDay(item.date);\n        }\n      }\n    },\n\n    dateHourEvent(evnt, item) {\n      this.datetimePanelValue.setHours(item.value);\n      this.dateTimeChangeEvent(evnt);\n    },\n\n    dateConfirmEvent() {\n      this.dateChange(this.dateValue || this.currentDate);\n      this.hidePanel();\n    },\n\n    dateMinuteEvent(evnt, item) {\n      this.datetimePanelValue.setMinutes(item.value);\n      this.dateTimeChangeEvent(evnt);\n    },\n\n    dateSecondEvent(evnt, item) {\n      this.datetimePanelValue.setSeconds(item.value);\n      this.dateTimeChangeEvent(evnt);\n    },\n\n    dateTimeChangeEvent(evnt) {\n      this.datetimePanelValue = new Date(this.datetimePanelValue.getTime());\n      this.updateTimePos(evnt.currentTarget);\n    },\n\n    updateTimePos(liElem) {\n      if (liElem) {\n        const height = liElem.offsetHeight;\n        liElem.parentNode.scrollTop = liElem.offsetTop - height * 4;\n      }\n    },\n\n    dateMoveDay(offsetDay) {\n      if (!isDateDisabled(this, {\n        date: offsetDay\n      })) {\n        if (!this.dayList.some(item => XEUtils.isDateSame(item.date, offsetDay, 'yyyyMMdd'))) {\n          this.dateCheckMonth(offsetDay);\n        }\n\n        this.dateParseValue(offsetDay);\n      }\n    },\n\n    dateMoveMonth(offsetMonth) {\n      if (!isDateDisabled(this, {\n        date: offsetMonth\n      })) {\n        if (!this.monthList.some(item => XEUtils.isDateSame(item.date, offsetMonth, 'yyyyMM'))) {\n          this.dateCheckMonth(offsetMonth);\n        }\n\n        this.dateParseValue(offsetMonth);\n      }\n    },\n\n    dateMoveQuarter(offsetQuarter) {\n      if (!isDateDisabled(this, {\n        date: offsetQuarter\n      })) {\n        if (!this.quarterList.some(item => XEUtils.isDateSame(item.date, offsetQuarter, 'yyyyq'))) {\n          this.dateCheckMonth(offsetQuarter);\n        }\n\n        this.dateParseValue(offsetQuarter);\n      }\n    },\n\n    dateMoveYear(offsetYear) {\n      if (!isDateDisabled(this, {\n        date: offsetYear\n      })) {\n        if (!this.yearList.some(item => XEUtils.isDateSame(item.date, offsetYear, 'yyyy'))) {\n          this.dateCheckMonth(offsetYear);\n        }\n\n        this.dateParseValue(offsetYear);\n      }\n    },\n\n    dateParseValue(date) {\n      const type = this.type,\n            dateLabelFormat = this.dateLabelFormat,\n            valueFormat = this.valueFormat;\n      let dValue = null;\n      let dLabel = '';\n\n      if (date) {\n        if (type === 'time') {\n          dValue = toStringTimeDate(date);\n        } else {\n          dValue = XEUtils.toStringDate(date, valueFormat);\n        }\n      }\n\n      if (XEUtils.isValidDate(dValue)) {\n        dLabel = XEUtils.toDateString(dValue, dateLabelFormat);\n      } else {\n        dValue = null;\n      }\n\n      this.datePanelValue = dValue;\n      this.datePanelLabel = dLabel;\n    },\n\n    dateOffsetEvent(evnt) {\n      const isActivated = this.isActivated,\n            datePanelValue = this.datePanelValue,\n            datePanelType = this.datePanelType;\n\n      if (isActivated) {\n        evnt.preventDefault();\n        const keyCode = evnt.keyCode;\n        const isLeftArrow = keyCode === 37;\n        const isUpArrow = keyCode === 38;\n        const isRightArrow = keyCode === 39;\n        const isDwArrow = keyCode === 40;\n\n        if (datePanelType === 'year') {\n          let offsetYear = XEUtils.getWhatYear(datePanelValue || Date.now(), 0, 'first');\n\n          if (isLeftArrow) {\n            offsetYear = XEUtils.getWhatYear(offsetYear, -1);\n          } else if (isUpArrow) {\n            offsetYear = XEUtils.getWhatYear(offsetYear, -4);\n          } else if (isRightArrow) {\n            offsetYear = XEUtils.getWhatYear(offsetYear, 1);\n          } else if (isDwArrow) {\n            offsetYear = XEUtils.getWhatYear(offsetYear, 4);\n          }\n\n          this.dateMoveYear(offsetYear);\n        } else if (datePanelType === 'quarter') {\n          let offsetQuarter = XEUtils.getWhatQuarter(datePanelValue || Date.now(), 0, 'first');\n\n          if (isLeftArrow) {\n            offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, -1);\n          } else if (isUpArrow) {\n            offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, -2);\n          } else if (isRightArrow) {\n            offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, 1);\n          } else if (isDwArrow) {\n            offsetQuarter = XEUtils.getWhatQuarter(offsetQuarter, 2);\n          }\n\n          this.dateMoveQuarter(offsetQuarter);\n        } else if (datePanelType === 'month') {\n          let offsetMonth = XEUtils.getWhatMonth(datePanelValue || Date.now(), 0, 'first');\n\n          if (isLeftArrow) {\n            offsetMonth = XEUtils.getWhatMonth(offsetMonth, -1);\n          } else if (isUpArrow) {\n            offsetMonth = XEUtils.getWhatMonth(offsetMonth, -4);\n          } else if (isRightArrow) {\n            offsetMonth = XEUtils.getWhatMonth(offsetMonth, 1);\n          } else if (isDwArrow) {\n            offsetMonth = XEUtils.getWhatMonth(offsetMonth, 4);\n          }\n\n          this.dateMoveMonth(offsetMonth);\n        } else {\n          let offsetDay = datePanelValue || XEUtils.getWhatDay(Date.now(), 0, 'first');\n\n          if (isLeftArrow) {\n            offsetDay = XEUtils.getWhatDay(offsetDay, -1);\n          } else if (isUpArrow) {\n            offsetDay = XEUtils.getWhatWeek(offsetDay, -1);\n          } else if (isRightArrow) {\n            offsetDay = XEUtils.getWhatDay(offsetDay, 1);\n          } else if (isDwArrow) {\n            offsetDay = XEUtils.getWhatWeek(offsetDay, 1);\n          }\n\n          this.dateMoveDay(offsetDay);\n        }\n      }\n    },\n\n    datePgOffsetEvent(evnt) {\n      const isActivated = this.isActivated;\n\n      if (isActivated) {\n        const isPgUp = evnt.keyCode === 33;\n        evnt.preventDefault();\n\n        if (isPgUp) {\n          this.datePrevEvent(evnt);\n        } else {\n          this.dateNextEvent(evnt);\n        }\n      }\n    },\n\n    dateChange(date) {\n      const value = this.value,\n            datetimePanelValue = this.datetimePanelValue,\n            dateValueFormat = this.dateValueFormat;\n\n      if (this.type === 'week') {\n        const sWeek = XEUtils.toNumber(this.selectDay);\n        date = XEUtils.getWhatWeek(date, 0, sWeek);\n      } else if (this.hasTime) {\n        date.setHours(datetimePanelValue.getHours());\n        date.setMinutes(datetimePanelValue.getMinutes());\n        date.setSeconds(datetimePanelValue.getSeconds());\n      }\n\n      const inpVal = XEUtils.toDateString(date, dateValueFormat);\n      this.dateCheckMonth(date);\n\n      if (!XEUtils.isEqual(value, inpVal)) {\n        this.emitModel(inpVal, {\n          type: 'update'\n        });\n      }\n    },\n\n    dateCheckMonth(date) {\n      const month = XEUtils.getWhatMonth(date, 0, 'first');\n\n      if (!XEUtils.isEqual(month, this.selectMonth)) {\n        this.selectMonth = month;\n      }\n    },\n\n    dateOpenPanel() {\n      const type = this.type,\n            dateValue = this.dateValue;\n\n      if (['year', 'quarter', 'month', 'week'].indexOf(type) > -1) {\n        this.datePanelType = type;\n      } else {\n        this.datePanelType = 'day';\n      }\n\n      this.currentDate = XEUtils.getWhatDay(Date.now(), 0, 'first');\n\n      if (dateValue) {\n        this.dateMonthHandle(dateValue, 0);\n        this.dateParseValue(dateValue);\n      } else {\n        this.dateNowHandle();\n      }\n\n      if (this.hasTime) {\n        this.datetimePanelValue = this.datePanelValue || XEUtils.getWhatDay(Date.now(), 0, 'first');\n        this.$nextTick(() => {\n          XEUtils.arrayEach(this.$refs.timeBody.querySelectorAll('li.is--selected'), this.updateTimePos);\n        });\n      }\n    },\n\n    dateRevert() {\n      this.inputValue = this.datePanelLabel;\n    },\n\n    // 日期\n    // 弹出面板\n    updateZindex() {\n      if (this.panelIndex < UtilTools.getLastZIndex()) {\n        this.panelIndex = UtilTools.nextZIndex();\n      }\n    },\n\n    showPanel() {\n      const disabled = this.disabled,\n            visiblePanel = this.visiblePanel,\n            isDatePickerType = this.isDatePickerType;\n\n      if (!disabled && !visiblePanel) {\n        clearTimeout(this.hidePanelTimeout);\n        this.isActivated = true;\n        this.animatVisible = true;\n\n        if (isDatePickerType) {\n          this.dateOpenPanel();\n        }\n\n        setTimeout(() => {\n          this.visiblePanel = true;\n        }, 10);\n        this.updateZindex();\n        this.updatePlacement();\n      }\n    },\n\n    hidePanel() {\n      this.visiblePanel = false;\n      this.hidePanelTimeout = setTimeout(() => {\n        this.animatVisible = false;\n      }, 350);\n    },\n\n    updatePlacement() {\n      return this.$nextTick().then(() => {\n        const $refs = this.$refs,\n              transfer = this.transfer,\n              placement = this.placement,\n              panelIndex = this.panelIndex;\n        const targetElem = $refs.input;\n        const panelElem = $refs.panel;\n\n        if (targetElem && panelElem) {\n          const targetHeight = targetElem.offsetHeight;\n          const targetWidth = targetElem.offsetWidth;\n          const panelHeight = panelElem.offsetHeight;\n          const panelWidth = panelElem.offsetWidth;\n          const marginSize = 5;\n          const panelStyle = {\n            zIndex: panelIndex\n          };\n\n          const _DomTools$getAbsolute = DomTools.getAbsolutePos(targetElem),\n                boundingTop = _DomTools$getAbsolute.boundingTop,\n                boundingLeft = _DomTools$getAbsolute.boundingLeft,\n                visibleHeight = _DomTools$getAbsolute.visibleHeight,\n                visibleWidth = _DomTools$getAbsolute.visibleWidth;\n\n          let panelPlacement = 'bottom';\n\n          if (transfer) {\n            let left = boundingLeft;\n            let top = boundingTop + targetHeight;\n\n            if (placement === 'top') {\n              panelPlacement = 'top';\n              top = boundingTop - panelHeight;\n            } else if (!placement) {\n              // 如果下面不够放，则向上\n              if (top + panelHeight + marginSize > visibleHeight) {\n                panelPlacement = 'top';\n                top = boundingTop - panelHeight;\n              } // 如果上面不够放，则向下（优先）\n\n\n              if (top < marginSize) {\n                panelPlacement = 'bottom';\n                top = boundingTop + targetHeight;\n              }\n            } // 如果溢出右边\n\n\n            if (left + panelWidth + marginSize > visibleWidth) {\n              left -= left + panelWidth + marginSize - visibleWidth;\n            } // 如果溢出左边\n\n\n            if (left < marginSize) {\n              left = marginSize;\n            }\n\n            Object.assign(panelStyle, {\n              left: `${left}px`,\n              top: `${top}px`,\n              minWidth: `${targetWidth}px`\n            });\n          } else {\n            if (placement === 'top') {\n              panelPlacement = 'top';\n              panelStyle.bottom = `${targetHeight}px`;\n            } else if (!placement) {\n              // 如果下面不够放，则向上\n              if (boundingTop + targetHeight + panelHeight > visibleHeight) {\n                // 如果上面不够放，则向下（优先）\n                if (boundingTop - targetHeight - panelHeight > marginSize) {\n                  panelPlacement = 'top';\n                  panelStyle.bottom = `${targetHeight}px`;\n                }\n              }\n            }\n          }\n\n          this.panelStyle = panelStyle;\n          this.panelPlacement = panelPlacement;\n          return this.$nextTick();\n        }\n      });\n    },\n\n    // 弹出面板\n    // 全局事件\n    handleGlobalMousedownEvent(evnt) {\n      const $refs = this.$refs,\n            $el = this.$el,\n            disabled = this.disabled,\n            visiblePanel = this.visiblePanel,\n            isActivated = this.isActivated;\n\n      if (!disabled && isActivated) {\n        this.isActivated = DomTools.getEventTargetNode(evnt, $el).flag || DomTools.getEventTargetNode(evnt, $refs.panel).flag;\n\n        if (!this.isActivated) {\n          // 如果是日期类型\n          if (this.isDatePickerType) {\n            if (visiblePanel) {\n              this.hidePanel();\n              this.afterCheckValue();\n            }\n          } else {\n            this.afterCheckValue();\n          }\n        }\n      }\n    },\n\n    handleGlobalKeydownEvent(evnt) {\n      const isDatePickerType = this.isDatePickerType,\n            visiblePanel = this.visiblePanel,\n            clearable = this.clearable,\n            disabled = this.disabled;\n\n      if (!disabled) {\n        const keyCode = evnt.keyCode;\n        const isTab = keyCode === 9;\n        const isDel = keyCode === 46;\n        const isEsc = keyCode === 27;\n        const isEnter = keyCode === 13;\n        const isLeftArrow = keyCode === 37;\n        const isUpArrow = keyCode === 38;\n        const isRightArrow = keyCode === 39;\n        const isDwArrow = keyCode === 40;\n        const isPgUp = keyCode === 33;\n        const isPgDn = keyCode === 34;\n        const operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow;\n        let isActivated = this.isActivated;\n\n        if (isTab) {\n          if (isActivated) {\n            this.afterCheckValue();\n          }\n\n          isActivated = false;\n          this.isActivated = isActivated;\n        } else if (operArrow) {\n          if (isDatePickerType) {\n            if (isActivated) {\n              if (visiblePanel) {\n                this.dateOffsetEvent(evnt);\n              } else if (isUpArrow || isDwArrow) {\n                this.datePickerOpenEvent(evnt);\n              }\n            }\n          }\n        } else if (isEnter) {\n          if (isDatePickerType) {\n            if (visiblePanel) {\n              if (this.datePanelValue) {\n                this.dateSelectItem(this.datePanelValue);\n              } else {\n                this.hidePanel();\n              }\n            } else if (isActivated) {\n              this.datePickerOpenEvent(evnt);\n            }\n          }\n        } else if (isPgUp || isPgDn) {\n          if (isDatePickerType) {\n            if (isActivated) {\n              this.datePgOffsetEvent(evnt);\n            }\n          }\n        }\n\n        if (isTab || isEsc) {\n          if (visiblePanel) {\n            this.hidePanel();\n          }\n        } else if (isDel && clearable) {\n          if (isActivated) {\n            this.clearValueEvent(evnt, null);\n          }\n        }\n      }\n    },\n\n    handleGlobalMousewheelEvent(evnt) {\n      const $refs = this.$refs,\n            disabled = this.disabled,\n            visiblePanel = this.visiblePanel;\n\n      if (!disabled) {\n        if (visiblePanel) {\n          if (DomTools.getEventTargetNode(evnt, $refs.panel).flag) {\n            this.updatePlacement();\n          } else {\n            this.hidePanel();\n            this.afterCheckValue();\n          }\n        }\n      }\n    },\n\n    handleGlobalBlurEvent() {\n      const isActivated = this.isActivated,\n            visiblePanel = this.visiblePanel;\n\n      if (visiblePanel) {\n        this.hidePanel();\n        this.afterCheckValue();\n      } else if (isActivated) {\n        this.afterCheckValue();\n      }\n    } // 全局事件\n\n\n  }\n};",null]}