{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\components\\InputTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\components\\InputTree.vue","mtime":1612227987676},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/*\n* 单选树使用例子\n* <InputTree label=\"选择地区\" valueField=\"id\" :setting=\"setting\" v-model=\"value\" :text=\"text\" :getTreeRoots=\"getTreeRoots\" @change=\"onSelectChg\"/>\n*\n*  data: {value: 0, text: '中国', setting: {参考zTree的setting}},\n*  methods: {\n*    getTreeRoots(callback) {\n*      // 异步或同步取到树根结点roots\n*      callback(roots); //记得调用回调函数，把数据传回去\n*    },\n*    onSelectChg(value, node) {// value是node的valueField值, node是树结点对象\n*    }\n*  }\n* ========================================================================================================\n*  多选树使用例子：车辆树选多部车辆\n*  <InputTree label=\"选择一部车\" :tree=\"carTree\" v-model=\"carIds\" hasOwnField=\"plate\" @change=\"onCheckChg\"/>\n*\n*  import CarTree from '@/common/tree/CarTree.vue';\n*  data: {carIds:[]}, // carIds因为是多选，所以是数组\n*  computed: {\n*    carTree: function() { return CarTree }\n*  },\n*  methods: {\n*    onCheckChg(cars, checked) {// cars是当次勾选发生变化的车辆列表；checked:true勾上,false:去勾\n*    }\n*  }\n*  hasOwnField=\"plate\" 车辆树即有车辆也有车队，plate字段是车辆才有的，表示只允许选上车辆\n*/\nimport Vue from 'vue';\nimport { domLeftTop } from '@/components/util/Dom.js';\nimport { arrayGetValue } from '@/common/util/Arrays.js';\nimport { arrayRemoveItem } from '@/common/util/Arrays.js';\nimport { getNodeByValue } from '@/common/util/Trees.js';\nimport { getNodesByValues } from '@/common/util/Trees.js';\nimport Tree from '@/components/Tree';\nexport default {\n  name: \"InputTree\",\n  props: {\n    label: String,\n    // 标题文本\n    tree: {\n      default: function _default() {\n        return Tree;\n      }\n    },\n    // 树组件\n    setting: {\n      default: function _default() {\n        return {};\n      }\n    },\n    // 参考ztree的setting配置\n    getTreeRoots: Function,\n    // 调用该方法获取树结点\n    expandRoot: {\n      type: Boolean,\n      default: true\n    },\n    // 显示树时默认展开根结点\n    hasOwnField: {\n      type: String,\n      default: null\n    },\n    // 只对树有该属性的结点处理\n    value: null,\n    // 当前值(v-model)\n    text: null,\n    // 初始显示文本\n    labelField: {\n      type: String,\n      default: null\n    },\n    // 显示字段，如果不指定，将使用tree的显示字段或nameFunction\n    valueField: {\n      type: String,\n      default: 'id'\n    },\n    // 值字段\n    treeWidth: {\n      type: Number,\n      default: 0\n    },\n    // 弹出树的宽度px，0则默认InputTree的总宽度\n    treeHeight: {\n      type: Number,\n      default: 350\n    },\n    // 弹出树的高度px\n    placeholder: String,\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示搜索栏\n    required: Boolean,\n    // 是否显示必填\n    disabled: Boolean,\n    // 是否可操作\n    clearable: Boolean,\n    // 是否显示可清除图标\n    border: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示边框\n    borderColor: {\n      default: $_theme.border_color_light\n    },\n    height: {\n      type: Number,\n      default: $_theme.inputHeight\n    },\n    // 高度数值，单位是px\n    inputStyle: {\n      default: null\n    },\n    // 输入框的style\n    labelMinWidth: {\n      type: Number,\n      default: 10\n    },\n    // lable宽度最小数值，单位是px\n    labelMaxWidth: {\n      type: Number\n    },\n    // lable宽度最小数值，单位是px\n    custom: {\n      type: Boolean,\n      default: false // 自定义\n\n    }\n  },\n  _tree: null,\n  _roots: null,\n  _value: null,\n  _item: null,\n  _setting: null,\n  data: function data() {\n    return {\n      txt: this.text,\n      focused: false,\n      hover: false,\n      open: false\n    };\n  },\n  watch: {\n    value: function value(v) {\n      this._myself ? this._myself = false : (this._value = v, this.refresh());\n    },\n    text: function text(v) {\n      this.txt = v;\n    },\n    focused: function focused(v) {\n      document[v ? 'addEventListener' : 'removeEventListener']('click', this.checkBlur);\n    }\n  },\n  mounted: function mounted() {\n    this._setting = Object.assign({\n      callback: {}\n    }, this.setting);\n    this._setting.check = Object.assign({\n      enable: false,\n      hasOwnField: this.hasOwnField\n    }, this.setting.check || {});\n    this._value = this.value;\n    if (this.value === null) return;\n\n    if (Array.isArray(this.value)) {\n      //多选\n      this._setting.check.enable = true;\n      if (this.value.length == 0) return;\n    } // 获取文字出来显示\n\n\n    !this.text && this.refresh();\n    this.txt = this.txt || this.text;\n  },\n  methods: {\n    refresh: function refresh() {\n      this.txt = null;\n      this._item = null;\n\n      this._getRoots(this._setItemAndText.bind(this));\n    },\n    _setItemAndText: function _setItemAndText(roots) {\n      if (!roots) return;\n\n      if (this._setting.check.enable === true) {\n        this._item = this.valueField ? getNodesByValues(roots, this.value, this.valueField, this.hasOwnField) : _toConsumableArray(this.value);\n        this._item && this.setTxt(this._item, true);\n      } else {\n        this._item = this.valueField ? getNodeByValue(roots, this.value, this.valueField, this.hasOwnField) : this.value;\n        this._item && this.setTxt(this._item, false);\n      }\n    },\n    setTxt: function setTxt(item, isarray) {\n      if (this.labelField) {\n        //如果设置labelField，根据labelField值显示值\n        this.txt = isarray ? arrayGetValue(item, this.labelField).join(',') : item[this.labelField];\n      } else if (this.tree.getNodeText || this._setting.view && this._setting.view.nameFunction) {\n        var fun = this.tree.getNodeText || this._setting.view && this._setting.view.nameFunction;\n\n        if (isarray) {\n          var array = [];\n\n          for (var i = 0, len = item.length; i < len; i++) {\n            array.push(fun(item[i]));\n          }\n\n          this.txt = array.join(',');\n        } else {\n          this.txt = fun(item);\n        }\n      } else {\n        var feild = this._setting.data && this._setting.data.key && this._setting.data.key.name;\n        feild = feild || 'name';\n        this.txt = isarray ? arrayGetValue(item, feild).join(',') : item[feild];\n      }\n    },\n    _getRoots: function _getRoots(callback) {\n      var _this = this;\n\n      if (this._roots) return callback(this._roots);\n      this.getTreeRoots ? this.getTreeRoots(function (roots) {\n        _this._roots = Array.isArray(roots) ? roots : [roots];\n        callback(_this._roots);\n      }) : this.tree.getTreeRoots ? this.tree.getTreeRoots(callback) : callback(null);\n    },\n    toggleShowTree: function toggleShowTree() {\n      // 显示或隐藏选项列表\n      this.$el.focus();\n      this.$emit('click');\n\n      if (this.custom) {\n        return;\n      }\n\n      this.open ? this.hideTree() : this.showTree();\n    },\n    showTree: function showTree() {\n      var _this2 = this;\n\n      if (!this._tree) {\n        var onTreeInited = function onTreeInited() {\n          if (!_this2._item && _this2.value) {\n            var roots = _this2._tree.getTree().getNodes();\n\n            _this2._setItemAndText(roots);\n          }\n\n          if (_this2._item) {\n            if (_this2._setting.check.enable === true) {\n              //多选\n              _this2._tree.checkNodes(_this2._item, true, true);\n\n              _this2._tree.selectNode(_this2._item[0]);\n            } else {\n              _this2._tree.selectNode(_this2._item);\n            }\n          }\n        };\n\n        this.createTree(onTreeInited);\n        this._tree.init && this._getRoots(function (roots) {\n          return _this2._tree.init(roots, _this2.expandRoot);\n        });\n      } else {\n        this.styleTree();\n      }\n\n      this.open = true;\n      document.addEventListener('click', this.onMouseClick);\n    },\n    hideTree: function hideTree() {\n      // 隐藏弹出的选项列表\n      this._tree.$el.style.display = 'none';\n      this.open = false;\n      document.removeEventListener('click', this.onMouseClick);\n    },\n    onMouseClick: function onMouseClick(event) {\n      if (!this._tree.$el.contains(event.target) && !this.$el.contains(event.target)) {\n        this.hideTree();\n      }\n    },\n    checkBlur: function checkBlur(event) {\n      this.focused = this.$el.contains(event.target);\n    },\n    createTree: function createTree(onTreeInited) {\n      if (this._setting.check.enable === true) {\n        //多选\n        this._setting.callback.onCheck && (this._setting.callback._onCheck = this._setting.callback.onCheck);\n        this._setting.callback.onCheck = this.onItemCheck;\n      } else {\n        this._setting.callback.onClick && (this._setting.callback._onClick = this._setting.callback.onClick);\n        this._setting.callback.onClick = this.onItemClick;\n      }\n\n      var constructor = Vue.extend(this.tree);\n      this._tree = new constructor({\n        propsData: {\n          setting: this._setting,\n          miniBar: true,\n          borderColor: this.borderColor,\n          searchable: this.searchable,\n          onTreeInited: onTreeInited\n        }\n      });\n\n      this._tree.$mount();\n\n      this.styleTree();\n      this.$el.appendChild(this._tree.$el);\n    },\n    styleTree: function styleTree() {\n      // 自动判断是显示在下面还是上面\n      var _domLeftTop = domLeftTop(this.$el),\n          left = _domLeftTop.left,\n          top = _domLeftTop.top,\n          isbottom = true,\n          _treeHeight = this.treeHeight;\n\n      var this_height = this.$el.clientHeight + (this.border ? 2 : 0);\n      var down = document.documentElement.clientHeight - top - this_height;\n\n      if (down > _treeHeight) {\n        // 下面空间充足，显示在下面\n        top += this_height;\n      } else if (top > _treeHeight) {\n        // 上面空间足够，显示在上面\n        top -= _treeHeight - 0;\n        isbottom = false;\n      } else {\n        // 上面和下面的空间都不够\n        if (down > top) {\n          // 下面的空间大，显示在下面\n          _treeHeight = down - 20;\n          top += this_height;\n        } else {\n          // 上面的空间大，显示在上面\n          _treeHeight = top - 5;\n          top -= _treeHeight - 0;\n          isbottom = false;\n        }\n      }\n\n      var style = this._tree.$el.style;\n      style.position = \"fixed\";\n      style['box-shadow'] = '0px 0px 5px 0px RGBA(0, 0, 0, 0.1)';\n      style[isbottom ? 'border-top-width' : 'border-bottom-width'] = 0;\n      style['z-index'] = $_theme.zindex();\n      style.top = top + 'px';\n      style.left = left + 'px';\n      style.height = _treeHeight + 'px', style.width = (this.treeWidth || this.$el.offsetWidth) + 'px';\n      style.display = 'block';\n    },\n    onItemClick: function onItemClick(node, event) {\n      if (this.hasOwnField && !node.hasOwnProperty(this.hasOwnField)) return;\n      this._setting.callback._onClick && this._setting.callback._onClick(node, event);\n      if (this._item == node) return this.hideTree();\n      this._item = node;\n      var value = this.valueField ? node[this.valueField] : node;\n      if (this._value === value) return this.hideTree();\n      this._value = value;\n      this.setTxt(node, false);\n      this._myself = true;\n      this.$emit('input', value);\n      this.$emit('change', value, node, this.txt);\n      this.hideTree();\n    },\n    onItemCheck: function onItemCheck(node, chgs, value, event) {\n      this._item = this._item || [];\n      this._value = this._value || [];\n      this._setting.callback._onCheck && this._setting.callback._onCheck(node, chgs, value, event);\n      var items = [],\n          roots = value == 0 ? this._tree.getTree().getNodes() : null;\n\n      if (roots && roots.length == 1 && roots[0] == node) {\n        //根结点全不选\n        this.txt = '';\n        this._item = [];\n        this._value = [];\n      } else {\n        for (var i = 0, len = chgs.length; i < len; i++) {\n          node = chgs[i];\n          items.push(node);\n\n          if (value == 1) {\n            this._item.push(node);\n\n            this._value.push(this.valueField ? node[this.valueField] : node);\n          } else {\n            items.push(node);\n            arrayRemoveItem(this._item, node);\n            arrayRemoveItem(this._value, this.valueField ? node[this.valueField] : node);\n          }\n        }\n\n        this.setTxt(this._item, true);\n      }\n\n      this._myself = true;\n      this.$emit('input', this._value);\n      this.$emit('change', items, value == 1, this.txt);\n    },\n    getSelectedItem: function getSelectedItem() {\n      return this._item;\n    },\n    clear: function clear() {\n      this.open && this.hideTree();\n      this.txt = null;\n\n      if (this._setting.check.enable && this._tree) {\n        if (this._item && this._item.length > 0) {\n          this._tree.getTree().checkAllNodes(false);\n        }\n      }\n\n      this._value = null;\n      this._item = null;\n      this._myself = true;\n      this.$emit('input', null);\n      this.$emit('change', null, null, null);\n    }\n  },\n  computed: {\n    showClear: function showClear() {\n      // 判断是否要显示清除按钮\n      return this.clearable && this.hover && this.txt;\n    },\n    lineHeight: function lineHeight() {\n      // 获取除边框外的高度\n      return this.height - (this.border ? 2 : 0);\n    },\n    labelStyle: function labelStyle() {\n      return {\n        minWidth: this.labelMinWidth + 'px',\n        maxWidth: this.labelMaxWidth + 'px',\n        borderRightColor: this.theme.border_color_light,\n        backgroundColor: this.theme.bg_color\n      };\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.focused = false;\n    this.open && this.hideTree();\n    this._tree && this._tree.destroy();\n    this._tree = null;\n    this._roots = null;\n    this._item = null;\n    this._value = null;\n    this._setting = null;\n  }\n};",null]}