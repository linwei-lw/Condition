{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\common\\util\\Arrays.js","dependencies":[{"path":"D:\\cdRule\\src\\common\\util\\Arrays.js","mtime":1612227987785},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.sort\";\n/**\r\n * 将数组转成 MAP 结构体\r\n * @param {Array} array 元素数组\r\n * @param {String} [key] 组成map的key值是从元素的哪个字段取(默认值:id)\r\n * @param {Object} [map] 基于存在的map对象(默认值:{})\r\n * @returns {Object} 返回MAP结构体\r\n */\n\nexport function arrayToMap(array) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n  var map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!array || array.length == 0) return map;\n\n  for (var i = 0, len = array.length, item; i < len; i++) {\n    item = array[i];\n    map[item[key]] = item;\n  }\n\n  return map;\n}\n;\n/**\r\n * 在数组中查找索引号\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n * @returns {Number} 返回索引号\r\n */\n\nexport function arrayIndexOf(array, field, value) {\n  for (var i = 0, len = array.length; i < len; i++) {\n    if (array[i][field] === value) return i;\n  }\n\n  return -1;\n}\n/**\r\n * 从数组中删除元素\r\n * @param {Array} array \r\n * @param {Object} item \r\n * @returns {Number} 返回剩余数\r\n */\n\nexport function arrayRemoveItem(array, item) {\n  if (!array) return -1;\n  var i = array.indexOf(item);\n  i != -1 && array.splice(i, 1);\n  return array.length;\n}\n;\n/**\r\n * 从数组中删除元素\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n */\n\nexport function arrayRemoveValue(array, field, value) {\n  if (!array) return null;\n\n  for (var i = 0, len = array.length, item; i < len; i++) {\n    item = array[i];\n\n    if (item[field] === value) {\n      array.splice(i, 1);\n      return item;\n    }\n  }\n\n  return null;\n}\n;\n/**\r\n * 按过滤条件将数组中元素删除\r\n * @param {Array} array \r\n * @param {Function} filter (item, index, array) 返回true删除,false保留\r\n * @returns {Number} 返回剩余数\r\n */\n\nexport function arrayRemoveFilter(array, filter) {\n  if (!array || array.length == 0) return 0;\n\n  for (var i = array.length - 1; i >= 0; i--) {\n    filter(array[i], i, array) === true && array.splice(i, 1);\n  }\n\n  return array.length;\n}\n;\n/**\r\n * 从数组中查询元素\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n * @returns {*} 返回符合条件的第一个元素\r\n */\n\nexport function arrayFindItem(array, field, value) {\n  if (!array) return null;\n\n  for (var i = 0, len = array.length; i < len; i++) {\n    if (array[i][field] === value) {\n      return array[i];\n    }\n  }\n\n  return null;\n}\n;\n/**\r\n * 从数组中查询元素\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n * @returns {Array} 返回符合条件的所有元素\r\n */\n\nexport function arrayFindItems(array, field, value) {\n  if (!array) return [];\n  var result = [];\n\n  for (var i = 0, len = array.length; i < len; i++) {\n    if (array[i][field] === value) {\n      result.push(array[i]);\n    }\n  }\n\n  return result;\n}\n;\n/**\r\n * 获取数组每个元素字段的值\r\n * @param {Array} array \r\n * @param {String} field \r\n * @returns {Array} 返回数组每个元素字段的值\r\n */\n\nexport function arrayGetValue(array, field) {\n  if (!array) return [];\n  var result = [];\n\n  for (var i = 0, len = array.length; i < len; i++) {\n    result.push(array[i][field]);\n  }\n\n  return result;\n}\n;\nexport function arraySort(array) {\n  var field = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var asc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!array || array.length == 0) return array;\n  return array.sort(function (a, b) {\n    return (asc ? 1 : -1) * compare(a, b, field);\n  });\n}\nvar CHINA = {\n  '零': 10,\n  '一': 11,\n  '二': 12,\n  '三': 13,\n  '四': 14,\n  '五': 15,\n  '六': 16,\n  '七': 17,\n  '八': 18,\n  '九': 19,\n  '十': 20\n};\nexport function compare(v1, v2) {\n  var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (v1 === null || v1 == undefined) return -1;\n  if (v2 === null || v2 == undefined) return 1;\n  v1 = field ? v1[field] : v1;\n  v2 = field ? v2[field] : v2;\n  if (v1 == v2) return 0;\n  if (v1 === null || v1 == undefined) return -1;\n  if (v2 === null || v2 == undefined) return 1;\n  var i1 = !isNaN(v1),\n      i2 = !isNaN(v2);\n  v1 = String(v1);\n  v2 = String(v2);\n\n  if (i1 || i2) {\n    return i1 && i2 ? v1.length > v2.length ? 1 : v1.length < v2.length ? -1 : Number(v1) > Number(v2) ? 1 : -1 : i1 ? -1 : 1;\n  }\n\n  for (var i = 0, _len = Math.min(v1.length, v2.length), o1, o2, n1, n2; i < _len; i++) {\n    o1 = v1.charAt(i);\n    o2 = v2.charAt(i);\n    if (o1 == o2) continue;\n    n1 = CHINA[o1] || Number(o1);\n    n2 = CHINA[o2] || Number(o2);\n\n    if (!isNaN(n1) && !isNaN(n2)) {\n      return n1 > n2 ? 1 : -1;\n    }\n\n    return o1.localeCompare(o2, \"zh\");\n  }\n\n  var len = v1.length - v2.length;\n  return len == 0 ? 0 : len > 0 ? 1 : -1;\n}",{"version":3,"sources":["D:\\cdRule\\src\\common\\util\\Arrays.js"],"names":["key","map","array","i","len","item","filter","result","field","asc","compare","CHINA","v1","v2","i1","isNaN","i2","String","Number","Math","o1","o2","n1","n2"],"mappings":"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","sourcesContent":["\r\n/**\r\n * 将数组转成 MAP 结构体\r\n * @param {Array} array 元素数组\r\n * @param {String} [key] 组成map的key值是从元素的哪个字段取(默认值:id)\r\n * @param {Object} [map] 基于存在的map对象(默认值:{})\r\n * @returns {Object} 返回MAP结构体\r\n */\r\nexport function arrayToMap (array, key='id', map={}) {\r\n  if (!array || array.length == 0) return map;\r\n  for (let i=0,len=array.length,item; i<len; i++) {\r\n    item = array[i];\r\n    map[item[key]] = item;\r\n  }\r\n  return map;\r\n};\r\n\r\n/**\r\n * 在数组中查找索引号\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n * @returns {Number} 返回索引号\r\n */\r\nexport function arrayIndexOf (array, field, value) {\r\n  for (let i=0, len=array.length; i<len; i++) {\r\n    if (array[i][field] === value) return i;\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * 从数组中删除元素\r\n * @param {Array} array \r\n * @param {Object} item \r\n * @returns {Number} 返回剩余数\r\n */\r\nexport function arrayRemoveItem (array, item) {\r\n  if (!array) return -1;\r\n  let i = array.indexOf(item);\r\n  i != -1 && array.splice(i, 1);\r\n  return array.length;\r\n};\r\n\r\n/**\r\n * 从数组中删除元素\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n */\r\nexport function arrayRemoveValue (array, field, value) {\r\n  if (!array) return null;\r\n  for (let i=0, len=array.length, item; i<len; i++) {\r\n    item = array[i];\r\n    if (item[field] === value) {\r\n      array.splice(i, 1);\r\n      return item;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * 按过滤条件将数组中元素删除\r\n * @param {Array} array \r\n * @param {Function} filter (item, index, array) 返回true删除,false保留\r\n * @returns {Number} 返回剩余数\r\n */\r\nexport function arrayRemoveFilter (array, filter) {\r\n  if (!array || array.length == 0) return 0;\r\n  for (let i=array.length-1; i>=0; i--) {\r\n    filter(array[i], i, array) === true && array.splice(i,1);\r\n  }\r\n  return array.length;\r\n};\r\n\r\n/**\r\n * 从数组中查询元素\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n * @returns {*} 返回符合条件的第一个元素\r\n */\r\nexport function arrayFindItem (array, field, value) {\r\n  if (!array) return null;\r\n  for (let i=0, len=array.length; i<len; i++) {\r\n    if (array[i][field] === value) {\r\n      return array[i];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * 从数组中查询元素\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n * @returns {Array} 返回符合条件的所有元素\r\n */\r\nexport function arrayFindItems (array, field, value) {\r\n  if (!array) return [];\r\n  let result = [];\r\n  for (let i=0, len=array.length; i<len; i++) {\r\n    if (array[i][field] === value) {\r\n      result.push(array[i]);\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * 获取数组每个元素字段的值\r\n * @param {Array} array \r\n * @param {String} field \r\n * @returns {Array} 返回数组每个元素字段的值\r\n */\r\nexport function arrayGetValue (array, field) {\r\n  if (!array) return [];\r\n  let result = [];\r\n  for (let i=0, len=array.length; i<len; i++) {\r\n    result.push(array[i][field]);\r\n  }\r\n  return result;\r\n};\r\n\r\nexport function arraySort(array, field=null, asc=true) {\r\n  if (!array || array.length == 0) return array;\r\n  return array.sort((a,b) => {\r\n    return (asc ? 1 : -1) * compare(a, b, field);\r\n  });\r\n}\r\n\r\n\r\nlet CHINA = {'零':10,'一':11,'二':12,'三':13,'四':14,'五':15,'六':16,'七':17,'八':18,'九':19,'十':20};\r\nexport function compare(v1, v2, field=null) {\r\n  if (v1 === null || v1 == undefined) return -1;\r\n  if (v2 === null || v2 == undefined) return 1;\r\n  \r\n  v1 = field ? v1[field] : v1; \r\n  v2 = field ? v2[field] : v2;\r\n  \r\n  if (v1 == v2) return 0;\r\n  if (v1 === null || v1 == undefined) return -1;\r\n  if (v2 === null || v2 == undefined) return 1;\r\n  \r\n  let i1=!isNaN(v1), i2=!isNaN(v2);\r\n  v1 = String(v1);\r\n  v2 = String(v2);\r\n  if (i1 || i2) {\r\n    return (i1 && i2) ? (v1.length>v2.length ? 1 : v1.length<v2.length ? -1 : Number(v1) > Number(v2) ? 1 : -1) : (i1 ? -1 : 1);\r\n  }\r\n  for (let i=0, len = Math.min(v1.length, v2.length), o1, o2, n1, n2; i<len; i++) {\r\n    o1 = v1.charAt(i); o2 = v2.charAt(i);\r\n    if(o1 == o2) continue;\r\n    n1 = CHINA[o1]||Number(o1); n2 = CHINA[o2]||Number(o2); \r\n    if (!isNaN(n1) && !isNaN(n2)) {\r\n      return n1 > n2 ? 1 : -1;\r\n    }\r\n    return o1.localeCompare(o2,\"zh\");\r\n  }\r\n  let len = v1.length - v2.length;\r\n  return len == 0 ? 0 : (len > 0 ? 1 : -1);\r\n}"]}]}