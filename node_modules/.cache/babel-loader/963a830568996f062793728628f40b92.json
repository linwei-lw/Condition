{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\tools\\src\\event.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\tools\\src\\event.js","mtime":1635230121386},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import XEUtils from 'xe-utils';\nimport { browse } from '../../tools/src/dom';\nexport const EVENT_KEYS = {\n  F2: 'F2',\n  ESCAPE: 'Escape',\n  ENTER: 'Enter',\n  TAB: 'Tab',\n  DELETE: 'Delete',\n  BACKSPACE: 'Backspace',\n  SPACEBAR: ' ',\n  CONTEXT_MENU: 'ContextMenu',\n  ARROW_UP: 'ArrowUp',\n  ARROW_DOWN: 'ArrowDown',\n  ARROW_LEFT: 'ArrowLeft',\n  ARROW_RIGHT: 'ArrowRight',\n  PAGE_UP: 'PageUp',\n  PAGE_DOWN: 'PageDown'\n};\nconst convertEventKeys = {\n  ' ': 'Spacebar',\n  Apps: EVENT_KEYS.CONTEXT_MENU,\n  Del: EVENT_KEYS.DELETE,\n  Up: EVENT_KEYS.ARROW_UP,\n  Down: EVENT_KEYS.ARROW_DOWN,\n  Left: EVENT_KEYS.ARROW_LEFT,\n  Right: EVENT_KEYS.ARROW_RIGHT // 监听全局事件\n\n};\nconst wheelName = browse.firefox ? 'DOMMouseScroll' : 'mousewheel';\nconst eventStore = [];\nexport const hasEventKey = (evnt, targetKey) => {\n  const key = evnt.key;\n  targetKey = targetKey.toLowerCase();\n  return key ? targetKey === key.toLowerCase() || !!(convertEventKeys[key] && convertEventKeys[key].toLowerCase() === targetKey) : false;\n};\nexport const GlobalEvent = {\n  on(comp, type, cb) {\n    if (cb) {\n      eventStore.push({\n        comp,\n        type,\n        cb\n      });\n    }\n  },\n\n  off(comp, type) {\n    XEUtils.remove(eventStore, item => item.comp === comp && item.type === type);\n  },\n\n  trigger(evnt) {\n    const isWheel = evnt.type === wheelName;\n    eventStore.forEach(_ref => {\n      let comp = _ref.comp,\n          type = _ref.type,\n          cb = _ref.cb; // 如果被取消冒泡，不再执行\n\n      if (!evnt.cancelBubble) {\n        if (type === evnt.type || isWheel && type === 'mousewheel') {\n          cb.call(comp, evnt);\n        }\n      }\n    });\n  },\n\n  eqKeypad(evnt, keyVal) {\n    const key = evnt.key;\n\n    if (keyVal.toLowerCase() === key.toLowerCase()) {\n      return true;\n    }\n\n    return false;\n  }\n\n};\n\nif (browse.isDoc) {\n  if (!browse.msie) {\n    document.addEventListener('copy', GlobalEvent.trigger, false);\n    document.addEventListener('cut', GlobalEvent.trigger, false);\n    document.addEventListener('paste', GlobalEvent.trigger, false);\n  }\n\n  document.addEventListener('keydown', GlobalEvent.trigger, false);\n  document.addEventListener('contextmenu', GlobalEvent.trigger, false);\n  window.addEventListener('mousedown', GlobalEvent.trigger, false);\n  window.addEventListener('blur', GlobalEvent.trigger, false);\n  window.addEventListener('resize', GlobalEvent.trigger, false);\n  window.addEventListener(wheelName, XEUtils.throttle(GlobalEvent.trigger, 100, {\n    leading: true,\n    trailing: false\n  }), false);\n}\n\nexport default GlobalEvent;",null]}