{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\export\\src\\export-panel.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\export\\src\\export-panel.js","mtime":1638515703904},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport VxeModal from \"../../modal/src/modal\";\nimport VxeInput from \"../../input/src/input\";\nimport VxeCheckbox from \"../../checkbox/src/checkbox\";\nimport VxeSelect from \"../../select/src/select\";\nimport VxeOption from \"../../select/src/option\";\nimport { UtilTools } from \"../../tools\";\nexport default {\n  name: 'VxeExportPanel',\n  props: {\n    defaultOptions: Object,\n    storeData: Object\n  },\n  components: {\n    VxeModal: VxeModal,\n    VxeInput: VxeInput,\n    VxeCheckbox: VxeCheckbox,\n    VxeSelect: VxeSelect,\n    VxeOption: VxeOption\n  },\n  data: function data() {\n    return {\n      isAll: false,\n      isIndeterminate: false,\n      loading: false\n    };\n  },\n  computed: {\n    vSize: function vSize() {\n      return this.size || this.$parent.size || this.$parent.vSize;\n    },\n    checkedAll: function checkedAll() {\n      return this.storeData.columns.every(function (column) {\n        return column.checked;\n      });\n    },\n    showSheet: function showSheet() {\n      return ['html', 'xml', 'xlsx', 'pdf'].indexOf(this.defaultOptions.type) > -1;\n    },\n    supportMerge: function supportMerge() {\n      var storeData = this.storeData,\n          defaultOptions = this.defaultOptions;\n      return !defaultOptions.original && defaultOptions.mode === 'current' && (storeData.isPrint || ['html', 'xlsx'].indexOf(defaultOptions.type) > -1);\n    },\n    supportStyle: function supportStyle() {\n      var defaultOptions = this.defaultOptions;\n      return !defaultOptions.original && ['xlsx'].indexOf(defaultOptions.type) > -1;\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var _e = this._e,\n        checkedAll = this.checkedAll,\n        isAll = this.isAll,\n        isIndeterminate = this.isIndeterminate,\n        showSheet = this.showSheet,\n        supportMerge = this.supportMerge,\n        supportStyle = this.supportStyle,\n        defaultOptions = this.defaultOptions,\n        storeData = this.storeData;\n    var hasTree = storeData.hasTree,\n        hasMerge = storeData.hasMerge,\n        isPrint = storeData.isPrint,\n        hasColgroup = storeData.hasColgroup;\n    var isHeader = defaultOptions.isHeader;\n    var cols = [];\n    XEUtils.eachTree(storeData.columns, function (column) {\n      var colTitle = UtilTools.formatText(column.getTitle(), 1);\n      var isColGroup = column.children && column.children.length;\n      cols.push(h('li', {\n        class: ['vxe-export--panel-column-option', \"level--\".concat(column.level), {\n          'is--group': isColGroup,\n          'is--checked': column.checked,\n          'is--indeterminate': column.halfChecked,\n          'is--disabled': column.disabled\n        }],\n        attrs: {\n          title: colTitle\n        },\n        on: {\n          click: function click() {\n            if (!column.disabled) {\n              _this.changeOption(column);\n            }\n          }\n        }\n      }, [h('span', {\n        class: 'vxe-checkbox--icon vxe-checkbox--checked-icon',\n        style: {\n          '--checkedColor': $_theme.color\n        }\n      }), h('span', {\n        class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon',\n        style: {\n          '--checkedColor': $_theme.color\n        }\n      }), h('span', {\n        class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon',\n        style: {\n          '--checkedColor': $_theme.color\n        }\n      }), h('span', {\n        class: 'vxe-checkbox--label'\n      }, colTitle)]));\n    });\n    return h('vxe-modal', {\n      res: 'modal',\n      props: {\n        value: storeData.visible,\n        title: GlobalConfig.i18n(isPrint ? 'vxe.export.printTitle' : 'vxe.export.expTitle'),\n        width: 660,\n        mask: true,\n        lockView: true,\n        showFooter: false,\n        escClosable: true,\n        maskClosable: true,\n        loading: this.loading\n      },\n      on: {\n        input: function input(value) {\n          storeData.visible = value;\n        },\n        show: this.showEvent\n      }\n    }, [h('div', {\n      class: 'vxe-export--panel'\n    }, [h('table', {\n      attrs: {\n        cellspacing: 0,\n        cellpadding: 0,\n        border: 0\n      }\n    }, [h('tbody', [[isPrint ? _e() : h('tr', [h('td', GlobalConfig.i18n('vxe.export.expName')), h('td', [h('vxe-input', {\n      ref: 'filename',\n      props: {\n        value: defaultOptions.filename,\n        type: 'text',\n        clearable: true,\n        placeholder: GlobalConfig.i18n('vxe.export.expNamePlaceholder')\n      },\n      on: {\n        modelValue: function modelValue(value) {\n          defaultOptions.filename = value;\n        }\n      }\n    })])]), isPrint ? _e() : h('tr', [h('td', GlobalConfig.i18n('vxe.export.expType')), h('td', [h('vxe-select', {\n      props: {\n        value: defaultOptions.type\n      },\n      on: {\n        input: function input(value) {\n          defaultOptions.type = value;\n        }\n      }\n    }, storeData.typeList.map(function (item) {\n      return h('vxe-option', {\n        props: {\n          value: item.value,\n          label: GlobalConfig.i18n(item.label)\n        }\n      });\n    }))])]), isPrint || showSheet ? h('tr', [h('td', GlobalConfig.i18n('vxe.export.expSheetName')), h('td', [h('vxe-input', {\n      ref: 'sheetname',\n      props: {\n        value: defaultOptions.sheetName,\n        type: 'text',\n        clearable: true,\n        placeholder: GlobalConfig.i18n('vxe.export.expSheetNamePlaceholder')\n      },\n      on: {\n        modelValue: function modelValue(value) {\n          defaultOptions.sheetName = value;\n        }\n      }\n    })])]) : _e(), h('tr', [h('td', GlobalConfig.i18n('vxe.export.expMode')), h('td', [h('vxe-select', {\n      props: {\n        value: defaultOptions.mode\n      },\n      on: {\n        input: function input(value) {\n          defaultOptions.mode = value;\n        }\n      }\n    }, storeData.modeList.map(function (item) {\n      return h('vxe-option', {\n        props: {\n          value: item.value,\n          label: GlobalConfig.i18n(item.label)\n        }\n      });\n    }))])]), h('tr', [h('td', [GlobalConfig.i18n('vxe.export.expColumn')]), h('td', [h('div', {\n      class: 'vxe-export--panel-column'\n    }, [h('ul', {\n      class: 'vxe-export--panel-column-header'\n    }, [h('li', {\n      class: ['vxe-export--panel-column-option', {\n        'is--checked': isAll,\n        'is--indeterminate': isIndeterminate\n      }],\n      attrs: {\n        title: GlobalConfig.i18n('vxe.table.allTitle')\n      },\n      on: {\n        click: this.allColumnEvent\n      }\n    }, [h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--checked-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon',\n      style: {\n        '--checkedColor': $_theme.color\n      }\n    }), h('span', {\n      class: 'vxe-checkbox--label'\n    }, GlobalConfig.i18n('vxe.export.expCurrentColumn'))])]), h('ul', {\n      class: 'vxe-export--panel-column-body'\n    }, cols)])])]), h('tr', [h('td', GlobalConfig.i18n('vxe.export.expOpts')), h('td', [h('div', {\n      class: 'vxe-export--panel-option-row'\n    }, [h('vxe-checkbox', {\n      props: {\n        value: isHeader,\n        title: GlobalConfig.i18n('vxe.export.expHeaderTitle'),\n        content: GlobalConfig.i18n('vxe.export.expOptHeader')\n      },\n      on: {\n        input: function input(value) {\n          defaultOptions.isHeader = value;\n        }\n      }\n    }), h('vxe-checkbox', {\n      props: {\n        value: defaultOptions.isFooter,\n        disabled: !storeData.hasFooter,\n        title: GlobalConfig.i18n('vxe.export.expFooterTitle'),\n        content: GlobalConfig.i18n('vxe.export.expOptFooter')\n      },\n      on: {\n        input: function input(value) {\n          defaultOptions.isFooter = value;\n        }\n      }\n    }), h('vxe-checkbox', {\n      props: {\n        value: defaultOptions.original,\n        title: GlobalConfig.i18n('vxe.export.expOriginalTitle'),\n        content: GlobalConfig.i18n('vxe.export.expOptOriginal')\n      },\n      on: {\n        input: function input(value) {\n          defaultOptions.original = value;\n        }\n      }\n    })]), h('div', {\n      class: 'vxe-export--panel-option-row'\n    }, [h('vxe-checkbox', {\n      props: {\n        value: isHeader && hasColgroup && supportMerge ? defaultOptions.isColgroup : false,\n        disabled: !isHeader || !hasColgroup || !supportMerge,\n        title: GlobalConfig.i18n('vxe.export.expColgroupTitle'),\n        content: GlobalConfig.i18n('vxe.export.expOptColgroup')\n      },\n      on: {\n        input: function input(value) {\n          defaultOptions.isColgroup = value;\n        }\n      }\n    }), h('vxe-checkbox', {\n      props: {\n        value: hasMerge && supportMerge && checkedAll ? defaultOptions.isMerge : false,\n        disabled: !hasMerge || !supportMerge || !checkedAll,\n        title: GlobalConfig.i18n('vxe.export.expMergeTitle'),\n        content: GlobalConfig.i18n('vxe.export.expOptMerge')\n      },\n      on: {\n        input: function input(value) {\n          defaultOptions.isMerge = value;\n        }\n      }\n    }), isPrint ? _e() : h('vxe-checkbox', {\n      props: {\n        value: supportStyle ? defaultOptions.useStyle : false,\n        disabled: !supportStyle,\n        title: GlobalConfig.i18n('vxe.export.expUseStyleTitle'),\n        content: GlobalConfig.i18n('vxe.export.expOptUseStyle')\n      },\n      on: {\n        input: function input(value) {\n          defaultOptions.useStyle = value;\n        }\n      }\n    }), h('vxe-checkbox', {\n      props: {\n        value: hasTree ? defaultOptions.isAllExpand : false,\n        disabled: !hasTree,\n        title: GlobalConfig.i18n('vxe.export.expAllExpandTitle'),\n        content: GlobalConfig.i18n('vxe.export.expOptAllExpand')\n      },\n      on: {\n        input: function input(value) {\n          defaultOptions.isAllExpand = value;\n        }\n      }\n    })])])])]])]), h('div', {\n      class: 'vxe-export--panel-btns'\n    }, [h('vxe-button', {\n      props: {\n        content: GlobalConfig.i18n('vxe.export.expCancel')\n      },\n      on: {\n        click: this.cancelEvent\n      }\n    }), h('vxe-button', {\n      ref: 'confirmBtn',\n      props: {\n        status: 'primary',\n        content: GlobalConfig.i18n(isPrint ? 'vxe.export.expPrint' : 'vxe.export.expConfirm')\n      },\n      on: {\n        click: this.confirmEvent\n      }\n    })])])]);\n  },\n  methods: {\n    changeOption: function changeOption(column) {\n      var isChecked = !column.checked;\n      XEUtils.eachTree([column], function (item) {\n        item.checked = isChecked;\n        item.halfChecked = false;\n      });\n      this.handleOptionCheck(column);\n      this.checkStatus();\n    },\n    handleOptionCheck: function handleOptionCheck(column) {\n      var matchObj = XEUtils.findTree(this.storeData.columns, function (item) {\n        return item === column;\n      });\n\n      if (matchObj && matchObj.parent) {\n        var parent = matchObj.parent;\n\n        if (parent.children && parent.children.length) {\n          parent.checked = parent.children.every(function (column) {\n            return column.checked;\n          });\n          parent.halfChecked = !parent.checked && parent.children.some(function (column) {\n            return column.checked || column.halfChecked;\n          });\n          this.handleOptionCheck(parent);\n        }\n      }\n    },\n    checkStatus: function checkStatus() {\n      var columns = this.storeData.columns;\n      this.isAll = columns.every(function (column) {\n        return column.disabled || column.checked;\n      });\n      this.isIndeterminate = !this.isAll && columns.some(function (column) {\n        return !column.disabled && (column.checked || column.halfChecked);\n      });\n    },\n    allColumnEvent: function allColumnEvent() {\n      var isAll = !this.isAll;\n      XEUtils.eachTree(this.storeData.columns, function (column) {\n        if (!column.disabled) {\n          column.checked = isAll;\n          column.halfChecked = false;\n        }\n      });\n      this.isAll = isAll;\n      this.checkStatus();\n    },\n    showEvent: function showEvent() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        var $refs = _this2.$refs;\n        var targetElem = $refs.filename || $refs.sheetname || $refs.confirmBtn;\n\n        if (targetElem) {\n          targetElem.focus();\n        }\n      });\n      this.checkStatus();\n    },\n    getExportOption: function getExportOption() {\n      var checkedAll = this.checkedAll,\n          storeData = this.storeData,\n          defaultOptions = this.defaultOptions,\n          supportMerge = this.supportMerge;\n      var hasMerge = storeData.hasMerge,\n          columns = storeData.columns;\n      var expColumns = XEUtils.searchTree(columns, function (column) {\n        return column.checked;\n      }, {\n        children: 'children',\n        mapChildren: 'childNodes',\n        original: true\n      });\n      return Object.assign({}, defaultOptions, {\n        columns: expColumns,\n        isMerge: hasMerge && supportMerge && checkedAll ? defaultOptions.isMerge : false\n      });\n    },\n    cancelEvent: function cancelEvent() {\n      this.storeData.visible = false;\n    },\n    confirmEvent: function confirmEvent(evnt) {\n      if (this.storeData.isPrint) {\n        this.printEvent(evnt);\n      } else {\n        this.exportEvent(evnt);\n      }\n    },\n    printEvent: function printEvent() {\n      var $xetable = this.$parent;\n      this.storeData.visible = false;\n      $xetable.print(Object.assign({}, $xetable.printOpts, this.getExportOption()));\n    },\n    exportEvent: function exportEvent() {\n      var _this3 = this;\n\n      var $xetable = this.$parent;\n      this.loading = true;\n      $xetable.exportData(Object.assign({}, $xetable.exportOpts, this.getExportOption())).then(function () {\n        _this3.loading = false;\n        _this3.storeData.visible = false;\n      }).catch(function () {\n        _this3.loading = false;\n      });\n    }\n  }\n};",null]}