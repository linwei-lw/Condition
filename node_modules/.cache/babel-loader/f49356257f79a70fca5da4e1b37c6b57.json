{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\keyboard\\src\\mixin.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\keyboard\\src\\mixin.js","mtime":1635230121761},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.fixed\";\nimport XEUtils from 'xe-utils';\nimport { DomTools } from \"../../tools\";\nimport { browse } from \"../../tools/src/dom\";\n\nfunction getTargetOffset(target, container) {\n  var offsetTop = 0;\n  var offsetLeft = 0;\n  var triggerCheckboxLabel = !browse.firefox && DomTools.hasClass(target, 'vxe-checkbox--label');\n\n  if (triggerCheckboxLabel) {\n    var checkboxLabelStyle = getComputedStyle(target);\n    offsetTop -= XEUtils.toNumber(checkboxLabelStyle.paddingTop);\n    offsetLeft -= XEUtils.toNumber(checkboxLabelStyle.paddingLeft);\n  }\n\n  while (target && target !== container) {\n    offsetTop += target.offsetTop;\n    offsetLeft += target.offsetLeft;\n    target = target.offsetParent;\n\n    if (triggerCheckboxLabel) {\n      var checkboxStyle = getComputedStyle(target);\n      offsetTop -= XEUtils.toNumber(checkboxStyle.paddingTop);\n      offsetLeft -= XEUtils.toNumber(checkboxStyle.paddingLeft);\n    }\n  }\n\n  return {\n    offsetTop: offsetTop,\n    offsetLeft: offsetLeft\n  };\n}\n\nfunction getCheckboxRangeRows(_vm, params, targetTrElem, moveRange) {\n  var countHeight = 0;\n  var rangeRows = [];\n  var isDown = moveRange > 0;\n  var moveSize = moveRange > 0 ? moveRange : Math.abs(moveRange) + targetTrElem.offsetHeight;\n  var afterFullData = _vm.afterFullData,\n      scrollYStore = _vm.scrollYStore,\n      scrollYLoad = _vm.scrollYLoad;\n\n  if (scrollYLoad) {\n    var _rowIndex = _vm.getVTRowIndex(params.row);\n\n    if (isDown) {\n      rangeRows = afterFullData.slice(_rowIndex, _rowIndex + Math.ceil(moveSize / scrollYStore.rowHeight));\n    } else {\n      rangeRows = afterFullData.slice(_rowIndex - Math.floor(moveSize / scrollYStore.rowHeight) + 1, _rowIndex + 1);\n    }\n  } else {\n    var siblingProp = isDown ? 'next' : 'previous';\n\n    while (targetTrElem && countHeight < moveSize) {\n      rangeRows.push(_vm.getRowNode(targetTrElem).item);\n      countHeight += targetTrElem.offsetHeight;\n      targetTrElem = targetTrElem[\"\".concat(siblingProp, \"ElementSibling\")];\n    }\n  }\n\n  return rangeRows;\n}\n\nexport default {\n  methods: {\n    // 处理 Tab 键移动\n    moveTabSelected: function moveTabSelected(args, isLeft, evnt) {\n      var _this = this;\n\n      var afterFullData = this.afterFullData,\n          visibleColumn = this.visibleColumn,\n          editConfig = this.editConfig,\n          editOpts = this.editOpts;\n      var targetRow;\n      var targetRowIndex;\n      var targetColumnIndex;\n      var params = Object.assign({}, args);\n\n      var _rowIndex = this.getVTRowIndex(params.row);\n\n      var _columnIndex = this.getVTColumnIndex(params.column);\n\n      evnt.preventDefault();\n\n      if (isLeft) {\n        // 向左\n        if (_columnIndex <= 0) {\n          // 如果已经是第一列，则移动到上一行\n          if (_rowIndex > 0) {\n            targetRowIndex = _rowIndex - 1;\n            targetRow = afterFullData[targetRowIndex];\n            targetColumnIndex = visibleColumn.length - 1;\n          }\n        } else {\n          targetColumnIndex = _columnIndex - 1;\n        }\n      } else {\n        if (_columnIndex >= visibleColumn.length - 1) {\n          // 如果已经是第一列，则移动到上一行\n          if (_rowIndex < afterFullData.length - 1) {\n            targetRowIndex = _rowIndex + 1;\n            targetRow = afterFullData[targetRowIndex];\n            targetColumnIndex = 0;\n          }\n        } else {\n          targetColumnIndex = _columnIndex + 1;\n        }\n      }\n\n      var targetColumn = visibleColumn[targetColumnIndex];\n\n      if (targetColumn) {\n        if (targetRow) {\n          params.rowIndex = targetRowIndex;\n          params.row = targetRow;\n        } else {\n          params.rowIndex = _rowIndex;\n        }\n\n        params.columnIndex = targetColumnIndex;\n        params.column = targetColumn;\n        params.cell = this.getCell(params.row, params.column);\n\n        if (editConfig) {\n          if (editOpts.trigger === 'click' || editOpts.trigger === 'dblclick') {\n            if (editOpts.mode === 'row') {\n              this.handleActived(params, evnt);\n            } else {\n              this.scrollToRow(params.row, params.column).then(function () {\n                return _this.handleSelected(params, evnt);\n              });\n            }\n          }\n        } else {\n          this.scrollToRow(params.row, params.column).then(function () {\n            return _this.handleSelected(params, evnt);\n          });\n        }\n      }\n    },\n    // 处理当前行方向键移动\n    moveCurrentRow: function moveCurrentRow(isUpArrow, isDwArrow, evnt) {\n      var _this2 = this;\n\n      var currentRow = this.currentRow,\n          treeConfig = this.treeConfig,\n          treeOpts = this.treeOpts,\n          afterFullData = this.afterFullData;\n      var targetRow;\n      evnt.preventDefault();\n\n      if (currentRow) {\n        if (treeConfig) {\n          var _XEUtils$findTree = XEUtils.findTree(afterFullData, function (item) {\n            return item === currentRow;\n          }, treeOpts),\n              index = _XEUtils$findTree.index,\n              items = _XEUtils$findTree.items;\n\n          if (isUpArrow && index > 0) {\n            targetRow = items[index - 1];\n          } else if (isDwArrow && index < items.length - 1) {\n            targetRow = items[index + 1];\n          }\n        } else {\n          var _rowIndex = this.getVTRowIndex(currentRow);\n\n          if (isUpArrow && _rowIndex > 0) {\n            targetRow = afterFullData[_rowIndex - 1];\n          } else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n            targetRow = afterFullData[_rowIndex + 1];\n          }\n        }\n      } else {\n        targetRow = afterFullData[0];\n      }\n\n      if (targetRow) {\n        var params = {\n          $table: this,\n          row: targetRow\n        };\n        this.scrollToRow(targetRow).then(function () {\n          return _this2.triggerCurrentRowEvent(evnt, params);\n        });\n      }\n    },\n    // 处理可编辑方向键移动\n    moveSelected: function moveSelected(args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt) {\n      var _this3 = this;\n\n      var afterFullData = this.afterFullData,\n          visibleColumn = this.visibleColumn;\n      var params = Object.assign({}, args);\n\n      var _rowIndex = this.getVTRowIndex(params.row);\n\n      var _columnIndex = this.getVTColumnIndex(params.column);\n\n      evnt.preventDefault();\n\n      if (isUpArrow && _rowIndex > 0) {\n        // 移动到上一行\n        params.rowIndex = _rowIndex - 1;\n        params.row = afterFullData[params.rowIndex];\n      } else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n        // 移动到下一行\n        params.rowIndex = _rowIndex + 1;\n        params.row = afterFullData[params.rowIndex];\n      } else if (isLeftArrow && _columnIndex) {\n        // 移动到左侧单元格\n        params.columnIndex = _columnIndex - 1;\n        params.column = visibleColumn[params.columnIndex];\n      } else if (isRightArrow && _columnIndex < visibleColumn.length - 1) {\n        // 移动到右侧单元格\n        params.columnIndex = _columnIndex + 1;\n        params.column = visibleColumn[params.columnIndex];\n      }\n\n      this.scrollToRow(params.row, params.column).then(function () {\n        params.cell = _this3.getCell(params.row, params.column);\n\n        _this3.handleSelected(params, evnt);\n      });\n    },\n\n    /**\r\n     * 表头单元格按下事件\r\n     */\n    triggerHeaderCellMousedownEvent: function triggerHeaderCellMousedownEvent(evnt, params) {\n      var mouseConfig = this.mouseConfig,\n          mouseOpts = this.mouseOpts;\n\n      if (mouseConfig && mouseOpts.area && this.handleHeaderCellAreaEvent) {\n        var cell = evnt.currentTarget;\n        var triggerSort = DomTools.getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n        var triggerFilter = DomTools.getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n        this.handleHeaderCellAreaEvent(evnt, Object.assign({\n          cell: cell,\n          triggerSort: triggerSort,\n          triggerFilter: triggerFilter\n        }, params));\n      }\n\n      this.focus();\n      this.closeMenu();\n    },\n\n    /**\r\n     * 单元格按下事件\r\n     */\n    triggerCellMousedownEvent: function triggerCellMousedownEvent(evnt, params) {\n      var cell = evnt.currentTarget;\n      params.cell = cell;\n      this.handleCellMousedownEvent(evnt, params);\n      this.focus();\n      this.closeFilter();\n      this.closeMenu();\n    },\n    handleCellMousedownEvent: function handleCellMousedownEvent(evnt, params) {\n      var editConfig = this.editConfig,\n          editOpts = this.editOpts,\n          handleSelected = this.handleSelected,\n          checkboxConfig = this.checkboxConfig,\n          checkboxOpts = this.checkboxOpts,\n          mouseConfig = this.mouseConfig,\n          mouseOpts = this.mouseOpts;\n\n      if (mouseConfig && mouseOpts.area && this.handleCellAreaEvent) {\n        return this.handleCellAreaEvent(evnt, params);\n      } else {\n        if (checkboxConfig && checkboxOpts.range) {\n          this.handleCheckboxRangeEvent(evnt, params);\n        }\n\n        if (mouseConfig && mouseOpts.selected) {\n          if (!editConfig || editOpts.mode === 'cell') {\n            handleSelected(params, evnt);\n          }\n        }\n      }\n    },\n    handleCheckboxRangeEvent: function handleCheckboxRangeEvent(evnt, params) {\n      var _this4 = this;\n\n      var column = params.column,\n          cell = params.cell;\n\n      if (column.type === 'checkbox') {\n        var $el = this.$el,\n            elemStore = this.elemStore;\n        var disX = evnt.clientX;\n        var disY = evnt.clientY;\n        var bodyWrapperElem = elemStore[\"\".concat(column.fixed || 'main', \"-body-wrapper\")] || elemStore['main-body-wrapper'];\n        var checkboxRangeElem = bodyWrapperElem.querySelector('.vxe-table--checkbox-range');\n        var domMousemove = document.onmousemove;\n        var domMouseup = document.onmouseup;\n        var trElem = cell.parentNode;\n        var selectRecords = this.getCheckboxRecords();\n        var lastRangeRows = [];\n        var marginSize = 1;\n        var offsetRest = getTargetOffset(evnt.target, bodyWrapperElem);\n        var startTop = offsetRest.offsetTop + evnt.offsetY;\n        var startLeft = offsetRest.offsetLeft + evnt.offsetX;\n        var startScrollTop = bodyWrapperElem.scrollTop;\n        var rowHeight = trElem.offsetHeight;\n        var mouseScrollTimeout = null;\n        var isMouseScrollDown = false;\n        var mouseScrollSpaceSize = 1;\n\n        var triggerEvent = function triggerEvent(type, evnt) {\n          _this4.emitEvent(\"checkbox-range-\".concat(type), {\n            records: _this4.getCheckboxRecords(),\n            reserves: _this4.getCheckboxReserveRecords()\n          }, evnt);\n        };\n\n        var handleChecked = function handleChecked(evnt) {\n          var clientX = evnt.clientX,\n              clientY = evnt.clientY;\n          var offsetLeft = clientX - disX;\n          var offsetTop = clientY - disY + (bodyWrapperElem.scrollTop - startScrollTop);\n          var rangeHeight = Math.abs(offsetTop);\n          var rangeWidth = Math.abs(offsetLeft);\n          var rangeTop = startTop;\n          var rangeLeft = startLeft;\n\n          if (offsetTop < marginSize) {\n            // 向上\n            rangeTop += offsetTop;\n\n            if (rangeTop < marginSize) {\n              rangeTop = marginSize;\n              rangeHeight = startTop;\n            }\n          } else {\n            // 向下\n            rangeHeight = Math.min(rangeHeight, bodyWrapperElem.scrollHeight - startTop - marginSize);\n          }\n\n          if (offsetLeft < marginSize) {\n            // 向左\n            rangeLeft += offsetLeft;\n\n            if (rangeWidth > startLeft) {\n              rangeLeft = marginSize;\n              rangeWidth = startLeft;\n            }\n          } else {\n            // 向右\n            rangeWidth = Math.min(rangeWidth, bodyWrapperElem.clientWidth - startLeft - marginSize);\n          }\n\n          checkboxRangeElem.style.height = \"\".concat(rangeHeight, \"px\");\n          checkboxRangeElem.style.width = \"\".concat(rangeWidth, \"px\");\n          checkboxRangeElem.style.left = \"\".concat(rangeLeft, \"px\");\n          checkboxRangeElem.style.top = \"\".concat(rangeTop, \"px\");\n          checkboxRangeElem.style.display = 'block';\n          var rangeRows = getCheckboxRangeRows(_this4, params, trElem, offsetTop < marginSize ? -rangeHeight : rangeHeight); // 至少滑动 10px 才能有效匹配\n\n          if (rangeHeight > 10 && rangeRows.length !== lastRangeRows.length) {\n            lastRangeRows = rangeRows;\n\n            if (evnt.ctrlKey) {\n              rangeRows.forEach(function (row) {\n                _this4.handleSelectRow({\n                  row: row\n                }, selectRecords.indexOf(row) === -1);\n              });\n            } else {\n              _this4.setAllCheckboxRow(false);\n\n              _this4.setCheckboxRow(rangeRows, true);\n            }\n\n            triggerEvent('change', evnt);\n          }\n        }; // 停止鼠标滚动\n\n\n        var stopMouseScroll = function stopMouseScroll() {\n          clearTimeout(mouseScrollTimeout);\n          mouseScrollTimeout = null;\n        }; // 开始鼠标滚动\n\n\n        var startMouseScroll = function startMouseScroll(evnt) {\n          stopMouseScroll();\n          mouseScrollTimeout = setTimeout(function () {\n            if (mouseScrollTimeout) {\n              var scrollLeft = bodyWrapperElem.scrollLeft,\n                  scrollTop = bodyWrapperElem.scrollTop,\n                  clientHeight = bodyWrapperElem.clientHeight,\n                  scrollHeight = bodyWrapperElem.scrollHeight;\n              var topSize = Math.ceil(mouseScrollSpaceSize * 50 / rowHeight);\n\n              if (isMouseScrollDown) {\n                if (scrollTop + clientHeight < scrollHeight) {\n                  _this4.scrollTo(scrollLeft, scrollTop + topSize);\n\n                  startMouseScroll(evnt);\n                  handleChecked(evnt);\n                } else {\n                  stopMouseScroll();\n                }\n              } else {\n                if (scrollTop) {\n                  _this4.scrollTo(scrollLeft, scrollTop - topSize);\n\n                  startMouseScroll(evnt);\n                  handleChecked(evnt);\n                } else {\n                  stopMouseScroll();\n                }\n              }\n            }\n          }, 50);\n        };\n\n        DomTools.addClass($el, 'drag--range');\n\n        document.onmousemove = function (evnt) {\n          evnt.preventDefault();\n          evnt.stopPropagation();\n          var clientY = evnt.clientY;\n\n          var _DomTools$getAbsolute = DomTools.getAbsolutePos(bodyWrapperElem),\n              boundingTop = _DomTools$getAbsolute.boundingTop; // 如果超过可视区，触发滚动\n\n\n          if (clientY < boundingTop) {\n            isMouseScrollDown = false;\n            mouseScrollSpaceSize = boundingTop - clientY;\n\n            if (!mouseScrollTimeout) {\n              startMouseScroll(evnt);\n            }\n          } else if (clientY > boundingTop + bodyWrapperElem.clientHeight) {\n            isMouseScrollDown = true;\n            mouseScrollSpaceSize = clientY - boundingTop - bodyWrapperElem.clientHeight;\n\n            if (!mouseScrollTimeout) {\n              startMouseScroll(evnt);\n            }\n          } else if (mouseScrollTimeout) {\n            stopMouseScroll();\n          }\n\n          handleChecked(evnt);\n        };\n\n        document.onmouseup = function (evnt) {\n          stopMouseScroll();\n          DomTools.removeClass($el, 'drag--range');\n          checkboxRangeElem.removeAttribute('style');\n          document.onmousemove = domMousemove;\n          document.onmouseup = domMouseup;\n          triggerEvent('end', evnt);\n        };\n\n        triggerEvent('start', evnt);\n      }\n    }\n  }\n};",null]}