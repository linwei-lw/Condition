{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\common\\util\\Dates.js","dependencies":[{"path":"D:\\cdRule\\src\\common\\util\\Dates.js","mtime":1612227987785},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\"; //获取当天日期字符串\n\nexport function getNowDate() {\n  var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'YYYY-MM-DD';\n  return dateFormat(null, format);\n} //获取当前日期时间字符串\n\nexport function getNowDateTime() {\n  var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'YYYY-MM-DD HH:NN:SS';\n  return dateFormat(null, format);\n}\n/**\r\n * 当天加天数，如：明天addDateTime(1)　昨天addDateTime(-1)\r\n * @params {Int} day 相隔的天数\r\n * @params {String} format 返回格式\r\n * @returns {String} 日期字符串\r\n */\n\nexport function addDateTime(day) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD HH:NN:SS';\n  var date = new Date();\n  date.setDate(date.getDate() + day);\n  return dateFormat(date, format);\n}\n/**\r\n * 获取两个日期时间相隔的天数\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {Number} 相隔天数\r\n */\n\nexport function apartDays(datetime1, datetime2) {\n  return datetime1 && datetime2 ? Math.ceil(apartSeconds(datetime1, datetime2) / (24 * 60 * 60)) : 0;\n}\n/**\r\n * 获取两个日期时间相隔的秒数\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {Number} 相隔秒数\r\n */\n\nexport function apartSeconds(datetime1, datetime2) {\n  if (!datetime1 || !datetime2) return null;\n  datetime1 = parseDate(datetime1);\n  datetime2 = parseDate(datetime2);\n  return Math.abs(datetime1.getTime() - datetime2.getTime()) / 1000;\n}\n/**\r\n * 获取某月份的天数\r\n * @params year 指定年份\r\n * @params month 指定月份\r\n * @returns {Number} 当月的天数\r\n */\n\nexport function getDays(year, month) {\n  if (month == 2) {\n    //如果是二月，判断是否为闰年\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0 ? 29 : 28;\n  } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n    return 31;\n  }\n\n  return 30;\n}\n/**\r\n * 将日期对象进行字符串格式化\r\n * @params {Date} date 日期对象\r\n * @params {String} format 格式\r\n * @returns {String} 日期字符串\r\n */\n\nexport function dateFormat(date) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD';\n  date = date || new Date();\n  format = format || 'YYYY-MM-DD';\n  var month = date.getMonth() + 1,\n      day = date.getDate(),\n      hour = date.getHours(),\n      minute = date.getMinutes(),\n      second = date.getSeconds(),\n      millisecond = date.getMilliseconds() + '';\n  month = (month < 10 ? '0' : '') + month;\n  day = (day < 10 ? '0' : '') + day;\n  hour = (hour < 10 ? '0' : '') + hour;\n  minute = (minute < 10 ? '0' : '') + minute;\n  second = (second < 10 ? '0' : '') + second;\n  return format.replace('YYYY', date.getFullYear()).replace('MM', month).replace('DD', day).replace('HH', hour).replace('NN', minute).replace('SS', second).replace('MSD', millisecond);\n}\n/**\r\n * 将字符串转化为日期对象\r\n * @params {String} date 日期字符串\r\n * @returns {Date} 日期对象\r\n */\n\nexport function parseDate(date) {\n  var ymdhns = date.split(/[-| |:]/);\n  var year = parseInt(ymdhns[0]);\n  var month = parseInt(ymdhns[1]);\n  var day = parseInt(ymdhns[2]);\n  var hour = ymdhns.length > 3 ? parseInt(ymdhns[3]) : 0;\n  var minute = ymdhns.length > 4 ? parseInt(ymdhns[4]) : 0;\n  var second = ymdhns.length > 5 ? parseInt(ymdhns[5]) : 0;\n  return new Date(year, month - 1, day, hour, minute, second);\n}\n/**\r\n * 将[datetime]从格式yyyy-MM-dd hh:mm:ss转成格式yyyyMMddhhmmss\r\n * @params {String} datetime 日期时间字符串\r\n * @returns {String} 日期时间纯数字格式\r\n */\n\nexport function dateFormatToNum(datetime) {\n  return datetime.split(/[-| |:]/).join('');\n}\n/**\r\n * 将[datetime]从格式yyyyMMddhhmmss转成格式yyyy-MM-dd hh:mm:ss\r\n * @params {String} datetime 日期时间纯数字格式\r\n * @returns {String} 日期时间字符串\r\n */\n\nexport function dateNumToFormat(datetime) {\n  if (datetime.length == 14) {\n    return [datetime.substr(0, 4), '-', datetime.substr(4, 2), '-', datetime.substr(6, 2), ' ', datetime.substr(8, 2), ':', datetime.substr(10, 2), ':', datetime.substr(12, 2)].join('');\n  }\n\n  return datetime;\n}\n/**\r\n * 将秒数转成[天 时:分:秒]格式\r\n * @params {Int} seconds 秒数\r\n * @returns {String} [天 时:分:秒]\r\n */\n\nexport function secondsToDHMS(seconds) {\n  if (seconds === 0 || seconds === '0') return '00:00:00';\n  if (!seconds) return '';\n  seconds = Number(seconds);\n  var day = parseInt(seconds / (60 * 60 * 24));\n  var hour = parseInt(seconds % (60 * 60 * 24) / (60 * 60));\n  var minute = parseInt(seconds % (60 * 60 * 24) % (60 * 60) / 60);\n  var second = parseInt(seconds % (60 * 60 * 24) % (60 * 60) % 60);\n  var dhms = '';\n\n  if (day > 0) {\n    dhms = (day < 10 ? '0' : '') + day;\n    dhms += ' ';\n  }\n\n  dhms += (hour < 10 ? '0' : '') + hour;\n  dhms += (minute < 10 ? ':0' : ':') + minute;\n  dhms += (second < 10 ? ':0' : ':') + second;\n  return dhms;\n}\n/**\r\n * 将秒数转成[时:分:秒]格式\r\n * @params {Int} seconds 秒数\r\n * @returns {String} [时:分:秒]\r\n */\n\nexport function secondsToHMS(seconds) {\n  if (seconds === 0 || seconds === '0') return '00:00:00';\n  if (!seconds) return '';\n  seconds = Number(seconds);\n  var hour = parseInt(seconds / (60 * 60));\n  var minute = parseInt(seconds % (60 * 60 * 24) % (60 * 60) / 60);\n  var second = parseInt(seconds % (60 * 60 * 24) % (60 * 60) % 60);\n  var hms = (hour < 10 ? '0' : '') + hour;\n  hms += (minute < 10 ? ':0' : ':') + minute;\n  hms += (second < 10 ? ':0' : ':') + second;\n  return hms;\n}\n/**\r\n * 将两日期时间的间隔转成[时:分:秒]\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {String} [时:分:秒]\r\n */\n\nexport function apartToHMS(datetime1, datetime2) {\n  return datetime1 && datetime2 ? secondsToHMS(apartSeconds(datetime1, datetime2)) : '';\n}\n/**\r\n * 将两日期时间的间隔转成[x天x时x分x秒]\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {String} [x天x时x分x秒]\r\n */\n\nexport function apartDateTimeCnDesc(datetime1, datetime2) {\n  return datetime1 && datetime2 ? secondsToCnDesc(apartSeconds(datetime1, datetime2)) : '';\n}\n/**\r\n * 将秒数转成[x天x时x分x秒]格式\r\n * @params {Int} seconds 秒数\r\n * @returns {String} [x天x时x分x秒]\r\n */\n\nexport function secondsToCnDesc(seconds) {\n  if (seconds === 0 || seconds === '0') return '0秒';\n  if (!seconds) return '';\n  var day = parseInt(seconds / (60 * 60 * 24));\n  var hour = parseInt(seconds % (60 * 60 * 24) / (60 * 60));\n  var minute = parseInt(seconds % (60 * 60 * 24) % (60 * 60) / 60);\n  var second = parseInt(seconds % (60 * 60 * 24) % (60 * 60) % 60);\n  var desc = [];\n  day > 0 && desc.push(day, '天');\n  hour > 0 && desc.push(hour, '时');\n  minute > 0 && desc.push(minute, '分');\n  second > 0 && desc.push(second, '秒');\n  return desc.join('');\n}\n/**\r\n * 将时间范围分割成每一天\r\n * 例：2019-12-23 00:00:00 ~ 2019-12-24 23:59:59或2019-12-23 ~ 2019-12-24\r\n * 分割为：[{sdate:2019-12-23 00:00:00,edate:2019-12-23 23:59:59},{sdate:2019-12-24 00:00:00,edate:2019-12-24 23:59:59}]\r\n * @params {String} startDate 开始时间\r\n * @params {String} endDate 结束时间\r\n * @returns {Array} [{sdate:yyyy-MM-dd hh:mm:ss,edate:yyyy-MM-dd hh:mm:ss}]\r\n */\n\nexport function splitDate(start, end) {\n  var sf = {\n    10: '',\n    13: ' 00',\n    16: ' 00:00'\n  }[start.length] || ' 00:00:00',\n      ef = {\n    10: '',\n    13: ' 24',\n    16: ' 24:00'\n  }[start.length] || ' 23:59:59';\n  var sdate = parseDate(start.split(' ')[0]),\n      stime = sdate.getTime(),\n      etime = parseDate(end).getTime(),\n      item = {\n    sdate: start\n  },\n      result = [],\n      oneday = 24 * 60 * 60 * 1000;\n\n  while (stime + oneday < etime) {\n    sdate.setTime(stime = stime + oneday - 1);\n    item.edate = dateFormat(sdate, 'YYYY-MM-DD') + ef;\n    result.push(item);\n    sdate.setTime(stime = stime + 1);\n    item = {\n      sdate: dateFormat(sdate, 'YYYY-MM-DD') + sf\n    };\n  }\n\n  item.edate = end;\n  result.push(item);\n  return result;\n}",{"version":3,"sources":["D:\\cdRule\\src\\common\\util\\Dates.js"],"names":["format","dateFormat","date","datetime1","Math","apartSeconds","parseDate","datetime2","month","year","day","hour","minute","second","millisecond","ymdhns","parseInt","datetime","seconds","Number","dhms","hms","secondsToHMS","secondsToCnDesc","desc","sf","start","ef","sdate","stime","etime","item","result","oneday"],"mappings":"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","sourcesContent":["//获取当天日期字符串\r\nexport function getNowDate(format = 'YYYY-MM-DD') {\r\n\treturn dateFormat(null, format);\r\n}\r\n\r\n//获取当前日期时间字符串\r\nexport function getNowDateTime(format = 'YYYY-MM-DD HH:NN:SS') {\r\n\treturn dateFormat(null, format);\r\n}\r\n\r\n/**\r\n * 当天加天数，如：明天addDateTime(1)　昨天addDateTime(-1)\r\n * @params {Int} day 相隔的天数\r\n * @params {String} format 返回格式\r\n * @returns {String} 日期字符串\r\n */\r\nexport function addDateTime(day, format = 'YYYY-MM-DD HH:NN:SS') {\r\n\tlet date = new Date();\r\n\tdate.setDate(date.getDate() + day);\r\n\treturn dateFormat(date, format);\r\n}\r\n\r\n/**\r\n * 获取两个日期时间相隔的天数\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {Number} 相隔天数\r\n */\r\nexport function apartDays(datetime1, datetime2) {\r\n\treturn datetime1 && datetime2 ? Math.ceil(apartSeconds(datetime1, datetime2) / (24 * 60 * 60)) : 0;\r\n}\r\n\r\n/**\r\n * 获取两个日期时间相隔的秒数\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {Number} 相隔秒数\r\n */\r\nexport function apartSeconds(datetime1, datetime2) {\r\n\tif (!datetime1 || !datetime2) return null;\r\n\tdatetime1 = parseDate(datetime1);\r\n\tdatetime2 = parseDate(datetime2);\r\n\treturn Math.abs(datetime1.getTime() - datetime2.getTime()) / 1000;\r\n}\r\n\r\n/**\r\n * 获取某月份的天数\r\n * @params year 指定年份\r\n * @params month 指定月份\r\n * @returns {Number} 当月的天数\r\n */\r\nexport function getDays(year, month) {\r\n\tif(month == 2) { //如果是二月，判断是否为闰年\r\n\t\treturn((year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0)) ? 29 : 28;\r\n\t} else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n\t\treturn 31;\r\n\t}\r\n\treturn 30;\r\n}\r\n\r\n/**\r\n * 将日期对象进行字符串格式化\r\n * @params {Date} date 日期对象\r\n * @params {String} format 格式\r\n * @returns {String} 日期字符串\r\n */\r\nexport function dateFormat(date, format = 'YYYY-MM-DD') {\r\n\tdate = date || new Date();\r\n\tformat = format || 'YYYY-MM-DD';\r\n\r\n\tlet month = date.getMonth() + 1,\r\n\t\tday = date.getDate(),\r\n\t\thour = date.getHours(),\r\n\t\tminute = date.getMinutes(),\r\n\t\tsecond = date.getSeconds(),\r\n\t\tmillisecond = date.getMilliseconds()+'';\r\n\tmonth = (month < 10 ? '0' : '') + month;\r\n\tday = (day < 10 ? '0' : '') + day;\r\n\thour = (hour < 10 ? '0' : '') + hour;\r\n\tminute = (minute < 10 ? '0' : '') + minute;\r\n\tsecond = (second < 10 ? '0' : '') + second;\r\n\r\n\treturn format.replace('YYYY', date.getFullYear()).replace('MM', month).replace('DD', day).replace('HH', hour).replace('NN', minute).replace('SS', second).replace('MSD', millisecond);\r\n}\r\n\r\n/**\r\n * 将字符串转化为日期对象\r\n * @params {String} date 日期字符串\r\n * @returns {Date} 日期对象\r\n */\r\nexport function parseDate(date) {\r\n\tlet ymdhns = date.split(/[-| |:]/);\r\n\tlet year = parseInt(ymdhns[0]);\r\n\tlet month = parseInt(ymdhns[1]);\r\n\tlet day = parseInt(ymdhns[2]);\r\n\tlet hour = ymdhns.length > 3 ? parseInt(ymdhns[3]) : 0;\r\n\tlet minute = ymdhns.length > 4 ? parseInt(ymdhns[4]) : 0;\r\n\tlet second = ymdhns.length > 5 ? parseInt(ymdhns[5]) : 0;\r\n\treturn new Date(year, month - 1, day, hour, minute, second);\r\n}\r\n\r\n/**\r\n * 将[datetime]从格式yyyy-MM-dd hh:mm:ss转成格式yyyyMMddhhmmss\r\n * @params {String} datetime 日期时间字符串\r\n * @returns {String} 日期时间纯数字格式\r\n */\r\nexport function dateFormatToNum(datetime) {\r\n\treturn datetime.split(/[-| |:]/).join('');\r\n}\r\n\r\n/**\r\n * 将[datetime]从格式yyyyMMddhhmmss转成格式yyyy-MM-dd hh:mm:ss\r\n * @params {String} datetime 日期时间纯数字格式\r\n * @returns {String} 日期时间字符串\r\n */\r\nexport function dateNumToFormat(datetime) {\r\n\tif(datetime.length == 14) {\r\n\t\treturn [datetime.substr(0, 4), '-', datetime.substr(4, 2), '-', datetime.substr(6, 2), ' ', datetime.substr(8, 2), ':', datetime.substr(10, 2), ':', datetime.substr(12, 2)].join('');\r\n\t}\r\n\treturn datetime;\r\n}\r\n\r\n/**\r\n * 将秒数转成[天 时:分:秒]格式\r\n * @params {Int} seconds 秒数\r\n * @returns {String} [天 时:分:秒]\r\n */\r\nexport function secondsToDHMS(seconds) {\r\n\tif(seconds === 0 || seconds === '0') return '00:00:00';\r\n\tif(!seconds) return '';\r\n\tseconds = Number(seconds);\r\n\tlet day = parseInt(seconds / (60 * 60 * 24));\r\n\tlet hour = parseInt((seconds % (60 * 60 * 24)) / (60 * 60));\r\n\tlet minute = parseInt(((seconds % (60 * 60 * 24)) % (60 * 60)) / 60);\r\n\tlet second = parseInt(((seconds % (60 * 60 * 24)) % (60 * 60)) % 60);\r\n\tlet dhms = '';\r\n\tif(day > 0) {\r\n\t\tdhms = (day < 10 ? '0' : '') + day;\r\n\t\tdhms += ' ';\r\n\t}\r\n\tdhms += (hour < 10 ? '0' : '') + hour;\r\n\tdhms += (minute < 10 ? ':0' : ':') + minute;\r\n\tdhms += (second < 10 ? ':0' : ':') + second;\r\n\treturn dhms;\r\n}\r\n\r\n/**\r\n * 将秒数转成[时:分:秒]格式\r\n * @params {Int} seconds 秒数\r\n * @returns {String} [时:分:秒]\r\n */\r\nexport function secondsToHMS(seconds) {\r\n\tif(seconds === 0 || seconds === '0') return '00:00:00';\r\n\tif(!seconds) return '';\r\n\tseconds = Number(seconds);\r\n\tlet hour = parseInt(seconds / (60 * 60));\r\n\tlet minute = parseInt(((seconds % (60 * 60 * 24)) % (60 * 60)) / 60);\r\n\tlet second = parseInt(((seconds % (60 * 60 * 24)) % (60 * 60)) % 60);\r\n\tlet hms = (hour < 10 ? '0' : '') + hour;\r\n\thms += (minute < 10 ? ':0' : ':') + minute;\r\n\thms += (second < 10 ? ':0' : ':') + second;\r\n\treturn hms;\r\n}\r\n\r\n/**\r\n * 将两日期时间的间隔转成[时:分:秒]\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {String} [时:分:秒]\r\n */\r\nexport function apartToHMS(datetime1, datetime2) {\r\n\treturn datetime1 && datetime2 ? secondsToHMS(apartSeconds(datetime1, datetime2)) : '';\r\n}\r\n\r\n/**\r\n * 将两日期时间的间隔转成[x天x时x分x秒]\r\n * @params {String} datetime1 日期时间1\r\n * @params {String} datetime2 日期时间2\r\n * @returns {String} [x天x时x分x秒]\r\n */\r\nexport function apartDateTimeCnDesc(datetime1, datetime2) {\r\n\treturn datetime1 && datetime2 ? secondsToCnDesc(apartSeconds(datetime1, datetime2)) : '';\r\n}\r\n\r\n/**\r\n * 将秒数转成[x天x时x分x秒]格式\r\n * @params {Int} seconds 秒数\r\n * @returns {String} [x天x时x分x秒]\r\n */\r\nexport function secondsToCnDesc(seconds) {\r\n\tif(seconds === 0 || seconds === '0') return '0秒';\r\n\tif(!seconds) return '';\r\n\tlet day = parseInt(seconds / (60 * 60 * 24));\r\n\tlet hour = parseInt((seconds % (60 * 60 * 24)) / (60 * 60));\r\n\tlet minute = parseInt(((seconds % (60 * 60 * 24)) % (60 * 60)) / 60);\r\n\tlet second = parseInt(((seconds % (60 * 60 * 24)) % (60 * 60)) % 60);\r\n\tlet desc = [];\r\n\tday > 0 && desc.push(day, '天');\r\n\thour > 0 && desc.push(hour, '时');\r\n\tminute > 0 && desc.push(minute, '分');\r\n\tsecond > 0 && desc.push(second, '秒');\r\n\treturn desc.join('');\r\n}\r\n\r\n/**\r\n * 将时间范围分割成每一天\r\n * 例：2019-12-23 00:00:00 ~ 2019-12-24 23:59:59或2019-12-23 ~ 2019-12-24\r\n * 分割为：[{sdate:2019-12-23 00:00:00,edate:2019-12-23 23:59:59},{sdate:2019-12-24 00:00:00,edate:2019-12-24 23:59:59}]\r\n * @params {String} startDate 开始时间\r\n * @params {String} endDate 结束时间\r\n * @returns {Array} [{sdate:yyyy-MM-dd hh:mm:ss,edate:yyyy-MM-dd hh:mm:ss}]\r\n */\r\nexport function splitDate(start, end) {\r\n\tlet sf = {10:'', 13:' 00', 16:' 00:00'}[start.length] || ' 00:00:00', ef = {10:'', 13:' 24', 16:' 24:00'}[start.length] || ' 23:59:59';\r\n\tlet sdate = parseDate(start.split(' ')[0]), stime = sdate.getTime(), etime = parseDate(end).getTime(), item = {sdate:start}, result = [], oneday = 24*60*60*1000;\r\n\twhile ((stime + oneday) < etime) {\r\n\t\tsdate.setTime(stime = stime + oneday - 1);\r\n\t\titem.edate = dateFormat(sdate,'YYYY-MM-DD') + ef;\r\n\t\tresult.push(item);\r\n\r\n\t\tsdate.setTime(stime = stime + 1);\r\n\t\titem = {sdate: dateFormat(sdate,'YYYY-MM-DD') + sf};\r\n\t}\r\n\titem.edate = end;\r\n\tresult.push(item);\r\n\treturn result;\r\n}\r\n"]}]}