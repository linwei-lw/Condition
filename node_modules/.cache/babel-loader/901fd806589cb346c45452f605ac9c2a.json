{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\cell\\src\\cell.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\cell\\src\\cell.js","mtime":1612227987094},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.function.name\";\nimport XEUtils from 'xe-utils/methods/xe-utils';\nimport GlobalConfig from \"../../conf\";\nimport VXETable from \"../../v-x-e-table\";\nimport { UtilTools } from \"../../tools\";\nexport var Cell = {\n  createColumn: function createColumn($xetable, _vm) {\n    var type = _vm.type,\n        sortable = _vm.sortable,\n        remoteSort = _vm.remoteSort,\n        filters = _vm.filters,\n        editRender = _vm.editRender,\n        treeNode = _vm.treeNode;\n    var editConfig = $xetable.editConfig,\n        editOpts = $xetable.editOpts,\n        checkboxOpts = $xetable.checkboxOpts;\n    var renMaps = {\n      renderHeader: this.renderDefaultHeader,\n      renderCell: treeNode ? this.renderTreeCell : this.renderDefaultCell,\n      renderFooter: this.renderDefaultFooter\n    };\n\n    switch (type) {\n      case 'seq':\n      case 'index':\n        renMaps.renderHeader = this.renderIndexHeader;\n        renMaps.renderCell = treeNode ? this.renderTreeIndexCell : this.renderIndexCell;\n        break;\n\n      case 'radio':\n        renMaps.renderHeader = this.renderRadioHeader;\n        renMaps.renderCell = treeNode ? this.renderTreeRadioCell : this.renderRadioCell;\n        break;\n      // 在 v3.0 中废弃 type=selection\n\n      case 'checkbox':\n      case 'selection':\n        renMaps.renderHeader = this.renderSelectionHeader;\n        renMaps.renderCell = checkboxOpts.checkField ? treeNode ? this.renderTreeSelectionCellByProp : this.renderSelectionCellByProp : treeNode ? this.renderTreeSelectionCell : this.renderSelectionCell;\n        break;\n\n      case 'expand':\n        renMaps.renderCell = this.renderExpandCell;\n        renMaps.renderData = this.renderExpandData;\n        break;\n\n      case 'html':\n        renMaps.renderCell = treeNode ? this.renderTreeHTMLCell : this.renderHTMLCell;\n\n        if (filters && (sortable || remoteSort)) {\n          renMaps.renderHeader = this.renderSortAndFilterHeader;\n        } else if (sortable || remoteSort) {\n          renMaps.renderHeader = this.renderSortHeader;\n        } else if (filters) {\n          renMaps.renderHeader = this.renderFilterHeader;\n        }\n\n        break;\n\n      default:\n        if (editConfig && editRender) {\n          renMaps.renderHeader = this.renderEditHeader;\n          renMaps.renderCell = editOpts.mode === 'cell' ? treeNode ? this.renderTreeCellEdit : this.renderCellEdit : treeNode ? this.renderTreeRowEdit : this.renderRowEdit;\n        } else if (filters && (sortable || remoteSort)) {\n          renMaps.renderHeader = this.renderSortAndFilterHeader;\n        } else if (sortable || remoteSort) {\n          renMaps.renderHeader = this.renderSortHeader;\n        } else if (filters) {\n          renMaps.renderHeader = this.renderFilterHeader;\n        }\n\n    }\n\n    return UtilTools.getColumnConfig($xetable, _vm, renMaps);\n  },\n\n  /**\r\n   * 单元格\r\n   */\n  renderDefaultHeader: function renderDefaultHeader(h, params) {\n    var $table = params.$table,\n        column = params.column;\n    var slots = column.slots,\n        own = column.own;\n    var renderOpts = own.editRender || own.cellRender;\n\n    if (slots && slots.header) {\n      return [h('span', {\n        class: 'vxe-cell--title'\n      }, slots.header.call($table, params, h))];\n    }\n\n    if (renderOpts) {\n      var compConf = VXETable.renderer.get(renderOpts.name);\n\n      if (compConf && compConf.renderHeader) {\n        return [h('span', {\n          class: 'vxe-cell--title'\n        }, compConf.renderHeader.call($table, h, renderOpts, params, {\n          $grid: $table.$xegrid,\n          $excel: $table.$parent,\n          $table: $table\n        }))];\n      }\n    }\n\n    return [h('span', {\n      class: 'vxe-cell--title'\n    }, UtilTools.formatText(column.getTitle(), 1))];\n  },\n  renderDefaultCell: function renderDefaultCell(h, params) {\n    var $table = params.$table,\n        row = params.row,\n        column = params.column;\n    var slots = column.slots,\n        own = column.own;\n    var renderOpts = own.editRender || own.cellRender;\n\n    if (slots && slots.default) {\n      return slots.default.call($table, params, h);\n    }\n\n    if (renderOpts) {\n      var funName = own.editRender ? 'renderCell' : 'renderDefault';\n      var compConf = VXETable.renderer.get(renderOpts.name);\n\n      if (compConf && compConf[funName]) {\n        return compConf[funName].call($table, h, renderOpts, Object.assign({\n          $type: own.editRender ? 'edit' : 'cell',\n          isEdit: !!own.editRender\n        }, params), {\n          $type: own.editRender ? 'edit' : 'cell',\n          $grid: $table.$xegrid,\n          $excel: $table.$parent,\n          $table: $table\n        });\n      }\n    }\n\n    return [UtilTools.formatText(UtilTools.getCellLabel(row, column, params), 1)];\n  },\n  renderTreeCell: function renderTreeCell(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderDefaultCell.call(this, h, params));\n  },\n  renderDefaultFooter: function renderDefaultFooter(h, params) {\n    var $table = params.$table,\n        column = params.column,\n        itemIndex = params.itemIndex,\n        items = params.items;\n    var slots = column.slots,\n        own = column.own;\n    var renderOpts = own.editRender || own.cellRender;\n\n    if (slots && slots.footer) {\n      return slots.footer.call($table, params, h);\n    }\n\n    if (renderOpts) {\n      var compConf = VXETable.renderer.get(renderOpts.name);\n\n      if (compConf && compConf.renderFooter) {\n        return compConf.renderFooter.call($table, h, renderOpts, params, {\n          $grid: $table.$xegrid,\n          $excel: $table.$parent,\n          $table: $table\n        });\n      }\n    }\n\n    return [UtilTools.formatText(items[itemIndex], 1)];\n  },\n\n  /**\r\n   * 树节点\r\n   */\n  renderTreeIcon: function renderTreeIcon(h, params, cellVNodes) {\n    var $table = params.$table,\n        isHidden = params.isHidden;\n    var treeOpts = $table.treeOpts,\n        treeExpandeds = $table.treeExpandeds,\n        treeLazyLoadeds = $table.treeLazyLoadeds;\n    var row = params.row,\n        column = params.column,\n        level = params.level;\n    var slots = column.slots;\n    var children = treeOpts.children,\n        hasChild = treeOpts.hasChild,\n        indent = treeOpts.indent,\n        lazy = treeOpts.lazy,\n        trigger = treeOpts.trigger,\n        iconLoaded = treeOpts.iconLoaded,\n        iconOpen = treeOpts.iconOpen,\n        iconClose = treeOpts.iconClose;\n    var rowChilds = row[children];\n    var hasLazyChilds = false;\n    var isAceived = false;\n    var isLazyLoaded = false;\n    var on = {};\n\n    if (slots && slots.icon) {\n      return slots.icon.call($table, params, h, cellVNodes);\n    }\n\n    if (!isHidden) {\n      isAceived = treeExpandeds.indexOf(row) > -1;\n\n      if (lazy) {\n        isLazyLoaded = treeLazyLoadeds.indexOf(row) > -1;\n        hasLazyChilds = row[hasChild];\n      }\n    }\n\n    if (!trigger || trigger === 'default') {\n      on.click = function (evnt) {\n        return $table.triggerTreeExpandEvent(evnt, params);\n      };\n    }\n\n    return [h('div', {\n      class: ['vxe-cell--tree-node', {\n        'is--active': isAceived\n      }],\n      style: {\n        paddingLeft: \"\".concat(level * indent, \"px\")\n      }\n    }, [rowChilds && rowChilds.length || hasLazyChilds ? [h('div', {\n      class: 'vxe-tree--btn-wrapper',\n      on: on\n    }, [h('i', {\n      class: ['vxe-tree--node-btn', isLazyLoaded ? iconLoaded || GlobalConfig.icon.treeLoaded : isAceived ? iconOpen || GlobalConfig.icon.treeOpen : iconClose || GlobalConfig.icon.treeClose]\n    })])] : null, h('div', {\n      class: 'vxe-tree-cell'\n    }, cellVNodes)])];\n  },\n\n  /**\r\n   * 索引\r\n   */\n  renderIndexHeader: function renderIndexHeader(h, params) {\n    var $table = params.$table,\n        column = params.column;\n    var slots = column.slots;\n    return [h('span', {\n      class: 'vxe-cell--title'\n    }, slots && slots.header ? slots.header.call($table, params, h) : UtilTools.formatText(column.getTitle(), 1))];\n  },\n  renderIndexCell: function renderIndexCell(h, params) {\n    var $table = params.$table,\n        column = params.column;\n    var seqOpts = $table.seqOpts,\n        startIndex = $table.startIndex;\n    var slots = column.slots;\n\n    if (slots && slots.default) {\n      return slots.default.call($table, params, h);\n    }\n\n    var $seq = params.$seq,\n        seq = params.seq,\n        level = params.level; // 在 v3.0 中废弃 startIndex、indexMethod\n\n    var seqMethod = seqOpts.seqMethod || column.seqMethod || column.indexMethod;\n    return [UtilTools.formatText(seqMethod ? seqMethod(params) : level ? \"\".concat($seq, \".\").concat(seq) : (seqOpts.startIndex || startIndex) + seq, 1)];\n  },\n  renderTreeIndexCell: function renderTreeIndexCell(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderIndexCell(h, params));\n  },\n\n  /**\r\n   * 单选\r\n   */\n  renderRadioHeader: function renderRadioHeader(h, params) {\n    var $table = params.$table,\n        column = params.column;\n    var slots = column.slots; // 在 v3.0 中废弃 label\n\n    return [h('span', {\n      class: 'vxe-cell--title'\n    }, slots && slots.header ? slots.header.call($table, params, h) : [h('span', {\n      class: 'vxe-radio--label'\n    }, UtilTools.formatText(column.getTitle(), 1))])];\n  },\n  renderRadioCell: function renderRadioCell(h, params) {\n    var $table = params.$table,\n        column = params.column,\n        isHidden = params.isHidden;\n    var radioOpts = $table.radioOpts,\n        selectRow = $table.selectRow;\n    var slots = column.slots;\n    var labelField = radioOpts.labelField,\n        checkMethod = radioOpts.checkMethod;\n    var row = params.row;\n    var isChecked = row === selectRow;\n    var isDisabled = !!checkMethod;\n    var on;\n\n    if (!isHidden) {\n      on = {\n        click: function click(evnt) {\n          if (!isDisabled) {\n            $table.triggerRadioRowEvent(evnt, params);\n          }\n        }\n      };\n\n      if (checkMethod) {\n        isDisabled = !checkMethod(params);\n      }\n    }\n\n    return [h('span', {\n      class: ['vxe-cell--radio', {\n        'is--checked': isChecked,\n        'is--disabled': isDisabled\n      }],\n      on: on\n    }, [h('span', {\n      class: 'vxe-radio--icon vxe-radio--checked-icon'\n    }), h('span', {\n      class: 'vxe-radio--icon vxe-radio--unchecked-icon'\n    })].concat(labelField ? slots && slots.default ? slots.default.call($table, params, h) : [h('span', {\n      class: 'vxe-radio--label'\n    }, XEUtils.get(row, labelField))] : []))];\n  },\n  renderTreeRadioCell: function renderTreeRadioCell(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderRadioCell(h, params));\n  },\n\n  /**\r\n   * 多选\r\n   */\n  renderSelectionHeader: function renderSelectionHeader(h, params) {\n    var $table = params.$table,\n        column = params.column,\n        isHidden = params.isHidden;\n    var isIndeterminate = $table.isIndeterminate,\n        isAllCheckboxDisabled = $table.isAllCheckboxDisabled;\n    var slots = column.slots,\n        own = column.own;\n    var checkboxOpts = $table.checkboxOpts; // 在 v3.0 中废弃 label\n\n    var headerTitle = own.title || own.label;\n    var isChecked = false;\n    var on;\n\n    if (checkboxOpts.checkStrictly ? !checkboxOpts.showHeader : checkboxOpts.showHeader === false) {\n      return [h('span', {\n        class: 'vxe-cell--title'\n      }, slots && slots.header ? slots.header.call($table, params, h) : [h('span', {\n        class: 'vxe-checkbox--label'\n      }, headerTitle)])];\n    }\n\n    if (!isHidden) {\n      isChecked = isAllCheckboxDisabled ? false : $table.isAllSelected;\n      on = {\n        click: function click(evnt) {\n          if (!isAllCheckboxDisabled) {\n            $table.triggerCheckAllEvent(evnt, !isChecked);\n          }\n        }\n      };\n    }\n\n    return [h('span', {\n      class: 'vxe-cell--title'\n    }, [h('span', {\n      class: ['vxe-cell--checkbox', {\n        'is--checked': isChecked,\n        'is--disabled': isAllCheckboxDisabled,\n        'is--indeterminate': isIndeterminate\n      }],\n      attrs: {\n        title: GlobalConfig.i18n('vxe.table.allTitle')\n      },\n      on: on\n    }, [h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--checked-icon'\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon'\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon'\n    })].concat(headerTitle ? slots && slots.header ? slots.header.call($table, params, h) : [h('span', {\n      class: 'vxe-checkbox--label'\n    }, headerTitle)] : []))])];\n  },\n  renderSelectionCell: function renderSelectionCell(h, params) {\n    var $table = params.$table,\n        row = params.row,\n        column = params.column,\n        isHidden = params.isHidden;\n    var treeConfig = $table.treeConfig,\n        treeIndeterminates = $table.treeIndeterminates;\n    var _$table$checkboxOpts = $table.checkboxOpts,\n        labelField = _$table$checkboxOpts.labelField,\n        checkMethod = _$table$checkboxOpts.checkMethod;\n    var slots = column.slots;\n    var indeterminate = false;\n    var isChecked = false;\n    var isDisabled = !!checkMethod;\n    var on;\n\n    if (!isHidden) {\n      isChecked = $table.selection.indexOf(row) > -1;\n      on = {\n        click: function click(evnt) {\n          if (!isDisabled) {\n            $table.triggerCheckRowEvent(evnt, params, !isChecked);\n          }\n        }\n      };\n\n      if (checkMethod) {\n        isDisabled = !checkMethod(params);\n      }\n\n      if (treeConfig) {\n        indeterminate = treeIndeterminates.indexOf(row) > -1;\n      }\n    }\n\n    return [h('span', {\n      class: ['vxe-cell--checkbox', {\n        'is--checked': isChecked,\n        'is--disabled': isDisabled,\n        'is--indeterminate': indeterminate\n      }],\n      on: on\n    }, [h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--checked-icon'\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon'\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon'\n    })].concat(labelField ? slots && slots.default ? slots.default.call($table, params, h) : [h('span', {\n      class: 'vxe-checkbox--label'\n    }, XEUtils.get(row, labelField))] : []))];\n  },\n  renderTreeSelectionCell: function renderTreeSelectionCell(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderSelectionCell(h, params));\n  },\n  renderSelectionCellByProp: function renderSelectionCellByProp(h, params) {\n    var $table = params.$table,\n        row = params.row,\n        column = params.column,\n        isHidden = params.isHidden;\n    var treeConfig = $table.treeConfig,\n        treeIndeterminates = $table.treeIndeterminates;\n    var _$table$checkboxOpts2 = $table.checkboxOpts,\n        labelField = _$table$checkboxOpts2.labelField,\n        property = _$table$checkboxOpts2.checkField,\n        checkMethod = _$table$checkboxOpts2.checkMethod;\n    var slots = column.slots;\n    var indeterminate = false;\n    var isChecked = false;\n    var isDisabled = !!checkMethod;\n    var on;\n\n    if (!isHidden) {\n      isChecked = XEUtils.get(row, property);\n      on = {\n        click: function click(evnt) {\n          if (!isDisabled) {\n            $table.triggerCheckRowEvent(evnt, params, !isChecked);\n          }\n        }\n      };\n\n      if (checkMethod) {\n        isDisabled = !checkMethod(params);\n      }\n\n      if (treeConfig) {\n        indeterminate = treeIndeterminates.indexOf(row) > -1;\n      }\n    }\n\n    return [h('span', {\n      class: ['vxe-cell--checkbox', {\n        'is--checked': isChecked,\n        'is--disabled': isDisabled,\n        'is--indeterminate': indeterminate\n      }],\n      on: on\n    }, [h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--checked-icon'\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon'\n    }), h('span', {\n      class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon'\n    })].concat(labelField ? slots && slots.default ? slots.default.call($table, params, h) : [h('span', {\n      class: 'vxe-checkbox--label'\n    }, XEUtils.get(row, labelField))] : []))];\n  },\n  renderTreeSelectionCellByProp: function renderTreeSelectionCellByProp(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderSelectionCellByProp(h, params));\n  },\n\n  /**\r\n   * 展开行\r\n   */\n  renderExpandCell: function renderExpandCell(h, params) {\n    var $table = params.$table,\n        isHidden = params.isHidden,\n        row = params.row,\n        column = params.column;\n    var expandOpts = $table.expandOpts,\n        rowExpandeds = $table.rowExpandeds,\n        expandLazyLoadeds = $table.expandLazyLoadeds;\n    var lazy = expandOpts.lazy,\n        labelField = expandOpts.labelField,\n        iconLoaded = expandOpts.iconLoaded,\n        iconOpen = expandOpts.iconOpen,\n        iconClose = expandOpts.iconClose,\n        visibleMethod = expandOpts.visibleMethod;\n    var slots = column.slots;\n    var isAceived = false;\n    var isLazyLoaded = false;\n\n    if (slots && slots.icon) {\n      return slots.icon.call($table, params, h);\n    }\n\n    if (!isHidden) {\n      isAceived = rowExpandeds.indexOf(params.row) > -1;\n\n      if (lazy) {\n        isLazyLoaded = expandLazyLoadeds.indexOf(row) > -1;\n      }\n    }\n\n    return [!visibleMethod || visibleMethod({\n      row: row\n    }) ? h('span', {\n      class: ['vxe-table--expanded', {\n        'is--active': isAceived\n      }],\n      on: {\n        click: function click(evnt) {\n          $table.triggerRowExpandEvent(evnt, params);\n        }\n      }\n    }, [h('i', {\n      class: ['vxe-table--expand-btn', isLazyLoaded ? iconLoaded || GlobalConfig.icon.treeLoaded : isAceived ? iconOpen || GlobalConfig.icon.expandOpen : iconClose || GlobalConfig.icon.expandClose]\n    })]) : null, h('span', {\n      class: 'vxe-table--expand-label'\n    }, slots && slots.default ? slots.default.call($table, params, h) : labelField ? XEUtils.get(row, labelField) : null)];\n  },\n  renderExpandData: function renderExpandData(h, params) {\n    var $table = params.$table,\n        column = params.column;\n    var slots = column.slots,\n        contentRender = column.contentRender;\n\n    if (slots) {\n      if (slots.content) {\n        return slots.content.call($table, params, h);\n      } // 在 v3.0 中严格支持 content\n\n\n      if (slots.default) {\n        return slots.default.call($table, params, h);\n      }\n    }\n\n    if (contentRender) {\n      var compConf = VXETable.renderer.get(contentRender.name);\n\n      if (compConf && compConf.renderExpand) {\n        return compConf.renderExpand.call($table, h, contentRender, params, {\n          $grid: $table.$xegrid,\n          $table: $table\n        });\n      }\n    }\n\n    return [];\n  },\n\n  /**\r\n   * HTML 标签\r\n   */\n  renderHTMLCell: function renderHTMLCell(h, params) {\n    var $table = params.$table,\n        row = params.row,\n        column = params.column;\n    var slots = column.slots;\n\n    if (slots && slots.default) {\n      return slots.default.call($table, params, h);\n    }\n\n    return [h('span', {\n      class: 'vxe-cell--html',\n      domProps: {\n        innerHTML: UtilTools.formatText(UtilTools.getCellLabel(row, column, params), 1)\n      }\n    })];\n  },\n  renderTreeHTMLCell: function renderTreeHTMLCell(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderHTMLCell(h, params));\n  },\n\n  /**\r\n   * 排序和筛选\r\n   */\n  renderSortAndFilterHeader: function renderSortAndFilterHeader(h, params) {\n    return Cell.renderDefaultHeader(h, params).concat(Cell.renderSortIcon(h, params)).concat(Cell.renderFilterIcon(h, params));\n  },\n\n  /**\r\n   * 排序\r\n   */\n  renderSortHeader: function renderSortHeader(h, params) {\n    return Cell.renderDefaultHeader(h, params).concat(Cell.renderSortIcon(h, params));\n  },\n  renderSortIcon: function renderSortIcon(h, params) {\n    var $table = params.$table,\n        column = params.column;\n    var _$table$sortOpts = $table.sortOpts,\n        showIcon = _$table$sortOpts.showIcon,\n        iconAsc = _$table$sortOpts.iconAsc,\n        iconDesc = _$table$sortOpts.iconDesc;\n    return showIcon === false ? [] : [h('span', {\n      class: 'vxe-cell--sort',\n      style: {\n        visibility: column.order === 'asc' || column.order === 'desc' ? 'visible' : ''\n      }\n    }, [h('i', {\n      class: ['vxe-sort--asc-btn', iconAsc || GlobalConfig.icon.sortAsc, {\n        'sort--active': column.order === 'asc'\n      }],\n      attrs: {\n        title: GlobalConfig.i18n('vxe.table.sortAsc')\n      },\n      on: {\n        click: function click(evnt) {\n          $table.triggerSortEvent(evnt, column, 'asc');\n        }\n      }\n    }), h('i', {\n      class: ['vxe-sort--desc-btn', iconDesc || GlobalConfig.icon.sortDesc, {\n        'sort--active': column.order === 'desc'\n      }],\n      attrs: {\n        title: GlobalConfig.i18n('vxe.table.sortDesc')\n      },\n      on: {\n        click: function click(evnt) {\n          $table.triggerSortEvent(evnt, column, 'desc');\n        }\n      }\n    })])];\n  },\n\n  /**\r\n   * 筛选\r\n   */\n  renderFilterHeader: function renderFilterHeader(h, params) {\n    return Cell.renderDefaultHeader(h, params).concat(Cell.renderFilterIcon(h, params));\n  },\n  renderFilterIcon: function renderFilterIcon(h, params) {\n    var $table = params.$table,\n        column = params.column,\n        hasFilter = params.hasFilter;\n    var filterStore = $table.filterStore,\n        filterOpts = $table.filterOpts;\n    var showIcon = filterOpts.showIcon,\n        iconNone = filterOpts.iconNone,\n        iconMatch = filterOpts.iconMatch;\n    return showIcon === false ? [] : [h('span', {\n      class: ['vxe-cell--filter', {\n        'is--active': filterStore.visible && filterStore.column === column\n      }]\n    }, [h('i', {\n      class: ['vxe-filter--btn', hasFilter ? iconMatch || GlobalConfig.icon.filterMatch : iconNone || GlobalConfig.icon.filterNone],\n      attrs: {\n        title: GlobalConfig.i18n('vxe.table.filter')\n      },\n      on: {\n        click: function click(evnt) {\n          $table.triggerFilterEvent(evnt, params.column, params);\n        }\n      }\n    })])];\n  },\n\n  /**\r\n   * 可编辑\r\n   */\n  renderEditHeader: function renderEditHeader(h, params) {\n    var $table = params.$table,\n        column = params.column;\n    var editRules = $table.editRules,\n        editOpts = $table.editOpts;\n    var sortable = column.sortable,\n        remoteSort = column.remoteSort,\n        filters = column.filters;\n    var isRequired;\n\n    if (editRules) {\n      var columnRules = XEUtils.get(editRules, params.column.property);\n\n      if (columnRules) {\n        isRequired = columnRules.some(function (rule) {\n          return rule.required;\n        });\n      }\n    }\n\n    return [isRequired ? h('i', {\n      class: 'vxe-required-icon'\n    }) : null, editOpts.showIcon === false ? null : h('i', {\n      class: ['vxe-edit-icon', editOpts.icon || GlobalConfig.icon.edit]\n    })].concat(Cell.renderDefaultHeader(h, params)).concat(sortable || remoteSort ? Cell.renderSortIcon(h, params) : []).concat(filters ? Cell.renderFilterIcon(h, params) : []);\n  },\n  // 行格编辑模式\n  renderRowEdit: function renderRowEdit(h, params) {\n    var $table = params.$table;\n    var actived = $table.editStore.actived;\n    return Cell.runRenderer(h, params, this, actived && actived.row === params.row);\n  },\n  renderTreeRowEdit: function renderTreeRowEdit(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderRowEdit(h, params));\n  },\n  // 单元格编辑模式\n  renderCellEdit: function renderCellEdit(h, params) {\n    var $table = params.$table;\n    var actived = $table.editStore.actived;\n    return Cell.runRenderer(h, params, this, actived && actived.row === params.row && actived.column === params.column);\n  },\n  renderTreeCellEdit: function renderTreeCellEdit(h, params) {\n    return Cell.renderTreeIcon(h, params, Cell.renderCellEdit(h, params));\n  },\n  runRenderer: function runRenderer(h, params, _vm, isEdit) {\n    var $table = params.$table,\n        row = params.row,\n        column = params.column;\n    var slots = column.slots,\n        own = column.own,\n        formatter = column.formatter;\n    var editRender = own.editRender;\n    var compConf = VXETable.renderer.get(editRender.name);\n\n    if (editRender.type === 'visible' || isEdit) {\n      if (slots && slots.edit) {\n        return slots.edit.call($table, params, h);\n      }\n\n      return compConf && compConf.renderEdit ? compConf.renderEdit.call($table, h, editRender, Object.assign({\n        $type: 'edit',\n        isEdit: true\n      }, params), {\n        $type: 'edit',\n        $grid: $table.$xegrid,\n        $excel: $table.$parent,\n        $table: $table\n      }) : [];\n    }\n\n    if (slots && slots.default) {\n      return slots.default.call($table, params, h);\n    }\n\n    if (formatter) {\n      return [UtilTools.formatText(UtilTools.getCellLabel(row, column, params), 1)];\n    }\n\n    return Cell.renderDefaultCell.call(_vm, h, params);\n  }\n};\nexport default Cell;",{"version":3,"sources":["D:\\cdRule\\src\\components\\Table\\cell\\src\\cell.js"],"names":["Cell","createColumn","type","sortable","remoteSort","filters","editRender","treeNode","_vm","editConfig","editOpts","checkboxOpts","$xetable","renMaps","renderHeader","renderCell","renderFooter","renderDefaultFooter","UtilTools","renderDefaultHeader","$table","column","params","slots","own","renderOpts","h","class","compConf","VXETable","$grid","$excel","renderDefaultCell","row","funName","$type","isEdit","renderTreeCell","itemIndex","items","renderTreeIcon","isHidden","treeOpts","treeExpandeds","treeLazyLoadeds","level","children","hasChild","indent","lazy","trigger","iconLoaded","iconOpen","iconClose","rowChilds","hasLazyChilds","isAceived","isLazyLoaded","on","style","paddingLeft","GlobalConfig","renderIndexHeader","renderIndexCell","seqOpts","startIndex","$seq","seq","seqMethod","renderTreeIndexCell","renderRadioHeader","renderRadioCell","radioOpts","selectRow","labelField","checkMethod","isChecked","isDisabled","click","XEUtils","renderTreeRadioCell","renderSelectionHeader","isIndeterminate","isAllCheckboxDisabled","headerTitle","attrs","title","renderSelectionCell","treeConfig","treeIndeterminates","indeterminate","renderTreeSelectionCell","renderSelectionCellByProp","property","renderTreeSelectionCellByProp","renderExpandCell","expandOpts","rowExpandeds","expandLazyLoadeds","visibleMethod","renderExpandData","contentRender","renderHTMLCell","domProps","innerHTML","renderTreeHTMLCell","renderSortAndFilterHeader","renderSortHeader","renderSortIcon","showIcon","iconAsc","iconDesc","visibility","renderFilterHeader","renderFilterIcon","hasFilter","filterStore","filterOpts","iconNone","iconMatch","renderEditHeader","editRules","columnRules","isRequired","rule","renderRowEdit","actived","renderTreeRowEdit","renderCellEdit","renderTreeCellEdit","runRenderer","formatter"],"mappings":";;AAAA,OAAA,OAAA,MAAA,2BAAA;AACA,OAAA,YAAA;AACA,OAAA,QAAA;AACA,SAAA,SAAA;AAEA,OAAO,IAAMA,IAAI,GAAG;AAClBC,EAAAA,YADkB,EAAA,SAAA,YAAA,CAAA,QAAA,EAAA,GAAA,EACW;AAAA,QACnBC,IADmB,GAC2CM,GAD3C,CAAA,IAAA;AAAA,QACbL,QADa,GAC2CK,GAD3C,CAAA,QAAA;AAAA,QACHJ,UADG,GAC2CI,GAD3C,CAAA,UAAA;AAAA,QACSH,OADT,GAC2CG,GAD3C,CAAA,OAAA;AAAA,QACkBF,UADlB,GAC2CE,GAD3C,CAAA,UAAA;AAAA,QAC8BD,QAD9B,GAC2CC,GAD3C,CAAA,QAAA;AAAA,QAEnBC,UAFmB,GAEoBG,QAFpB,CAAA,UAAA;AAAA,QAEPF,QAFO,GAEoBE,QAFpB,CAAA,QAAA;AAAA,QAEGD,YAFH,GAEoBC,QAFpB,CAAA,YAAA;AAG3B,QAAMC,OAAO,GAAG;AACdC,MAAAA,YAAY,EAAE,KADA,mBAAA;AAEdC,MAAAA,UAAU,EAAER,QAAQ,GAAG,KAAH,cAAA,GAAyB,KAF/B,iBAAA;AAGdS,MAAAA,YAAY,EAAE,KAAKC;AAHL,KAAhB;;AAKA,YAAA,IAAA;AACE,WAAA,KAAA;AACA,WAAA,OAAA;AACEJ,QAAAA,OAAO,CAAPA,YAAAA,GAAuB,KAAvBA,iBAAAA;AACAA,QAAAA,OAAO,CAAPA,UAAAA,GAAqBN,QAAQ,GAAG,KAAH,mBAAA,GAA8B,KAA3DM,eAAAA;AACA;;AACF,WAAA,OAAA;AACEA,QAAAA,OAAO,CAAPA,YAAAA,GAAuB,KAAvBA,iBAAAA;AACAA,QAAAA,OAAO,CAAPA,UAAAA,GAAqBN,QAAQ,GAAG,KAAH,mBAAA,GAA8B,KAA3DM,eAAAA;AACA;AACF;;AACA,WAAA,UAAA;AACA,WAAA,WAAA;AACEA,QAAAA,OAAO,CAAPA,YAAAA,GAAuB,KAAvBA,qBAAAA;AACAA,QAAAA,OAAO,CAAPA,UAAAA,GAAqBF,YAAY,CAAZA,UAAAA,GAA2BJ,QAAQ,GAAG,KAAH,6BAAA,GAAwC,KAA3EI,yBAAAA,GAA8GJ,QAAQ,GAAG,KAAH,uBAAA,GAAkC,KAA7KM,mBAAAA;AACA;;AACF,WAAA,QAAA;AACEA,QAAAA,OAAO,CAAPA,UAAAA,GAAqB,KAArBA,gBAAAA;AACAA,QAAAA,OAAO,CAAPA,UAAAA,GAAqB,KAArBA,gBAAAA;AACA;;AACF,WAAA,MAAA;AACEA,QAAAA,OAAO,CAAPA,UAAAA,GAAqBN,QAAQ,GAAG,KAAH,kBAAA,GAA6B,KAA1DM,cAAAA;;AACA,YAAIR,OAAO,KAAKF,QAAQ,IAAxB,UAAW,CAAX,EAAyC;AACvCU,UAAAA,OAAO,CAAPA,YAAAA,GAAuB,KAAvBA,yBAAAA;AADF,SAAA,MAEO,IAAIV,QAAQ,IAAZ,UAAA,EAA4B;AACjCU,UAAAA,OAAO,CAAPA,YAAAA,GAAuB,KAAvBA,gBAAAA;AADK,SAAA,MAEA,IAAA,OAAA,EAAa;AAClBA,UAAAA,OAAO,CAAPA,YAAAA,GAAuB,KAAvBA,kBAAAA;AACD;;AACD;;AACF;AACE,YAAIJ,UAAU,IAAd,UAAA,EAA8B;AAC5BI,UAAAA,OAAO,CAAPA,YAAAA,GAAuB,KAAvBA,gBAAAA;AACAA,UAAAA,OAAO,CAAPA,UAAAA,GAAqBH,QAAQ,CAARA,IAAAA,KAAAA,MAAAA,GAA4BH,QAAQ,GAAG,KAAH,kBAAA,GAA6B,KAAjEG,cAAAA,GAAyFH,QAAQ,GAAG,KAAH,iBAAA,GAA4B,KAAlJM,aAAAA;AAFF,SAAA,MAGO,IAAIR,OAAO,KAAKF,QAAQ,IAAxB,UAAW,CAAX,EAAyC;AAC9CU,UAAAA,OAAO,CAAPA,YAAAA,GAAuB,KAAvBA,yBAAAA;AADK,SAAA,MAEA,IAAIV,QAAQ,IAAZ,UAAA,EAA4B;AACjCU,UAAAA,OAAO,CAAPA,YAAAA,GAAuB,KAAvBA,gBAAAA;AADK,SAAA,MAEA,IAAA,OAAA,EAAa;AAClBA,UAAAA,OAAO,CAAPA,YAAAA,GAAuB,KAAvBA,kBAAAA;AACD;;AAxCL;;AA0CA,WAAOK,SAAS,CAATA,eAAAA,CAAAA,QAAAA,EAAAA,GAAAA,EAAP,OAAOA,CAAP;AAnDgB,GAAA;;AAqDlB;;;AAGAC,EAAAA,mBAxDkB,EAAA,SAAA,mBAAA,CAAA,CAAA,EAAA,MAAA,EAwDc;AAAA,QACtBC,MADsB,GACHE,MADG,CAAA,MAAA;AAAA,QACdD,MADc,GACHC,MADG,CAAA,MAAA;AAAA,QAEtBC,KAFsB,GAEPF,MAFO,CAAA,KAAA;AAAA,QAEfG,GAFe,GAEPH,MAFO,CAAA,GAAA;AAG9B,QAAMI,UAAU,GAAGD,GAAG,CAAHA,UAAAA,IAAkBA,GAAG,CAAxC,UAAA;;AACA,QAAID,KAAK,IAAIA,KAAK,CAAlB,MAAA,EAA2B;AACzB,aAAO,CACLG,CAAC,CAAA,MAAA,EAAS;AACRC,QAAAA,KAAK,EAAE;AADC,OAAT,EAEEJ,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAHL,CAGKA,CAFF,CADI,CAAP;AAKD;;AACD,QAAA,UAAA,EAAgB;AACd,UAAMK,QAAQ,GAAGC,QAAQ,CAARA,QAAAA,CAAAA,GAAAA,CAAsBJ,UAAU,CAAjD,IAAiBI,CAAjB;;AACA,UAAID,QAAQ,IAAIA,QAAQ,CAAxB,YAAA,EAAuC;AACrC,eAAO,CACLF,CAAC,CAAA,MAAA,EAAS;AACRC,UAAAA,KAAK,EAAE;AADC,SAAT,EAEE,QAAQ,CAAR,YAAA,CAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,UAAA,EAAA,MAAA,EAA0D;AAAEG,UAAAA,KAAK,EAAEV,MAAM,CAAf,OAAA;AAAyBW,UAAAA,MAAM,EAAEX,MAAM,CAAvC,OAAA;AAAiDA,UAAAA,MAAM,EAANA;AAAjD,SAA1D,CAFF,CADI,CAAP;AAKD;AACF;;AACD,WAAO,CACLM,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,EAEET,SAAS,CAATA,UAAAA,CAAqBG,MAAM,CAA3BH,QAAqBG,EAArBH,EAHL,CAGKA,CAFF,CADI,CAAP;AA7EgB,GAAA;AAmFlBc,EAAAA,iBAnFkB,EAAA,SAAA,iBAAA,CAAA,CAAA,EAAA,MAAA,EAmFY;AAAA,QACpBZ,MADoB,GACIE,MADJ,CAAA,MAAA;AAAA,QACZW,GADY,GACIX,MADJ,CAAA,GAAA;AAAA,QACPD,MADO,GACIC,MADJ,CAAA,MAAA;AAAA,QAEpBC,KAFoB,GAELF,MAFK,CAAA,KAAA;AAAA,QAEbG,GAFa,GAELH,MAFK,CAAA,GAAA;AAG5B,QAAMI,UAAU,GAAGD,GAAG,CAAHA,UAAAA,IAAkBA,GAAG,CAAxC,UAAA;;AACA,QAAID,KAAK,IAAIA,KAAK,CAAlB,OAAA,EAA4B;AAC1B,aAAOA,KAAK,CAALA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,CAAOA,CAAP;AACD;;AACD,QAAA,UAAA,EAAgB;AACd,UAAMW,OAAO,GAAGV,GAAG,CAAHA,UAAAA,GAAAA,YAAAA,GAAhB,eAAA;AACA,UAAMI,QAAQ,GAAGC,QAAQ,CAARA,QAAAA,CAAAA,GAAAA,CAAsBJ,UAAU,CAAjD,IAAiBI,CAAjB;;AACA,UAAID,QAAQ,IAAIA,QAAQ,CAAxB,OAAwB,CAAxB,EAAmC;AACjC,eAAO,QAAQ,CAAR,OAAQ,CAAR,CAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,UAAA,EAA8C,MAAM,CAAN,MAAA,CAAc;AAAEO,UAAAA,KAAK,EAAEX,GAAG,CAAHA,UAAAA,GAAAA,MAAAA,GAAT,MAAA;AAA2CY,UAAAA,MAAM,EAAE,CAAC,CAACZ,GAAG,CAAClB;AAAzD,SAAd,EAA9C,MAA8C,CAA9C,EAA4I;AAAE6B,UAAAA,KAAK,EAAEX,GAAG,CAAHA,UAAAA,GAAAA,MAAAA,GAAT,MAAA;AAA2CM,UAAAA,KAAK,EAAEV,MAAM,CAAxD,OAAA;AAAkEW,UAAAA,MAAM,EAAEX,MAAM,CAAhF,OAAA;AAA0FA,UAAAA,MAAM,EAANA;AAA1F,SAA5I,CAAP;AACD;AACF;;AACD,WAAO,CAACF,SAAS,CAATA,UAAAA,CAAqBA,SAAS,CAATA,YAAAA,CAAAA,GAAAA,EAAAA,MAAAA,EAArBA,MAAqBA,CAArBA,EAAR,CAAQA,CAAD,CAAP;AAjGgB,GAAA;AAmGlBmB,EAAAA,cAnGkB,EAAA,SAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAmGS;AACzB,WAAOrC,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAA+BA,IAAI,CAAJA,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAtC,MAAsCA,CAA/BA,CAAP;AApGgB,GAAA;AAsGlBiB,EAAAA,mBAtGkB,EAAA,SAAA,mBAAA,CAAA,CAAA,EAAA,MAAA,EAsGc;AAAA,QACtBG,MADsB,GACeE,MADf,CAAA,MAAA;AAAA,QACdD,MADc,GACeC,MADf,CAAA,MAAA;AAAA,QACNgB,SADM,GACehB,MADf,CAAA,SAAA;AAAA,QACKiB,KADL,GACejB,MADf,CAAA,KAAA;AAAA,QAEtBC,KAFsB,GAEPF,MAFO,CAAA,KAAA;AAAA,QAEfG,GAFe,GAEPH,MAFO,CAAA,GAAA;AAG9B,QAAMI,UAAU,GAAGD,GAAG,CAAHA,UAAAA,IAAkBA,GAAG,CAAxC,UAAA;;AACA,QAAID,KAAK,IAAIA,KAAK,CAAlB,MAAA,EAA2B;AACzB,aAAOA,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,CAAOA,CAAP;AACD;;AACD,QAAA,UAAA,EAAgB;AACd,UAAMK,QAAQ,GAAGC,QAAQ,CAARA,QAAAA,CAAAA,GAAAA,CAAsBJ,UAAU,CAAjD,IAAiBI,CAAjB;;AACA,UAAID,QAAQ,IAAIA,QAAQ,CAAxB,YAAA,EAAuC;AACrC,eAAO,QAAQ,CAAR,YAAA,CAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,UAAA,EAAA,MAAA,EAA0D;AAAEE,UAAAA,KAAK,EAAEV,MAAM,CAAf,OAAA;AAAyBW,UAAAA,MAAM,EAAEX,MAAM,CAAvC,OAAA;AAAiDA,UAAAA,MAAM,EAANA;AAAjD,SAA1D,CAAP;AACD;AACF;;AACD,WAAO,CAACF,SAAS,CAATA,UAAAA,CAAqBqB,KAAK,CAA1BrB,SAA0B,CAA1BA,EAAR,CAAQA,CAAD,CAAP;AAnHgB,GAAA;;AAsHlB;;;AAGAsB,EAAAA,cAzHkB,EAAA,SAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAAA,UAAA,EAyHqB;AAAA,QAC7BpB,MAD6B,GACRE,MADQ,CAAA,MAAA;AAAA,QACrBmB,QADqB,GACRnB,MADQ,CAAA,QAAA;AAAA,QAE7BoB,QAF6B,GAEgBtB,MAFhB,CAAA,QAAA;AAAA,QAEnBuB,aAFmB,GAEgBvB,MAFhB,CAAA,aAAA;AAAA,QAEJwB,eAFI,GAEgBxB,MAFhB,CAAA,eAAA;AAAA,QAG7Ba,GAH6B,GAGNX,MAHM,CAAA,GAAA;AAAA,QAGxBD,MAHwB,GAGNC,MAHM,CAAA,MAAA;AAAA,QAGhBuB,KAHgB,GAGNvB,MAHM,CAAA,KAAA;AAAA,QAI7BC,KAJ6B,GAInBF,MAJmB,CAAA,KAAA;AAAA,QAK7ByB,QAL6B,GAKkDJ,QALlD,CAAA,QAAA;AAAA,QAKnBK,QALmB,GAKkDL,QALlD,CAAA,QAAA;AAAA,QAKTM,MALS,GAKkDN,QALlD,CAAA,MAAA;AAAA,QAKDO,IALC,GAKkDP,QALlD,CAAA,IAAA;AAAA,QAKKQ,OALL,GAKkDR,QALlD,CAAA,OAAA;AAAA,QAKcS,UALd,GAKkDT,QALlD,CAAA,UAAA;AAAA,QAK0BU,QAL1B,GAKkDV,QALlD,CAAA,QAAA;AAAA,QAKoCW,SALpC,GAKkDX,QALlD,CAAA,SAAA;AAMrC,QAAMY,SAAS,GAAGrB,GAAG,CAArB,QAAqB,CAArB;AACA,QAAIsB,aAAa,GAAjB,KAAA;AACA,QAAIC,SAAS,GAAb,KAAA;AACA,QAAIC,YAAY,GAAhB,KAAA;AACA,QAAMC,EAAE,GAAR,EAAA;;AACA,QAAInC,KAAK,IAAIA,KAAK,CAAlB,IAAA,EAAyB;AACvB,aAAOA,KAAK,CAALA,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EAAP,UAAOA,CAAP;AACD;;AACD,QAAI,CAAJ,QAAA,EAAe;AACbiC,MAAAA,SAAS,GAAGb,aAAa,CAAbA,OAAAA,CAAAA,GAAAA,IAA6B,CAAzCa,CAAAA;;AACA,UAAA,IAAA,EAAU;AACRC,QAAAA,YAAY,GAAGb,eAAe,CAAfA,OAAAA,CAAAA,GAAAA,IAA+B,CAA9Ca,CAAAA;AACAF,QAAAA,aAAa,GAAGtB,GAAG,CAAnBsB,QAAmB,CAAnBA;AACD;AACF;;AACD,QAAI,CAAA,OAAA,IAAYL,OAAO,KAAvB,SAAA,EAAuC;AACrCQ,MAAAA,EAAE,CAAFA,KAAAA,GAAW,UAAA,IAAA,EAAI;AAAA,eAAItC,MAAM,CAANA,sBAAAA,CAAAA,IAAAA,EAAJ,MAAIA,CAAJ;AAAfsC,OAAAA;AACD;;AACD,WAAO,CACLhC,CAAC,CAAA,KAAA,EAAQ;AACPC,MAAAA,KAAK,EAAE,CAAA,qBAAA,EAAwB;AAC7B,sBAAc6B;AADe,OAAxB,CADA;AAIPG,MAAAA,KAAK,EAAE;AACLC,QAAAA,WAAW,EAAA,GAAA,MAAA,CAAKf,KAAK,GAAV,MAAA,EAAA,IAAA;AADN;AAJA,KAAR,EAOE,CACAS,SAAS,IAAIA,SAAS,CAAvB,MAACA,IAAD,aAACA,GAAkD,CACjD5B,CAAC,CAAA,KAAA,EAAQ;AACPC,MAAAA,KAAK,EADE,uBAAA;AAEP+B,MAAAA,EAAE,EAAFA;AAFO,KAAR,EAGE,CACDhC,CAAC,CAAA,GAAA,EAAM;AACLC,MAAAA,KAAK,EAAE,CAAA,oBAAA,EAAuB8B,YAAY,GAAIN,UAAU,IAAIU,YAAY,CAAZA,IAAAA,CAAlB,UAAA,GAAmDL,SAAS,GAAIJ,QAAQ,IAAIS,YAAY,CAAZA,IAAAA,CAAhB,QAAA,GAA+CR,SAAS,IAAIQ,YAAY,CAAZA,IAAAA,CAA3J,SAAA;AADF,KAAN,CADA,CAHF,CADgD,CAAlDP,GADA,IAAA,EAWD5B,CAAC,CAAA,KAAA,EAAQ;AACPC,MAAAA,KAAK,EAAE;AADA,KAAR,EAnBL,UAmBK,CAXA,CAPF,CADI,CAAP;AAjJgB,GAAA;;AA2KlB;;;AAGAmC,EAAAA,iBA9KkB,EAAA,SAAA,iBAAA,CAAA,CAAA,EAAA,MAAA,EA8KY;AAAA,QACpB1C,MADoB,GACDE,MADC,CAAA,MAAA;AAAA,QACZD,MADY,GACDC,MADC,CAAA,MAAA;AAAA,QAEpBC,KAFoB,GAEVF,MAFU,CAAA,KAAA;AAG5B,WAAO,CACLK,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,EAEEJ,KAAK,IAAIA,KAAK,CAAdA,MAAAA,GAAwBA,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAxBA,CAAwBA,CAAxBA,GAA+DL,SAAS,CAATA,UAAAA,CAAqBG,MAAM,CAA3BH,QAAqBG,EAArBH,EAHpE,CAGoEA,CAFjE,CADI,CAAP;AAjLgB,GAAA;AAuLlB6C,EAAAA,eAvLkB,EAAA,SAAA,eAAA,CAAA,CAAA,EAAA,MAAA,EAuLU;AAAA,QAClB3C,MADkB,GACCE,MADD,CAAA,MAAA;AAAA,QACVD,MADU,GACCC,MADD,CAAA,MAAA;AAAA,QAElB0C,OAFkB,GAEM5C,MAFN,CAAA,OAAA;AAAA,QAET6C,UAFS,GAEM7C,MAFN,CAAA,UAAA;AAAA,QAGlBG,KAHkB,GAGRF,MAHQ,CAAA,KAAA;;AAI1B,QAAIE,KAAK,IAAIA,KAAK,CAAlB,OAAA,EAA4B;AAC1B,aAAOA,KAAK,CAALA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,CAAOA,CAAP;AACD;;AANyB,QAOlB2C,IAPkB,GAOG5C,MAPH,CAAA,IAAA;AAAA,QAOZ6C,GAPY,GAOG7C,MAPH,CAAA,GAAA;AAAA,QAOPuB,KAPO,GAOGvB,MAPH,CAAA,KAAA,CAAA,CAQ1B;;AACA,QAAM8C,SAAS,GAAGJ,OAAO,CAAPA,SAAAA,IAAqB3C,MAAM,CAA3B2C,SAAAA,IAAyC3C,MAAM,CAAjE,WAAA;AACA,WAAO,CAACH,SAAS,CAATA,UAAAA,CAAqBkD,SAAS,GAAGA,SAAS,CAAZ,MAAY,CAAZ,GAAuBvB,KAAK,GAAA,GAAA,MAAA,CAAA,IAAA,EAAA,GAAA,EAAA,MAAA,CAAA,GAAA,CAAA,GAAsB,CAACmB,OAAO,CAAPA,UAAAA,IAAD,UAAA,IAAhF9C,GAAAA,EAAR,CAAQA,CAAD,CAAP;AAjMgB,GAAA;AAmMlBmD,EAAAA,mBAnMkB,EAAA,SAAA,mBAAA,CAAA,CAAA,EAAA,MAAA,EAmMc;AAC9B,WAAOrE,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAA+BA,IAAI,CAAJA,eAAAA,CAAAA,CAAAA,EAAtC,MAAsCA,CAA/BA,CAAP;AApMgB,GAAA;;AAuMlB;;;AAGAsE,EAAAA,iBA1MkB,EAAA,SAAA,iBAAA,CAAA,CAAA,EAAA,MAAA,EA0MY;AAAA,QACpBlD,MADoB,GACDE,MADC,CAAA,MAAA;AAAA,QACZD,MADY,GACDC,MADC,CAAA,MAAA;AAAA,QAEpBC,KAFoB,GAEVF,MAFU,CAAA,KAAA,CAAA,CAG5B;;AACA,WAAO,CACLK,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,EAEEJ,KAAK,IAAIA,KAAK,CAAdA,MAAAA,GAAwBA,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAxBA,CAAwBA,CAAxBA,GAA+D,CAChEG,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,EAEET,SAAS,CAATA,UAAAA,CAAqBG,MAAM,CAA3BH,QAAqBG,EAArBH,EANP,CAMOA,CAFF,CAD+D,CAFjE,CADI,CAAP;AA9MgB,GAAA;AAwNlBqD,EAAAA,eAxNkB,EAAA,SAAA,eAAA,CAAA,CAAA,EAAA,MAAA,EAwNU;AAAA,QAClBnD,MADkB,GACWE,MADX,CAAA,MAAA;AAAA,QACVD,MADU,GACWC,MADX,CAAA,MAAA;AAAA,QACFmB,QADE,GACWnB,MADX,CAAA,QAAA;AAAA,QAElBkD,SAFkB,GAEOpD,MAFP,CAAA,SAAA;AAAA,QAEPqD,SAFO,GAEOrD,MAFP,CAAA,SAAA;AAAA,QAGlBG,KAHkB,GAGRF,MAHQ,CAAA,KAAA;AAAA,QAIlBqD,UAJkB,GAIUF,SAJV,CAAA,UAAA;AAAA,QAING,WAJM,GAIUH,SAJV,CAAA,WAAA;AAAA,QAKlBvC,GALkB,GAKVX,MALU,CAAA,GAAA;AAM1B,QAAMsD,SAAS,GAAG3C,GAAG,KAArB,SAAA;AACA,QAAI4C,UAAU,GAAG,CAAC,CAAlB,WAAA;AACA,QAAA,EAAA;;AACA,QAAI,CAAJ,QAAA,EAAe;AACbnB,MAAAA,EAAE,GAAG;AACHoB,QAAAA,KADG,EAAA,SAAA,KAAA,CAAA,IAAA,EACU;AACX,cAAI,CAAJ,UAAA,EAAiB;AACf1D,YAAAA,MAAM,CAANA,oBAAAA,CAAAA,IAAAA,EAAAA,MAAAA;AACD;AACF;AALE,OAALsC;;AAOA,UAAA,WAAA,EAAiB;AACfmB,QAAAA,UAAU,GAAG,CAACF,WAAW,CAAzBE,MAAyB,CAAzBA;AACD;AACF;;AACD,WAAO,CACLnD,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE,CAAA,iBAAA,EAAoB;AACzB,uBADyB,SAAA;AAEzB,wBAAgBkD;AAFS,OAApB,CADC;AAKRnB,MAAAA,EAAE,EAAFA;AALQ,KAAT,EAME,CACDhC,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CADA,EAIDD,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CAJA,EAAA,MAAA,CAOM+C,UAAU,GAAInD,KAAK,IAAIA,KAAK,CAAdA,OAAAA,GAAyBA,KAAK,CAALA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAzBA,CAAyBA,CAAzBA,GAAiE,CACtFG,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,EAEEoD,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,EAHc,UAGdA,CAFF,CADqF,CAArE,GAdrB,EAOK,CANF,CADI,CAAP;AA7OgB,GAAA;AAkQlBC,EAAAA,mBAlQkB,EAAA,SAAA,mBAAA,CAAA,CAAA,EAAA,MAAA,EAkQc;AAC9B,WAAOhF,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAA+BA,IAAI,CAAJA,eAAAA,CAAAA,CAAAA,EAAtC,MAAsCA,CAA/BA,CAAP;AAnQgB,GAAA;;AAsQlB;;;AAGAiF,EAAAA,qBAzQkB,EAAA,SAAA,qBAAA,CAAA,CAAA,EAAA,MAAA,EAyQgB;AAAA,QACxB7D,MADwB,GACKE,MADL,CAAA,MAAA;AAAA,QAChBD,MADgB,GACKC,MADL,CAAA,MAAA;AAAA,QACRmB,QADQ,GACKnB,MADL,CAAA,QAAA;AAAA,QAExB4D,eAFwB,GAEmB9D,MAFnB,CAAA,eAAA;AAAA,QAEP+D,qBAFO,GAEmB/D,MAFnB,CAAA,qBAAA;AAAA,QAGxBG,KAHwB,GAGTF,MAHS,CAAA,KAAA;AAAA,QAGjBG,GAHiB,GAGTH,MAHS,CAAA,GAAA;AAIhC,QAAMV,YAAY,GAAGS,MAAM,CAJK,YAIhC,CAJgC,CAKhC;;AACA,QAAMgE,WAAW,GAAG5D,GAAG,CAAHA,KAAAA,IAAaA,GAAG,CAApC,KAAA;AACA,QAAIoD,SAAS,GAAb,KAAA;AACA,QAAA,EAAA;;AACA,QAAIjE,YAAY,CAAZA,aAAAA,GAA6B,CAACA,YAAY,CAA1CA,UAAAA,GAAwDA,YAAY,CAAZA,UAAAA,KAA5D,KAAA,EAA+F;AAC7F,aAAO,CACLe,CAAC,CAAA,MAAA,EAAS;AACRC,QAAAA,KAAK,EAAE;AADC,OAAT,EAEEJ,KAAK,IAAIA,KAAK,CAAdA,MAAAA,GAAwBA,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAxBA,CAAwBA,CAAxBA,GAA+D,CAChEG,CAAC,CAAA,MAAA,EAAS;AACRC,QAAAA,KAAK,EAAE;AADC,OAAT,EAJL,WAIK,CAD+D,CAFjE,CADI,CAAP;AASD;;AACD,QAAI,CAAJ,QAAA,EAAe;AACbiD,MAAAA,SAAS,GAAGO,qBAAqB,GAAA,KAAA,GAAW/D,MAAM,CAAlDwD,aAAAA;AACAlB,MAAAA,EAAE,GAAG;AACHoB,QAAAA,KADG,EAAA,SAAA,KAAA,CAAA,IAAA,EACU;AACX,cAAI,CAAJ,qBAAA,EAA4B;AAC1B1D,YAAAA,MAAM,CAANA,oBAAAA,CAAAA,IAAAA,EAAkC,CAAlCA,SAAAA;AACD;AACF;AALE,OAALsC;AAOD;;AACD,WAAO,CACLhC,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,EAEE,CACDD,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE,CAAA,oBAAA,EAAuB;AAC5B,uBAD4B,SAAA;AAE5B,wBAF4B,qBAAA;AAG5B,6BAAqBuD;AAHO,OAAvB,CADC;AAMRG,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEzB,YAAY,CAAZA,IAAAA,CAAAA,oBAAAA;AADF,OANC;AASRH,MAAAA,EAAE,EAAFA;AATQ,KAAT,EAUE,CACDhC,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CADA,EAIDD,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CAJA,EAODD,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CAPA,EAAA,MAAA,CAUMyD,WAAW,GAAI7D,KAAK,IAAIA,KAAK,CAAdA,MAAAA,GAAwBA,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAxBA,CAAwBA,CAAxBA,GAA+D,CACrFG,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,EADiB,WACjB,CADoF,CAAnE,GAxBxB,EAcO,CAVF,CADA,CAFF,CADI,CAAP;AAvSgB,GAAA;AAuUlB4D,EAAAA,mBAvUkB,EAAA,SAAA,mBAAA,CAAA,CAAA,EAAA,MAAA,EAuUc;AAAA,QACtBnE,MADsB,GACYE,MADZ,CAAA,MAAA;AAAA,QACdW,GADc,GACYX,MADZ,CAAA,GAAA;AAAA,QACTD,MADS,GACYC,MADZ,CAAA,MAAA;AAAA,QACDmB,QADC,GACYnB,MADZ,CAAA,QAAA;AAAA,QAEtBkE,UAFsB,GAEapE,MAFb,CAAA,UAAA;AAAA,QAEVqE,kBAFU,GAEarE,MAFb,CAAA,kBAAA;AAAA,QAAA,oBAAA,GAGMA,MAAM,CAHZ,YAAA;AAAA,QAGtBsD,UAHsB,GAAA,oBAAA,CAAA,UAAA;AAAA,QAGVC,WAHU,GAAA,oBAAA,CAAA,WAAA;AAAA,QAItBpD,KAJsB,GAIZF,MAJY,CAAA,KAAA;AAK9B,QAAIqE,aAAa,GAAjB,KAAA;AACA,QAAId,SAAS,GAAb,KAAA;AACA,QAAIC,UAAU,GAAG,CAAC,CAAlB,WAAA;AACA,QAAA,EAAA;;AACA,QAAI,CAAJ,QAAA,EAAe;AACbD,MAAAA,SAAS,GAAGxD,MAAM,CAANA,SAAAA,CAAAA,OAAAA,CAAAA,GAAAA,IAAgC,CAA5CwD,CAAAA;AACAlB,MAAAA,EAAE,GAAG;AACHoB,QAAAA,KADG,EAAA,SAAA,KAAA,CAAA,IAAA,EACU;AACX,cAAI,CAAJ,UAAA,EAAiB;AACf1D,YAAAA,MAAM,CAANA,oBAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAA0C,CAA1CA,SAAAA;AACD;AACF;AALE,OAALsC;;AAOA,UAAA,WAAA,EAAiB;AACfmB,QAAAA,UAAU,GAAG,CAACF,WAAW,CAAzBE,MAAyB,CAAzBA;AACD;;AACD,UAAA,UAAA,EAAgB;AACda,QAAAA,aAAa,GAAGD,kBAAkB,CAAlBA,OAAAA,CAAAA,GAAAA,IAAkC,CAAlDC,CAAAA;AACD;AACF;;AACD,WAAO,CACLhE,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE,CAAA,oBAAA,EAAuB;AAC5B,uBAD4B,SAAA;AAE5B,wBAF4B,UAAA;AAG5B,6BAAqB+D;AAHO,OAAvB,CADC;AAMRhC,MAAAA,EAAE,EAAFA;AANQ,KAAT,EAOE,CACDhC,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CADA,EAIDD,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CAJA,EAODD,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CAPA,EAAA,MAAA,CAUM+C,UAAU,GAAInD,KAAK,IAAIA,KAAK,CAAdA,OAAAA,GAAyBA,KAAK,CAALA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAzBA,CAAyBA,CAAzBA,GAAiE,CACtFG,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,EAEEoD,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,EAHc,UAGdA,CAFF,CADqF,CAArE,GAlBrB,EAQK,CAPF,CADI,CAAP;AAhWgB,GAAA;AAyXlBY,EAAAA,uBAzXkB,EAAA,SAAA,uBAAA,CAAA,CAAA,EAAA,MAAA,EAyXkB;AAClC,WAAO3F,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAA+BA,IAAI,CAAJA,mBAAAA,CAAAA,CAAAA,EAAtC,MAAsCA,CAA/BA,CAAP;AA1XgB,GAAA;AA4XlB4F,EAAAA,yBA5XkB,EAAA,SAAA,yBAAA,CAAA,CAAA,EAAA,MAAA,EA4XoB;AAAA,QAC5BxE,MAD4B,GACME,MADN,CAAA,MAAA;AAAA,QACpBW,GADoB,GACMX,MADN,CAAA,GAAA;AAAA,QACfD,MADe,GACMC,MADN,CAAA,MAAA;AAAA,QACPmB,QADO,GACMnB,MADN,CAAA,QAAA;AAAA,QAE5BkE,UAF4B,GAEOpE,MAFP,CAAA,UAAA;AAAA,QAEhBqE,kBAFgB,GAEOrE,MAFP,CAAA,kBAAA;AAAA,QAAA,qBAAA,GAGsBA,MAAM,CAH5B,YAAA;AAAA,QAG5BsD,UAH4B,GAAA,qBAAA,CAAA,UAAA;AAAA,QAGJmB,QAHI,GAAA,qBAAA,CAAA,UAAA;AAAA,QAGMlB,WAHN,GAAA,qBAAA,CAAA,WAAA;AAAA,QAI5BpD,KAJ4B,GAIlBF,MAJkB,CAAA,KAAA;AAKpC,QAAIqE,aAAa,GAAjB,KAAA;AACA,QAAId,SAAS,GAAb,KAAA;AACA,QAAIC,UAAU,GAAG,CAAC,CAAlB,WAAA;AACA,QAAA,EAAA;;AACA,QAAI,CAAJ,QAAA,EAAe;AACbD,MAAAA,SAAS,GAAGG,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,EAAZH,QAAYG,CAAZH;AACAlB,MAAAA,EAAE,GAAG;AACHoB,QAAAA,KADG,EAAA,SAAA,KAAA,CAAA,IAAA,EACU;AACX,cAAI,CAAJ,UAAA,EAAiB;AACf1D,YAAAA,MAAM,CAANA,oBAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAA0C,CAA1CA,SAAAA;AACD;AACF;AALE,OAALsC;;AAOA,UAAA,WAAA,EAAiB;AACfmB,QAAAA,UAAU,GAAG,CAACF,WAAW,CAAzBE,MAAyB,CAAzBA;AACD;;AACD,UAAA,UAAA,EAAgB;AACda,QAAAA,aAAa,GAAGD,kBAAkB,CAAlBA,OAAAA,CAAAA,GAAAA,IAAkC,CAAlDC,CAAAA;AACD;AACF;;AACD,WAAO,CACLhE,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE,CAAA,oBAAA,EAAuB;AAC5B,uBAD4B,SAAA;AAE5B,wBAF4B,UAAA;AAG5B,6BAAqB+D;AAHO,OAAvB,CADC;AAMRhC,MAAAA,EAAE,EAAFA;AANQ,KAAT,EAOE,CACDhC,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CADA,EAIDD,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CAJA,EAODD,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,CAPA,EAAA,MAAA,CAUM+C,UAAU,GAAInD,KAAK,IAAIA,KAAK,CAAdA,OAAAA,GAAyBA,KAAK,CAALA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAzBA,CAAyBA,CAAzBA,GAAiE,CACtFG,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,EAEEoD,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,EAHc,UAGdA,CAFF,CADqF,CAArE,GAlBrB,EAQK,CAPF,CADI,CAAP;AArZgB,GAAA;AA8alBe,EAAAA,6BA9akB,EAAA,SAAA,6BAAA,CAAA,CAAA,EAAA,MAAA,EA8awB;AACxC,WAAO9F,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAA+BA,IAAI,CAAJA,yBAAAA,CAAAA,CAAAA,EAAtC,MAAsCA,CAA/BA,CAAP;AA/agB,GAAA;;AAkblB;;;AAGA+F,EAAAA,gBArbkB,EAAA,SAAA,gBAAA,CAAA,CAAA,EAAA,MAAA,EAqbW;AAAA,QACnB3E,MADmB,GACeE,MADf,CAAA,MAAA;AAAA,QACXmB,QADW,GACenB,MADf,CAAA,QAAA;AAAA,QACDW,GADC,GACeX,MADf,CAAA,GAAA;AAAA,QACID,MADJ,GACeC,MADf,CAAA,MAAA;AAAA,QAEnB0E,UAFmB,GAE6B5E,MAF7B,CAAA,UAAA;AAAA,QAEP6E,YAFO,GAE6B7E,MAF7B,CAAA,YAAA;AAAA,QAEO8E,iBAFP,GAE6B9E,MAF7B,CAAA,iBAAA;AAAA,QAGnB6B,IAHmB,GAGkD+C,UAHlD,CAAA,IAAA;AAAA,QAGbtB,UAHa,GAGkDsB,UAHlD,CAAA,UAAA;AAAA,QAGD7C,UAHC,GAGkD6C,UAHlD,CAAA,UAAA;AAAA,QAGW5C,QAHX,GAGkD4C,UAHlD,CAAA,QAAA;AAAA,QAGqB3C,SAHrB,GAGkD2C,UAHlD,CAAA,SAAA;AAAA,QAGgCG,aAHhC,GAGkDH,UAHlD,CAAA,aAAA;AAAA,QAInBzE,KAJmB,GAITF,MAJS,CAAA,KAAA;AAK3B,QAAImC,SAAS,GAAb,KAAA;AACA,QAAIC,YAAY,GAAhB,KAAA;;AACA,QAAIlC,KAAK,IAAIA,KAAK,CAAlB,IAAA,EAAyB;AACvB,aAAOA,KAAK,CAALA,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,CAAOA,CAAP;AACD;;AACD,QAAI,CAAJ,QAAA,EAAe;AACbiC,MAAAA,SAAS,GAAGyC,YAAY,CAAZA,OAAAA,CAAqB3E,MAAM,CAA3B2E,GAAAA,IAAmC,CAA/CzC,CAAAA;;AACA,UAAA,IAAA,EAAU;AACRC,QAAAA,YAAY,GAAGyC,iBAAiB,CAAjBA,OAAAA,CAAAA,GAAAA,IAAiC,CAAhDzC,CAAAA;AACD;AACF;;AACD,WAAO,CACL,CAAA,aAAA,IAAkB0C,aAAa,CAAC;AAAElE,MAAAA,GAAG,EAAHA;AAAF,KAAD,CAA/B,GAA2CP,CAAC,CAAA,MAAA,EAAS;AACnDC,MAAAA,KAAK,EAAE,CAAA,qBAAA,EAAwB;AAC7B,sBAAc6B;AADe,OAAxB,CAD4C;AAInDE,MAAAA,EAAE,EAAE;AACFoB,QAAAA,KADE,EAAA,SAAA,KAAA,CAAA,IAAA,EACW;AACX1D,UAAAA,MAAM,CAANA,qBAAAA,CAAAA,IAAAA,EAAAA,MAAAA;AACD;AAHC;AAJ+C,KAAT,EASzC,CACDM,CAAC,CAAA,GAAA,EAAM;AACLC,MAAAA,KAAK,EAAE,CAAA,uBAAA,EAA0B8B,YAAY,GAAIN,UAAU,IAAIU,YAAY,CAAZA,IAAAA,CAAlB,UAAA,GAAmDL,SAAS,GAAIJ,QAAQ,IAAIS,YAAY,CAAZA,IAAAA,CAAhB,UAAA,GAAiDR,SAAS,IAAIQ,YAAY,CAAZA,IAAAA,CAAhK,WAAA;AADF,KAAN,CADA,CATyC,CAA5C,GADK,IAAA,EAeLnC,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE;AADC,KAAT,EAEEJ,KAAK,IAAIA,KAAK,CAAdA,OAAAA,GAAyBA,KAAK,CAALA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAzBA,CAAyBA,CAAzBA,GAAkEmD,UAAU,GAAGK,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,EAAH,UAAGA,CAAH,GAjBjF,IAeG,CAfI,CAAP;AArcgB,GAAA;AAydlBqB,EAAAA,gBAzdkB,EAAA,SAAA,gBAAA,CAAA,CAAA,EAAA,MAAA,EAydW;AAAA,QACnBhF,MADmB,GACAE,MADA,CAAA,MAAA;AAAA,QACXD,MADW,GACAC,MADA,CAAA,MAAA;AAAA,QAEnBC,KAFmB,GAEMF,MAFN,CAAA,KAAA;AAAA,QAEZgF,aAFY,GAEMhF,MAFN,CAAA,aAAA;;AAG3B,QAAA,KAAA,EAAW;AACT,UAAIE,KAAK,CAAT,OAAA,EAAmB;AACjB,eAAOA,KAAK,CAALA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,CAAOA,CAAP;AAFO,OAAA,CAIT;;;AACA,UAAIA,KAAK,CAAT,OAAA,EAAmB;AACjB,eAAOA,KAAK,CAALA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,CAAOA,CAAP;AACD;AACF;;AACD,QAAA,aAAA,EAAmB;AACjB,UAAMK,QAAQ,GAAGC,QAAQ,CAARA,QAAAA,CAAAA,GAAAA,CAAsBwE,aAAa,CAApD,IAAiBxE,CAAjB;;AACA,UAAID,QAAQ,IAAIA,QAAQ,CAAxB,YAAA,EAAuC;AACrC,eAAO,QAAQ,CAAR,YAAA,CAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,aAAA,EAAA,MAAA,EAA6D;AAAEE,UAAAA,KAAK,EAAEV,MAAM,CAAf,OAAA;AAAyBA,UAAAA,MAAM,EAANA;AAAzB,SAA7D,CAAP;AACD;AACF;;AACD,WAAA,EAAA;AA3egB,GAAA;;AA8elB;;;AAGAkF,EAAAA,cAjfkB,EAAA,SAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAifS;AAAA,QACjBlF,MADiB,GACOE,MADP,CAAA,MAAA;AAAA,QACTW,GADS,GACOX,MADP,CAAA,GAAA;AAAA,QACJD,MADI,GACOC,MADP,CAAA,MAAA;AAAA,QAEjBC,KAFiB,GAEPF,MAFO,CAAA,KAAA;;AAGzB,QAAIE,KAAK,IAAIA,KAAK,CAAlB,OAAA,EAA4B;AAC1B,aAAOA,KAAK,CAALA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,CAAOA,CAAP;AACD;;AACD,WAAO,CACLG,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EADG,gBAAA;AAER4E,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAEtF,SAAS,CAATA,UAAAA,CAAqBA,SAAS,CAATA,YAAAA,CAAAA,GAAAA,EAAAA,MAAAA,EAArBA,MAAqBA,CAArBA,EAAAA,CAAAA;AADH;AAFF,KAAT,CADI,CAAP;AAvfgB,GAAA;AAggBlBuF,EAAAA,kBAhgBkB,EAAA,SAAA,kBAAA,CAAA,CAAA,EAAA,MAAA,EAggBa;AAC7B,WAAOzG,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAA+BA,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAtC,MAAsCA,CAA/BA,CAAP;AAjgBgB,GAAA;;AAogBlB;;;AAGA0G,EAAAA,yBAvgBkB,EAAA,SAAA,yBAAA,CAAA,CAAA,EAAA,MAAA,EAugBoB;AACpC,WAAO1G,IAAI,CAAJA,mBAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA,MAAAA,CACGA,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EADHA,MACGA,CADHA,EAAAA,MAAAA,CAEGA,IAAI,CAAJA,gBAAAA,CAAAA,CAAAA,EAFV,MAEUA,CAFHA,CAAP;AAxgBgB,GAAA;;AA6gBlB;;;AAGA2G,EAAAA,gBAhhBkB,EAAA,SAAA,gBAAA,CAAA,CAAA,EAAA,MAAA,EAghBW;AAC3B,WAAO3G,IAAI,CAAJA,mBAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA,MAAAA,CAA2CA,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAlD,MAAkDA,CAA3CA,CAAP;AAjhBgB,GAAA;AAmhBlB4G,EAAAA,cAnhBkB,EAAA,SAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAmhBS;AAAA,QACjBxF,MADiB,GACEE,MADF,CAAA,MAAA;AAAA,QACTD,MADS,GACEC,MADF,CAAA,MAAA;AAAA,QAAA,gBAAA,GAEeF,MAAM,CAFrB,QAAA;AAAA,QAEjByF,QAFiB,GAAA,gBAAA,CAAA,QAAA;AAAA,QAEPC,OAFO,GAAA,gBAAA,CAAA,OAAA;AAAA,QAEEC,QAFF,GAAA,gBAAA,CAAA,QAAA;AAGzB,WAAOF,QAAQ,KAARA,KAAAA,GAAAA,EAAAA,GAA0B,CAC/BnF,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EADG,gBAAA;AAERgC,MAAAA,KAAK,EAAE;AAACqD,QAAAA,UAAU,EAAE3F,MAAM,CAANA,KAAAA,KAAAA,KAAAA,IAA0BA,MAAM,CAANA,KAAAA,KAA1BA,MAAAA,GAAAA,SAAAA,GAAgE;AAA7E;AAFC,KAAT,EAGE,CACDK,CAAC,CAAA,GAAA,EAAM;AACLC,MAAAA,KAAK,EAAE,CAAA,mBAAA,EAAsBmF,OAAO,IAAIjD,YAAY,CAAZA,IAAAA,CAAjC,OAAA,EAA4D;AACjE,wBAAgBxC,MAAM,CAANA,KAAAA,KAAiB;AADgC,OAA5D,CADF;AAILgE,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEzB,YAAY,CAAZA,IAAAA,CAAAA,mBAAAA;AADF,OAJF;AAOLH,MAAAA,EAAE,EAAE;AACFoB,QAAAA,KADE,EAAA,SAAA,KAAA,CAAA,IAAA,EACW;AACX1D,UAAAA,MAAM,CAANA,gBAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAAA,KAAAA;AACD;AAHC;AAPC,KAAN,CADA,EAcDM,CAAC,CAAA,GAAA,EAAM;AACLC,MAAAA,KAAK,EAAE,CAAA,oBAAA,EAAuBoF,QAAQ,IAAIlD,YAAY,CAAZA,IAAAA,CAAnC,QAAA,EAA+D;AACpE,wBAAgBxC,MAAM,CAANA,KAAAA,KAAiB;AADmC,OAA/D,CADF;AAILgE,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEzB,YAAY,CAAZA,IAAAA,CAAAA,oBAAAA;AADF,OAJF;AAOLH,MAAAA,EAAE,EAAE;AACFoB,QAAAA,KADE,EAAA,SAAA,KAAA,CAAA,IAAA,EACW;AACX1D,UAAAA,MAAM,CAANA,gBAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAAA,MAAAA;AACD;AAHC;AAPC,KAAN,CAdA,CAHF,CAD8B,CAAjC;AAthBgB,GAAA;;AAyjBlB;;;AAGA6F,EAAAA,kBA5jBkB,EAAA,SAAA,kBAAA,CAAA,CAAA,EAAA,MAAA,EA4jBa;AAC7B,WAAOjH,IAAI,CAAJA,mBAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA,MAAAA,CAA2CA,IAAI,CAAJA,gBAAAA,CAAAA,CAAAA,EAAlD,MAAkDA,CAA3CA,CAAP;AA7jBgB,GAAA;AA+jBlBkH,EAAAA,gBA/jBkB,EAAA,SAAA,gBAAA,CAAA,CAAA,EAAA,MAAA,EA+jBW;AAAA,QACnB9F,MADmB,GACWE,MADX,CAAA,MAAA;AAAA,QACXD,MADW,GACWC,MADX,CAAA,MAAA;AAAA,QACH6F,SADG,GACW7F,MADX,CAAA,SAAA;AAAA,QAEnB8F,WAFmB,GAEShG,MAFT,CAAA,WAAA;AAAA,QAENiG,UAFM,GAESjG,MAFT,CAAA,UAAA;AAAA,QAGnByF,QAHmB,GAGeQ,UAHf,CAAA,QAAA;AAAA,QAGTC,QAHS,GAGeD,UAHf,CAAA,QAAA;AAAA,QAGCE,SAHD,GAGeF,UAHf,CAAA,SAAA;AAI3B,WAAOR,QAAQ,KAARA,KAAAA,GAAAA,EAAAA,GAA0B,CAC/BnF,CAAC,CAAA,MAAA,EAAS;AACRC,MAAAA,KAAK,EAAE,CAAA,kBAAA,EAAqB;AAC1B,sBAAcyF,WAAW,CAAXA,OAAAA,IAAuBA,WAAW,CAAXA,MAAAA,KAAuB/F;AADlC,OAArB;AADC,KAAT,EAIE,CACDK,CAAC,CAAA,GAAA,EAAM;AACLC,MAAAA,KAAK,EAAE,CAAA,iBAAA,EAAoBwF,SAAS,GAAII,SAAS,IAAI1D,YAAY,CAAZA,IAAAA,CAAjB,WAAA,GAAmDyD,QAAQ,IAAIzD,YAAY,CAAZA,IAAAA,CAD9F,UACE,CADF;AAELwB,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEzB,YAAY,CAAZA,IAAAA,CAAAA,kBAAAA;AADF,OAFF;AAKLH,MAAAA,EAAE,EAAE;AACFoB,QAAAA,KADE,EAAA,SAAA,KAAA,CAAA,IAAA,EACW;AACX1D,UAAAA,MAAM,CAANA,kBAAAA,CAAAA,IAAAA,EAAgCE,MAAM,CAAtCF,MAAAA,EAAAA,MAAAA;AACD;AAHC;AALC,KAAN,CADA,CAJF,CAD8B,CAAjC;AAnkBgB,GAAA;;AAwlBlB;;;AAGAoG,EAAAA,gBA3lBkB,EAAA,SAAA,gBAAA,CAAA,CAAA,EAAA,MAAA,EA2lBW;AAAA,QACnBpG,MADmB,GACAE,MADA,CAAA,MAAA;AAAA,QACXD,MADW,GACAC,MADA,CAAA,MAAA;AAAA,QAEnBmG,SAFmB,GAEKrG,MAFL,CAAA,SAAA;AAAA,QAERV,QAFQ,GAEKU,MAFL,CAAA,QAAA;AAAA,QAGnBjB,QAHmB,GAGekB,MAHf,CAAA,QAAA;AAAA,QAGTjB,UAHS,GAGeiB,MAHf,CAAA,UAAA;AAAA,QAGGhB,OAHH,GAGegB,MAHf,CAAA,OAAA;AAI3B,QAAA,UAAA;;AACA,QAAA,SAAA,EAAe;AACb,UAAMqG,WAAW,GAAG3C,OAAO,CAAPA,GAAAA,CAAAA,SAAAA,EAAuBzD,MAAM,CAANA,MAAAA,CAA3C,QAAoByD,CAApB;;AACA,UAAA,WAAA,EAAiB;AACf4C,QAAAA,UAAU,GAAG,WAAW,CAAX,IAAA,CAAiB,UAAA,IAAA,EAAI;AAAA,iBAAIC,IAAI,CAAR,QAAA;AAAlCD,SAAa,CAAbA;AACD;AACF;;AACD,WAAO,CACLA,UAAU,GAAGjG,CAAC,CAAA,GAAA,EAAM;AAClBC,MAAAA,KAAK,EAAE;AADW,KAAN,CAAJ,GADL,IAAA,EAILjB,QAAQ,CAARA,QAAAA,KAAAA,KAAAA,GAAAA,IAAAA,GAAqCgB,CAAC,CAAA,GAAA,EAAM;AAC1CC,MAAAA,KAAK,EAAE,CAAA,eAAA,EAAkBjB,QAAQ,CAARA,IAAAA,IAAiBmD,YAAY,CAAZA,IAAAA,CAAnC,IAAA;AADmC,KAAN,CAJjC,EAAA,MAAA,CAOE7D,IAAI,CAAJA,mBAAAA,CAAAA,CAAAA,EAPF,MAOEA,CAPF,EAAA,MAAA,CAQGG,QAAQ,IAARA,UAAAA,GAAyBH,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAzBG,MAAyBH,CAAzBG,GARH,EAAA,EAAA,MAAA,CASGE,OAAO,GAAGL,IAAI,CAAJA,gBAAAA,CAAAA,CAAAA,EAAH,MAAGA,CAAH,GATjB,EAAO,CAAP;AAtmBgB,GAAA;AAinBlB;AACA6H,EAAAA,aAlnBkB,EAAA,SAAA,aAAA,CAAA,CAAA,EAAA,MAAA,EAknBQ;AAAA,QAChBzG,MADgB,GACLE,MADK,CAAA,MAAA;AAAA,QAEhBwG,OAFgB,GAEJ1G,MAAM,CAFF,SAEJA,CAFI,OAAA;AAGxB,WAAOpB,IAAI,CAAJA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA,IAAAA,EAAkC8H,OAAO,IAAIA,OAAO,CAAPA,GAAAA,KAAgBxG,MAAM,CAA1E,GAAOtB,CAAP;AArnBgB,GAAA;AAunBlB+H,EAAAA,iBAvnBkB,EAAA,SAAA,iBAAA,CAAA,CAAA,EAAA,MAAA,EAunBY;AAC5B,WAAO/H,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAA+BA,IAAI,CAAJA,aAAAA,CAAAA,CAAAA,EAAtC,MAAsCA,CAA/BA,CAAP;AAxnBgB,GAAA;AA0nBlB;AACAgI,EAAAA,cA3nBkB,EAAA,SAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EA2nBS;AAAA,QACjB5G,MADiB,GACNE,MADM,CAAA,MAAA;AAAA,QAEjBwG,OAFiB,GAEL1G,MAAM,CAFD,SAELA,CAFK,OAAA;AAGzB,WAAOpB,IAAI,CAAJA,WAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAAAA,IAAAA,EAAkC8H,OAAO,IAAIA,OAAO,CAAPA,GAAAA,KAAgBxG,MAAM,CAAjCwG,GAAAA,IAAyCA,OAAO,CAAPA,MAAAA,KAAmBxG,MAAM,CAA3G,MAAOtB,CAAP;AA9nBgB,GAAA;AAgoBlBiI,EAAAA,kBAhoBkB,EAAA,SAAA,kBAAA,CAAA,CAAA,EAAA,MAAA,EAgoBa;AAC7B,WAAOjI,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAAA,MAAAA,EAA+BA,IAAI,CAAJA,cAAAA,CAAAA,CAAAA,EAAtC,MAAsCA,CAA/BA,CAAP;AAjoBgB,GAAA;AAmoBlBkI,EAAAA,WAnoBkB,EAAA,SAAA,WAAA,CAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,MAAA,EAmoBmB;AAAA,QAC3B9G,MAD2B,GACHE,MADG,CAAA,MAAA;AAAA,QACnBW,GADmB,GACHX,MADG,CAAA,GAAA;AAAA,QACdD,MADc,GACHC,MADG,CAAA,MAAA;AAAA,QAE3BC,KAF2B,GAEDF,MAFC,CAAA,KAAA;AAAA,QAEpBG,GAFoB,GAEDH,MAFC,CAAA,GAAA;AAAA,QAEf8G,SAFe,GAED9G,MAFC,CAAA,SAAA;AAGnC,QAAMf,UAAU,GAAGkB,GAAG,CAAtB,UAAA;AACA,QAAMI,QAAQ,GAAGC,QAAQ,CAARA,QAAAA,CAAAA,GAAAA,CAAsBvB,UAAU,CAAjD,IAAiBuB,CAAjB;;AACA,QAAIvB,UAAU,CAAVA,IAAAA,KAAAA,SAAAA,IAAJ,MAAA,EAA6C;AAC3C,UAAIiB,KAAK,IAAIA,KAAK,CAAlB,IAAA,EAAyB;AACvB,eAAOA,KAAK,CAALA,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,CAAOA,CAAP;AACD;;AACD,aAAO,QAAQ,IAAIK,QAAQ,CAApB,UAAA,GAAkC,QAAQ,CAAR,UAAA,CAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,UAAA,EAAgD,MAAM,CAAN,MAAA,CAAc;AAAEO,QAAAA,KAAK,EAAP,MAAA;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAAd,EAAhD,MAAgD,CAAhD,EAAwG;AAAED,QAAAA,KAAK,EAAP,MAAA;AAAiBL,QAAAA,KAAK,EAAEV,MAAM,CAA9B,OAAA;AAAwCW,QAAAA,MAAM,EAAEX,MAAM,CAAtD,OAAA;AAAgEA,QAAAA,MAAM,EAANA;AAAhE,OAAxG,CAAlC,GAAP,EAAA;AACD;;AACD,QAAIG,KAAK,IAAIA,KAAK,CAAlB,OAAA,EAA4B;AAC1B,aAAOA,KAAK,CAALA,OAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAP,CAAOA,CAAP;AACD;;AACD,QAAA,SAAA,EAAe;AACb,aAAO,CAACL,SAAS,CAATA,UAAAA,CAAqBA,SAAS,CAATA,YAAAA,CAAAA,GAAAA,EAAAA,MAAAA,EAArBA,MAAqBA,CAArBA,EAAR,CAAQA,CAAD,CAAP;AACD;;AACD,WAAOlB,IAAI,CAAJA,iBAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAP,MAAOA,CAAP;AACD;AArpBiB,CAAb;AAwpBP,eAAA,IAAA","sourcesContent":["import XEUtils from 'xe-utils/methods/xe-utils'\r\nimport GlobalConfig from '../../conf'\r\nimport VXETable from '../../v-x-e-table'\r\nimport { UtilTools } from '../../tools'\r\n\r\nexport const Cell = {\r\n  createColumn ($xetable, _vm) {\r\n    const { type, sortable, remoteSort, filters, editRender, treeNode } = _vm\r\n    const { editConfig, editOpts, checkboxOpts } = $xetable\r\n    const renMaps = {\r\n      renderHeader: this.renderDefaultHeader,\r\n      renderCell: treeNode ? this.renderTreeCell : this.renderDefaultCell,\r\n      renderFooter: this.renderDefaultFooter\r\n    }\r\n    switch (type) {\r\n      case 'seq':\r\n      case 'index':\r\n        renMaps.renderHeader = this.renderIndexHeader\r\n        renMaps.renderCell = treeNode ? this.renderTreeIndexCell : this.renderIndexCell\r\n        break\r\n      case 'radio':\r\n        renMaps.renderHeader = this.renderRadioHeader\r\n        renMaps.renderCell = treeNode ? this.renderTreeRadioCell : this.renderRadioCell\r\n        break\r\n      // 在 v3.0 中废弃 type=selection\r\n      case 'checkbox':\r\n      case 'selection':\r\n        renMaps.renderHeader = this.renderSelectionHeader\r\n        renMaps.renderCell = checkboxOpts.checkField ? (treeNode ? this.renderTreeSelectionCellByProp : this.renderSelectionCellByProp) : (treeNode ? this.renderTreeSelectionCell : this.renderSelectionCell)\r\n        break\r\n      case 'expand':\r\n        renMaps.renderCell = this.renderExpandCell\r\n        renMaps.renderData = this.renderExpandData\r\n        break\r\n      case 'html':\r\n        renMaps.renderCell = treeNode ? this.renderTreeHTMLCell : this.renderHTMLCell\r\n        if (filters && (sortable || remoteSort)) {\r\n          renMaps.renderHeader = this.renderSortAndFilterHeader\r\n        } else if (sortable || remoteSort) {\r\n          renMaps.renderHeader = this.renderSortHeader\r\n        } else if (filters) {\r\n          renMaps.renderHeader = this.renderFilterHeader\r\n        }\r\n        break\r\n      default:\r\n        if (editConfig && editRender) {\r\n          renMaps.renderHeader = this.renderEditHeader\r\n          renMaps.renderCell = editOpts.mode === 'cell' ? (treeNode ? this.renderTreeCellEdit : this.renderCellEdit) : (treeNode ? this.renderTreeRowEdit : this.renderRowEdit)\r\n        } else if (filters && (sortable || remoteSort)) {\r\n          renMaps.renderHeader = this.renderSortAndFilterHeader\r\n        } else if (sortable || remoteSort) {\r\n          renMaps.renderHeader = this.renderSortHeader\r\n        } else if (filters) {\r\n          renMaps.renderHeader = this.renderFilterHeader\r\n        }\r\n    }\r\n    return UtilTools.getColumnConfig($xetable, _vm, renMaps)\r\n  },\r\n  /**\r\n   * 单元格\r\n   */\r\n  renderDefaultHeader (h, params) {\r\n    const { $table, column } = params\r\n    const { slots, own } = column\r\n    const renderOpts = own.editRender || own.cellRender\r\n    if (slots && slots.header) {\r\n      return [\r\n        h('span', {\r\n          class: 'vxe-cell--title'\r\n        }, slots.header.call($table, params, h))\r\n      ]\r\n    }\r\n    if (renderOpts) {\r\n      const compConf = VXETable.renderer.get(renderOpts.name)\r\n      if (compConf && compConf.renderHeader) {\r\n        return [\r\n          h('span', {\r\n            class: 'vxe-cell--title'\r\n          }, compConf.renderHeader.call($table, h, renderOpts, params, { $grid: $table.$xegrid, $excel: $table.$parent, $table }))\r\n        ]\r\n      }\r\n    }\r\n    return [\r\n      h('span', {\r\n        class: 'vxe-cell--title'\r\n      }, UtilTools.formatText(column.getTitle(), 1))\r\n    ]\r\n  },\r\n  renderDefaultCell (h, params) {\r\n    const { $table, row, column } = params\r\n    const { slots, own } = column\r\n    const renderOpts = own.editRender || own.cellRender\r\n    if (slots && slots.default) {\r\n      return slots.default.call($table, params, h)\r\n    }\r\n    if (renderOpts) {\r\n      const funName = own.editRender ? 'renderCell' : 'renderDefault'\r\n      const compConf = VXETable.renderer.get(renderOpts.name)\r\n      if (compConf && compConf[funName]) {\r\n        return compConf[funName].call($table, h, renderOpts, Object.assign({ $type: own.editRender ? 'edit' : 'cell', isEdit: !!own.editRender }, params), { $type: own.editRender ? 'edit' : 'cell', $grid: $table.$xegrid, $excel: $table.$parent, $table })\r\n      }\r\n    }\r\n    return [UtilTools.formatText(UtilTools.getCellLabel(row, column, params), 1)]\r\n  },\r\n  renderTreeCell (h, params) {\r\n    return Cell.renderTreeIcon(h, params, Cell.renderDefaultCell.call(this, h, params))\r\n  },\r\n  renderDefaultFooter (h, params) {\r\n    const { $table, column, itemIndex, items } = params\r\n    const { slots, own } = column\r\n    const renderOpts = own.editRender || own.cellRender\r\n    if (slots && slots.footer) {\r\n      return slots.footer.call($table, params, h)\r\n    }\r\n    if (renderOpts) {\r\n      const compConf = VXETable.renderer.get(renderOpts.name)\r\n      if (compConf && compConf.renderFooter) {\r\n        return compConf.renderFooter.call($table, h, renderOpts, params, { $grid: $table.$xegrid, $excel: $table.$parent, $table })\r\n      }\r\n    }\r\n    return [UtilTools.formatText(items[itemIndex], 1)]\r\n  },\r\n\r\n  /**\r\n   * 树节点\r\n   */\r\n  renderTreeIcon (h, params, cellVNodes) {\r\n    const { $table, isHidden } = params\r\n    const { treeOpts, treeExpandeds, treeLazyLoadeds } = $table\r\n    const { row, column, level } = params\r\n    const { slots } = column\r\n    const { children, hasChild, indent, lazy, trigger, iconLoaded, iconOpen, iconClose } = treeOpts\r\n    const rowChilds = row[children]\r\n    let hasLazyChilds = false\r\n    let isAceived = false\r\n    let isLazyLoaded = false\r\n    const on = {}\r\n    if (slots && slots.icon) {\r\n      return slots.icon.call($table, params, h, cellVNodes)\r\n    }\r\n    if (!isHidden) {\r\n      isAceived = treeExpandeds.indexOf(row) > -1\r\n      if (lazy) {\r\n        isLazyLoaded = treeLazyLoadeds.indexOf(row) > -1\r\n        hasLazyChilds = row[hasChild]\r\n      }\r\n    }\r\n    if (!trigger || trigger === 'default') {\r\n      on.click = evnt => $table.triggerTreeExpandEvent(evnt, params)\r\n    }\r\n    return [\r\n      h('div', {\r\n        class: ['vxe-cell--tree-node', {\r\n          'is--active': isAceived\r\n        }],\r\n        style: {\r\n          paddingLeft: `${level * indent}px`\r\n        }\r\n      }, [\r\n        (rowChilds && rowChilds.length) || hasLazyChilds ? [\r\n          h('div', {\r\n            class: 'vxe-tree--btn-wrapper',\r\n            on\r\n          }, [\r\n            h('i', {\r\n              class: ['vxe-tree--node-btn', isLazyLoaded ? (iconLoaded || GlobalConfig.icon.treeLoaded) : (isAceived ? (iconOpen || GlobalConfig.icon.treeOpen) : (iconClose || GlobalConfig.icon.treeClose))]\r\n            })\r\n          ])\r\n        ] : null,\r\n        h('div', {\r\n          class: 'vxe-tree-cell'\r\n        }, cellVNodes)\r\n      ])\r\n    ]\r\n  },\r\n\r\n  /**\r\n   * 索引\r\n   */\r\n  renderIndexHeader (h, params) {\r\n    const { $table, column } = params\r\n    const { slots } = column\r\n    return [\r\n      h('span', {\r\n        class: 'vxe-cell--title'\r\n      }, slots && slots.header ? slots.header.call($table, params, h) : UtilTools.formatText(column.getTitle(), 1))\r\n    ]\r\n  },\r\n  renderIndexCell (h, params) {\r\n    const { $table, column } = params\r\n    const { seqOpts, startIndex } = $table\r\n    const { slots } = column\r\n    if (slots && slots.default) {\r\n      return slots.default.call($table, params, h)\r\n    }\r\n    const { $seq, seq, level } = params\r\n    // 在 v3.0 中废弃 startIndex、indexMethod\r\n    const seqMethod = seqOpts.seqMethod || column.seqMethod || column.indexMethod\r\n    return [UtilTools.formatText(seqMethod ? seqMethod(params) : level ? `${$seq}.${seq}` : (seqOpts.startIndex || startIndex) + seq, 1)]\r\n  },\r\n  renderTreeIndexCell (h, params) {\r\n    return Cell.renderTreeIcon(h, params, Cell.renderIndexCell(h, params))\r\n  },\r\n\r\n  /**\r\n   * 单选\r\n   */\r\n  renderRadioHeader (h, params) {\r\n    const { $table, column } = params\r\n    const { slots } = column\r\n    // 在 v3.0 中废弃 label\r\n    return [\r\n      h('span', {\r\n        class: 'vxe-cell--title'\r\n      }, slots && slots.header ? slots.header.call($table, params, h) : [\r\n        h('span', {\r\n          class: 'vxe-radio--label'\r\n        }, UtilTools.formatText(column.getTitle(), 1))\r\n      ])\r\n    ]\r\n  },\r\n  renderRadioCell (h, params) {\r\n    const { $table, column, isHidden } = params\r\n    const { radioOpts, selectRow } = $table\r\n    const { slots } = column\r\n    const { labelField, checkMethod } = radioOpts\r\n    const { row } = params\r\n    const isChecked = row === selectRow\r\n    let isDisabled = !!checkMethod\r\n    let on\r\n    if (!isHidden) {\r\n      on = {\r\n        click (evnt) {\r\n          if (!isDisabled) {\r\n            $table.triggerRadioRowEvent(evnt, params)\r\n          }\r\n        }\r\n      }\r\n      if (checkMethod) {\r\n        isDisabled = !checkMethod(params)\r\n      }\r\n    }\r\n    return [\r\n      h('span', {\r\n        class: ['vxe-cell--radio', {\r\n          'is--checked': isChecked,\r\n          'is--disabled': isDisabled\r\n        }],\r\n        on\r\n      }, [\r\n        h('span', {\r\n          class: 'vxe-radio--icon vxe-radio--checked-icon'\r\n        }),\r\n        h('span', {\r\n          class: 'vxe-radio--icon vxe-radio--unchecked-icon'\r\n        })\r\n      ].concat(labelField ? (slots && slots.default ? slots.default.call($table, params, h) : [\r\n        h('span', {\r\n          class: 'vxe-radio--label'\r\n        }, XEUtils.get(row, labelField))\r\n      ]) : []))\r\n    ]\r\n  },\r\n  renderTreeRadioCell (h, params) {\r\n    return Cell.renderTreeIcon(h, params, Cell.renderRadioCell(h, params))\r\n  },\r\n\r\n  /**\r\n   * 多选\r\n   */\r\n  renderSelectionHeader (h, params) {\r\n    const { $table, column, isHidden } = params\r\n    const { isIndeterminate, isAllCheckboxDisabled } = $table\r\n    const { slots, own } = column\r\n    const checkboxOpts = $table.checkboxOpts\r\n    // 在 v3.0 中废弃 label\r\n    const headerTitle = own.title || own.label\r\n    let isChecked = false\r\n    let on\r\n    if (checkboxOpts.checkStrictly ? !checkboxOpts.showHeader : checkboxOpts.showHeader === false) {\r\n      return [\r\n        h('span', {\r\n          class: 'vxe-cell--title'\r\n        }, slots && slots.header ? slots.header.call($table, params, h) : [\r\n          h('span', {\r\n            class: 'vxe-checkbox--label'\r\n          }, headerTitle)\r\n        ])\r\n      ]\r\n    }\r\n    if (!isHidden) {\r\n      isChecked = isAllCheckboxDisabled ? false : $table.isAllSelected\r\n      on = {\r\n        click (evnt) {\r\n          if (!isAllCheckboxDisabled) {\r\n            $table.triggerCheckAllEvent(evnt, !isChecked)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return [\r\n      h('span', {\r\n        class: 'vxe-cell--title'\r\n      }, [\r\n        h('span', {\r\n          class: ['vxe-cell--checkbox', {\r\n            'is--checked': isChecked,\r\n            'is--disabled': isAllCheckboxDisabled,\r\n            'is--indeterminate': isIndeterminate\r\n          }],\r\n          attrs: {\r\n            title: GlobalConfig.i18n('vxe.table.allTitle')\r\n          },\r\n          on\r\n        }, [\r\n          h('span', {\r\n            class: 'vxe-checkbox--icon vxe-checkbox--checked-icon'\r\n          }),\r\n          h('span', {\r\n            class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon'\r\n          }),\r\n          h('span', {\r\n            class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon'\r\n          })\r\n        ].concat(headerTitle ? (slots && slots.header ? slots.header.call($table, params, h) : [\r\n          h('span', {\r\n            class: 'vxe-checkbox--label'\r\n          }, headerTitle)\r\n        ]) : []))\r\n      ])\r\n    ]\r\n  },\r\n  renderSelectionCell (h, params) {\r\n    const { $table, row, column, isHidden } = params\r\n    const { treeConfig, treeIndeterminates } = $table\r\n    const { labelField, checkMethod } = $table.checkboxOpts\r\n    const { slots } = column\r\n    let indeterminate = false\r\n    let isChecked = false\r\n    let isDisabled = !!checkMethod\r\n    let on\r\n    if (!isHidden) {\r\n      isChecked = $table.selection.indexOf(row) > -1\r\n      on = {\r\n        click (evnt) {\r\n          if (!isDisabled) {\r\n            $table.triggerCheckRowEvent(evnt, params, !isChecked)\r\n          }\r\n        }\r\n      }\r\n      if (checkMethod) {\r\n        isDisabled = !checkMethod(params)\r\n      }\r\n      if (treeConfig) {\r\n        indeterminate = treeIndeterminates.indexOf(row) > -1\r\n      }\r\n    }\r\n    return [\r\n      h('span', {\r\n        class: ['vxe-cell--checkbox', {\r\n          'is--checked': isChecked,\r\n          'is--disabled': isDisabled,\r\n          'is--indeterminate': indeterminate\r\n        }],\r\n        on\r\n      }, [\r\n        h('span', {\r\n          class: 'vxe-checkbox--icon vxe-checkbox--checked-icon'\r\n        }),\r\n        h('span', {\r\n          class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon'\r\n        }),\r\n        h('span', {\r\n          class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon'\r\n        })\r\n      ].concat(labelField ? (slots && slots.default ? slots.default.call($table, params, h) : [\r\n        h('span', {\r\n          class: 'vxe-checkbox--label'\r\n        }, XEUtils.get(row, labelField))\r\n      ]) : []))\r\n    ]\r\n  },\r\n  renderTreeSelectionCell (h, params) {\r\n    return Cell.renderTreeIcon(h, params, Cell.renderSelectionCell(h, params))\r\n  },\r\n  renderSelectionCellByProp (h, params) {\r\n    const { $table, row, column, isHidden } = params\r\n    const { treeConfig, treeIndeterminates } = $table\r\n    const { labelField, checkField: property, checkMethod } = $table.checkboxOpts\r\n    const { slots } = column\r\n    let indeterminate = false\r\n    let isChecked = false\r\n    let isDisabled = !!checkMethod\r\n    let on\r\n    if (!isHidden) {\r\n      isChecked = XEUtils.get(row, property)\r\n      on = {\r\n        click (evnt) {\r\n          if (!isDisabled) {\r\n            $table.triggerCheckRowEvent(evnt, params, !isChecked)\r\n          }\r\n        }\r\n      }\r\n      if (checkMethod) {\r\n        isDisabled = !checkMethod(params)\r\n      }\r\n      if (treeConfig) {\r\n        indeterminate = treeIndeterminates.indexOf(row) > -1\r\n      }\r\n    }\r\n    return [\r\n      h('span', {\r\n        class: ['vxe-cell--checkbox', {\r\n          'is--checked': isChecked,\r\n          'is--disabled': isDisabled,\r\n          'is--indeterminate': indeterminate\r\n        }],\r\n        on\r\n      }, [\r\n        h('span', {\r\n          class: 'vxe-checkbox--icon vxe-checkbox--checked-icon'\r\n        }),\r\n        h('span', {\r\n          class: 'vxe-checkbox--icon vxe-checkbox--unchecked-icon'\r\n        }),\r\n        h('span', {\r\n          class: 'vxe-checkbox--icon vxe-checkbox--indeterminate-icon'\r\n        })\r\n      ].concat(labelField ? (slots && slots.default ? slots.default.call($table, params, h) : [\r\n        h('span', {\r\n          class: 'vxe-checkbox--label'\r\n        }, XEUtils.get(row, labelField))\r\n      ]) : []))\r\n    ]\r\n  },\r\n  renderTreeSelectionCellByProp (h, params) {\r\n    return Cell.renderTreeIcon(h, params, Cell.renderSelectionCellByProp(h, params))\r\n  },\r\n\r\n  /**\r\n   * 展开行\r\n   */\r\n  renderExpandCell (h, params) {\r\n    const { $table, isHidden, row, column } = params\r\n    const { expandOpts, rowExpandeds, expandLazyLoadeds } = $table\r\n    const { lazy, labelField, iconLoaded, iconOpen, iconClose, visibleMethod } = expandOpts\r\n    const { slots } = column\r\n    let isAceived = false\r\n    let isLazyLoaded = false\r\n    if (slots && slots.icon) {\r\n      return slots.icon.call($table, params, h)\r\n    }\r\n    if (!isHidden) {\r\n      isAceived = rowExpandeds.indexOf(params.row) > -1\r\n      if (lazy) {\r\n        isLazyLoaded = expandLazyLoadeds.indexOf(row) > -1\r\n      }\r\n    }\r\n    return [\r\n      !visibleMethod || visibleMethod({ row }) ? h('span', {\r\n        class: ['vxe-table--expanded', {\r\n          'is--active': isAceived\r\n        }],\r\n        on: {\r\n          click (evnt) {\r\n            $table.triggerRowExpandEvent(evnt, params)\r\n          }\r\n        }\r\n      }, [\r\n        h('i', {\r\n          class: ['vxe-table--expand-btn', isLazyLoaded ? (iconLoaded || GlobalConfig.icon.treeLoaded) : (isAceived ? (iconOpen || GlobalConfig.icon.expandOpen) : (iconClose || GlobalConfig.icon.expandClose))]\r\n        })\r\n      ]) : null,\r\n      h('span', {\r\n        class: 'vxe-table--expand-label'\r\n      }, slots && slots.default ? slots.default.call($table, params, h) : (labelField ? XEUtils.get(row, labelField) : null))\r\n    ]\r\n  },\r\n  renderExpandData (h, params) {\r\n    const { $table, column } = params\r\n    const { slots, contentRender } = column\r\n    if (slots) {\r\n      if (slots.content) {\r\n        return slots.content.call($table, params, h)\r\n      }\r\n      // 在 v3.0 中严格支持 content\r\n      if (slots.default) {\r\n        return slots.default.call($table, params, h)\r\n      }\r\n    }\r\n    if (contentRender) {\r\n      const compConf = VXETable.renderer.get(contentRender.name)\r\n      if (compConf && compConf.renderExpand) {\r\n        return compConf.renderExpand.call($table, h, contentRender, params, { $grid: $table.$xegrid, $table })\r\n      }\r\n    }\r\n    return []\r\n  },\r\n\r\n  /**\r\n   * HTML 标签\r\n   */\r\n  renderHTMLCell (h, params) {\r\n    const { $table, row, column } = params\r\n    const { slots } = column\r\n    if (slots && slots.default) {\r\n      return slots.default.call($table, params, h)\r\n    }\r\n    return [\r\n      h('span', {\r\n        class: 'vxe-cell--html',\r\n        domProps: {\r\n          innerHTML: UtilTools.formatText(UtilTools.getCellLabel(row, column, params), 1)\r\n        }\r\n      })\r\n    ]\r\n  },\r\n  renderTreeHTMLCell (h, params) {\r\n    return Cell.renderTreeIcon(h, params, Cell.renderHTMLCell(h, params))\r\n  },\r\n\r\n  /**\r\n   * 排序和筛选\r\n   */\r\n  renderSortAndFilterHeader (h, params) {\r\n    return Cell.renderDefaultHeader(h, params)\r\n      .concat(Cell.renderSortIcon(h, params))\r\n      .concat(Cell.renderFilterIcon(h, params))\r\n  },\r\n\r\n  /**\r\n   * 排序\r\n   */\r\n  renderSortHeader (h, params) {\r\n    return Cell.renderDefaultHeader(h, params).concat(Cell.renderSortIcon(h, params))\r\n  },\r\n  renderSortIcon (h, params) {\r\n    const { $table, column } = params\r\n    const { showIcon, iconAsc, iconDesc } = $table.sortOpts\r\n    return showIcon === false ? [] : [\r\n      h('span', {\r\n        class: 'vxe-cell--sort',\r\n        style: {visibility: column.order === 'asc' || column.order === 'desc' ? 'visible' : ''}\r\n      }, [\r\n        h('i', {\r\n          class: ['vxe-sort--asc-btn', iconAsc || GlobalConfig.icon.sortAsc, {\r\n            'sort--active': column.order === 'asc'\r\n          }],\r\n          attrs: {\r\n            title: GlobalConfig.i18n('vxe.table.sortAsc')\r\n          },\r\n          on: {\r\n            click (evnt) {\r\n              $table.triggerSortEvent(evnt, column, 'asc')\r\n            }\r\n          }\r\n        }),\r\n        h('i', {\r\n          class: ['vxe-sort--desc-btn', iconDesc || GlobalConfig.icon.sortDesc, {\r\n            'sort--active': column.order === 'desc'\r\n          }],\r\n          attrs: {\r\n            title: GlobalConfig.i18n('vxe.table.sortDesc')\r\n          },\r\n          on: {\r\n            click (evnt) {\r\n              $table.triggerSortEvent(evnt, column, 'desc')\r\n            }\r\n          }\r\n        })\r\n      ])\r\n    ]\r\n  },\r\n\r\n  /**\r\n   * 筛选\r\n   */\r\n  renderFilterHeader (h, params) {\r\n    return Cell.renderDefaultHeader(h, params).concat(Cell.renderFilterIcon(h, params))\r\n  },\r\n  renderFilterIcon (h, params) {\r\n    const { $table, column, hasFilter } = params\r\n    const { filterStore, filterOpts } = $table\r\n    const { showIcon, iconNone, iconMatch } = filterOpts\r\n    return showIcon === false ? [] : [\r\n      h('span', {\r\n        class: ['vxe-cell--filter', {\r\n          'is--active': filterStore.visible && filterStore.column === column\r\n        }]\r\n      }, [\r\n        h('i', {\r\n          class: ['vxe-filter--btn', hasFilter ? (iconMatch || GlobalConfig.icon.filterMatch) : (iconNone || GlobalConfig.icon.filterNone)],\r\n          attrs: {\r\n            title: GlobalConfig.i18n('vxe.table.filter')\r\n          },\r\n          on: {\r\n            click (evnt) {\r\n              $table.triggerFilterEvent(evnt, params.column, params)\r\n            }\r\n          }\r\n        })\r\n      ])\r\n    ]\r\n  },\r\n\r\n  /**\r\n   * 可编辑\r\n   */\r\n  renderEditHeader (h, params) {\r\n    const { $table, column } = params\r\n    const { editRules, editOpts } = $table\r\n    const { sortable, remoteSort, filters } = column\r\n    let isRequired\r\n    if (editRules) {\r\n      const columnRules = XEUtils.get(editRules, params.column.property)\r\n      if (columnRules) {\r\n        isRequired = columnRules.some(rule => rule.required)\r\n      }\r\n    }\r\n    return [\r\n      isRequired ? h('i', {\r\n        class: 'vxe-required-icon'\r\n      }) : null,\r\n      editOpts.showIcon === false ? null : h('i', {\r\n        class: ['vxe-edit-icon', editOpts.icon || GlobalConfig.icon.edit]\r\n      })\r\n    ].concat(Cell.renderDefaultHeader(h, params))\r\n      .concat(sortable || remoteSort ? Cell.renderSortIcon(h, params) : [])\r\n      .concat(filters ? Cell.renderFilterIcon(h, params) : [])\r\n  },\r\n  // 行格编辑模式\r\n  renderRowEdit (h, params) {\r\n    const { $table } = params\r\n    const { actived } = $table.editStore\r\n    return Cell.runRenderer(h, params, this, actived && actived.row === params.row)\r\n  },\r\n  renderTreeRowEdit (h, params) {\r\n    return Cell.renderTreeIcon(h, params, Cell.renderRowEdit(h, params))\r\n  },\r\n  // 单元格编辑模式\r\n  renderCellEdit (h, params) {\r\n    const { $table } = params\r\n    const { actived } = $table.editStore\r\n    return Cell.runRenderer(h, params, this, actived && actived.row === params.row && actived.column === params.column)\r\n  },\r\n  renderTreeCellEdit (h, params) {\r\n    return Cell.renderTreeIcon(h, params, Cell.renderCellEdit(h, params))\r\n  },\r\n  runRenderer (h, params, _vm, isEdit) {\r\n    const { $table, row, column } = params\r\n    const { slots, own, formatter } = column\r\n    const editRender = own.editRender\r\n    const compConf = VXETable.renderer.get(editRender.name)\r\n    if (editRender.type === 'visible' || isEdit) {\r\n      if (slots && slots.edit) {\r\n        return slots.edit.call($table, params, h)\r\n      }\r\n      return compConf && compConf.renderEdit ? compConf.renderEdit.call($table, h, editRender, Object.assign({ $type: 'edit', isEdit: true }, params), { $type: 'edit', $grid: $table.$xegrid, $excel: $table.$parent, $table }) : []\r\n    }\r\n    if (slots && slots.default) {\r\n      return slots.default.call($table, params, h)\r\n    }\r\n    if (formatter) {\r\n      return [UtilTools.formatText(UtilTools.getCellLabel(row, column, params), 1)]\r\n    }\r\n    return Cell.renderDefaultCell.call(_vm, h, params)\r\n  }\r\n}\r\n\r\nexport default Cell\r\n"]}]}