{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\header\\src\\header.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\header\\src\\header.js","mtime":1647229117814},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.fixed\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.string.fixed\";\nimport XEUtils from 'xe-utils';\nimport { UtilTools, DomTools } from \"../../tools\";\nimport { convertToRows } from \"./util\";\nimport { getColMinWidth } from \"../../table/src/util\";\nvar cellType = 'header';\nexport default {\n  name: 'VxeTableHeader',\n  props: {\n    tableData: Array,\n    tableColumn: Array,\n    tableGroupColumn: Array,\n    fixedColumn: Array,\n    size: String,\n    fixedType: String\n  },\n  data: function data() {\n    return {\n      headerColumn: []\n    };\n  },\n  watch: {\n    tableColumn: function tableColumn() {\n      this.uploadColumn();\n    }\n  },\n  created: function created() {\n    this.uploadColumn();\n  },\n  mounted: function mounted() {\n    var $xetable = this.$parent,\n        $el = this.$el,\n        $refs = this.$refs,\n        fixedType = this.fixedType;\n    var elemStore = $xetable.elemStore;\n    var prefix = \"\".concat(fixedType || 'main', \"-header-\");\n    elemStore[\"\".concat(prefix, \"wrapper\")] = $el;\n    elemStore[\"\".concat(prefix, \"table\")] = $refs.table;\n    elemStore[\"\".concat(prefix, \"colgroup\")] = $refs.colgroup;\n    elemStore[\"\".concat(prefix, \"list\")] = $refs.thead;\n    elemStore[\"\".concat(prefix, \"xSpace\")] = $refs.xSpace;\n    elemStore[\"\".concat(prefix, \"repair\")] = $refs.repair;\n  },\n  render: function render(h) {\n    var _this = this;\n\n    var _e = this._e,\n        $xetable = this.$parent,\n        fixedType = this.fixedType,\n        headerColumn = this.headerColumn,\n        fixedColumn = this.fixedColumn;\n    var tableListeners = $xetable.$listeners,\n        tId = $xetable.tId,\n        isGroup = $xetable.isGroup,\n        resizable = $xetable.resizable,\n        border = $xetable.border,\n        columnKey = $xetable.columnKey,\n        headerRowClassName = $xetable.headerRowClassName,\n        headerCellClassName = $xetable.headerCellClassName,\n        headerRowStyle = $xetable.headerRowStyle,\n        headerCellStyle = $xetable.headerCellStyle,\n        allColumnHeaderOverflow = $xetable.showHeaderOverflow,\n        allHeaderAlign = $xetable.headerAlign,\n        allAlign = $xetable.align,\n        highlightCurrentColumn = $xetable.highlightCurrentColumn,\n        currentColumn = $xetable.currentColumn,\n        scrollXLoad = $xetable.scrollXLoad,\n        overflowX = $xetable.overflowX,\n        scrollbarWidth = $xetable.scrollbarWidth,\n        sortOpts = $xetable.sortOpts,\n        mouseConfig = $xetable.mouseConfig;\n    var tableColumn = this.tableColumn;\n    var headerGroups = headerColumn; // 如果是使用优化模式\n\n    if (!isGroup) {\n      if (fixedType) {\n        if (scrollXLoad || allColumnHeaderOverflow) {\n          tableColumn = fixedColumn;\n        }\n      }\n\n      headerGroups = [tableColumn];\n    }\n\n    return h('div', {\n      class: ['vxe-table--header-wrapper', fixedType ? \"fixed-\".concat(fixedType, \"--wrapper\") : 'body--wrapper'],\n      attrs: {\n        xid: tId\n      }\n    }, [fixedType ? _e() : h('div', {\n      class: 'vxe-body--x-space',\n      ref: 'xSpace'\n    }), h('table', {\n      class: 'vxe-table--header',\n      attrs: {\n        xid: tId,\n        cellspacing: 0,\n        cellpadding: 0,\n        border: 0\n      },\n      ref: 'table'\n    }, [\n    /**\r\n     * 列宽\r\n     */\n    h('colgroup', {\n      ref: 'colgroup'\n    }, tableColumn.map(function (column, $columnIndex) {\n      return h('col', {\n        attrs: {\n          name: column.id\n        },\n        key: $columnIndex\n      });\n    }).concat(scrollbarWidth ? [h('col', {\n      attrs: {\n        name: 'col_gutter'\n      }\n    })] : [])),\n    /**\r\n     * 头部\r\n     */\n    h('thead', {\n      ref: 'thead'\n    }, headerGroups.map(function (cols, $rowIndex) {\n      return h('tr', {\n        class: ['vxe-header--row', headerRowClassName ? XEUtils.isFunction(headerRowClassName) ? headerRowClassName({\n          $table: $xetable,\n          $rowIndex: $rowIndex,\n          fixed: fixedType,\n          type: cellType\n        }) : headerRowClassName : ''],\n        style: headerRowStyle ? XEUtils.isFunction(headerRowStyle) ? headerRowStyle({\n          $table: $xetable,\n          $rowIndex: $rowIndex,\n          fixed: fixedType,\n          type: cellType\n        }) : headerRowStyle : null\n      }, cols.map(function (column, $columnIndex) {\n        var _ref;\n\n        var type = column.type,\n            showHeaderOverflow = column.showHeaderOverflow,\n            headerAlign = column.headerAlign,\n            align = column.align,\n            headerClassName = column.headerClassName; // const { enabled } = tooltipOpts\n\n        var isColGroup = column.children && column.children.length;\n        var fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX;\n        var headOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n        var headAlign = headerAlign || align || allHeaderAlign || allAlign;\n        var showEllipsis = headOverflow === 'ellipsis';\n        var showTitle = headOverflow === 'title';\n        var showTooltip = headOverflow === true || headOverflow === 'tooltip';\n        var hasEllipsis = showTitle || showTooltip || showEllipsis;\n        var thOns = {};\n        var hasFilter = column.filters && column.filters.some(function (item) {\n          return item.checked;\n        });\n        var columnIndex = $xetable.getColumnIndex(column);\n\n        var _columnIndex = $xetable.getVTColumnIndex(column);\n\n        var params = {\n          $table: $xetable,\n          $rowIndex: $rowIndex,\n          column: column,\n          columnIndex: columnIndex,\n          $columnIndex: $columnIndex,\n          _columnIndex: _columnIndex,\n          fixed: fixedType,\n          type: cellType,\n          isHidden: fixedHiddenColumn,\n          hasFilter: hasFilter // 虚拟滚动不支持动态高度\n\n        };\n\n        if (scrollXLoad && !hasEllipsis) {\n          showEllipsis = hasEllipsis = true;\n        }\n\n        if (highlightCurrentColumn || tableListeners['header-cell-click'] || sortOpts.trigger === 'cell') {\n          thOns.click = function (evnt) {\n            return $xetable.triggerHeaderCellClickEvent(evnt, params);\n          };\n        }\n\n        if (tableListeners['header-cell-dblclick']) {\n          thOns.dblclick = function (evnt) {\n            return $xetable.triggerHeaderCellDblclickEvent(evnt, params);\n          };\n        } // 按下事件处理\n\n\n        if (mouseConfig) {\n          thOns.mousedown = function (evnt) {\n            return $xetable.triggerHeaderCellMousedownEvent(evnt, params);\n          };\n        }\n\n        return h('th', {\n          class: ['vxe-header--column', column.id, (_ref = {}, _defineProperty(_ref, \"col--\".concat(headAlign), headAlign), _defineProperty(_ref, \"col--\".concat(type), type), _defineProperty(_ref, 'col--last', $columnIndex === cols.length - 1), _defineProperty(_ref, 'col--fixed', column.fixed), _defineProperty(_ref, 'col--group', isColGroup), _defineProperty(_ref, 'col--ellipsis', hasEllipsis), _defineProperty(_ref, 'fixed--hidden', fixedHiddenColumn), _defineProperty(_ref, 'is--sortable', column.sortable), _defineProperty(_ref, 'is--filter', !!column.filters), _defineProperty(_ref, 'filter--active', hasFilter), _defineProperty(_ref, 'col--current', currentColumn === column), _ref), UtilTools.getClass(headerClassName, params), UtilTools.getClass(headerCellClassName, params)],\n          attrs: {\n            colid: column.id,\n            colspan: column.colSpan > 1 ? column.colSpan : null,\n            rowspan: column.rowSpan > 1 ? column.rowSpan : null\n          },\n          style: headerCellStyle ? XEUtils.isFunction(headerCellStyle) ? headerCellStyle(params) : headerCellStyle : null,\n          on: thOns,\n          key: columnKey || isColGroup ? column.id : $columnIndex\n        }, [h('div', {\n          class: ['vxe-cell', {\n            'c--title': showTitle,\n            'c--tooltip': showTooltip,\n            'c--ellipsis': showEllipsis\n          }]\n        }, column.renderHeader(h, params)),\n        /**\r\n         * 列宽拖动\r\n         */\n        !fixedHiddenColumn && !isColGroup && (XEUtils.isBoolean(column.resizable) ? column.resizable : resizable) ? h('div', {\n          class: ['vxe-resizable', {\n            'is--line': !border || border === 'none'\n          }],\n          on: {\n            mousedown: function mousedown(evnt) {\n              return _this.resizeMousedown(evnt, params);\n            }\n          }\n        }) : null]);\n      }).concat(scrollbarWidth ? [h('th', {\n        class: 'vxe-header--gutter col--gutter'\n      })] : []));\n    }))]),\n    /**\r\n     * 其他\r\n     */\n    h('div', {\n      class: 'vxe-table--header-border-line',\n      ref: 'repair'\n    })]);\n  },\n  methods: {\n    uploadColumn: function uploadColumn() {\n      var $xetable = this.$parent;\n      this.headerColumn = $xetable.isGroup ? convertToRows(this.tableGroupColumn) : [];\n    },\n    resizeMousedown: function resizeMousedown(evnt, params) {\n      var column = params.column;\n      var $xetable = this.$parent,\n          $el = this.$el,\n          fixedType = this.fixedType;\n      var _$xetable$$refs = $xetable.$refs,\n          tableBody = _$xetable$$refs.tableBody,\n          leftContainer = _$xetable$$refs.leftContainer,\n          rightContainer = _$xetable$$refs.rightContainer,\n          resizeBarElem = _$xetable$$refs.resizeBar;\n      var dragBtnElem = evnt.target,\n          dragClientX = evnt.clientX;\n      var cell = params.cell = dragBtnElem.parentNode;\n      var dragLeft = 0;\n      var tableBodyElem = tableBody.$el;\n      var pos = DomTools.getOffsetPos(dragBtnElem, $el);\n      var dragBtnWidth = dragBtnElem.clientWidth;\n      var dragBtnOffsetWidth = Math.floor(dragBtnWidth / 2);\n      var minInterval = getColMinWidth(params) - dragBtnOffsetWidth; // 列之间的最小间距\n\n      var dragMinLeft = pos.left - cell.clientWidth + dragBtnWidth + minInterval;\n      var dragPosLeft = pos.left + dragBtnOffsetWidth;\n      var domMousemove = document.onmousemove;\n      var domMouseup = document.onmouseup;\n      var isLeftFixed = fixedType === 'left';\n      var isRightFixed = fixedType === 'right'; // 计算左右侧固定列偏移量\n\n      var fixedOffsetWidth = 0;\n\n      if (isLeftFixed || isRightFixed) {\n        var siblingProp = isLeftFixed ? 'nextElementSibling' : 'previousElementSibling';\n        var tempCellElem = cell[siblingProp];\n\n        while (tempCellElem) {\n          if (DomTools.hasClass(tempCellElem, 'fixed--hidden')) {\n            break;\n          } else if (!DomTools.hasClass(tempCellElem, 'col--group')) {\n            fixedOffsetWidth += tempCellElem.offsetWidth;\n          }\n\n          tempCellElem = tempCellElem[siblingProp];\n        }\n\n        if (isRightFixed && rightContainer) {\n          dragPosLeft = rightContainer.offsetLeft + fixedOffsetWidth;\n        }\n      } // 处理拖动事件\n\n\n      var updateEvent = function updateEvent(evnt) {\n        evnt.stopPropagation();\n        evnt.preventDefault();\n        var offsetX = evnt.clientX - dragClientX;\n        var left = dragPosLeft + offsetX;\n        var scrollLeft = fixedType ? 0 : tableBodyElem.scrollLeft;\n\n        if (isLeftFixed) {\n          // 左固定列（不允许超过右侧固定列、不允许超过右边距）\n          left = Math.min(left, (rightContainer ? rightContainer.offsetLeft : tableBodyElem.clientWidth) - fixedOffsetWidth - minInterval);\n        } else if (isRightFixed) {\n          // 右侧固定列（不允许超过左侧固定列、不允许超过左边距）\n          dragMinLeft = (leftContainer ? leftContainer.clientWidth : 0) + fixedOffsetWidth + minInterval;\n          left = Math.min(left, dragPosLeft + cell.clientWidth - minInterval);\n        } else {\n          dragMinLeft = Math.max(tableBodyElem.scrollLeft, dragMinLeft); // left = Math.min(left, tableBodyElem.clientWidth + tableBodyElem.scrollLeft - 40)\n        }\n\n        dragLeft = Math.max(left, dragMinLeft);\n        resizeBarElem.style.left = \"\".concat(dragLeft - scrollLeft, \"px\");\n      };\n\n      $xetable._isResize = true;\n      DomTools.addClass($xetable.$el, 'drag--resize');\n      resizeBarElem.style.display = 'block';\n      document.onmousemove = updateEvent;\n\n      document.onmouseup = function (evnt) {\n        document.onmousemove = domMousemove;\n        document.onmouseup = domMouseup;\n        column.resizeWidth = column.renderWidth + (isRightFixed ? dragPosLeft - dragLeft : dragLeft - dragPosLeft);\n        resizeBarElem.style.display = 'none';\n        $xetable._isResize = false;\n        $xetable._lastResizeTime = Date.now();\n        $xetable.analyColumnWidth();\n        $xetable.recalculate(true).then(function () {\n          $xetable.saveCustomResizable();\n          $xetable.updateCellAreas();\n          $xetable.emitEvent('resizable-change', params, evnt);\n        });\n        DomTools.removeClass($xetable.$el, 'drag--resize');\n      };\n\n      updateEvent(evnt);\n      $xetable.closeMenu();\n    }\n  }\n};",null]}