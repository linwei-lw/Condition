{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\table\\src\\methods.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\table\\src\\methods.js","mtime":1657012587403},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from \"../../v-x-e-table/src/conf\";\nimport Cell from \"./cell\";\nimport VXETable from \"../../v-x-e-table\";\nimport { UtilTools, DomTools } from \"../../tools\";\nimport { clearTableAllStatus, handleFieldOrColumn } from \"./util\";\nimport { eqEmptyValue, isEnableConf } from \"../../tools/src/utils\";\nimport { browse, getPaddingTopBottomSize, setScrollTop, setScrollLeft } from \"../../tools/src/dom\";\nimport { formats } from \"../../v-x-e-table/src/formats\";\nimport { arraySort, compare } from '@/common/util/Arrays.js'; //加\n\nvar getRowid = UtilTools.getRowid,\n    getRowkey = UtilTools.getRowkey,\n    setCellValue = UtilTools.setCellValue,\n    hasChildrenList = UtilTools.hasChildrenList,\n    getColumnList = UtilTools.getColumnList;\nvar calcHeight = DomTools.calcHeight,\n    hasClass = DomTools.hasClass,\n    addClass = DomTools.addClass,\n    removeClass = DomTools.removeClass,\n    getEventTargetNode = DomTools.getEventTargetNode;\nvar isWebkit = browse['-webkit'] && !browse.edge;\nvar debounceScrollYDuration = browse.msie ? 80 : 20;\nvar resizableStorageKey = 'VXE_TABLE_CUSTOM_COLUMN_WIDTH';\nvar visibleStorageKey = 'VXE_TABLE_CUSTOM_COLUMN_VISIBLE';\n/**\r\n * 生成行的唯一主键\r\n */\n\nfunction getRowUniqueId() {\n  return XEUtils.uniqueId('row_');\n}\n\nfunction eqCellValue(row1, row2, field) {\n  var val1 = XEUtils.get(row1, field);\n  var val2 = XEUtils.get(row2, field);\n\n  if (eqEmptyValue(val1) && eqEmptyValue(val2)) {\n    return true;\n  }\n\n  if (XEUtils.isString(val1) || XEUtils.isNumber(val1)) {\n    /* eslint-disable eqeqeq */\n    return val1 == val2;\n  }\n\n  return XEUtils.isEqual(val1, val2);\n}\n\nfunction getNextSortOrder(_vm, column) {\n  var orders = _vm.sortOpts.orders;\n  var currOrder = column.order || null;\n  var oIndex = orders.indexOf(currOrder) + 1;\n  return orders[oIndex < orders.length ? oIndex : 0];\n}\n\nfunction getCustomStorageMap(key) {\n  var version = GlobalConfig.version;\n  var rest = XEUtils.toStringJSON(localStorage.getItem(key));\n  return rest && rest._v === version ? rest : {\n    _v: version\n  };\n}\n\nfunction getRecoverRow(_vm, list) {\n  var fullAllDataRowMap = _vm.fullAllDataRowMap;\n  return list.filter(function (row) {\n    return fullAllDataRowMap.has(row);\n  });\n}\n\nfunction handleReserveRow(_vm, reserveRowMap) {\n  var fullDataRowIdData = _vm.fullDataRowIdData;\n  var reserveList = [];\n  XEUtils.each(reserveRowMap, function (item, rowid) {\n    if (fullDataRowIdData[rowid] && reserveList.indexOf(fullDataRowIdData[rowid].row) === -1) {\n      reserveList.push(fullDataRowIdData[rowid].row);\n    }\n  });\n  return reserveList;\n}\n\nfunction restoreScroll(_vm, scrollLeft, scrollTop) {\n  return _vm.clearScroll().then(function () {\n    if (scrollLeft || scrollTop) {\n      // 重置最后滚动状态\n      _vm.lastScrollLeft = 0;\n      _vm.lastScrollTop = 0; // 还原滚动状态\n\n      return _vm.scrollTo(scrollLeft, scrollTop);\n    }\n  });\n}\n\nfunction computeVirtualX(_vm) {\n  var $refs = _vm.$refs,\n      visibleColumn = _vm.visibleColumn;\n  var tableBody = $refs.tableBody;\n  var tableBodyElem = tableBody ? tableBody.$el : null;\n\n  if (tableBodyElem) {\n    var scrollLeft = tableBodyElem.scrollLeft,\n        clientWidth = tableBodyElem.clientWidth;\n    var endWidth = scrollLeft + clientWidth;\n    var toVisibleIndex = -1;\n    var cWidth = 0;\n    var visibleSize = 0;\n\n    for (var colIndex = 0, colLen = visibleColumn.length; colIndex < colLen; colIndex++) {\n      cWidth += visibleColumn[colIndex].renderWidth;\n\n      if (toVisibleIndex === -1 && scrollLeft < cWidth) {\n        toVisibleIndex = colIndex;\n      }\n\n      if (toVisibleIndex >= 0) {\n        visibleSize++;\n\n        if (cWidth > endWidth) {\n          break;\n        }\n      }\n    }\n\n    return {\n      toVisibleIndex: Math.max(0, toVisibleIndex),\n      visibleSize: Math.max(8, visibleSize)\n    };\n  }\n\n  return {\n    toVisibleIndex: 0,\n    visibleSize: 8\n  };\n}\n\nfunction computeVirtualY(_vm) {\n  var $refs = _vm.$refs,\n      vSize = _vm.vSize,\n      rowHeightMaps = _vm.rowHeightMaps,\n      params = _vm.params;\n  var tableHeader = $refs.tableHeader,\n      tableBody = $refs.tableBody;\n  var tableBodyElem = tableBody ? tableBody.$el : null;\n\n  if (tableBodyElem) {\n    var tableHeaderElem = tableHeader ? tableHeader.$el : null;\n    var rowHeight = params ? params.rowHeight : 0;\n\n    if (!rowHeight) {\n      var firstTrElem;\n      firstTrElem = tableBodyElem.querySelector('tr');\n\n      if (!firstTrElem && tableHeaderElem) {\n        firstTrElem = tableHeaderElem.querySelector('tr');\n      }\n\n      if (firstTrElem) {\n        rowHeight = firstTrElem.clientHeight;\n      }\n    }\n\n    if (!rowHeight) {\n      rowHeight = rowHeightMaps[vSize || 'default'];\n    }\n\n    var visibleSize = Math.max(8, Math.ceil(tableBodyElem.clientHeight / rowHeight) + 2);\n    return {\n      rowHeight: rowHeight,\n      visibleSize: visibleSize\n    };\n  }\n\n  return {\n    rowHeight: 0,\n    visibleSize: 8\n  };\n}\n\nfunction calculateMergerOffserIndex(list, offsetItem, type) {\n  for (var mcIndex = 0, len = list.length; mcIndex < len; mcIndex++) {\n    var mergeItem = list[mcIndex];\n    var startIndex = offsetItem.startIndex,\n        endIndex = offsetItem.endIndex;\n    var mergeStartIndex = mergeItem[type];\n    var mergeSpanNumber = mergeItem[type + 'span'];\n    var mergeEndIndex = mergeStartIndex + mergeSpanNumber;\n\n    if (mergeStartIndex < startIndex && startIndex < mergeEndIndex) {\n      offsetItem.startIndex = mergeStartIndex;\n    }\n\n    if (mergeStartIndex < endIndex && endIndex < mergeEndIndex) {\n      offsetItem.endIndex = mergeEndIndex;\n    }\n\n    if (offsetItem.startIndex !== startIndex || offsetItem.endIndex !== endIndex) {\n      mcIndex = -1;\n    }\n  }\n}\n\nfunction setMerges(_vm, merges, mList, rowList) {\n  if (merges) {\n    var treeConfig = _vm.treeConfig,\n        visibleColumn = _vm.visibleColumn;\n\n    if (treeConfig) {\n      throw new Error(UtilTools.getLog('vxe.error.noTree', ['merge-footer-items']));\n    }\n\n    if (!XEUtils.isArray(merges)) {\n      merges = [merges];\n    }\n\n    merges.forEach(function (item) {\n      var row = item.row,\n          col = item.col,\n          rowspan = item.rowspan,\n          colspan = item.colspan;\n\n      if (rowList && XEUtils.isNumber(row)) {\n        row = rowList[row];\n      }\n\n      if (XEUtils.isNumber(col)) {\n        col = visibleColumn[col];\n      }\n\n      if ((rowList ? row : XEUtils.isNumber(row)) && col && (rowspan || colspan)) {\n        rowspan = XEUtils.toNumber(rowspan) || 1;\n        colspan = XEUtils.toNumber(colspan) || 1;\n\n        if (rowspan > 1 || colspan > 1) {\n          var mcIndex = XEUtils.findIndexOf(mList, function (item) {\n            return item._row === row && item._col === col;\n          });\n          var mergeItem = mList[mcIndex];\n\n          if (mergeItem) {\n            mergeItem.rowspan = rowspan;\n            mergeItem.colspan = colspan;\n            mergeItem._rowspan = rowspan;\n            mergeItem._colspan = colspan;\n          } else {\n            var mergeRowIndex = rowList ? rowList.indexOf(row) : row;\n            var mergeColIndex = visibleColumn.indexOf(col);\n            mList.push({\n              row: mergeRowIndex,\n              col: mergeColIndex,\n              rowspan: rowspan,\n              colspan: colspan,\n              _row: row,\n              _col: col,\n              _rowspan: rowspan,\n              _colspan: colspan\n            });\n          }\n        }\n      }\n    });\n  }\n}\n\nfunction removeMerges(_vm, merges, mList, rowList) {\n  var rest = [];\n\n  if (merges) {\n    var treeConfig = _vm.treeConfig,\n        visibleColumn = _vm.visibleColumn;\n\n    if (treeConfig) {\n      throw new Error(UtilTools.getLog('vxe.error.noTree', ['merge-cells']));\n    }\n\n    if (!XEUtils.isArray(merges)) {\n      merges = [merges];\n    }\n\n    merges.forEach(function (item) {\n      var row = item.row,\n          col = item.col;\n\n      if (rowList && XEUtils.isNumber(row)) {\n        row = rowList[row];\n      }\n\n      if (XEUtils.isNumber(col)) {\n        col = visibleColumn[col];\n      }\n\n      var mcIndex = XEUtils.findIndexOf(mList, function (item) {\n        return item._row === row && item._col === col;\n      });\n\n      if (mcIndex > -1) {\n        var rItems = mList.splice(mcIndex, 1);\n        rest.push(rItems[0]);\n      }\n    });\n  }\n\n  return rest;\n}\n\nfunction clearAllSort(_vm) {\n  _vm.tableFullColumn.forEach(function (column) {\n    column.order = null;\n  });\n}\n\nfunction getOrderField(_vm, column) {\n  var sortBy = column.sortBy,\n      sortType = column.sortType;\n  return function (row) {\n    var cellValue;\n\n    if (sortBy) {\n      cellValue = XEUtils.isFunction(sortBy) ? sortBy({\n        row: row,\n        column: column\n      }) : XEUtils.get(row, sortBy);\n    } else {\n      cellValue = _vm.getCellLabel(row, column);\n    }\n\n    if (!sortType || sortType === 'auto') {\n      return isNaN(cellValue) ? cellValue : XEUtils.toNumber(cellValue);\n    } else if (sortType === 'number') {\n      return XEUtils.toNumber(cellValue);\n    } else if (sortType === 'string') {\n      return XEUtils.toString(cellValue);\n    }\n\n    return cellValue;\n  };\n}\n\nvar Methods = {\n  callSlot: function callSlot(slotFunc, params, h, vNodes) {\n    if (slotFunc) {\n      var $xegrid = this.$xegrid;\n\n      if ($xegrid) {\n        return $xegrid.callSlot(slotFunc, params, h, vNodes);\n      }\n\n      if (XEUtils.isFunction(slotFunc)) {\n        return slotFunc.call(this, params, h, vNodes);\n      }\n    }\n\n    return [];\n  },\n\n  /**\r\n   * 获取父容器元素\r\n   */\n  getParentElem: function getParentElem() {\n    var $el = this.$el,\n        $xegrid = this.$xegrid;\n    return $xegrid ? $xegrid.$el.parentNode : $el.parentNode;\n  },\n\n  /**\r\n   * 获取父容器的高度\r\n   */\n  getParentHeight: function getParentHeight() {\n    var $el = this.$el,\n        $xegrid = this.$xegrid,\n        height = this.height;\n    var parentElem = $el.parentNode;\n    var parentPaddingSize = height === 'auto' ? getPaddingTopBottomSize(parentElem) : 0;\n    return Math.floor($xegrid ? $xegrid.getParentHeight() : XEUtils.toNumber(getComputedStyle(parentElem).height) - parentPaddingSize);\n  },\n\n  /**\r\n   * 获取需要排除的高度\r\n   * 但渲染表格高度时，需要排除工具栏或分页等相关组件的高度\r\n   * 如果存在表尾合计滚动条，则需要排除滚动条高度\r\n   */\n  getExcludeHeight: function getExcludeHeight() {\n    var $xegrid = this.$xegrid;\n    return $xegrid ? $xegrid.getExcludeHeight() : 0;\n  },\n\n  /**\r\n   * 重置表格的一切数据状态\r\n   */\n  clearAll: function clearAll() {\n    return clearTableAllStatus(this);\n  },\n\n  /**\r\n   * 同步 data 数据\r\n   * 如果用了该方法，那么组件将不再记录增删改的状态，只能自行实现对应逻辑\r\n   * 对于某些特殊的场景，比如深层树节点元素发生变动时可能会用到\r\n   */\n  syncData: function syncData() {\n    var _this = this;\n\n    return this.$nextTick().then(function () {\n      _this.tableData = [];\n      return _this.$nextTick().then(function () {\n        return _this.loadTableData(_this.tableFullData);\n      });\n    });\n  },\n\n  /**\r\n   * 手动处理数据\r\n   * 对于手动更改了排序、筛选...等条件后需要重新处理数据时可能会用到\r\n   */\n  updateData: function updateData() {\n    return this.handleTableData(true).then(this.updateFooter).then(this.recalculate);\n  },\n  handleTableData: function handleTableData(force) {\n    var scrollYLoad = this.scrollYLoad,\n        scrollYStore = this.scrollYStore;\n    var fullData = force ? this.updateAfterFullData() : this.afterFullData;\n    this.tableData = scrollYLoad ? fullData.slice(scrollYStore.startIndex, scrollYStore.endIndex) : fullData.slice(0);\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 加载表格数据\r\n   * @param {Array} datas 数据\r\n   */\n  loadTableData: function loadTableData(datas) {\n    var _this2 = this;\n\n    var keepSource = this.keepSource,\n        treeConfig = this.treeConfig,\n        editStore = this.editStore,\n        sYOpts = this.sYOpts,\n        scrollYStore = this.scrollYStore,\n        scrollXStore = this.scrollXStore,\n        lastScrollLeft = this.lastScrollLeft,\n        lastScrollTop = this.lastScrollTop,\n        oldScrollYLoad = this.scrollYLoad;\n    var tableFullData = datas ? datas.slice(0) : [];\n    var scrollYLoad = !treeConfig && sYOpts.enabled && sYOpts.gt > -1 && sYOpts.gt < tableFullData.length;\n    scrollYStore.startIndex = 0;\n    scrollYStore.endIndex = 1;\n    scrollXStore.startIndex = 0;\n    scrollXStore.endIndex = 1;\n    editStore.insertList = [];\n    editStore.removeList = []; // 全量数据\n\n    this.tableFullData = tableFullData; // 缓存数据\n\n    this.updateCache(true); // 原始数据\n\n    this.tableSynchData = datas;\n\n    if (keepSource) {\n      this.tableSourceData = XEUtils.clone(tableFullData, true);\n    }\n\n    this.scrollYLoad = scrollYLoad;\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      if (scrollYLoad) {\n        if (!(this.height || this.maxHeight)) {\n          UtilTools.error('vxe.error.reqProp', ['table.height | table.max-height | table.scroll-y={enabled: false}']);\n        }\n\n        if (!this.showOverflow) {\n          UtilTools.warn('vxe.error.reqProp', ['table.show-overflow']);\n        }\n\n        if (this.spanMethod) {\n          UtilTools.warn('vxe.error.scrollErrProp', ['table.span-method']);\n        }\n      }\n    }\n\n    if (this.clearCellAreas && this.mouseConfig) {\n      this.clearCellAreas();\n      this.clearCopyCellArea();\n    }\n\n    this.clearMergeCells();\n    this.clearMergeFooterItems();\n    this.handleTableData(true);\n    this.updateFooter();\n    return this.$nextTick().then(function () {\n      _this2.updateHeight();\n\n      _this2.updateStyle();\n    }).then(function () {\n      _this2.computeScrollLoad();\n    }).then(function () {\n      // 是否加载了数据\n      if (scrollYLoad) {\n        scrollYStore.endIndex = scrollYStore.visibleSize;\n      }\n\n      _this2.handleReserveStatus();\n\n      _this2.checkSelectionStatus();\n\n      return new Promise(function (resolve) {\n        _this2.$nextTick().then(function () {\n          return _this2.recalculate();\n        }).then(function () {\n          // 是否变更虚拟滚动\n          if (oldScrollYLoad === scrollYLoad) {\n            restoreScroll(_this2, lastScrollLeft, lastScrollTop).then(resolve);\n          } else {\n            setTimeout(function () {\n              return restoreScroll(_this2, lastScrollLeft, lastScrollTop).then(resolve);\n            });\n          }\n        });\n      });\n    });\n  },\n\n  /**\r\n   * 重新加载数据，不会清空表格状态\r\n   * @param {Array} datas 数据\r\n   */\n  loadData: function loadData(datas) {\n    var _this3 = this;\n\n    var inited = this.inited,\n        initStatus = this.initStatus;\n    return this.loadTableData(datas).then(function () {\n      _this3.inited = true;\n      _this3.initStatus = true;\n\n      if (!initStatus) {\n        _this3.handleLoadDefaults();\n      }\n\n      if (!inited) {\n        _this3.handleInitDefaults();\n      }\n\n      return _this3.recalculate();\n    });\n  },\n\n  /**\r\n   * 重新加载数据，会清空表格状态\r\n   * @param {Array} datas 数据\r\n   */\n  reloadData: function reloadData(datas) {\n    var _this4 = this;\n\n    var inited = this.inited;\n    return this.clearAll().then(function () {\n      _this4.inited = true;\n      _this4.initStatus = true;\n      return _this4.loadTableData(datas);\n    }).then(function () {\n      _this4.handleLoadDefaults();\n\n      if (!inited) {\n        _this4.handleInitDefaults();\n      }\n\n      return _this4.recalculate();\n    });\n  },\n\n  /**\r\n   * 局部加载行数据并恢复到初始状态\r\n   * 对于行数据需要局部更改的场景中可能会用到\r\n   * @param {Row} row 行对象\r\n   * @param {Object} record 新数据\r\n   * @param {String} field 字段名\r\n   */\n  reloadRow: function reloadRow(row, record, field) {\n    var keepSource = this.keepSource,\n        tableSourceData = this.tableSourceData,\n        tableData = this.tableData;\n\n    if (keepSource) {\n      var rowIndex = this.getRowIndex(row);\n      var oRow = tableSourceData[rowIndex];\n\n      if (oRow && row) {\n        if (field) {\n          XEUtils.set(oRow, field, XEUtils.get(record || row, field));\n        } else {\n          if (record) {\n            tableSourceData[rowIndex] = record;\n            XEUtils.clear(row, undefined);\n            Object.assign(row, this.defineField(Object.assign({}, record)));\n            this.updateCache(true);\n          } else {\n            XEUtils.destructuring(oRow, XEUtils.clone(row, true));\n          }\n        }\n      }\n\n      this.tableData = tableData.slice(0);\n    } else {\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        UtilTools.warn('vxe.error.reqProp', ['keep-source']);\n      }\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 加载列配置\r\n   * 对于表格列需要重载、局部递增场景下可能会用到\r\n   * @param {ColumnInfo} columns 列配置\r\n   */\n  loadColumn: function loadColumn(columns) {\n    var _this5 = this;\n\n    var collectColumn = XEUtils.mapTree(columns, function (column) {\n      return Cell.createColumn(_this5, column);\n    }, {\n      children: 'children'\n    });\n    this.handleColumn(collectColumn);\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 加载列配置并恢复到初始状态\r\n   * 对于表格列需要重载、局部递增场景下可能会用到\r\n   * @param {ColumnInfo} columns 列配置\r\n   */\n  reloadColumn: function reloadColumn(columns) {\n    var _this6 = this;\n\n    return this.clearAll().then(function () {\n      return _this6.loadColumn(columns);\n    });\n  },\n  handleColumn: function handleColumn(collectColumn) {\n    var _this7 = this;\n\n    this.collectColumn = collectColumn;\n    var tableFullColumn = getColumnList(collectColumn);\n    this.tableFullColumn = tableFullColumn;\n    this.cacheColumnMap();\n    this.restoreCustomStorage();\n    this.parseColumns().then(function () {\n      if (_this7.scrollXLoad) {\n        _this7.loadScrollXData(true);\n      }\n    });\n    this.clearMergeCells();\n    this.clearMergeFooterItems();\n    this.handleTableData(true);\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      if ((this.scrollXLoad || this.scrollYLoad) && this.expandColumn) {\n        UtilTools.warn('vxe.error.scrollErrProp', ['column.type=expand']);\n      }\n    }\n\n    this.$nextTick(function () {\n      if (_this7.$toolbar) {\n        _this7.$toolbar.syncUpdate({\n          collectColumn: collectColumn,\n          $table: _this7\n        });\n      }\n    });\n  },\n\n  /**\r\n   * 更新数据行的 Map\r\n   * 牺牲数据组装的耗时，用来换取使用过程中的流畅\r\n   */\n  updateCache: function updateCache(source) {\n    var _this8 = this;\n\n    var treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        tableFullData = this.tableFullData,\n        fullDataRowMap = this.fullDataRowMap,\n        fullAllDataRowMap = this.fullAllDataRowMap;\n    var fullDataRowIdData = this.fullDataRowIdData,\n        fullAllDataRowIdData = this.fullAllDataRowIdData;\n    var rowkey = getRowkey(this);\n    var isLazy = treeConfig && treeOpts.lazy;\n\n    var handleCache = function handleCache(row, index, items, path, parent) {\n      var rowid = getRowid(_this8, row);\n\n      if (!rowid) {\n        rowid = getRowUniqueId();\n        XEUtils.set(row, rowkey, rowid);\n      }\n\n      if (isLazy && row[treeOpts.hasChild] && XEUtils.isUndefined(row[treeOpts.children])) {\n        row[treeOpts.children] = null;\n      }\n\n      var rest = {\n        row: row,\n        rowid: rowid,\n        index: treeConfig && parent ? -1 : index,\n        items: items,\n        parent: parent\n      };\n\n      if (source) {\n        fullDataRowIdData[rowid] = rest;\n        fullDataRowMap.set(row, rest);\n      }\n\n      fullAllDataRowIdData[rowid] = rest;\n      fullAllDataRowMap.set(row, rest);\n    };\n\n    if (source) {\n      fullDataRowIdData = this.fullDataRowIdData = {};\n      fullDataRowMap.clear();\n    }\n\n    fullAllDataRowIdData = this.fullAllDataRowIdData = {};\n    fullAllDataRowMap.clear();\n\n    if (treeConfig) {\n      XEUtils.eachTree(tableFullData, handleCache, treeOpts);\n    } else {\n      tableFullData.forEach(handleCache);\n    }\n  },\n  loadChildren: function loadChildren(row, childRecords) {\n    var _this9 = this;\n\n    return this.createData(childRecords).then(function (rows) {\n      var keepSource = _this9.keepSource,\n          tableSourceData = _this9.tableSourceData,\n          treeOpts = _this9.treeOpts,\n          fullDataRowIdData = _this9.fullDataRowIdData,\n          fullDataRowMap = _this9.fullDataRowMap,\n          fullAllDataRowMap = _this9.fullAllDataRowMap,\n          fullAllDataRowIdData = _this9.fullAllDataRowIdData;\n      var children = treeOpts.children;\n\n      if (keepSource) {\n        var rowid = getRowid(_this9, row);\n        var matchObj = XEUtils.findTree(tableSourceData, function (item) {\n          return rowid === getRowid(_this9, item);\n        }, treeOpts);\n\n        if (matchObj) {\n          matchObj.item[children] = XEUtils.clone(rows, true);\n        }\n      }\n\n      XEUtils.eachTree(rows, function (childRow, index, items, path, parent) {\n        var rowid = getRowid(_this9, childRow);\n        var rest = {\n          row: childRow,\n          rowid: rowid,\n          index: -1,\n          items: items,\n          parent: parent\n        };\n        fullDataRowIdData[rowid] = rest;\n        fullDataRowMap.set(childRow, rest);\n        fullAllDataRowIdData[rowid] = rest;\n        fullAllDataRowMap.set(childRow, rest);\n      }, treeOpts);\n      row[children] = rows;\n      return rows;\n    });\n  },\n\n  /**\r\n   * 更新数据列的 Map\r\n   * 牺牲数据组装的耗时，用来换取使用过程中的流畅\r\n   */\n  cacheColumnMap: function cacheColumnMap() {\n    var _this10 = this;\n\n    var tableFullColumn = this.tableFullColumn,\n        collectColumn = this.collectColumn,\n        fullColumnMap = this.fullColumnMap,\n        showOverflow = this.showOverflow;\n    var fullColumnIdData = this.fullColumnIdData = {};\n    var fullColumnFieldData = this.fullColumnFieldData = {};\n    var isGroup = collectColumn.some(hasChildrenList);\n    var isAllOverflow = !!showOverflow;\n    var expandColumn;\n    var treeNodeColumn;\n    var checkboxColumn;\n    var radioColumn;\n    var hasFixed;\n\n    var handleFunc = function handleFunc(column, index, items, path, parent) {\n      var colid = column.id,\n          property = column.property,\n          fixed = column.fixed,\n          type = column.type,\n          treeNode = column.treeNode;\n      var rest = {\n        column: column,\n        colid: colid,\n        index: index,\n        items: items,\n        parent: parent\n      };\n\n      if (property) {\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          if (fullColumnFieldData[property]) {\n            UtilTools.warn('vxe.error.colRepet', ['field', property]);\n          }\n        }\n\n        fullColumnFieldData[property] = rest;\n      }\n\n      if (!hasFixed && fixed) {\n        hasFixed = fixed;\n      }\n\n      if (treeNode) {\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          if (treeNodeColumn) {\n            UtilTools.warn('vxe.error.colRepet', ['tree-node', treeNode]);\n          }\n        }\n\n        if (!treeNodeColumn) {\n          treeNodeColumn = column;\n        }\n      } else if (type === 'expand') {\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          if (expandColumn) {\n            UtilTools.warn('vxe.error.colRepet', ['type', type]);\n          }\n        }\n\n        if (!expandColumn) {\n          expandColumn = column;\n        }\n      }\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (type === 'checkbox') {\n          if (checkboxColumn) {\n            UtilTools.warn('vxe.error.colRepet', ['type', type]);\n          }\n\n          if (!checkboxColumn) {\n            checkboxColumn = column;\n          }\n        } else if (type === 'radio') {\n          if (radioColumn) {\n            UtilTools.warn('vxe.error.colRepet', ['type', type]);\n          }\n\n          if (!radioColumn) {\n            radioColumn = column;\n          }\n        }\n      }\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (_this10.showOverflow && column.showOverflow === false) {\n          UtilTools.warn('vxe.error.errConflicts', [\"table.show-overflow=\".concat(_this10.showOverflow), \"column.show-overflow=\".concat(column.showOverflow)]);\n        }\n\n        if (_this10.showHeaderOverflow && column.showHeaderOverflow === false) {\n          UtilTools.warn('vxe.error.errConflicts', [\"table.show-header-overflow=\".concat(_this10.showHeaderOverflow), \"column.show-header-overflow=\".concat(column.showHeaderOverflow)]);\n        }\n\n        if (_this10.showFooterOverflow && column.showFooterOverflow === false) {\n          UtilTools.warn('vxe.error.errConflicts', [\"table.show-footer-overflow=\".concat(_this10.showFooterOverflow), \"column.show-footer-overflow=\".concat(column.showFooterOverflow)]);\n        }\n      }\n\n      if (isAllOverflow && column.showOverflow === false) {\n        isAllOverflow = false;\n      }\n\n      if (fullColumnIdData[colid]) {\n        UtilTools.error('vxe.error.colRepet', ['colId', colid]);\n      }\n\n      fullColumnIdData[colid] = rest;\n      fullColumnMap.set(column, rest);\n    };\n\n    fullColumnMap.clear();\n\n    if (isGroup) {\n      XEUtils.eachTree(collectColumn, function (column, index, items, path, parent, nodes) {\n        column.level = nodes.length;\n        handleFunc(column, index, items, path, parent);\n      });\n    } else {\n      tableFullColumn.forEach(handleFunc);\n    }\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      if (expandColumn && this.mouseOpts.area) {\n        UtilTools.error('vxe.error.errConflicts', ['mouse-config.area', 'column.type=expand']);\n      }\n    }\n\n    this.isGroup = isGroup;\n    this.treeNodeColumn = treeNodeColumn;\n    this.expandColumn = expandColumn;\n    this.isAllOverflow = isAllOverflow;\n  },\n\n  /**\r\n   * 根据 tr 元素获取对应的 row 信息\r\n   * @param {Element} tr 元素\r\n   */\n  getRowNode: function getRowNode(tr) {\n    if (tr) {\n      var fullAllDataRowIdData = this.fullAllDataRowIdData;\n      var rowid = tr.getAttribute('rowid');\n      var rest = fullAllDataRowIdData[rowid];\n\n      if (rest) {\n        return {\n          rowid: rest.rowid,\n          item: rest.row,\n          index: rest.index,\n          items: rest.items,\n          parent: rest.parent\n        };\n      }\n    }\n\n    return null;\n  },\n\n  /**\r\n   * 根据 th/td 元素获取对应的 column 信息\r\n   * @param {Element} cell 元素\r\n   */\n  getColumnNode: function getColumnNode(cell) {\n    if (cell) {\n      var fullColumnIdData = this.fullColumnIdData;\n      var colid = cell.getAttribute('colid');\n      var rest = fullColumnIdData[colid];\n\n      if (rest) {\n        return {\n          colid: rest.colid,\n          item: rest.column,\n          index: rest.index,\n          items: rest.items,\n          parent: rest.parent\n        };\n      }\n    }\n\n    return null;\n  },\n\n  /**\r\n   * 根据 row 获取相对于 data 中的索引\r\n   * @param {Row} row 行对象\r\n   */\n  getRowIndex: function getRowIndex(row) {\n    return this.fullDataRowMap.has(row) ? this.fullDataRowMap.get(row).index : -1;\n  },\n\n  /**\r\n   * 根据 row 获取相对于当前数据中的索引\r\n   * @param {Row} row 行对象\r\n   */\n  getVTRowIndex: function getVTRowIndex(row) {\n    return this.afterFullData.indexOf(row);\n  },\n  // 在 v3 中废弃\n  _getRowIndex: function _getRowIndex(row) {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      UtilTools.warn('vxe.error.delFunc', ['_getRowIndex', 'getVTRowIndex']);\n    }\n\n    return this.getVTRowIndex(row);\n  },\n\n  /**\r\n   * 根据 row 获取渲染中的虚拟索引\r\n   * @param {Row} row 行对象\r\n   */\n  getVMRowIndex: function getVMRowIndex(row) {\n    return this.tableData.indexOf(row);\n  },\n  // 在 v3 中废弃\n  $getRowIndex: function $getRowIndex(row) {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      UtilTools.warn('vxe.error.delFunc', ['$getRowIndex', 'getVMRowIndex']);\n    }\n\n    return this.getVMRowIndex(row);\n  },\n\n  /**\r\n   * 根据 column 获取相对于 columns 中的索引\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  getColumnIndex: function getColumnIndex(column) {\n    return this.fullColumnMap.has(column) ? this.fullColumnMap.get(column).index : -1;\n  },\n\n  /**\r\n   * 根据 column 获取相对于当前表格列中的索引\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  getVTColumnIndex: function getVTColumnIndex(column) {\n    return this.visibleColumn.indexOf(column);\n  },\n  // 在 v3 中废弃\n  _getColumnIndex: function _getColumnIndex(column) {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      UtilTools.warn('vxe.error.delFunc', ['_getColumnIndex', 'getVTColumnIndex']);\n    }\n\n    return this.getVTColumnIndex(column);\n  },\n\n  /**\r\n   * 根据 column 获取渲染中的虚拟索引\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  getVMColumnIndex: function getVMColumnIndex(column) {\n    return this.tableColumn.indexOf(column);\n  },\n  // 在 v3 中废弃\n  $getColumnIndex: function $getColumnIndex(column) {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      UtilTools.warn('vxe.error.delFunc', ['$getColumnIndex', 'getVMColumnIndex']);\n    }\n\n    return this.getVMColumnIndex(column);\n  },\n\n  /**\r\n   * 判断是否为索引列\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  isSeqColumn: function isSeqColumn(column) {\n    return column && (column.type === 'seq' || column.type === 'index');\n  },\n\n  /**\r\n   * 定义行数据中的列属性，如果不存在则定义\r\n   * @param {Row} record 行数据\r\n   */\n  defineField: function defineField(record) {\n    var radioOpts = this.radioOpts,\n        checkboxOpts = this.checkboxOpts,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        expandOpts = this.expandOpts;\n    var rowkey = getRowkey(this);\n    this.visibleColumn.forEach(function (_ref) {\n      var property = _ref.property,\n          editRender = _ref.editRender;\n\n      if (property && !XEUtils.has(record, property)) {\n        XEUtils.set(record, property, editRender && !XEUtils.isUndefined(editRender.defaultValue) ? editRender.defaultValue : null);\n      }\n    });\n    var ohterFields = [radioOpts.labelField, checkboxOpts.checkField, checkboxOpts.labelField, expandOpts.labelField];\n    ohterFields.forEach(function (key) {\n      if (key && !XEUtils.get(record, key)) {\n        XEUtils.set(record, key, null);\n      }\n    });\n\n    if (treeConfig && treeOpts.lazy && XEUtils.isUndefined(record[treeOpts.children])) {\n      record[treeOpts.children] = null;\n    } // 必须有行数据的唯一主键，可以自行设置；也可以默认生成一个随机数\n\n\n    if (!XEUtils.get(record, rowkey)) {\n      XEUtils.set(record, rowkey, getRowUniqueId());\n    }\n\n    return record;\n  },\n\n  /**\r\n   * 创建 data 对象\r\n   * 对于某些特殊场景可能会用到，会自动对数据的字段名进行检测，如果不存在就自动定义\r\n   * @param {Array} records 新数据\r\n   */\n  createData: function createData(records) {\n    var _this11 = this;\n\n    var treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts;\n\n    var handleRrecord = function handleRrecord(record) {\n      return _this11.defineField(Object.assign({}, record));\n    };\n\n    var rows = treeConfig ? XEUtils.mapTree(records, handleRrecord, treeOpts) : records.map(handleRrecord);\n    return this.$nextTick().then(function () {\n      return rows;\n    });\n  },\n\n  /**\r\n   * 创建 Row|Rows 对象\r\n   * 对于某些特殊场景需要对数据进行手动插入时可能会用到\r\n   * @param {Array/Object} records 新数据\r\n   */\n  createRow: function createRow(records) {\n    var _this12 = this;\n\n    var isArr = XEUtils.isArray(records);\n\n    if (!isArr) {\n      records = [records];\n    }\n\n    return this.$nextTick().then(function () {\n      return _this12.createData(records).then(function (rows) {\n        return isArr ? rows : rows[0];\n      });\n    });\n  },\n\n  /**\r\n   * 还原数据\r\n   * 如果不传任何参数，则还原整个表格\r\n   * 如果传 row 则还原一行\r\n   * 如果传 rows 则还原多行\r\n   * 如果还额外传了 field 则还原指定的单元格数据\r\n   */\n  revertData: function revertData(rows, field) {\n    var _this13 = this;\n\n    var keepSource = this.keepSource,\n        tableSourceData = this.tableSourceData,\n        treeConfig = this.treeConfig;\n\n    if (!keepSource) {\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        UtilTools.warn('vxe.error.reqProp', ['keep-source']);\n      }\n\n      return this.$nextTick();\n    }\n\n    var targetRows = rows;\n\n    if (rows) {\n      if (!XEUtils.isArray(rows)) {\n        targetRows = [rows];\n      }\n    } else {\n      targetRows = XEUtils.toArray(this.getUpdateRecords());\n    }\n\n    if (targetRows.length) {\n      targetRows.forEach(function (row) {\n        if (!_this13.isInsertByRow(row)) {\n          var rowIndex = _this13.getRowIndex(row);\n\n          if (treeConfig && rowIndex === -1) {\n            throw new Error(UtilTools.getLog('vxe.error.noTree', ['revertData']));\n          }\n\n          var oRow = tableSourceData[rowIndex];\n\n          if (oRow && row) {\n            if (field) {\n              XEUtils.set(row, field, XEUtils.clone(XEUtils.get(oRow, field), true));\n            } else {\n              XEUtils.destructuring(row, XEUtils.clone(oRow, true));\n            }\n          }\n        }\n      });\n    }\n\n    if (rows) {\n      return this.$nextTick();\n    }\n\n    return this.reloadData(tableSourceData);\n  },\n\n  /**\r\n   * 清空单元格内容\r\n   * 如果不创参数，则清空整个表格内容\r\n   * 如果传 row 则清空一行内容\r\n   * 如果传 rows 则清空多行内容\r\n   * 如果还额外传了 field 则清空指定单元格内容\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {String} field 字段名\r\n   */\n  clearData: function clearData(rows, field) {\n    var tableFullData = this.tableFullData,\n        visibleColumn = this.visibleColumn;\n\n    if (!arguments.length) {\n      rows = tableFullData;\n    } else if (rows && !XEUtils.isArray(rows)) {\n      rows = [rows];\n    }\n\n    if (field) {\n      rows.forEach(function (row) {\n        return XEUtils.set(row, field, null);\n      });\n    } else {\n      rows.forEach(function (row) {\n        visibleColumn.forEach(function (column) {\n          if (column.property) {\n            setCellValue(row, column, null);\n          }\n        });\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 检查是否为临时行数据\r\n   * @param {Row} row 行对象\r\n   */\n  isInsertByRow: function isInsertByRow(row) {\n    return this.editStore.insertList.indexOf(row) > -1;\n  },\n\n  /**\r\n   * 检查行或列数据是否发生改变\r\n   * @param {Row} row 行对象\r\n   * @param {String} field 字段名\r\n   */\n  isUpdateByRow: function isUpdateByRow(row, field) {\n    var _this14 = this;\n\n    var visibleColumn = this.visibleColumn,\n        keepSource = this.keepSource,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        tableSourceData = this.tableSourceData,\n        fullDataRowIdData = this.fullDataRowIdData;\n\n    if (keepSource) {\n      var oRow, property;\n      var rowid = getRowid(this, row); // 新增的数据不需要检测\n\n      if (!fullDataRowIdData[rowid]) {\n        return false;\n      }\n\n      if (treeConfig) {\n        var children = treeOpts.children;\n        var matchObj = XEUtils.findTree(tableSourceData, function (item) {\n          return rowid === getRowid(_this14, item);\n        }, treeOpts);\n        row = Object.assign({}, row, _defineProperty({}, children, null));\n\n        if (matchObj) {\n          oRow = Object.assign({}, matchObj.item, _defineProperty({}, children, null));\n        }\n      } else {\n        var oRowIndex = fullDataRowIdData[rowid].index;\n        oRow = tableSourceData[oRowIndex];\n      }\n\n      if (oRow) {\n        if (arguments.length > 1) {\n          return !eqCellValue(oRow, row, field);\n        }\n\n        for (var index = 0, len = visibleColumn.length; index < len; index++) {\n          property = visibleColumn[index].property;\n\n          if (property && !eqCellValue(oRow, row, property)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  },\n\n  /**\r\n   * 获取表格的可视列，也可以指定索引获取列\r\n   * @param {Number} columnIndex 索引\r\n   */\n  getColumns: function getColumns(columnIndex) {\n    var columns = this.visibleColumn;\n    return XEUtils.isUndefined(columnIndex) ? columns.slice(0) : columns[columnIndex];\n  },\n\n  /**\r\n   * 根据列的唯一主键获取列\r\n   * @param {String} colid 列主键\r\n   */\n  getColumnById: function getColumnById(colid) {\n    var fullColumnIdData = this.fullColumnIdData;\n    return fullColumnIdData[colid] ? fullColumnIdData[colid].column : null;\n  },\n\n  /**\r\n   * 根据列的字段名获取列\r\n   * @param {String} field 字段名\r\n   */\n  getColumnByField: function getColumnByField(field) {\n    var fullColumnFieldData = this.fullColumnFieldData;\n    return fullColumnFieldData[field] ? fullColumnFieldData[field].column : null;\n  },\n\n  /**\r\n   * 获取当前表格的列\r\n   * 收集到的全量列、全量表头列、处理条件之后的全量表头列、当前渲染中的表头列\r\n   */\n  getTableColumn: function getTableColumn() {\n    return {\n      collectColumn: this.collectColumn.slice(0),\n      fullColumn: this.tableFullColumn.slice(0),\n      visibleColumn: this.visibleColumn.slice(0),\n      tableColumn: this.tableColumn.slice(0)\n    };\n  },\n\n  /**\r\n   * 获取数据，和 data 的行为一致，也可以指定索引获取数据\r\n   */\n  getData: function getData(rowIndex) {\n    var tableSynchData = this.data || this.tableSynchData;\n    return XEUtils.isUndefined(rowIndex) ? tableSynchData.slice(0) : tableSynchData[rowIndex];\n  },\n\n  /**\r\n   * 用于多选行，获取已选中的数据\r\n   */\n  getCheckboxRecords: function getCheckboxRecords() {\n    var tableFullData = this.tableFullData,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        checkboxOpts = this.checkboxOpts;\n    var property = checkboxOpts.checkField;\n    var rowList = [];\n\n    if (property) {\n      if (treeConfig) {\n        rowList = XEUtils.filterTree(tableFullData, function (row) {\n          return XEUtils.get(row, property);\n        }, treeOpts);\n      } else {\n        rowList = tableFullData.filter(function (row) {\n          return XEUtils.get(row, property);\n        });\n      }\n    } else {\n      var selection = this.selection;\n\n      if (treeConfig) {\n        rowList = XEUtils.filterTree(tableFullData, function (row) {\n          return selection.indexOf(row) > -1;\n        }, treeOpts);\n      } else {\n        rowList = tableFullData.filter(function (row) {\n          return selection.indexOf(row) > -1;\n        });\n      }\n    }\n\n    return rowList;\n  },\n\n  /**\r\n   * 获取处理后全量的表格数据\r\n   * 如果存在筛选条件，继续处理\r\n   */\n  updateAfterFullData: function updateAfterFullData() {\n    var _this15 = this;\n\n    var tableFullColumn = this.tableFullColumn,\n        tableFullData = this.tableFullData,\n        filterOpts = this.filterOpts,\n        sortOpts = this.sortOpts;\n    var allRemoteFilter = filterOpts.remote,\n        allFilterMethod = filterOpts.filterMethod;\n    var allRemoteSort = sortOpts.remote,\n        allSortMethod = sortOpts.sortMethod,\n        sortMultiple = sortOpts.multiple;\n    var tableData = tableFullData.slice(0);\n    var filterColumns = [];\n    var orderColumns = [];\n    tableFullColumn.forEach(function (column) {\n      var sortable = column.sortable,\n          order = column.order,\n          filters = column.filters;\n\n      if (!allRemoteFilter && filters && filters.length) {\n        var valueList = [];\n        var itemList = [];\n        filters.forEach(function (item) {\n          if (item.checked) {\n            itemList.push(item);\n            valueList.push(item.value);\n          }\n        });\n\n        if (itemList.length) {\n          filterColumns.push({\n            column: column,\n            valueList: valueList,\n            itemList: itemList\n          });\n        }\n      }\n\n      if (!allRemoteSort && sortable && order) {\n        orderColumns.push({\n          column: column,\n          property: column.property,\n          order: order\n        });\n      }\n    });\n\n    if (filterColumns.length) {\n      tableData = tableData.filter(function (row) {\n        return filterColumns.every(function (_ref2) {\n          var column = _ref2.column,\n              valueList = _ref2.valueList,\n              itemList = _ref2.itemList;\n\n          if (valueList.length && !allRemoteFilter) {\n            var filterMethod = column.filterMethod,\n                filterRender = column.filterRender;\n            var compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n            var compFilterMethod = compConf && compConf.renderFilter ? compConf.filterMethod : null;\n            var cellValue = UtilTools.getCellValue(row, column);\n\n            if (filterMethod) {\n              return itemList.some(function (item) {\n                return filterMethod({\n                  value: item.value,\n                  option: item,\n                  cellValue: cellValue,\n                  row: row,\n                  column: column,\n                  $table: _this15\n                });\n              });\n            } else if (compFilterMethod) {\n              return itemList.some(function (item) {\n                return compFilterMethod({\n                  value: item.value,\n                  option: item,\n                  cellValue: cellValue,\n                  row: row,\n                  column: column,\n                  $table: _this15\n                });\n              });\n            } else if (allFilterMethod) {\n              return allFilterMethod({\n                options: itemList,\n                values: valueList,\n                cellValue: cellValue,\n                row: row,\n                column: column\n              });\n            }\n\n            return valueList.indexOf(XEUtils.get(row, column.property)) > -1;\n          }\n\n          return true;\n        });\n      });\n    }\n\n    var firstOrderColumn = orderColumns[0];\n\n    if (!allRemoteSort && firstOrderColumn) {\n      if (allSortMethod) {\n        var sortRests = allSortMethod({\n          data: tableData,\n          column: firstOrderColumn.column,\n          property: firstOrderColumn.property,\n          order: firstOrderColumn.order,\n          sortList: orderColumns,\n          $table: this\n        });\n        tableData = XEUtils.isArray(sortRests) ? sortRests : tableData;\n      } else {\n        // 兼容 v4\n        if (sortMultiple) {\n          tableData = XEUtils.orderBy(tableData, orderColumns.map(function (_ref3) {\n            var column = _ref3.column,\n                order = _ref3.order;\n            return [getOrderField(_this15, column), order];\n          }));\n        } else {\n          var column = firstOrderColumn.column,\n              rest = null;\n\n          if (column.sortMethod) {\n            rest = tableData.sort(column.sortMethod);\n          } else if (column.sortBy) {\n            rest = arraySort(tableData, column.sortBy, true);\n          } else if (column.formatter && column.sortByFormatter) {\n            var params = {\n              $table: this,\n              column: column\n            };\n            rest = tableData.sort(function (row1, row2) {\n              params.row = row1;\n              row1 = _this15.getCellLabel(row1, column, params);\n              params.row = row2;\n              row2 = _this15.getCellLabel(row2, column, params);\n              return compare(row1, row2);\n            });\n          } else if (column.property) {\n            rest = arraySort(tableData, column.property, true);\n          } else {\n            rest = tableData;\n          }\n\n          tableData = column.order === 'desc' ? rest.reverse() : rest; //        \t\n          //          // 兼容 v2，在 v4 中废弃， sortBy 不能为数组\n          //          let sortByConfs\n          //          if (XEUtils.isArray(firstOrderColumn.sortBy)) {\n          //            sortByConfs = firstOrderColumn.sortBy.map(item => [item, firstOrderColumn.order])\n          //          }\n          //          tableData = XEUtils.orderBy(tableData, sortByConfs || [firstOrderColumn].map(({ column, order }) => [getOrderField(this, column), order]))\n        }\n      }\n    }\n\n    this.afterFullData = tableData;\n    return tableData;\n  },\n\n  /**\r\n   * 根据行的唯一主键获取行\r\n   * @param {String/Number} rowid 行主键\r\n   */\n  getRowById: function getRowById(rowid) {\n    var fullDataRowIdData = this.fullDataRowIdData;\n    return fullDataRowIdData[rowid] ? fullDataRowIdData[rowid].row : null;\n  },\n\n  /**\r\n   * 根据行获取行的唯一主键\r\n   * @param {Row} row 行对象\r\n   */\n  getRowid: function getRowid(row) {\n    var fullAllDataRowMap = this.fullAllDataRowMap;\n    return fullAllDataRowMap.has(row) ? fullAllDataRowMap.get(row).rowid : null;\n  },\n\n  /**\r\n   * 获取处理后的表格数据\r\n   * 如果存在筛选条件，继续处理\r\n   * 如果存在排序，继续处理\r\n   */\n  getTableData: function getTableData() {\n    var tableFullData = this.tableFullData,\n        afterFullData = this.afterFullData,\n        tableData = this.tableData,\n        footerTableData = this.footerTableData;\n    return {\n      fullData: tableFullData.slice(0),\n      visibleData: afterFullData.slice(0),\n      tableData: tableData.slice(0),\n      footerData: footerTableData.slice(0)\n    };\n  },\n\n  /**\r\n   * 处理数据加载默认行为\r\n   * 默认执行一次，除非被重置\r\n   */\n  handleLoadDefaults: function handleLoadDefaults() {\n    var _this16 = this;\n\n    if (this.checkboxConfig) {\n      this.handleDefaultSelectionChecked();\n    }\n\n    if (this.radioConfig) {\n      this.handleDefaultRadioChecked();\n    }\n\n    if (this.expandConfig) {\n      this.handleDefaultRowExpand();\n    }\n\n    if (this.treeConfig) {\n      this.handleDefaultTreeExpand();\n    }\n\n    if (this.mergeCells) {\n      this.handleDefaultMergeCells();\n    }\n\n    if (this.mergeFooterItems) {\n      this.handleDefaultMergeFooterItems();\n    }\n\n    this.$nextTick(function () {\n      return setTimeout(_this16.recalculate);\n    });\n  },\n\n  /**\r\n   * 处理初始化的默认行为\r\n   * 只会执行一次\r\n   */\n  handleInitDefaults: function handleInitDefaults() {\n    var sortConfig = this.sortConfig;\n\n    if (sortConfig) {\n      this.handleDefaultSort();\n    }\n  },\n\n  /**\r\n   * 隐藏指定列\r\n   */\n  hideColumn: function hideColumn(fieldOrColumn) {\n    var column = handleFieldOrColumn(this, fieldOrColumn);\n\n    if (column) {\n      column.visible = false;\n    }\n\n    return this.handleCustom();\n  },\n\n  /**\r\n   * 显示指定列\r\n   */\n  showColumn: function showColumn(fieldOrColumn) {\n    var column = handleFieldOrColumn(this, fieldOrColumn);\n\n    if (column) {\n      column.visible = true;\n    }\n\n    return this.handleCustom();\n  },\n\n  /**\r\n   * 手动重置列的显示隐藏、列宽拖动的状态；\r\n   * 如果为 true 则重置所有状态\r\n   * 如果已关联工具栏，则会同步更新\r\n   */\n  resetColumn: function resetColumn(options) {\n    var customOpts = this.customOpts;\n    var checkMethod = customOpts.checkMethod;\n    var opts = Object.assign({\n      visible: true,\n      resizable: options === true\n    }, options);\n    this.tableFullColumn.forEach(function (column) {\n      if (opts.resizable) {\n        column.resizeWidth = 0;\n      }\n\n      if (!checkMethod || checkMethod({\n        column: column\n      })) {\n        column.visible = column.defaultVisible;\n      }\n    });\n\n    if (opts.resizable) {\n      this.saveCustomResizable(true);\n    }\n\n    return this.handleCustom();\n  },\n  handleCustom: function handleCustom() {\n    this.saveCustomVisible();\n    this.analyColumnWidth();\n    return this.refreshColumn();\n  },\n\n  /**\r\n   * 还原自定义列操作状态\r\n   */\n  restoreCustomStorage: function restoreCustomStorage() {\n    var id = this.id,\n        collectColumn = this.collectColumn,\n        customConfig = this.customConfig,\n        customOpts = this.customOpts;\n    var storage = customOpts.storage;\n    var isAllStorage = customOpts.storage === true;\n    var isResizable = isAllStorage || storage && storage.resizable;\n    var isVisible = isAllStorage || storage && storage.visible;\n\n    if (customConfig && (isResizable || isVisible)) {\n      var customMap = {};\n\n      if (!id) {\n        UtilTools.error('vxe.error.reqProp', ['id']);\n        return;\n      }\n\n      if (isResizable) {\n        var columnWidthStorage = getCustomStorageMap(resizableStorageKey)[id];\n\n        if (columnWidthStorage) {\n          XEUtils.each(columnWidthStorage, function (resizeWidth, field) {\n            customMap[field] = {\n              field: field,\n              resizeWidth: resizeWidth\n            };\n          });\n        }\n      }\n\n      if (isVisible) {\n        var columnVisibleStorage = getCustomStorageMap(visibleStorageKey)[id];\n\n        if (columnVisibleStorage) {\n          var colVisibles = columnVisibleStorage.split('|');\n          var colHides = colVisibles[0] ? colVisibles[0].split(',') : [];\n          var colShows = colVisibles[1] ? colVisibles[1].split(',') : [];\n          colHides.forEach(function (field) {\n            if (customMap[field]) {\n              customMap[field].visible = false;\n            } else {\n              customMap[field] = {\n                field: field,\n                visible: false\n              };\n            }\n          });\n          colShows.forEach(function (field) {\n            if (customMap[field]) {\n              customMap[field].visible = true;\n            } else {\n              customMap[field] = {\n                field: field,\n                visible: true\n              };\n            }\n          });\n        }\n      }\n\n      var keyMap = {};\n      XEUtils.eachTree(collectColumn, function (column) {\n        var colKey = column.getKey();\n\n        if (colKey) {\n          keyMap[colKey] = column;\n        }\n      });\n      XEUtils.each(customMap, function (_ref4, field) {\n        var visible = _ref4.visible,\n            resizeWidth = _ref4.resizeWidth;\n        var column = keyMap[field];\n\n        if (column) {\n          if (XEUtils.isNumber(resizeWidth)) {\n            column.resizeWidth = resizeWidth;\n          }\n\n          if (XEUtils.isBoolean(visible)) {\n            column.visible = visible;\n          }\n        }\n      });\n    }\n  },\n  saveCustomVisible: function saveCustomVisible() {\n    var id = this.id,\n        collectColumn = this.collectColumn,\n        customConfig = this.customConfig,\n        customOpts = this.customOpts;\n    var checkMethod = customOpts.checkMethod,\n        storage = customOpts.storage;\n    var isAllStorage = customOpts.storage === true;\n    var isVisible = isAllStorage || storage && storage.visible;\n\n    if (customConfig && isVisible) {\n      var columnVisibleStorageMap = getCustomStorageMap(visibleStorageKey);\n      var colHides = [];\n      var colShows = [];\n\n      if (!id) {\n        UtilTools.error('vxe.error.reqProp', ['id']);\n        return;\n      }\n\n      XEUtils.eachTree(collectColumn, function (column) {\n        if (!checkMethod || checkMethod({\n          column: column\n        })) {\n          if (!column.visible && column.defaultVisible) {\n            var colKey = column.getKey();\n\n            if (colKey) {\n              colHides.push(colKey);\n            }\n          } else if (column.visible && !column.defaultVisible) {\n            var _colKey = column.getKey();\n\n            if (_colKey) {\n              colShows.push(_colKey);\n            }\n          }\n        }\n      });\n      columnVisibleStorageMap[id] = [colHides.join(',')].concat(colShows.length ? [colShows.join(',')] : []).join('|') || undefined;\n      localStorage.setItem(visibleStorageKey, XEUtils.toJSONString(columnVisibleStorageMap));\n    }\n  },\n  saveCustomResizable: function saveCustomResizable(isReset) {\n    var id = this.id,\n        collectColumn = this.collectColumn,\n        customConfig = this.customConfig,\n        customOpts = this.customOpts;\n    var storage = customOpts.storage;\n    var isAllStorage = customOpts.storage === true;\n    var isResizable = isAllStorage || storage && storage.resizable;\n\n    if (customConfig && isResizable) {\n      var columnWidthStorageMap = getCustomStorageMap(resizableStorageKey);\n      var columnWidthStorage;\n\n      if (!id) {\n        UtilTools.error('vxe.error.reqProp', ['id']);\n        return;\n      }\n\n      if (!isReset) {\n        columnWidthStorage = XEUtils.isPlainObject(columnWidthStorageMap[id]) ? columnWidthStorageMap[id] : {};\n        XEUtils.eachTree(collectColumn, function (column) {\n          if (column.resizeWidth) {\n            var colKey = column.getKey();\n\n            if (colKey) {\n              columnWidthStorage[colKey] = column.renderWidth;\n            }\n          }\n        });\n      }\n\n      columnWidthStorageMap[id] = XEUtils.isEmpty(columnWidthStorage) ? undefined : columnWidthStorage;\n      localStorage.setItem(resizableStorageKey, XEUtils.toJSONString(columnWidthStorageMap));\n    }\n  },\n\n  /**\r\n   * 刷新列配置\r\n   */\n  refreshColumn: function refreshColumn() {\n    var _this17 = this;\n\n    return this.parseColumns().then(function () {\n      return _this17.refreshScroll();\n    }).then(function () {\n      return _this17.recalculate();\n    });\n  },\n\n  /**\r\n   * 刷新列信息\r\n   * 将固定的列左边、右边分别靠边\r\n   */\n  parseColumns: function parseColumns() {\n    var _this18 = this;\n\n    var leftList = [];\n    var centerList = [];\n    var rightList = [];\n    var collectColumn = this.collectColumn,\n        tableFullColumn = this.tableFullColumn,\n        isGroup = this.isGroup,\n        columnStore = this.columnStore,\n        sXOpts = this.sXOpts,\n        scrollXStore = this.scrollXStore; // 如果是分组表头，如果子列全部被隐藏，则根列也隐藏\n\n    if (isGroup) {\n      var leftGroupList = [];\n      var centerGroupList = [];\n      var rightGroupList = [];\n      XEUtils.eachTree(collectColumn, function (column, index, items, path, parent) {\n        var isColGroup = hasChildrenList(column); // 如果是分组，必须按组设置固定列，不允许给子列设置固定\n\n        if (parent && parent.fixed) {\n          column.fixed = parent.fixed;\n        }\n\n        if (parent && column.fixed !== parent.fixed) {\n          UtilTools.error('vxe.error.groupFixed');\n        }\n\n        if (isColGroup) {\n          column.visible = !!XEUtils.findTree(column.children, function (subColumn) {\n            return hasChildrenList(subColumn) ? null : subColumn.visible;\n          });\n        } else if (column.visible) {\n          if (column.fixed === 'left') {\n            leftList.push(column);\n          } else if (column.fixed === 'right') {\n            rightList.push(column);\n          } else {\n            centerList.push(column);\n          }\n        }\n      });\n      collectColumn.forEach(function (column) {\n        if (column.visible) {\n          if (column.fixed === 'left') {\n            leftGroupList.push(column);\n          } else if (column.fixed === 'right') {\n            rightGroupList.push(column);\n          } else {\n            centerGroupList.push(column);\n          }\n        }\n      });\n      this.tableGroupColumn = leftGroupList.concat(centerGroupList).concat(rightGroupList);\n    } else {\n      // 重新分配列\n      tableFullColumn.forEach(function (column) {\n        if (column.visible) {\n          if (column.fixed === 'left') {\n            leftList.push(column);\n          } else if (column.fixed === 'right') {\n            rightList.push(column);\n          } else {\n            centerList.push(column);\n          }\n        }\n      });\n    }\n\n    var visibleColumn = leftList.concat(centerList).concat(rightList);\n    var scrollXLoad = sXOpts.enabled && sXOpts.gt > -1 && sXOpts.gt < tableFullColumn.length;\n    this.hasFixedColumn = leftList.length > 0 || rightList.length > 0;\n    Object.assign(columnStore, {\n      leftList: leftList,\n      centerList: centerList,\n      rightList: rightList\n    });\n\n    if (scrollXLoad && isGroup) {\n      scrollXLoad = false;\n\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        UtilTools.warn('vxe.error.scrollXNotGroup');\n      }\n    }\n\n    if (scrollXLoad) {\n      if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n        if (this.showHeader && !this.showHeaderOverflow) {\n          UtilTools.warn('vxe.error.reqProp', ['show-header-overflow']);\n        }\n\n        if (this.showFooter && !this.showFooterOverflow) {\n          UtilTools.warn('vxe.error.reqProp', ['show-footer-overflow']);\n        }\n\n        if (this.spanMethod) {\n          UtilTools.warn('vxe.error.scrollErrProp', ['span-method']);\n        }\n\n        if (this.footerSpanMethod) {\n          UtilTools.warn('vxe.error.scrollErrProp', ['footer-span-method']);\n        }\n      }\n\n      var _computeVirtualX = computeVirtualX(this),\n          visibleSize = _computeVirtualX.visibleSize;\n\n      scrollXStore.startIndex = 0;\n      scrollXStore.endIndex = visibleSize;\n      scrollXStore.visibleSize = visibleSize;\n    } // 如果列被显示/隐藏，则清除合并状态\n    // 如果列被设置为固定，则清除合并状态\n\n\n    if (visibleColumn.length !== this.visibleColumn.length || !this.visibleColumn.every(function (column, index) {\n      return column === visibleColumn[index];\n    })) {\n      this.clearMergeCells();\n      this.clearMergeFooterItems();\n    }\n\n    this.scrollXLoad = scrollXLoad;\n    this.visibleColumn = visibleColumn;\n    this.handleTableColumn();\n    return this.updateFooter().then(function () {\n      return _this18.recalculate();\n    }).then(function () {\n      _this18.updateCellAreas();\n\n      return _this18.recalculate();\n    });\n  },\n\n  /**\r\n   * 指定列宽的列进行拆分\r\n   */\n  analyColumnWidth: function analyColumnWidth() {\n    var columnOpts = this.columnOpts;\n    var defaultWidth = columnOpts.width,\n        defaultMinWidth = columnOpts.minWidth;\n    var resizeList = [];\n    var pxList = [];\n    var pxMinList = [];\n    var scaleList = [];\n    var scaleMinList = [];\n    var autoList = [];\n    this.tableFullColumn.forEach(function (column) {\n      if (defaultWidth && !column.width) {\n        column.width = defaultWidth;\n      }\n\n      if (defaultMinWidth && !column.minWidth) {\n        column.minWidth = defaultMinWidth;\n      }\n\n      if (column.visible) {\n        if (column.resizeWidth) {\n          resizeList.push(column);\n        } else if (DomTools.isPx(column.width)) {\n          pxList.push(column);\n        } else if (DomTools.isScale(column.width)) {\n          scaleList.push(column);\n        } else if (DomTools.isPx(column.minWidth)) {\n          pxMinList.push(column);\n        } else if (DomTools.isScale(column.minWidth)) {\n          scaleMinList.push(column);\n        } else {\n          autoList.push(column);\n        }\n      }\n    });\n    Object.assign(this.columnStore, {\n      resizeList: resizeList,\n      pxList: pxList,\n      pxMinList: pxMinList,\n      scaleList: scaleList,\n      scaleMinList: scaleMinList,\n      autoList: autoList\n    });\n  },\n\n  /**\r\n   * 刷新滚动操作，手动同步滚动相关位置（对于某些特殊的操作，比如滚动条错位、固定列不同步）\r\n   */\n  refreshScroll: function refreshScroll() {\n    var lastScrollLeft = this.lastScrollLeft,\n        lastScrollTop = this.lastScrollTop;\n    var $refs = this.$refs;\n    var tableBody = $refs.tableBody,\n        leftBody = $refs.leftBody,\n        rightBody = $refs.rightBody,\n        tableFooter = $refs.tableFooter;\n    var tableBodyElem = tableBody ? tableBody.$el : null;\n    var leftBodyElem = leftBody ? leftBody.$el : null;\n    var rightBodyElem = rightBody ? rightBody.$el : null;\n    var tableFooterElem = tableFooter ? tableFooter.$el : null; // 还原滚动条位置\n\n    if (lastScrollLeft || lastScrollTop) {\n      return restoreScroll(this, lastScrollLeft, lastScrollTop);\n    } // 重置\n\n\n    setScrollTop(tableBodyElem, lastScrollTop);\n    setScrollTop(leftBodyElem, lastScrollTop);\n    setScrollTop(rightBodyElem, lastScrollTop);\n    setScrollLeft(tableFooterElem, lastScrollLeft);\n  },\n\n  /**\r\n   * 计算单元格列宽，动态分配可用剩余空间\r\n   * 支持 width=? width=?px width=?% min-width=? min-width=?px min-width=?%\r\n   */\n  recalculate: function recalculate(refull) {\n    var _this19 = this;\n\n    var $refs = this.$refs;\n    var tableBody = $refs.tableBody,\n        tableHeader = $refs.tableHeader,\n        tableFooter = $refs.tableFooter;\n    var bodyElem = tableBody ? tableBody.$el : null;\n    var headerElem = tableHeader ? tableHeader.$el : null;\n    var footerElem = tableFooter ? tableFooter.$el : null;\n\n    if (bodyElem) {\n      this.autoCellWidth(headerElem, bodyElem, footerElem);\n\n      if (refull === true) {\n        // 初始化时需要在列计算之后再执行优化运算，达到最优显示效果\n        return this.computeScrollLoad().then(function () {\n          _this19.autoCellWidth(headerElem, bodyElem, footerElem);\n\n          return _this19.computeScrollLoad();\n        });\n      }\n    }\n\n    return this.computeScrollLoad();\n  },\n\n  /**\r\n   * 列宽算法\r\n   * 支持 px、%、固定 混合分配\r\n   * 支持动态列表调整分配\r\n   * 支持自动分配偏移量\r\n   * @param {Element} headerElem\r\n   * @param {Element} bodyElem\r\n   * @param {Element} footerElem\r\n   * @param {Number} bodyWidth\r\n   */\n  autoCellWidth: function autoCellWidth(headerElem, bodyElem, footerElem) {\n    var tableWidth = 0;\n    var minCellWidth = 40; // 列宽最少限制 40px\n\n    var bodyWidth = bodyElem.clientWidth - 1;\n    var remainWidth = bodyWidth;\n    var meanWidth = remainWidth / 100;\n    var fit = this.fit,\n        columnStore = this.columnStore;\n    var resizeList = columnStore.resizeList,\n        pxMinList = columnStore.pxMinList,\n        pxList = columnStore.pxList,\n        scaleList = columnStore.scaleList,\n        scaleMinList = columnStore.scaleMinList,\n        autoList = columnStore.autoList; // 最小宽\n\n    pxMinList.forEach(function (column) {\n      var minWidth = parseInt(column.minWidth);\n      tableWidth += minWidth;\n      column.renderWidth = minWidth;\n    }); // 最小百分比\n\n    scaleMinList.forEach(function (column) {\n      var scaleWidth = Math.floor(parseInt(column.minWidth) * meanWidth);\n      tableWidth += scaleWidth;\n      column.renderWidth = scaleWidth;\n    }); // 固定百分比\n\n    scaleList.forEach(function (column) {\n      var scaleWidth = Math.floor(parseInt(column.width) * meanWidth);\n      tableWidth += scaleWidth;\n      column.renderWidth = scaleWidth;\n    }); // 固定宽\n\n    pxList.forEach(function (column) {\n      var width = parseInt(column.width);\n      tableWidth += width;\n      column.renderWidth = width;\n    }); // 调整了列宽\n\n    resizeList.forEach(function (column) {\n      var width = parseInt(column.resizeWidth);\n      tableWidth += width;\n      column.renderWidth = width;\n    });\n    remainWidth -= tableWidth;\n    meanWidth = remainWidth > 0 ? Math.floor(remainWidth / (scaleMinList.length + pxMinList.length + autoList.length)) : 0;\n\n    if (fit) {\n      if (remainWidth > 0) {\n        scaleMinList.concat(pxMinList).forEach(function (column) {\n          tableWidth += meanWidth;\n          column.renderWidth += meanWidth;\n        });\n      }\n    } else {\n      meanWidth = minCellWidth;\n    } // 自适应\n\n\n    autoList.forEach(function (column) {\n      var width = Math.max(meanWidth, minCellWidth);\n      column.renderWidth = width;\n      tableWidth += width;\n    });\n\n    if (fit) {\n      /**\r\n       * 偏移量算法\r\n       * 如果所有列足够放的情况下，从最后动态列开始分配\r\n       */\n      var dynamicList = scaleList.concat(scaleMinList).concat(pxMinList).concat(autoList);\n      var dynamicSize = dynamicList.length - 1;\n\n      if (dynamicSize > 0) {\n        var odiffer = bodyWidth - tableWidth;\n\n        if (odiffer > 0) {\n          while (odiffer > 0 && dynamicSize >= 0) {\n            odiffer--;\n            dynamicList[dynamicSize--].renderWidth++;\n          }\n\n          tableWidth = bodyWidth;\n        }\n      }\n    }\n\n    var tableHeight = bodyElem.offsetHeight;\n    var overflowY = bodyElem.scrollHeight > bodyElem.clientHeight;\n    this.scrollbarWidth = overflowY ? bodyElem.offsetWidth - bodyElem.clientWidth : 0;\n    this.overflowY = overflowY;\n    this.tableWidth = tableWidth;\n    this.tableHeight = tableHeight;\n\n    if (headerElem) {\n      this.headerHeight = headerElem.clientHeight;\n      this.$nextTick(function () {\n        // 检测是否同步滚动\n        if (headerElem && bodyElem && headerElem.scrollLeft !== bodyElem.scrollLeft) {\n          headerElem.scrollLeft = bodyElem.scrollLeft;\n        }\n      });\n    } else {\n      this.headerHeight = 0;\n    }\n\n    if (footerElem) {\n      var footerHeight = footerElem.offsetHeight;\n      this.scrollbarHeight = Math.max(footerHeight - footerElem.clientHeight, 0);\n      this.overflowX = tableWidth > footerElem.clientWidth;\n      this.footerHeight = footerHeight;\n    } else {\n      this.footerHeight = 0;\n      this.scrollbarHeight = Math.max(tableHeight - bodyElem.clientHeight, 0);\n      this.overflowX = tableWidth > bodyWidth;\n    }\n\n    this.updateHeight();\n    this.parentHeight = Math.max(this.headerHeight + this.footerHeight + 20, this.getParentHeight());\n\n    if (this.overflowX) {\n      this.checkScrolling();\n    }\n  },\n  updateHeight: function updateHeight() {\n    this.customHeight = calcHeight(this, 'height');\n    this.customMaxHeight = calcHeight(this, 'maxHeight');\n  },\n  updateStyle: function updateStyle() {\n    var _this20 = this;\n\n    var $refs = this.$refs,\n        isGroup = this.isGroup,\n        fullColumnIdData = this.fullColumnIdData,\n        tableColumn = this.tableColumn,\n        customHeight = this.customHeight,\n        customMaxHeight = this.customMaxHeight,\n        border = this.border,\n        headerHeight = this.headerHeight,\n        showFooter = this.showFooter,\n        allColumnOverflow = this.showOverflow,\n        allColumnHeaderOverflow = this.showHeaderOverflow,\n        allColumnFooterOverflow = this.showFooterOverflow,\n        footerHeight = this.footerHeight,\n        tableHeight = this.tableHeight,\n        tableWidth = this.tableWidth,\n        scrollbarHeight = this.scrollbarHeight,\n        scrollbarWidth = this.scrollbarWidth,\n        scrollXLoad = this.scrollXLoad,\n        scrollYLoad = this.scrollYLoad,\n        cellOffsetWidth = this.cellOffsetWidth,\n        columnStore = this.columnStore,\n        elemStore = this.elemStore,\n        editStore = this.editStore,\n        currentRow = this.currentRow,\n        mouseConfig = this.mouseConfig,\n        keyboardConfig = this.keyboardConfig,\n        keyboardOpts = this.keyboardOpts,\n        spanMethod = this.spanMethod,\n        mergeList = this.mergeList,\n        mergeFooterList = this.mergeFooterList,\n        footerSpanMethod = this.footerSpanMethod,\n        isAllOverflow = this.isAllOverflow;\n    var containerList = ['main', 'left', 'right'];\n    var emptyPlaceholderElem = $refs.emptyPlaceholder;\n    var bodyWrapperElem = elemStore['main-body-wrapper'];\n\n    var _headerHeight = Math.max(32, headerHeight); //加\n\n\n    if (emptyPlaceholderElem) {\n      //      emptyPlaceholderElem.style.top = `${headerHeight}px`//删\n      //      emptyPlaceholderElem.style.height = bodyWrapperElem ? `${bodyWrapperElem.offsetHeight - scrollbarHeight}px` : ''//删\n      emptyPlaceholderElem.style.top = \"\".concat(_headerHeight, \"px\"); //加\n\n      emptyPlaceholderElem.style.height = 'calc(100% - ' + _headerHeight + 'px)'; //加\n    }\n\n    if (customHeight > 0) {\n      if (showFooter) {\n        customHeight += scrollbarHeight;\n      }\n    }\n\n    containerList.forEach(function (name, index) {\n      var fixedType = index > 0 ? name : '';\n      var layoutList = ['header', 'body', 'footer'];\n      var fixedColumn = columnStore[\"\".concat(fixedType, \"List\")];\n      var fixedWrapperElem = $refs[\"\".concat(fixedType, \"Container\")];\n      layoutList.forEach(function (layout) {\n        var wrapperElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-wrapper\")];\n        var tableElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-table\")];\n\n        if (layout === 'header') {\n          // 表头体样式处理\n          // 横向滚动渲染\n          var tWidth = tableWidth; // 如果是使用优化模式\n\n          var isOptimize = false;\n\n          if (!isGroup) {\n            if (fixedType) {\n              if (scrollXLoad || allColumnHeaderOverflow) {\n                isOptimize = true;\n              }\n            }\n          }\n\n          if (isOptimize) {\n            tableColumn = fixedColumn;\n          }\n\n          if (isOptimize || scrollXLoad) {\n            tWidth = tableColumn.reduce(function (previous, column) {\n              return previous + column.renderWidth;\n            }, 0);\n          }\n\n          if (tableElem) {\n            tableElem.style.width = tWidth ? \"\".concat(tWidth + scrollbarWidth + 1, \"px\") : ''; //改\n            // 修复 IE 中高度无法自适应问题\n\n            if (browse.msie) {\n              XEUtils.arrayEach(tableElem.querySelectorAll('.vxe-resizable'), function (resizeElem) {\n                resizeElem.style.height = \"\".concat(resizeElem.parentNode.offsetHeight, \"px\");\n              });\n            }\n          }\n\n          var repairElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-repair\")];\n\n          if (repairElem) {\n            repairElem.style.width = \"\".concat(tableWidth, \"px\");\n          }\n\n          var listElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-list\")];\n\n          if (isGroup && listElem) {\n            XEUtils.arrayEach(listElem.querySelectorAll('.col--group'), function (thElem) {\n              var colNode = _this20.getColumnNode(thElem);\n\n              if (colNode) {\n                var column = colNode.item;\n                var showHeaderOverflow = column.showHeaderOverflow;\n                var cellOverflow = XEUtils.isBoolean(showHeaderOverflow) ? showHeaderOverflow : allColumnHeaderOverflow;\n                var showEllipsis = cellOverflow === 'ellipsis';\n                var showTitle = cellOverflow === 'title';\n                var showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n                var hasEllipsis = showTitle || showTooltip || showEllipsis;\n                var childWidth = 0;\n                var countChild = 0;\n\n                if (hasEllipsis) {\n                  XEUtils.eachTree(column.children, function (item) {\n                    if (!item.children || !column.children.length) {\n                      countChild++;\n                    }\n\n                    childWidth += item.renderWidth;\n                  });\n                }\n\n                thElem.style.width = hasEllipsis ? \"\".concat(childWidth - countChild - (border ? 2 : 0), \"px\") : '';\n              }\n            });\n          }\n        } else if (layout === 'body') {\n          var emptyBlockElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-emptyBlock\")];\n\n          if (wrapperElem) {\n            /*删\r\n               if (customMaxHeight) {\r\n                 wrapperElem.style.maxHeight = `${fixedType ? customMaxHeight - headerHeight - (showFooter ? 0 : scrollbarHeight) : customMaxHeight - headerHeight}px`\r\n               } else {\r\n                 if (customHeight > 0) {\r\n                   wrapperElem.style.height = `${fixedType ? (customHeight > 0 ? customHeight - headerHeight - footerHeight : tableHeight) - (showFooter ? 0 : scrollbarHeight) : customHeight - headerHeight - footerHeight}px`\r\n                 } else {\r\n                   wrapperElem.style.height = ''\r\n                 }\r\n               }*/\n            wrapperElem.style.height = 'calc(100% - ' + _headerHeight + 'px)'; //加\n          } // 如果是固定列\n\n\n          if (fixedWrapperElem) {\n            var isRightFixed = fixedType === 'right';\n            var _fixedColumn = columnStore[\"\".concat(fixedType, \"List\")];\n\n            if (wrapperElem) {\n              //              wrapperElem.style.top = `${headerHeight}px`//删\n              wrapperElem.style.top = \"\".concat(_headerHeight, \"px\"); //加\n            } //            fixedWrapperElem.style.height = `${(customHeight > 0 ? customHeight - headerHeight - footerHeight : tableHeight) + headerHeight + footerHeight - scrollbarHeight * (showFooter ? 2 : 1)}px`//删\n\n\n            fixedWrapperElem.style.height = 'calc(100% - 11px)'; //加\n\n            fixedWrapperElem.style.width = \"\".concat(_fixedColumn.reduce(function (previous, column) {\n              return previous + column.renderWidth;\n            }, isRightFixed ? scrollbarWidth : 0), \"px\");\n          }\n\n          var _tWidth = tableWidth; // 如果是使用优化模式\n\n          var _isOptimize = false;\n\n          if (fixedType) {\n            if (!mergeList.length && !spanMethod && !(keyboardConfig && keyboardOpts.isMerge) && (scrollXLoad || scrollYLoad || (allColumnOverflow ? isAllOverflow : allColumnOverflow))) {\n              _isOptimize = true;\n            }\n          }\n\n          if (_isOptimize) {\n            tableColumn = fixedColumn;\n          }\n\n          if (_isOptimize || scrollXLoad) {\n            _tWidth = tableColumn.reduce(function (previous, column) {\n              return previous + column.renderWidth;\n            }, 0);\n          }\n\n          if (tableElem) {\n            tableElem.style.width = _tWidth ? \"\".concat(_tWidth + 1, \"px\") : ''; //改\n            // 兼容性处理\n\n            tableElem.style.paddingRight = scrollbarWidth && fixedType && (browse['-moz'] || browse.safari) ? \"\".concat(scrollbarWidth, \"px\") : '';\n          }\n\n          if (emptyBlockElem) {\n            emptyBlockElem.style.width = _tWidth ? \"\".concat(_tWidth, \"px\") : '';\n          }\n        } else if (layout === 'footer') {\n          var _tWidth2 = tableWidth; // 如果是使用优化模式\n\n          var _isOptimize2 = false;\n\n          if (fixedType) {\n            if ((!mergeFooterList.length || !footerSpanMethod) && (scrollXLoad || allColumnFooterOverflow)) {\n              _isOptimize2 = true;\n            }\n          }\n\n          if (_isOptimize2) {\n            tableColumn = fixedColumn;\n          }\n\n          if (_isOptimize2 || scrollXLoad) {\n            _tWidth2 = tableColumn.reduce(function (previous, column) {\n              return previous + column.renderWidth;\n            }, 0);\n          }\n\n          if (wrapperElem) {\n            // 如果是固定列\n            if (fixedWrapperElem) {\n              //              wrapperElem.style.top = `${customHeight > 0 ? customHeight - footerHeight : tableHeight + headerHeight}px`//删\n              wrapperElem.style.top = \"\".concat(customHeight > 0 ? customHeight - footerHeight : tableHeight + _headerHeight, \"px\"); //加\n            }\n\n            wrapperElem.style.marginTop = \"\".concat(-scrollbarHeight, \"px\");\n          }\n\n          if (tableElem) {\n            tableElem.style.width = _tWidth2 ? \"\".concat(_tWidth2 + scrollbarWidth + 1, \"px\") : ''; //改\n          }\n        }\n\n        var colgroupElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-colgroup\")];\n\n        if (colgroupElem) {\n          XEUtils.arrayEach(colgroupElem.children, function (colElem) {\n            var colid = colElem.getAttribute('name');\n\n            if (colid === 'col_gutter') {\n              colElem.style.width = \"\".concat(scrollbarWidth, \"px\");\n            }\n\n            if (fullColumnIdData[colid]) {\n              var column = fullColumnIdData[colid].column;\n              var showHeaderOverflow = column.showHeaderOverflow,\n                  showFooterOverflow = column.showFooterOverflow,\n                  showOverflow = column.showOverflow;\n              var cellOverflow;\n              colElem.style.width = \"\".concat(column.renderWidth, \"px\");\n\n              if (layout === 'header') {\n                cellOverflow = XEUtils.isUndefined(showHeaderOverflow) || XEUtils.isNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n              } else if (layout === 'footer') {\n                cellOverflow = XEUtils.isUndefined(showFooterOverflow) || XEUtils.isNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow;\n              } else {\n                cellOverflow = XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow) ? allColumnOverflow : showOverflow;\n              }\n\n              var showEllipsis = cellOverflow === 'ellipsis';\n              var showTitle = cellOverflow === 'title';\n              var showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n              var hasEllipsis = showTitle || showTooltip || showEllipsis;\n              var _listElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-list\")]; // 滚动的渲染不支持动态行高\n\n              if (layout === 'header' || layout === 'footer') {\n                if (scrollXLoad && !hasEllipsis) {\n                  hasEllipsis = true;\n                }\n              } else {\n                if ((scrollXLoad || scrollYLoad) && !hasEllipsis) {\n                  hasEllipsis = true;\n                }\n              }\n\n              if (_listElem) {\n                XEUtils.arrayEach(_listElem.querySelectorAll(\".\".concat(column.id)), function (elem) {\n                  var colspan = parseInt(elem.getAttribute('colspan') || 1);\n                  var cellElem = elem.querySelector('.vxe-cell');\n                  var colWidth = column.renderWidth;\n\n                  if (cellElem) {\n                    if (colspan > 1) {\n                      var columnIndex = _this20.getColumnIndex(column);\n\n                      for (var _index = 1; _index < colspan; _index++) {\n                        var nextColumn = _this20.getColumns(columnIndex + _index);\n\n                        if (nextColumn) {\n                          colWidth += nextColumn.renderWidth;\n                        }\n                      }\n                    }\n\n                    cellElem.style.width = hasEllipsis ? \"\".concat(colWidth - cellOffsetWidth * colspan, \"px\") : '';\n                  }\n                });\n              }\n            }\n          });\n        }\n      });\n    });\n\n    if (currentRow) {\n      this.setCurrentRow(currentRow);\n    }\n\n    if (mouseConfig && mouseConfig.selected && editStore.selected.row && editStore.selected.column) {\n      this.addColSdCls();\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 处理固定列的显示状态\r\n   */\n  checkScrolling: function checkScrolling() {\n    var _this$$refs = this.$refs,\n        tableBody = _this$$refs.tableBody,\n        leftContainer = _this$$refs.leftContainer,\n        rightContainer = _this$$refs.rightContainer;\n    var bodyElem = tableBody ? tableBody.$el : null;\n\n    if (bodyElem) {\n      if (leftContainer) {\n        DomTools[bodyElem.scrollLeft > 0 ? 'addClass' : 'removeClass'](leftContainer, 'scrolling--middle');\n      }\n\n      if (rightContainer) {\n        DomTools[bodyElem.clientWidth < bodyElem.scrollWidth - Math.ceil(bodyElem.scrollLeft) ? 'addClass' : 'removeClass'](rightContainer, 'scrolling--middle');\n      }\n    }\n  },\n  preventEvent: function preventEvent(evnt, type, args, next, end) {\n    var _this21 = this;\n\n    var evntList = VXETable.interceptor.get(type);\n    var rest;\n\n    if (!evntList.some(function (func) {\n      return func(Object.assign({\n        $grid: _this21.$xegrid,\n        $table: _this21,\n        $event: evnt\n      }, args)) === false;\n    })) {\n      if (next) {\n        rest = next();\n      }\n    }\n\n    if (end) {\n      end();\n    }\n\n    return rest;\n  },\n\n  /**\r\n   * 全局按下事件处理\r\n   */\n  handleGlobalMousedownEvent: function handleGlobalMousedownEvent(evnt) {\n    var _this22 = this;\n\n    var $el = this.$el,\n        $refs = this.$refs,\n        $xegrid = this.$xegrid,\n        $toolbar = this.$toolbar,\n        mouseConfig = this.mouseConfig,\n        editStore = this.editStore,\n        ctxMenuStore = this.ctxMenuStore,\n        editOpts = this.editOpts,\n        filterStore = this.filterStore,\n        getRowNode = this.getRowNode;\n    var actived = editStore.actived;\n    var ctxWrapper = $refs.ctxWrapper,\n        filterWrapper = $refs.filterWrapper,\n        validTip = $refs.validTip;\n\n    if (filterWrapper) {\n      if (getEventTargetNode(evnt, $el, 'vxe-cell--filter').flag) {// 如果点击了筛选按钮\n      } else if (getEventTargetNode(evnt, filterWrapper.$el).flag) {// 如果点击筛选容器\n      } else {\n        if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\n          this.preventEvent(evnt, 'event.clearFilter', filterStore.args, this.closeFilter);\n        }\n      }\n    } // 如果已激活了编辑状态\n\n\n    if (actived.row) {\n      if (!(editOpts.autoClear === false)) {\n        // 如果是激活状态，点击了单元格之外\n        var cell = actived.args.cell;\n\n        if (!cell || !getEventTargetNode(evnt, cell).flag) {\n          if (validTip && getEventTargetNode(evnt, validTip.$el).flag) {// 如果是激活状态，且点击了校验提示框\n          } else if (!this.lastCallTime || this.lastCallTime + 50 < Date.now()) {\n            if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\n              // 如果手动调用了激活单元格，避免触发源被移除后导致重复关闭\n              this.preventEvent(evnt, 'event.clearActived', actived.args, function () {\n                var isClearActived;\n\n                if (editOpts.mode === 'row') {\n                  var rowNode = getEventTargetNode(evnt, $el, 'vxe-body--row'); // row 方式，如果点击了不同行\n\n                  isClearActived = rowNode.flag ? getRowNode(rowNode.targetElem).item !== actived.args.row : false;\n                } else {\n                  // cell 方式，如果是非编辑列\n                  isClearActived = !getEventTargetNode(evnt, $el, 'col--edit').flag;\n                } // 如果点击表头行，则清除激活状态\n\n\n                if (!isClearActived) {\n                  isClearActived = getEventTargetNode(evnt, $el, 'vxe-header--row').flag;\n                } // 如果点击表尾行，则清除激活状态\n\n\n                if (!isClearActived) {\n                  isClearActived = getEventTargetNode(evnt, $el, 'vxe-footer--row').flag;\n                } // 如果固定了高度且点击了行之外的空白处，则清除激活状态\n\n\n                if (!isClearActived && _this22.height && !_this22.overflowY) {\n                  var bodyWrapperElem = evnt.target;\n\n                  if (hasClass(bodyWrapperElem, 'vxe-table--body-wrapper')) {\n                    isClearActived = evnt.offsetY < bodyWrapperElem.clientHeight;\n                  }\n                }\n\n                if (isClearActived || // 如果点击了当前表格之外\n                !getEventTargetNode(evnt, $el).flag) {\n                  setTimeout(function () {\n                    return _this22.clearActived(evnt);\n                  });\n                }\n              });\n            }\n          }\n        }\n      }\n    } else if (mouseConfig) {\n      if (!getEventTargetNode(evnt, $el).flag && !($xegrid && getEventTargetNode(evnt, $xegrid.$el).flag) && !(ctxWrapper && getEventTargetNode(evnt, ctxWrapper.$el).flag) && !($toolbar && getEventTargetNode(evnt, $toolbar.$el).flag)) {\n        this.clearSelected();\n\n        if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-areas-clear').flag) {\n          this.preventEvent(evnt, 'event.clearAreas', {}, function () {\n            _this22.clearCellAreas();\n\n            _this22.clearCopyCellArea();\n          });\n        }\n      }\n    } // 如果配置了快捷菜单且，点击了其他地方则关闭\n\n\n    if (ctxMenuStore.visible && ctxWrapper && !getEventTargetNode(evnt, ctxWrapper.$el).flag) {\n      this.closeMenu();\n    } // 最后激活的表格\n\n\n    this.isActivated = getEventTargetNode(evnt, ($xegrid || this).$el).flag;\n  },\n\n  /**\r\n   * 窗口失焦事件处理\r\n   */\n  handleGlobalBlurEvent: function handleGlobalBlurEvent() {\n    this.closeFilter();\n    this.closeMenu();\n  },\n\n  /**\r\n   * 全局滚动事件\r\n   */\n  handleGlobalMousewheelEvent: function handleGlobalMousewheelEvent() {\n    this.closeTooltip();\n    this.closeMenu();\n  },\n\n  /**\r\n   * 表格键盘事件\r\n   */\n  keydownEvent: function keydownEvent(evnt) {\n    var _this23 = this;\n\n    var filterStore = this.filterStore,\n        ctxMenuStore = this.ctxMenuStore,\n        editStore = this.editStore,\n        keyboardConfig = this.keyboardConfig,\n        mouseConfig = this.mouseConfig,\n        mouseOpts = this.mouseOpts;\n    var actived = editStore.actived;\n    var keyCode = evnt.keyCode;\n    var isEsc = keyCode === 27;\n\n    if (isEsc) {\n      this.preventEvent(evnt, 'event.keydown', null, function () {\n        if (keyboardConfig && mouseConfig && mouseOpts.area && _this23.handleKeyboardEvent) {\n          _this23.handleKeyboardEvent(evnt);\n        } else if (actived.row || filterStore.visible || ctxMenuStore.visible) {\n          evnt.stopPropagation(); // 如果按下了 Esc 键，关闭快捷菜单、筛选\n\n          _this23.closeFilter();\n\n          _this23.closeMenu(); // 如果是激活编辑状态，则取消编辑\n\n\n          if (actived.row) {\n            var params = actived.args;\n\n            _this23.clearActived(evnt); // 如果配置了选中功能，则为选中状态\n\n\n            if (mouseConfig && mouseOpts.selected) {\n              _this23.$nextTick(function () {\n                return _this23.handleSelected(params, evnt);\n              });\n            }\n          }\n        }\n\n        _this23.emitEvent('keydown', {}, evnt);\n      });\n    }\n  },\n\n  /**\r\n   * 全局键盘事件\r\n   */\n  handleGlobalKeydownEvent: function handleGlobalKeydownEvent(evnt) {\n    var _this24 = this; // 该行为只对当前激活的表格有效\n\n\n    if (this.isActivated) {\n      this.preventEvent(evnt, 'event.keydown', null, function () {\n        var filterStore = _this24.filterStore,\n            isCtxMenu = _this24.isCtxMenu,\n            ctxMenuStore = _this24.ctxMenuStore,\n            editStore = _this24.editStore,\n            editOpts = _this24.editOpts,\n            editConfig = _this24.editConfig,\n            mouseConfig = _this24.mouseConfig,\n            mouseOpts = _this24.mouseOpts,\n            keyboardConfig = _this24.keyboardConfig,\n            keyboardOpts = _this24.keyboardOpts,\n            treeConfig = _this24.treeConfig,\n            treeOpts = _this24.treeOpts,\n            highlightCurrentRow = _this24.highlightCurrentRow,\n            currentRow = _this24.currentRow,\n            bodyCtxMenu = _this24.bodyCtxMenu;\n        var selected = editStore.selected,\n            actived = editStore.actived;\n        var keyCode = evnt.keyCode;\n        var isBack = keyCode === 8;\n        var isTab = keyCode === 9;\n        var isEnter = keyCode === 13;\n        var isEsc = keyCode === 27;\n        var isSpacebar = keyCode === 32;\n        var isLeftArrow = keyCode === 37;\n        var isUpArrow = keyCode === 38;\n        var isRightArrow = keyCode === 39;\n        var isDwArrow = keyCode === 40;\n        var isDel = keyCode === 46;\n        var isF2 = keyCode === 113;\n        var isContextMenu = keyCode === 93;\n        var hasMetaKey = evnt.metaKey;\n        var hasCtrlKey = evnt.ctrlKey;\n        var hasShiftKey = evnt.shiftKey;\n        var hasAltKey = evnt.altKey;\n        var operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow;\n        var operCtxMenu = isCtxMenu && ctxMenuStore.visible && (isEnter || isSpacebar || operArrow);\n        var isEditStatus = editConfig && actived.column && actived.row;\n        var params;\n\n        if (filterStore.visible) {\n          if (isEsc) {\n            _this24.closeFilter();\n          }\n\n          return;\n        }\n\n        if (operCtxMenu) {\n          // 如果配置了右键菜单; 支持方向键操作、回车\n          evnt.preventDefault();\n\n          if (ctxMenuStore.showChild && hasChildrenList(ctxMenuStore.selected)) {\n            _this24.moveCtxMenu(evnt, keyCode, ctxMenuStore, 'selectChild', 37, false, ctxMenuStore.selected.children);\n          } else {\n            _this24.moveCtxMenu(evnt, keyCode, ctxMenuStore, 'selected', 39, true, _this24.ctxMenuList);\n          }\n        } else if (keyboardConfig && mouseConfig && mouseOpts.area && _this24.handleKeyboardEvent) {\n          _this24.handleKeyboardEvent(evnt);\n        } else if (keyboardConfig && isSpacebar && keyboardOpts.isChecked && selected.row && selected.column && (selected.column.type === 'checkbox' || selected.column.type === 'radio')) {\n          // 空格键支持选中复选框\n          evnt.preventDefault();\n\n          if (selected.column.type === 'checkbox') {\n            _this24.handleToggleCheckRowEvent(evnt, selected.args);\n          } else {\n            _this24.triggerRadioRowEvent(evnt, selected.args);\n          }\n        } else if (isF2) {\n          if (!isEditStatus) {\n            // 如果按下了 F2 键\n            if (selected.row && selected.column) {\n              evnt.stopPropagation();\n              evnt.preventDefault();\n\n              _this24.handleActived(selected.args, evnt);\n            }\n          }\n        } else if (isContextMenu) {\n          // 如果按下上下文键\n          _this24._keyCtx = selected.row && selected.column && bodyCtxMenu.length;\n          clearTimeout(_this24.keyCtxTimeout);\n          _this24.keyCtxTimeout = setTimeout(function () {\n            _this24._keyCtx = false;\n          }, 1000);\n        } else if (isEnter && !hasAltKey && keyboardConfig && keyboardOpts.isEnter && (selected.row || actived.row || treeConfig && highlightCurrentRow && currentRow)) {\n          // 退出选中\n          if (hasCtrlKey) {\n            // 如果是激活编辑状态，则取消编辑\n            if (actived.row) {\n              params = actived.args;\n\n              _this24.clearActived(evnt); // 如果配置了选中功能，则为选中状态\n\n\n              if (mouseConfig && mouseOpts.selected) {\n                _this24.$nextTick(function () {\n                  return _this24.handleSelected(params, evnt);\n                });\n              }\n            }\n          } else {\n            // 如果是激活状态，退则出到上一行/下一行\n            if (selected.row || actived.row) {\n              var targetArgs = selected.row ? selected.args : actived.args;\n\n              if (hasShiftKey) {\n                if (keyboardOpts.enterToTab) {\n                  _this24.moveTabSelected(targetArgs, hasShiftKey, evnt);\n                } else {\n                  _this24.moveSelected(targetArgs, isLeftArrow, true, isRightArrow, false, evnt);\n                }\n              } else {\n                if (keyboardOpts.enterToTab) {\n                  _this24.moveTabSelected(targetArgs, hasShiftKey, evnt);\n                } else {\n                  _this24.moveSelected(targetArgs, isLeftArrow, false, isRightArrow, true, evnt);\n                }\n              }\n            } else if (treeConfig && highlightCurrentRow && currentRow) {\n              // 如果是树形表格当前行回车移动到子节点\n              var childrens = currentRow[treeOpts.children];\n\n              if (childrens && childrens.length) {\n                evnt.preventDefault();\n                var targetRow = childrens[0];\n                params = {\n                  $table: _this24,\n                  row: targetRow\n                };\n\n                _this24.setTreeExpand(currentRow, true).then(function () {\n                  return _this24.scrollToRow(targetRow);\n                }).then(function () {\n                  return _this24.triggerCurrentRowEvent(evnt, params);\n                });\n              }\n            }\n          }\n        } else if (operArrow && keyboardConfig && keyboardOpts.isArrow) {\n          if (!isEditStatus) {\n            // 如果按下了方向键\n            if (selected.row && selected.column) {\n              _this24.moveSelected(selected.args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt);\n            } else if ((isUpArrow || isDwArrow) && highlightCurrentRow) {\n              // 当前行按键上下移动\n              _this24.moveCurrentRow(isUpArrow, isDwArrow, evnt);\n            }\n          }\n        } else if (isTab && keyboardConfig && keyboardOpts.isTab) {\n          // 如果按下了 Tab 键切换\n          if (selected.row || selected.column) {\n            _this24.moveTabSelected(selected.args, hasShiftKey, evnt);\n          } else if (actived.row || actived.column) {\n            _this24.moveTabSelected(actived.args, hasShiftKey, evnt);\n          }\n        } else if (keyboardConfig && (isDel || (treeConfig && highlightCurrentRow && currentRow ? isBack && keyboardOpts.isArrow : isBack))) {\n          if (!isEditStatus) {\n            var delMethod = keyboardOpts.delMethod,\n                backMethod = keyboardOpts.backMethod; // 如果是删除键\n\n            if (keyboardOpts.isDel && (selected.row || selected.column)) {\n              if (delMethod) {\n                delMethod({\n                  row: selected.row,\n                  rowIndex: _this24.getRowIndex(selected.row),\n                  column: selected.column,\n                  columnIndex: _this24.getColumnIndex(selected.column),\n                  $table: _this24\n                });\n              } else {\n                setCellValue(selected.row, selected.column, null);\n              }\n\n              if (isBack) {\n                if (backMethod) {\n                  backMethod({\n                    row: selected.row,\n                    rowIndex: _this24.getRowIndex(selected.row),\n                    column: selected.column,\n                    columnIndex: _this24.getColumnIndex(selected.column),\n                    $table: _this24\n                  });\n                } else {\n                  _this24.handleActived(selected.args, evnt);\n                }\n              } else if (isDel) {\n                // 如果按下 del 键，更新表尾数据\n                _this24.updateFooter();\n              }\n            } else if (isBack && keyboardOpts.isArrow && treeConfig && highlightCurrentRow && currentRow) {\n              // 如果树形表格回退键关闭当前行返回父节点\n              var _XEUtils$findTree = XEUtils.findTree(_this24.afterFullData, function (item) {\n                return item === currentRow;\n              }, treeOpts),\n                  parentRow = _XEUtils$findTree.parent;\n\n              if (parentRow) {\n                evnt.preventDefault();\n                params = {\n                  $table: _this24,\n                  row: parentRow\n                };\n\n                _this24.setTreeExpand(parentRow, false).then(function () {\n                  return _this24.scrollToRow(parentRow);\n                }).then(function () {\n                  return _this24.triggerCurrentRowEvent(evnt, params);\n                });\n              }\n            }\n          }\n        } else if (keyboardConfig && keyboardOpts.isEdit && !hasCtrlKey && !hasMetaKey && (isSpacebar || keyCode >= 48 && keyCode <= 57 || keyCode >= 65 && keyCode <= 90 || keyCode >= 96 && keyCode <= 111 || keyCode >= 186 && keyCode <= 192 || keyCode >= 219 && keyCode <= 222)) {\n          var editMethod = keyboardOpts.editMethod; // 启用编辑后，空格键功能将失效\n          // if (isSpacebar) {\n          //   evnt.preventDefault()\n          // }\n          // 如果是按下非功能键之外允许直接编辑\n\n          if (selected.column && selected.row && isEnableConf(selected.column.editRender)) {\n            if (!editOpts.activeMethod || editOpts.activeMethod(selected.args)) {\n              if (editMethod) {\n                editMethod({\n                  row: selected.row,\n                  rowIndex: _this24.getRowIndex(selected.row),\n                  column: selected.column,\n                  columnIndex: _this24.getColumnIndex(selected.column),\n                  $table: _this24\n                });\n              } else {\n                setCellValue(selected.row, selected.column, null);\n\n                _this24.handleActived(selected.args, evnt);\n              }\n            }\n          }\n        }\n\n        _this24.emitEvent('keydown', {}, evnt);\n      });\n    }\n  },\n  handleGlobalPasteEvent: function handleGlobalPasteEvent(evnt) {\n    var isActivated = this.isActivated,\n        keyboardConfig = this.keyboardConfig,\n        keyboardOpts = this.keyboardOpts,\n        mouseConfig = this.mouseConfig,\n        mouseOpts = this.mouseOpts,\n        editStore = this.editStore,\n        filterStore = this.filterStore;\n    var actived = editStore.actived;\n\n    if (isActivated && !filterStore.visible) {\n      if (!(actived.row || actived.column)) {\n        if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && this.handlePasteCellAreaEvent) {\n          this.handlePasteCellAreaEvent(evnt);\n        }\n      }\n\n      this.emitEvent('paste', {}, evnt);\n    }\n  },\n  handleGlobalCopyEvent: function handleGlobalCopyEvent(evnt) {\n    var isActivated = this.isActivated,\n        keyboardConfig = this.keyboardConfig,\n        keyboardOpts = this.keyboardOpts,\n        mouseConfig = this.mouseConfig,\n        mouseOpts = this.mouseOpts,\n        editStore = this.editStore,\n        filterStore = this.filterStore;\n    var actived = editStore.actived;\n\n    if (isActivated && !filterStore.visible) {\n      if (!(actived.row || actived.column)) {\n        if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && this.handleCopyCellAreaEvent) {\n          this.handleCopyCellAreaEvent(evnt);\n        }\n      }\n\n      this.emitEvent('copy', {}, evnt);\n    }\n  },\n  handleGlobalCutEvent: function handleGlobalCutEvent(evnt) {\n    var isActivated = this.isActivated,\n        keyboardConfig = this.keyboardConfig,\n        keyboardOpts = this.keyboardOpts,\n        mouseConfig = this.mouseConfig,\n        mouseOpts = this.mouseOpts,\n        editStore = this.editStore,\n        filterStore = this.filterStore;\n    var actived = editStore.actived;\n\n    if (isActivated && !filterStore.visible) {\n      if (!(actived.row || actived.column)) {\n        if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && this.handleCutCellAreaEvent) {\n          this.handleCutCellAreaEvent(evnt);\n        }\n      }\n\n      this.emitEvent('cut', {}, evnt);\n    }\n  },\n  handleGlobalResizeEvent: function handleGlobalResizeEvent() {\n    this.closeMenu();\n    this.updateCellAreas();\n    this.recalculate(true);\n  },\n  handleTooltipLeaveMethod: function handleTooltipLeaveMethod() {\n    var _this25 = this;\n\n    var tooltipOpts = this.tooltipOpts;\n    setTimeout(function () {\n      if (!_this25.tooltipActive) {\n        _this25.closeTooltip();\n      }\n    }, tooltipOpts.leaveDelay);\n    return false;\n  },\n  handleTargetEnterEvent: function handleTargetEnterEvent() {\n    clearTimeout(this.tooltipTimeout);\n    this.tooltipActive = true;\n    this.closeTooltip();\n  },\n  handleTargetLeaveEvent: function handleTargetLeaveEvent() {\n    var _this26 = this;\n\n    var tooltipOpts = this.tooltipOpts;\n    this.tooltipActive = false;\n\n    if (tooltipOpts.enterable) {\n      this.tooltipTimeout = setTimeout(function () {\n        var tooltip = _this26.$refs.tooltip;\n\n        if (tooltip && !tooltip.isHover) {\n          _this26.closeTooltip();\n        }\n      }, tooltipOpts.leaveDelay);\n    } else {\n      this.closeTooltip();\n    }\n  },\n  triggerHeaderHelpEvent: function triggerHeaderHelpEvent(evnt, params) {\n    var column = params.column;\n    var titleHelp = column.titleHelp;\n\n    if (titleHelp.message) {\n      var $refs = this.$refs,\n          tooltipStore = this.tooltipStore;\n      var tooltip = $refs.tooltip;\n      var content = UtilTools.getFuncText(titleHelp.message);\n      this.handleTargetEnterEvent();\n      tooltipStore.visible = true;\n\n      if (tooltip) {\n        tooltip.open(evnt.currentTarget, content);\n      }\n    }\n  },\n\n  /**\r\n   * 触发表头 tooltip 事件\r\n   */\n  triggerHeaderTooltipEvent: function triggerHeaderTooltipEvent(evnt, params) {\n    var tooltipStore = this.tooltipStore;\n    var column = params.column;\n    var titleElem = evnt.currentTarget;\n    this.handleTargetEnterEvent();\n\n    if (tooltipStore.column !== column || !tooltipStore.visible) {\n      this.handleTooltip(evnt, titleElem, titleElem, null, params);\n    }\n  },\n\n  /**\r\n   * 触发单元格 tooltip 事件\r\n   */\n  triggerBodyTooltipEvent: function triggerBodyTooltipEvent(evnt, params) {\n    var editConfig = this.editConfig,\n        editOpts = this.editOpts,\n        editStore = this.editStore,\n        tooltipStore = this.tooltipStore;\n    var actived = editStore.actived;\n    var row = params.row,\n        column = params.column;\n    var cell = evnt.currentTarget;\n    this.handleTargetEnterEvent();\n\n    if (editConfig) {\n      if (editOpts.mode === 'row' && actived.row === row || actived.row === row && actived.column === column) {\n        return;\n      }\n    }\n\n    if (tooltipStore.column !== column || tooltipStore.row !== row || !tooltipStore.visible) {\n      var overflowElem;\n      var tipElem;\n\n      if (column.treeNode) {\n        overflowElem = cell.querySelector('.vxe-tree-cell');\n\n        if (column.type === 'html') {\n          tipElem = cell.querySelector('.vxe-cell--html');\n        }\n      } else {\n        tipElem = cell.querySelector(column.type === 'html' ? '.vxe-cell--html' : '.vxe-cell--label');\n      }\n\n      this.handleTooltip(evnt, cell, overflowElem || cell.children[0], tipElem, params);\n    }\n  },\n\n  /**\r\n   * 触发表尾 tooltip 事件\r\n   */\n  triggerFooterTooltipEvent: function triggerFooterTooltipEvent(evnt, params) {\n    var column = params.column;\n    var tooltipStore = this.tooltipStore;\n    var cell = evnt.currentTarget;\n    this.handleTargetEnterEvent();\n\n    if (tooltipStore.column !== column || !tooltipStore.visible) {\n      this.handleTooltip(evnt, cell, cell.querySelector('.vxe-cell--item') || cell.children[0], null, params);\n    }\n  },\n\n  /**\r\n   * 处理显示 tooltip\r\n   * @param {Event} evnt 事件\r\n   * @param {ColumnInfo} column 列配置\r\n   * @param {Row} row 行对象\r\n   */\n  handleTooltip: function handleTooltip(evnt, cell, overflowElem, tipElem, params) {\n    params.cell = cell;\n    var $refs = this.$refs,\n        tooltipOpts = this.tooltipOpts,\n        tooltipStore = this.tooltipStore;\n    var column = params.column,\n        row = params.row;\n    var showAll = tooltipOpts.showAll,\n        enabled = tooltipOpts.enabled,\n        contentMethod = tooltipOpts.contentMethod;\n    var tooltip = $refs.tooltip;\n    var customContent = contentMethod ? contentMethod(params) : null;\n    var useCustom = contentMethod && !XEUtils.eqNull(customContent);\n    var content = useCustom ? customContent : (column.type === 'html' ? overflowElem.innerText : overflowElem.textContent).trim();\n    var isCellOverflow = overflowElem.scrollWidth > overflowElem.clientWidth;\n\n    if (content && (showAll || enabled || useCustom || isCellOverflow)) {\n      Object.assign(tooltipStore, {\n        row: row,\n        column: column,\n        visible: true\n      });\n\n      if (tooltip) {\n        tooltip.open(isCellOverflow ? overflowElem : tipElem || overflowElem, UtilTools.formatText(content));\n      }\n    }\n\n    return this.$nextTick();\n  },\n  openTooltip: function openTooltip(target, content) {\n    var $refs = this.$refs;\n    var commTip = $refs.commTip;\n\n    if (commTip) {\n      return commTip.open(target, content);\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 关闭 tooltip\r\n   */\n  closeTooltip: function closeTooltip() {\n    var $refs = this.$refs,\n        tooltipStore = this.tooltipStore;\n    var tooltip = $refs.tooltip;\n    var commTip = $refs.commTip;\n\n    if (tooltipStore.visible) {\n      Object.assign(tooltipStore, {\n        row: null,\n        column: null,\n        content: null,\n        visible: false\n      });\n\n      if (tooltip) {\n        tooltip.close();\n      }\n    }\n\n    if (commTip) {\n      commTip.close();\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 判断复选框是否全选\r\n   */\n  isAllCheckboxChecked: function isAllCheckboxChecked() {\n    return this.isAllSelected;\n  },\n\n  /**\r\n   * 判断复选框是否全选\r\n   */\n  isCheckboxIndeterminate: function isCheckboxIndeterminate() {\n    return !this.isAllSelected && this.isIndeterminate;\n  },\n\n  /**\r\n   * 获取复选框半选状态的行数据\r\n   */\n  getCheckboxIndeterminateRecords: function getCheckboxIndeterminateRecords() {\n    var treeConfig = this.treeConfig,\n        treeIndeterminates = this.treeIndeterminates;\n\n    if (treeConfig) {\n      return treeIndeterminates.slice(0);\n    }\n\n    return [];\n  },\n\n  /**\r\n   * 处理默认勾选\r\n   */\n  handleDefaultSelectionChecked: function handleDefaultSelectionChecked() {\n    var fullDataRowIdData = this.fullDataRowIdData,\n        checkboxOpts = this.checkboxOpts;\n    var checkAll = checkboxOpts.checkAll,\n        checkRowKeys = checkboxOpts.checkRowKeys;\n\n    if (checkAll) {\n      this.setAllCheckboxRow(true);\n    } else if (checkRowKeys) {\n      var defSelection = [];\n      checkRowKeys.forEach(function (rowid) {\n        if (fullDataRowIdData[rowid]) {\n          defSelection.push(fullDataRowIdData[rowid].row);\n        }\n      });\n      this.setCheckboxRow(defSelection, true);\n    }\n  },\n\n  /**\r\n   * 用于多选行，设置行为选中状态，第二个参数为选中与否\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {Boolean} value 是否选中\r\n   */\n  setCheckboxRow: function setCheckboxRow(rows, value) {\n    var _this27 = this;\n\n    if (rows && !XEUtils.isArray(rows)) {\n      rows = [rows];\n    }\n\n    rows.forEach(function (row) {\n      return _this27.handleSelectRow({\n        row: row\n      }, !!value);\n    });\n    return this.$nextTick();\n  },\n  isCheckedByCheckboxRow: function isCheckedByCheckboxRow(row) {\n    var property = this.checkboxOpts.checkField;\n\n    if (property) {\n      return XEUtils.get(row, property);\n    }\n\n    return this.selection.indexOf(row) > -1;\n  },\n\n  /**\r\n   * 多选，行选中事件\r\n   * value 选中true 不选false 不确定-1\r\n   */\n  handleSelectRow: function handleSelectRow(_ref5, value) {\n    var _this28 = this;\n\n    var row = _ref5.row;\n    var selection = this.selection,\n        afterFullData = this.afterFullData,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        treeIndeterminates = this.treeIndeterminates,\n        checkboxOpts = this.checkboxOpts;\n    var property = checkboxOpts.checkField,\n        checkStrictly = checkboxOpts.checkStrictly,\n        checkMethod = checkboxOpts.checkMethod;\n\n    if (property) {\n      if (treeConfig && !checkStrictly) {\n        if (value === -1) {\n          if (treeIndeterminates.indexOf(row) === -1) {\n            treeIndeterminates.push(row);\n          }\n\n          XEUtils.set(row, property, false);\n        } else {\n          // 更新子节点状态\n          XEUtils.eachTree([row], function (item) {\n            if (row === item || !checkMethod || checkMethod({\n              row: item\n            })) {\n              XEUtils.set(item, property, value);\n              XEUtils.remove(treeIndeterminates, function (half) {\n                return half === item;\n              });\n\n              _this28.handleCheckboxReserveRow(row, value);\n            }\n          }, treeOpts);\n        } // 如果存在父节点，更新父节点状态\n\n\n        var matchObj = XEUtils.findTree(afterFullData, function (item) {\n          return item === row;\n        }, treeOpts);\n\n        if (matchObj && matchObj.parent) {\n          var parentStatus;\n          var vItems = checkMethod ? matchObj.items.filter(function (item) {\n            return checkMethod({\n              row: item\n            });\n          }) : matchObj.items;\n          var indeterminatesItem = XEUtils.find(matchObj.items, function (item) {\n            return treeIndeterminates.indexOf(item) > -1;\n          });\n\n          if (indeterminatesItem) {\n            parentStatus = -1;\n          } else {\n            var selectItems = matchObj.items.filter(function (item) {\n              return XEUtils.get(item, property);\n            });\n            parentStatus = selectItems.filter(function (item) {\n              return vItems.indexOf(item) > -1;\n            }).length === vItems.length ? true : selectItems.length || value === -1 ? -1 : false;\n          }\n\n          return this.handleSelectRow({\n            row: matchObj.parent\n          }, parentStatus);\n        }\n      } else {\n        if (!checkMethod || checkMethod({\n          row: row\n        })) {\n          XEUtils.set(row, property, value);\n          this.handleCheckboxReserveRow(row, value);\n        }\n      }\n    } else {\n      if (treeConfig && !checkStrictly) {\n        if (value === -1) {\n          if (treeIndeterminates.indexOf(row) === -1) {\n            treeIndeterminates.push(row);\n          }\n\n          XEUtils.remove(selection, function (item) {\n            return item === row;\n          });\n        } else {\n          // 更新子节点状态\n          XEUtils.eachTree([row], function (item) {\n            if (row === item || !checkMethod || checkMethod({\n              row: item\n            })) {\n              if (value) {\n                selection.push(item);\n              } else {\n                XEUtils.remove(selection, function (select) {\n                  return select === item;\n                });\n              }\n\n              XEUtils.remove(treeIndeterminates, function (half) {\n                return half === item;\n              });\n\n              _this28.handleCheckboxReserveRow(row, value);\n            }\n          }, treeOpts);\n        } // 如果存在父节点，更新父节点状态\n\n\n        var _matchObj = XEUtils.findTree(afterFullData, function (item) {\n          return item === row;\n        }, treeOpts);\n\n        if (_matchObj && _matchObj.parent) {\n          var _parentStatus;\n\n          var _vItems = checkMethod ? _matchObj.items.filter(function (item) {\n            return checkMethod({\n              row: item\n            });\n          }) : _matchObj.items;\n\n          var _indeterminatesItem = XEUtils.find(_matchObj.items, function (item) {\n            return treeIndeterminates.indexOf(item) > -1;\n          });\n\n          if (_indeterminatesItem) {\n            _parentStatus = -1;\n          } else {\n            var _selectItems = _matchObj.items.filter(function (item) {\n              return selection.indexOf(item) > -1;\n            });\n\n            _parentStatus = _selectItems.filter(function (item) {\n              return _vItems.indexOf(item) > -1;\n            }).length === _vItems.length ? true : _selectItems.length || value === -1 ? -1 : false;\n          }\n\n          return this.handleSelectRow({\n            row: _matchObj.parent\n          }, _parentStatus);\n        }\n      } else {\n        if (!checkMethod || checkMethod({\n          row: row\n        })) {\n          if (value) {\n            if (selection.indexOf(row) === -1) {\n              selection.push(row);\n            }\n          } else {\n            XEUtils.remove(selection, function (item) {\n              return item === row;\n            });\n          }\n\n          this.handleCheckboxReserveRow(row, value);\n        }\n      }\n    }\n\n    this.checkSelectionStatus();\n  },\n  handleToggleCheckRowEvent: function handleToggleCheckRowEvent(evnt, params) {\n    var selection = this.selection,\n        checkboxOpts = this.checkboxOpts;\n    var property = checkboxOpts.checkField;\n    var row = params.row;\n    var value = property ? !XEUtils.get(row, property) : selection.indexOf(row) === -1;\n\n    if (evnt) {\n      this.triggerCheckRowEvent(evnt, params, value);\n    } else {\n      this.handleSelectRow(params, value);\n    }\n  },\n  triggerCheckRowEvent: function triggerCheckRowEvent(evnt, params, value) {\n    var checkMethod = this.checkboxOpts.checkMethod;\n\n    if (!checkMethod || checkMethod({\n      row: params.row\n    })) {\n      this.handleSelectRow(params, value);\n      this.emitEvent('checkbox-change', Object.assign({\n        records: this.getCheckboxRecords(),\n        reserves: this.getCheckboxReserveRecords(),\n        indeterminates: this.getCheckboxIndeterminateRecords(),\n        checked: value\n      }, params), evnt);\n    }\n  },\n\n  /**\r\n   * 多选，切换某一行的选中状态\r\n   */\n  toggleCheckboxRow: function toggleCheckboxRow(row) {\n    this.handleToggleCheckRowEvent(null, {\n      row: row\n    });\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于多选行，设置所有行的选中状态\r\n   * @param {Boolean} value 是否选中\r\n   */\n  setAllCheckboxRow: function setAllCheckboxRow(value) {\n    var _this29 = this;\n\n    var afterFullData = this.afterFullData,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        selection = this.selection,\n        checkboxReserveRowMap = this.checkboxReserveRowMap,\n        checkboxOpts = this.checkboxOpts;\n    var property = checkboxOpts.checkField,\n        reserve = checkboxOpts.reserve,\n        checkStrictly = checkboxOpts.checkStrictly,\n        checkMethod = checkboxOpts.checkMethod;\n    var selectRows = [];\n    var beforeSelection = treeConfig ? [] : selection.filter(function (row) {\n      return afterFullData.indexOf(row) === -1;\n    });\n\n    if (checkStrictly) {\n      this.isAllSelected = value;\n    } else {\n      /**\r\n       * 绑定属性方式（高性能，有污染）\r\n       * 必须在行数据存在对应的属性，否则将不响应\r\n       */\n      if (property) {\n        var checkValFn = function checkValFn(row) {\n          if (!checkMethod || checkMethod({\n            row: row\n          })) {\n            if (value) {\n              selectRows.push(row);\n            }\n\n            XEUtils.set(row, property, value);\n          }\n        }; // 如果存在选中方法\n        // 如果方法成立，则更新值，否则忽略该数据\n\n\n        if (treeConfig) {\n          XEUtils.eachTree(afterFullData, checkValFn, treeOpts);\n        } else {\n          afterFullData.forEach(checkValFn);\n        }\n      } else {\n        /**\r\n         * 默认方式（低性能，无污染）\r\n         * 无需任何属性，直接绑定\r\n         */\n        if (treeConfig) {\n          if (value) {\n            /**\r\n             * 如果是树勾选\r\n             * 如果方法成立，则添加到临时集合中\r\n             */\n            XEUtils.eachTree(afterFullData, function (row) {\n              if (!checkMethod || checkMethod({\n                row: row\n              })) {\n                selectRows.push(row);\n              }\n            }, treeOpts);\n          } else {\n            /**\r\n             * 如果是树取消\r\n             * 如果方法成立，则不添加到临时集合中\r\n             */\n            if (checkMethod) {\n              XEUtils.eachTree(afterFullData, function (row) {\n                if (checkMethod({\n                  row: row\n                }) ? 0 : selection.indexOf(row) > -1) {\n                  selectRows.push(row);\n                }\n              }, treeOpts);\n            }\n          }\n        } else {\n          if (value) {\n            /**\r\n             * 如果是行勾选\r\n             * 如果存在选中方法且成立或者本身已勾选，则添加到临时集合中\r\n             * 如果不存在选中方法，则添加所有数据到临时集合中\r\n             */\n            if (checkMethod) {\n              selectRows = afterFullData.filter(function (row) {\n                return selection.indexOf(row) > -1 || checkMethod({\n                  row: row\n                });\n              });\n            } else {\n              selectRows = afterFullData.slice(0);\n            }\n          } else {\n            /**\r\n             * 如果是行取消\r\n             * 如果方法成立，则不添加到临时集合中；如果方法不成立则判断当前是否已勾选，如果已被勾选则添加到新集合中\r\n             * 如果不存在选中方法，无需处理，临时集合默认为空\r\n             */\n            if (checkMethod) {\n              selectRows = afterFullData.filter(function (row) {\n                return checkMethod({\n                  row: row\n                }) ? 0 : selection.indexOf(row) > -1;\n              });\n            }\n          }\n        }\n      }\n\n      if (reserve) {\n        if (value) {\n          selectRows.forEach(function (row) {\n            checkboxReserveRowMap[getRowid(_this29, row)] = row;\n          });\n        } else {\n          afterFullData.forEach(function (row) {\n            return _this29.handleCheckboxReserveRow(row, false);\n          });\n        }\n      }\n\n      this.selection = property ? [] : beforeSelection.concat(selectRows);\n    }\n\n    this.treeIndeterminates = [];\n    this.checkSelectionStatus();\n  },\n  checkSelectionStatus: function checkSelectionStatus() {\n    var afterFullData = this.afterFullData,\n        selection = this.selection,\n        treeIndeterminates = this.treeIndeterminates,\n        checkboxOpts = this.checkboxOpts,\n        treeConfig = this.treeConfig;\n    var checkField = checkboxOpts.checkField,\n        halfField = checkboxOpts.halfField,\n        checkStrictly = checkboxOpts.checkStrictly,\n        checkMethod = checkboxOpts.checkMethod;\n\n    if (!checkStrictly) {\n      var isAllSelected = false;\n      var isIndeterminate = false;\n\n      if (checkField) {\n        isAllSelected = afterFullData.length && afterFullData.every(checkMethod ? function (row) {\n          return !checkMethod({\n            row: row\n          }) || XEUtils.get(row, checkField);\n        } : function (row) {\n          return XEUtils.get(row, checkField);\n        });\n\n        if (treeConfig) {\n          if (halfField) {\n            isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n              return XEUtils.get(row, checkField) || XEUtils.get(row, halfField) || treeIndeterminates.indexOf(row) > -1;\n            });\n          } else {\n            isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n              return XEUtils.get(row, checkField) || treeIndeterminates.indexOf(row) > -1;\n            });\n          }\n        } else {\n          if (halfField) {\n            isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n              return XEUtils.get(row, checkField) || XEUtils.get(row, halfField);\n            });\n          } else {\n            isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n              return XEUtils.get(row, checkField);\n            });\n          }\n        }\n      } else {\n        isAllSelected = afterFullData.length && afterFullData.every(checkMethod ? function (row) {\n          return !checkMethod({\n            row: row\n          }) || selection.indexOf(row) > -1;\n        } : function (row) {\n          return selection.indexOf(row) > -1;\n        });\n\n        if (treeConfig) {\n          isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n            return treeIndeterminates.indexOf(row) > -1 || selection.indexOf(row) > -1;\n          });\n        } else {\n          isIndeterminate = !isAllSelected && afterFullData.some(function (row) {\n            return selection.indexOf(row) > -1;\n          });\n        }\n      }\n\n      this.isAllSelected = isAllSelected;\n      this.isIndeterminate = isIndeterminate;\n    }\n  },\n  // 还原展开、选中等相关状态\n  handleReserveStatus: function handleReserveStatus() {\n    var expandColumn = this.expandColumn,\n        treeOpts = this.treeOpts,\n        treeConfig = this.treeConfig,\n        fullDataRowIdData = this.fullDataRowIdData,\n        fullAllDataRowMap = this.fullAllDataRowMap,\n        currentRow = this.currentRow,\n        selectRow = this.selectRow,\n        radioReserveRow = this.radioReserveRow,\n        radioOpts = this.radioOpts,\n        checkboxOpts = this.checkboxOpts,\n        selection = this.selection,\n        rowExpandeds = this.rowExpandeds,\n        treeExpandeds = this.treeExpandeds,\n        expandOpts = this.expandOpts; // 单选框\n\n    if (selectRow && !fullAllDataRowMap.has(selectRow)) {\n      this.selectRow = null; // 刷新单选行状态\n    } // 还原保留选中状态\n\n\n    if (radioOpts.reserve && radioReserveRow) {\n      var rowid = getRowid(this, radioReserveRow);\n\n      if (fullDataRowIdData[rowid]) {\n        this.setRadioRow(fullDataRowIdData[rowid].row);\n      }\n    } // 复选框\n\n\n    this.selection = getRecoverRow(this, selection); // 刷新多选行状态\n    // 还原保留选中状态\n\n    if (checkboxOpts.reserve) {\n      this.setCheckboxRow(handleReserveRow(this, this.checkboxReserveRowMap), true);\n    }\n\n    if (currentRow && !fullAllDataRowMap.has(currentRow)) {\n      this.currentRow = null; // 刷新当前行状态\n    } // 行展开\n\n\n    this.rowExpandeds = expandColumn ? getRecoverRow(this, rowExpandeds) : []; // 刷新行展开状态\n    // 还原保留状态\n\n    if (expandColumn && expandOpts.reserve) {\n      this.setRowExpand(handleReserveRow(this, this.rowExpandedReserveRowMap), true);\n    } // 树展开\n\n\n    this.treeExpandeds = treeConfig ? getRecoverRow(this, treeExpandeds) : []; // 刷新树展开状态\n\n    if (treeConfig && treeOpts.reserve) {\n      this.setTreeExpand(handleReserveRow(this, this.treeExpandedReserveRowMap), true);\n    }\n  },\n\n  /**\r\n   * 获取单选框保留选中的行\r\n   */\n  getRadioReserveRecord: function getRadioReserveRecord() {\n    var fullDataRowIdData = this.fullDataRowIdData,\n        radioReserveRow = this.radioReserveRow,\n        radioOpts = this.radioOpts;\n\n    if (radioOpts.reserve && radioReserveRow) {\n      if (!fullDataRowIdData[getRowid(this, radioReserveRow)]) {\n        return radioReserveRow;\n      }\n    }\n\n    return null;\n  },\n  clearRadioReserve: function clearRadioReserve() {\n    this.radioReserveRow = null;\n    return this.$nextTick();\n  },\n  handleRadioReserveRow: function handleRadioReserveRow(row) {\n    var radioOpts = this.radioOpts;\n\n    if (radioOpts.reserve) {\n      this.radioReserveRow = row;\n    }\n  },\n\n  /**\r\n   * 获取复选框保留选中的行\r\n   */\n  getCheckboxReserveRecords: function getCheckboxReserveRecords() {\n    var fullDataRowIdData = this.fullDataRowIdData,\n        checkboxReserveRowMap = this.checkboxReserveRowMap,\n        checkboxOpts = this.checkboxOpts;\n    var reserveSelection = [];\n\n    if (checkboxOpts.reserve) {\n      XEUtils.each(checkboxReserveRowMap, function (row, rowid) {\n        if (row && !fullDataRowIdData[rowid]) {\n          reserveSelection.push(row);\n        }\n      });\n    }\n\n    return reserveSelection;\n  },\n  clearCheckboxReserve: function clearCheckboxReserve() {\n    this.checkboxReserveRowMap = {};\n    return this.$nextTick();\n  },\n  handleCheckboxReserveRow: function handleCheckboxReserveRow(row, checked) {\n    var checkboxReserveRowMap = this.checkboxReserveRowMap,\n        checkboxOpts = this.checkboxOpts;\n\n    if (checkboxOpts.reserve) {\n      var rowid = getRowid(this, row);\n\n      if (checked) {\n        checkboxReserveRowMap[rowid] = row;\n      } else if (checkboxReserveRowMap[rowid]) {\n        delete checkboxReserveRowMap[rowid];\n      }\n    }\n  },\n\n  /**\r\n   * 多选，选中所有事件\r\n   */\n  triggerCheckAllEvent: function triggerCheckAllEvent(evnt, value) {\n    this.setAllCheckboxRow(value);\n    this.emitEvent('checkbox-all', {\n      records: this.getCheckboxRecords(),\n      reserves: this.getCheckboxReserveRecords(),\n      indeterminates: this.getCheckboxIndeterminateRecords(),\n      checked: value\n    }, evnt);\n  },\n\n  /**\r\n   * 多选，切换所有行的选中状态\r\n   */\n  toggleAllCheckboxRow: function toggleAllCheckboxRow() {\n    this.triggerCheckAllEvent(null, !this.isAllSelected);\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于多选行，手动清空用户的选择\r\n   * 清空行为不管是否被禁用还是保留记录，都将彻底清空选中状态\r\n   */\n  clearCheckboxRow: function clearCheckboxRow() {\n    var _this30 = this;\n\n    var tableFullData = this.tableFullData,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        checkboxOpts = this.checkboxOpts;\n    var property = checkboxOpts.checkField,\n        reserve = checkboxOpts.reserve;\n\n    if (property) {\n      if (treeConfig) {\n        XEUtils.eachTree(tableFullData, function (item) {\n          return XEUtils.set(item, property, false);\n        }, treeOpts);\n      } else {\n        tableFullData.forEach(function (item) {\n          return XEUtils.set(item, property, false);\n        });\n      }\n    }\n\n    if (reserve) {\n      tableFullData.forEach(function (row) {\n        return _this30.handleCheckboxReserveRow(row, false);\n      });\n    }\n\n    this.isAllSelected = false;\n    this.isIndeterminate = false;\n    this.selection = [];\n    this.treeIndeterminates = [];\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 处理单选框默认勾选\r\n   */\n  handleDefaultRadioChecked: function handleDefaultRadioChecked() {\n    var radioOpts = this.radioOpts,\n        fullDataRowIdData = this.fullDataRowIdData;\n    var rowid = radioOpts.checkRowKey,\n        reserve = radioOpts.reserve;\n\n    if (rowid) {\n      if (fullDataRowIdData[rowid]) {\n        this.setRadioRow(fullDataRowIdData[rowid].row);\n      }\n\n      if (reserve) {\n        var rowkey = getRowkey(this);\n        this.radioReserveRow = _defineProperty({}, rowkey, rowid);\n      }\n    }\n  },\n\n  /**\r\n   * 单选，行选中事件\r\n   */\n  triggerRadioRowEvent: function triggerRadioRowEvent(evnt, params) {\n    var isChange = this.selectRow !== params.row;\n    this.setRadioRow(params.row);\n\n    if (isChange) {\n      this.emitEvent('radio-change', params, evnt);\n    }\n  },\n  triggerCurrentRowEvent: function triggerCurrentRowEvent(evnt, params) {\n    var isChange = this.currentRow !== params.row;\n    this.setCurrentRow(params.row);\n\n    if (isChange) {\n      this.emitEvent('current-change', params, evnt);\n    }\n  },\n\n  /**\r\n   * 用于当前行，设置某一行为高亮状态\r\n   * @param {Row} row 行对象\r\n   */\n  setCurrentRow: function setCurrentRow(row) {\n    var $el = this.$el;\n    this.clearCurrentRow();\n    this.clearCurrentColumn();\n    this.currentRow = row;\n\n    if (this.highlightCurrentRow) {\n      if ($el) {\n        XEUtils.arrayEach($el.querySelectorAll(\"[rowid=\\\"\".concat(getRowid(this, row), \"\\\"]\")), function (elem) {\n          addClass(elem, 'row--current');\n          elem.style['background-color'] = $_theme.selected_color;\n        });\n      }\n    }\n\n    return this.$nextTick();\n  },\n  isCheckedByRadioRow: function isCheckedByRadioRow(row) {\n    return this.selectRow === row;\n  },\n\n  /**\r\n   * 用于单选行，设置某一行为选中状态\r\n   * @param {Row} row 行对象\r\n   */\n  setRadioRow: function setRadioRow(row) {\n    var radioOpts = this.radioOpts;\n    var checkMethod = radioOpts.checkMethod;\n\n    if (row && (!checkMethod || checkMethod({\n      row: row\n    }))) {\n      this.selectRow = row;\n      this.handleRadioReserveRow(row);\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于当前行，手动清空当前高亮的状态\r\n   */\n  clearCurrentRow: function clearCurrentRow() {\n    var $el = this.$el;\n    this.currentRow = null;\n    this.hoverRow = null;\n\n    if ($el) {\n      XEUtils.arrayEach($el.querySelectorAll('.row--current'), function (elem) {\n        removeClass(elem, 'row--current');\n        elem.style['background-color'] = '';\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于单选行，手动清空用户的选择\r\n   */\n  clearRadioRow: function clearRadioRow() {\n    this.selectRow = null;\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于当前行，获取当前行的数据\r\n   */\n  getCurrentRecord: function getCurrentRecord() {\n    return this.highlightCurrentRow ? this.currentRow : null;\n  },\n\n  /**\r\n   * 用于单选行，获取当已选中的数据\r\n   */\n  getRadioRecord: function getRadioRecord() {\n    return this.selectRow;\n  },\n\n  /**\r\n   * 行 hover 事件\r\n   */\n  triggerHoverEvent: function triggerHoverEvent(evnt, _ref6) {\n    var row = _ref6.row;\n    this.setHoverRow(row);\n  },\n  setHoverRow: function setHoverRow(row) {\n    var $el = this.$el;\n    var rowid = getRowid(this, row);\n    this.clearHoverRow();\n\n    if ($el) {\n      XEUtils.arrayEach($el.querySelectorAll(\"[rowid=\\\"\".concat(rowid, \"\\\"]\")), function (elem) {\n        return addClass(elem, 'row--hover');\n      });\n    }\n\n    this.hoverRow = row;\n  },\n  clearHoverRow: function clearHoverRow() {\n    var $el = this.$el;\n\n    if ($el) {\n      XEUtils.arrayEach($el.querySelectorAll('.vxe-body--row.row--hover'), function (elem) {\n        return removeClass(elem, 'row--hover');\n      });\n    }\n\n    this.hoverRow = null;\n  },\n  triggerHeaderCellClickEvent: function triggerHeaderCellClickEvent(evnt, params) {\n    var _lastResizeTime = this._lastResizeTime,\n        sortOpts = this.sortOpts;\n    var column = params.column;\n    var cell = evnt.currentTarget;\n\n    var triggerResizable = _lastResizeTime && _lastResizeTime > Date.now() - 300;\n\n    var triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n    var triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n\n    if (sortOpts.trigger === 'cell' && !(triggerResizable || triggerSort || triggerFilter)) {\n      this.triggerSortEvent(evnt, column, getNextSortOrder(this, column));\n    }\n\n    this.emitEvent('header-cell-click', Object.assign({\n      triggerResizable: triggerResizable,\n      triggerSort: triggerSort,\n      triggerFilter: triggerFilter,\n      cell: cell\n    }, params), evnt);\n\n    if (this.highlightCurrentColumn) {\n      return this.setCurrentColumn(column);\n    }\n\n    return this.$nextTick();\n  },\n  triggerHeaderCellDblclickEvent: function triggerHeaderCellDblclickEvent(evnt, params) {\n    this.emitEvent('header-cell-dblclick', Object.assign({\n      cell: evnt.currentTarget\n    }, params), evnt);\n  },\n  getCurrentColumn: function getCurrentColumn() {\n    return this.highlightCurrentColumn ? this.currentColumn : null;\n  },\n\n  /**\r\n   * 用于当前列，设置某列行为高亮状态\r\n   * @param {ColumnInfo} fieldOrColumn 列配置\r\n   */\n  setCurrentColumn: function setCurrentColumn(fieldOrColumn) {\n    var column = handleFieldOrColumn(this, fieldOrColumn);\n\n    if (column) {\n      this.clearCurrentRow();\n      this.clearCurrentColumn();\n      this.currentColumn = column;\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 用于当前列，手动清空当前高亮的状态\r\n   */\n  clearCurrentColumn: function clearCurrentColumn() {\n    this.currentColumn = null;\n    return this.$nextTick();\n  },\n  checkValidate: function checkValidate(type) {\n    if (VXETable._valid) {\n      return this.triggerValidate(type);\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 当单元格发生改变时\r\n   * 如果存在规则，则校验\r\n   */\n  handleChangeCell: function handleChangeCell(evnt, params) {\n    var _this31 = this;\n\n    this.checkValidate('blur').catch(function (e) {\n      return e;\n    }).then(function () {\n      _this31.handleActived(params, evnt).then(function () {\n        return _this31.checkValidate('change');\n      }).catch(function (e) {\n        return e;\n      });\n    });\n  },\n\n  /**\r\n   * 列点击事件\r\n   * 如果是单击模式，则激活为编辑状态\r\n   * 如果是双击模式，则单击后选中状态\r\n   */\n  triggerCellClickEvent: function triggerCellClickEvent(evnt, params) {\n    var highlightCurrentRow = this.highlightCurrentRow,\n        editStore = this.editStore,\n        radioOpts = this.radioOpts,\n        expandOpts = this.expandOpts,\n        treeOpts = this.treeOpts,\n        editConfig = this.editConfig,\n        editOpts = this.editOpts,\n        checkboxOpts = this.checkboxOpts;\n    var actived = editStore.actived;\n    var _params = params,\n        row = _params.row,\n        column = _params.column;\n    var type = column.type,\n        treeNode = column.treeNode;\n    var isRadioType = type === 'radio';\n    var isCheckboxType = type === 'checkbox';\n    var isExpandType = type === 'expand';\n    var cell = evnt.currentTarget;\n    var triggerRadio = isRadioType && getEventTargetNode(evnt, cell, 'vxe-cell--radio').flag;\n    var triggerCheckbox = isCheckboxType && getEventTargetNode(evnt, cell, 'vxe-cell--checkbox').flag;\n    var triggerTreeNode = treeNode && getEventTargetNode(evnt, cell, 'vxe-tree--btn-wrapper').flag;\n    var triggerExpandNode = isExpandType && getEventTargetNode(evnt, cell, 'vxe-table--expanded').flag;\n    params = Object.assign({\n      cell: cell,\n      triggerRadio: triggerRadio,\n      triggerCheckbox: triggerCheckbox,\n      triggerTreeNode: triggerTreeNode,\n      triggerExpandNode: triggerExpandNode\n    }, params);\n\n    if (!triggerCheckbox && !triggerRadio) {\n      // 如果是展开行\n      if (!triggerExpandNode && (expandOpts.trigger === 'row' || isExpandType && expandOpts.trigger === 'cell')) {\n        this.triggerRowExpandEvent(evnt, params);\n      } // 如果是树形表格\n\n\n      if (treeOpts.trigger === 'row' || treeNode && treeOpts.trigger === 'cell') {\n        this.triggerTreeExpandEvent(evnt, params);\n      }\n    } // 如果点击了树节点\n\n\n    if (!triggerTreeNode) {\n      if (!triggerExpandNode) {\n        // 如果是高亮行\n        if (highlightCurrentRow) {\n          if (!triggerCheckbox && !triggerRadio) {\n            this.triggerCurrentRowEvent(evnt, params);\n          }\n        } // 如果是单选框\n\n\n        if (!triggerRadio && (radioOpts.trigger === 'row' || isRadioType && radioOpts.trigger === 'cell')) {\n          this.triggerRadioRowEvent(evnt, params);\n        } // 如果是复选框\n\n\n        if (!triggerCheckbox && (checkboxOpts.trigger === 'row' || isCheckboxType && checkboxOpts.trigger === 'cell')) {\n          this.handleToggleCheckRowEvent(evnt, params);\n        }\n      } // 如果设置了单元格选中功能，则不会使用点击事件去处理（只能支持双击模式）\n\n\n      if (editConfig) {\n        if (editOpts.trigger === 'manual') {\n          if (actived.args && actived.row === row && column !== actived.column) {\n            this.handleChangeCell(evnt, params);\n          }\n        } else if (!actived.args || row !== actived.row || column !== actived.column) {\n          if (editOpts.trigger === 'click') {\n            this.handleChangeCell(evnt, params);\n          } else if (editOpts.trigger === 'dblclick') {\n            if (editOpts.mode === 'row' && actived.row === row) {\n              this.handleChangeCell(evnt, params);\n            }\n          }\n        }\n      }\n    }\n\n    this.emitEvent('cell-click', params, evnt);\n  },\n\n  /**\r\n   * 列双击点击事件\r\n   * 如果是双击模式，则激活为编辑状态\r\n   */\n  triggerCellDblclickEvent: function triggerCellDblclickEvent(evnt, params) {\n    var _this32 = this;\n\n    var editStore = this.editStore,\n        editConfig = this.editConfig,\n        editOpts = this.editOpts;\n    var actived = editStore.actived;\n    var cell = evnt.currentTarget;\n    params.cell = cell;\n\n    if (editConfig && editOpts.trigger === 'dblclick') {\n      if (!actived.args || evnt.currentTarget !== actived.args.cell) {\n        if (editOpts.mode === 'row') {\n          this.checkValidate('blur').catch(function (e) {\n            return e;\n          }).then(function () {\n            _this32.handleActived(params, evnt).then(function () {\n              return _this32.checkValidate('change');\n            }).catch(function (e) {\n              return e;\n            });\n          });\n        } else if (editOpts.mode === 'cell') {\n          this.handleActived(params, evnt).then(function () {\n            return _this32.checkValidate('change');\n          }).catch(function (e) {\n            return e;\n          });\n        }\n      }\n    }\n\n    this.emitEvent('cell-dblclick', params, evnt);\n  },\n  handleDefaultSort: function handleDefaultSort() {\n    var _this33 = this;\n\n    var sortConfig = this.sortConfig,\n        sortOpts = this.sortOpts;\n    var defaultSort = sortOpts.defaultSort;\n\n    if (defaultSort) {\n      if (!XEUtils.isArray(defaultSort)) {\n        defaultSort = [defaultSort];\n      }\n\n      if (defaultSort.length) {\n        (sortConfig.multiple ? defaultSort : defaultSort.slice(0, 1)).forEach(function (item) {\n          var field = item.field,\n              order = item.order;\n\n          if (field && order) {\n            var column = _this33.getColumnByField(field);\n\n            if (column && column.sortable) {\n              column.order = order;\n              column.sortTime = Date.now();\n            }\n          }\n        });\n\n        if (!sortOpts.remote) {\n          this.handleTableData(true).then(this.updateStyle);\n        }\n      }\n    }\n  },\n\n  /**\r\n   * 点击排序事件\r\n   */\n  triggerSortEvent: function triggerSortEvent(evnt, column, order) {\n    var _this34 = this;\n\n    var sortOpts = this.sortOpts;\n    var property = column.property;\n\n    if (column.sortable || column.remoteSort) {\n      var row = this.currentRow; //加\n\n      row && this.clearCurrentRow(); //加\n\n      if (!order || column.order === order) {\n        this.clearSort(sortOpts.multiple ? column : null);\n      } else {\n        //        this.sort({ field: property, order })//删\n        this.sort({\n          field: column,\n          order: order\n        }); //加\n      }\n\n      var params = {\n        column: column,\n        property: property,\n        order: column.order,\n        sortList: this.getSortColumns()\n      };\n      row && this.$nextTick(function () {\n        return _this34.setCurrentRow(row);\n      }); //加\n\n      this.emitEvent('sort-change', params, evnt);\n    }\n  },\n  sort: function sort(sortConfs, sortOrder) {\n    var _this35 = this;\n\n    var sortOpts = this.sortOpts;\n    var multiple = sortOpts.multiple,\n        remote = sortOpts.remote,\n        orders = sortOpts.orders;\n\n    if (sortConfs) {\n      if (XEUtils.isString(sortConfs)) {\n        sortConfs = [{\n          field: sortConfs,\n          order: sortOrder\n        }];\n      }\n    }\n\n    if (!XEUtils.isArray(sortConfs)) {\n      sortConfs = [sortConfs];\n    }\n\n    if (sortConfs.length) {\n      var firstSortColumn;\n\n      if (!multiple) {\n        clearAllSort(this);\n      }\n\n      (multiple ? sortConfs : [sortConfs[0]]).forEach(function (confs) {\n        var field = confs.field,\n            order = confs.order;\n        var column = field;\n\n        if (XEUtils.isString(field)) {\n          column = _this35.getColumnByField(field);\n        }\n\n        if (column && (column.sortable || column.remoteSort)) {\n          if (!firstSortColumn) {\n            firstSortColumn = column;\n          }\n\n          if (orders.indexOf(order) === -1) {\n            order = getNextSortOrder(_this35, column);\n          }\n\n          if (column.order !== order) {\n            column.order = order;\n          }\n        }\n      }); // 如果是服务端排序，则跳过本地排序处理\n\n      if (!remote || firstSortColumn && firstSortColumn.remoteSort) {\n        this.handleTableData(true);\n      }\n\n      return this.$nextTick().then(this.updateStyle);\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 清空指定列的排序条件\r\n   * 如果为空则清空所有列的排序条件\r\n   * @param {String} column 列或字段名\r\n   */\n  clearSort: function clearSort(fieldOrColumn) {\n    var sortOpts = this.sortOpts;\n\n    if (fieldOrColumn) {\n      var column = handleFieldOrColumn(this, fieldOrColumn);\n\n      if (column) {\n        column.order = null;\n      }\n    } else {\n      clearAllSort(this);\n    }\n\n    if (!sortOpts.remote) {\n      return this.handleTableData(true);\n    }\n\n    return this.$nextTick();\n  },\n  // 在 v3 中废弃\n  getSortColumn: function getSortColumn() {\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      UtilTools.warn('vxe.error.delFunc', ['getSortColumn', 'getSortColumns']);\n    }\n\n    return XEUtils.find(this.tableFullColumn, function (column) {\n      return (column.sortable || column.remoteSort) && column.order;\n    });\n  },\n  isSort: function isSort(fieldOrColumn) {\n    if (fieldOrColumn) {\n      var column = handleFieldOrColumn(this, fieldOrColumn);\n      return column && column.sortable && !!column.order;\n    }\n\n    return this.getSortColumns().length > 0;\n  },\n  getSortColumns: function getSortColumns() {\n    var sortList = [];\n    this.tableFullColumn.forEach(function (column) {\n      var order = column.order;\n\n      if ((column.sortable || column.remoteSort) && order) {\n        sortList.push({\n          column: column,\n          property: column.property,\n          order: order\n        });\n      }\n    });\n    return sortList;\n  },\n\n  /**\r\n   * 关闭筛选\r\n   * @param {Event} evnt 事件\r\n   */\n  closeFilter: function closeFilter() {\n    Object.assign(this.filterStore, {\n      isAllSelected: false,\n      isIndeterminate: false,\n      options: [],\n      visible: false\n    });\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 判断指定列是否为筛选状态，如果为空则判断所有列\r\n   * @param {String} fieldOrColumn 字段名\r\n   */\n  isFilter: function isFilter(fieldOrColumn) {\n    var column = handleFieldOrColumn(this, fieldOrColumn);\n\n    if (column) {\n      return column.filters && column.filters.some(function (option) {\n        return option.checked;\n      });\n    }\n\n    return this.getCheckedFilters().length > 0;\n  },\n\n  /**\r\n   * 判断展开行是否懒加载完成\r\n   * @param {Row} row 行对象\r\n   */\n  isRowExpandLoaded: function isRowExpandLoaded(row) {\n    var rest = this.fullAllDataRowMap.get(row);\n    return rest && rest.expandLoaded;\n  },\n  clearRowExpandLoaded: function clearRowExpandLoaded(row) {\n    var expandOpts = this.expandOpts,\n        expandLazyLoadeds = this.expandLazyLoadeds,\n        fullAllDataRowMap = this.fullAllDataRowMap;\n    var lazy = expandOpts.lazy;\n    var rest = fullAllDataRowMap.get(row);\n\n    if (lazy && rest) {\n      rest.expandLoaded = false;\n      XEUtils.remove(expandLazyLoadeds, function (item) {\n        return row === item;\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 重新加载展开行的内容\r\n   * @param {Row} row 行对象\r\n   */\n  reloadExpandContent: function reloadExpandContent(row) {\n    var _this36 = this;\n\n    var expandOpts = this.expandOpts,\n        expandLazyLoadeds = this.expandLazyLoadeds;\n    var lazy = expandOpts.lazy;\n\n    if (lazy && expandLazyLoadeds.indexOf(row) === -1) {\n      this.clearRowExpandLoaded(row).then(function () {\n        return _this36.handleAsyncRowExpand(row);\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 展开行事件\r\n   */\n  triggerRowExpandEvent: function triggerRowExpandEvent(evnt, params) {\n    var expandOpts = this.expandOpts,\n        expandLazyLoadeds = this.expandLazyLoadeds,\n        column = this.expandColumn;\n    var row = params.row;\n    var lazy = expandOpts.lazy;\n\n    if (!lazy || expandLazyLoadeds.indexOf(row) === -1) {\n      var expanded = !this.isExpandByRow(row);\n      var columnIndex = this.getColumnIndex(column);\n      var $columnIndex = this.getVMColumnIndex(column);\n      this.setRowExpand(row, expanded);\n      this.emitEvent('toggle-row-expand', {\n        expanded: expanded,\n        column: column,\n        columnIndex: columnIndex,\n        $columnIndex: $columnIndex,\n        row: row,\n        rowIndex: this.getRowIndex(row),\n        $rowIndex: this.getVMRowIndex(row)\n      }, evnt);\n    }\n  },\n\n  /**\r\n   * 切换展开行\r\n   */\n  toggleRowExpand: function toggleRowExpand(row) {\n    return this.setRowExpand(row, !this.isExpandByRow(row));\n  },\n\n  /**\r\n   * 处理默认展开行\r\n   */\n  handleDefaultRowExpand: function handleDefaultRowExpand() {\n    var expandOpts = this.expandOpts,\n        fullDataRowIdData = this.fullDataRowIdData;\n    var expandAll = expandOpts.expandAll,\n        expandRowKeys = expandOpts.expandRowKeys;\n\n    if (expandAll) {\n      this.setAllRowExpand(true);\n    } else if (expandRowKeys) {\n      var defExpandeds = [];\n      expandRowKeys.forEach(function (rowid) {\n        if (fullDataRowIdData[rowid]) {\n          defExpandeds.push(fullDataRowIdData[rowid].row);\n        }\n      });\n      this.setRowExpand(defExpandeds, true);\n    }\n  },\n\n  /**\r\n   * 设置所有行的展开与否\r\n   * @param {Boolean} expanded 是否展开\r\n   */\n  setAllRowExpand: function setAllRowExpand(expanded) {\n    return this.setRowExpand(this.expandOpts.lazy ? this.tableData : this.tableFullData, expanded);\n  },\n  handleAsyncRowExpand: function handleAsyncRowExpand(row) {\n    var _this37 = this;\n\n    var rest = this.fullAllDataRowMap.get(row);\n    return new Promise(function (resolve) {\n      _this37.expandLazyLoadeds.push(row);\n\n      _this37.expandOpts.loadMethod({\n        $table: _this37,\n        row: row,\n        rowIndex: _this37.getRowIndex(row),\n        $rowIndex: _this37.getVMRowIndex(row)\n      }).catch(function (e) {\n        return e;\n      }).then(function () {\n        rest.expandLoaded = true;\n        XEUtils.remove(_this37.expandLazyLoadeds, function (item) {\n          return item === row;\n        });\n\n        _this37.rowExpandeds.push(row);\n\n        resolve(_this37.$nextTick().then(_this37.recalculate));\n      });\n    });\n  },\n\n  /**\r\n   * 设置展开行，二个参数设置这一行展开与否\r\n   * 支持单行\r\n   * 支持多行\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {Boolean} expanded 是否展开\r\n   */\n  setRowExpand: function setRowExpand(rows, expanded) {\n    var _this38 = this;\n\n    var fullAllDataRowMap = this.fullAllDataRowMap,\n        expandLazyLoadeds = this.expandLazyLoadeds,\n        expandOpts = this.expandOpts,\n        column = this.expandColumn;\n    var rowExpandeds = this.rowExpandeds;\n    var reserve = expandOpts.reserve,\n        lazy = expandOpts.lazy,\n        accordion = expandOpts.accordion,\n        toggleMethod = expandOpts.toggleMethod;\n    var lazyRests = [];\n    var columnIndex = this.getColumnIndex(column);\n    var $columnIndex = this.getVMColumnIndex(column);\n\n    if (rows) {\n      if (!XEUtils.isArray(rows)) {\n        rows = [rows];\n      }\n\n      if (accordion) {\n        // 只能同时展开一个\n        rowExpandeds = [];\n        rows = rows.slice(rows.length - 1, rows.length);\n      }\n\n      var validRows = toggleMethod ? rows.filter(function (row) {\n        return toggleMethod({\n          expanded: expanded,\n          column: column,\n          columnIndex: columnIndex,\n          $columnIndex: $columnIndex,\n          row: row,\n          rowIndex: _this38.getRowIndex(row),\n          $rowIndex: _this38.getVMRowIndex(row)\n        });\n      }) : rows;\n\n      if (expanded) {\n        validRows.forEach(function (row) {\n          if (rowExpandeds.indexOf(row) === -1) {\n            var rest = fullAllDataRowMap.get(row);\n            var isLoad = lazy && !rest.expandLoaded && expandLazyLoadeds.indexOf(row) === -1;\n\n            if (isLoad) {\n              lazyRests.push(_this38.handleAsyncRowExpand(row));\n            } else {\n              rowExpandeds.push(row);\n            }\n          }\n        });\n      } else {\n        XEUtils.remove(rowExpandeds, function (row) {\n          return validRows.indexOf(row) > -1;\n        });\n      }\n\n      if (reserve) {\n        validRows.forEach(function (row) {\n          return _this38.handleRowExpandReserve(row, expanded);\n        });\n      }\n    }\n\n    this.rowExpandeds = rowExpandeds;\n    return Promise.all(lazyRests).then(this.recalculate);\n  },\n\n  /**\r\n   * 判断行是否为展开状态\r\n   * @param {Row} row 行对象\r\n   */\n  isExpandByRow: function isExpandByRow(row) {\n    return this.rowExpandeds.indexOf(row) > -1;\n  },\n\n  /**\r\n   * 手动清空展开行状态，数据会恢复成未展开的状态\r\n   */\n  clearRowExpand: function clearRowExpand() {\n    var _this39 = this;\n\n    var expandOpts = this.expandOpts,\n        rowExpandeds = this.rowExpandeds,\n        tableFullData = this.tableFullData;\n    var reserve = expandOpts.reserve;\n    var isExists = rowExpandeds.length;\n    this.rowExpandeds = [];\n\n    if (reserve) {\n      tableFullData.forEach(function (row) {\n        return _this39.handleRowExpandReserve(row, false);\n      });\n    }\n\n    return this.$nextTick().then(function () {\n      if (isExists) {\n        _this39.recalculate();\n      }\n    });\n  },\n  clearRowExpandReserve: function clearRowExpandReserve() {\n    this.rowExpandedReserveRowMap = {};\n    return this.$nextTick();\n  },\n  handleRowExpandReserve: function handleRowExpandReserve(row, expanded) {\n    var rowExpandedReserveRowMap = this.rowExpandedReserveRowMap,\n        expandOpts = this.expandOpts;\n\n    if (expandOpts.reserve) {\n      var rowid = getRowid(this, row);\n\n      if (expanded) {\n        rowExpandedReserveRowMap[rowid] = row;\n      } else if (rowExpandedReserveRowMap[rowid]) {\n        delete rowExpandedReserveRowMap[rowid];\n      }\n    }\n  },\n  getRowExpandRecords: function getRowExpandRecords() {\n    return this.rowExpandeds.slice(0);\n  },\n  getTreeExpandRecords: function getTreeExpandRecords() {\n    return this.treeExpandeds.slice(0);\n  },\n\n  /**\r\n   * 获取数表格状态\r\n   */\n  getTreeStatus: function getTreeStatus() {\n    if (this.treeConfig) {\n      return {\n        config: this.treeOpts,\n        rowExpandeds: this.getTreeExpandRecords()\n      };\n    }\n\n    return null;\n  },\n\n  /**\r\n   * 判断树节点是否懒加载完成\r\n   * @param {Row} row 行对象\r\n   */\n  isTreeExpandLoaded: function isTreeExpandLoaded(row) {\n    var rest = this.fullAllDataRowMap.get(row);\n    return rest && rest.treeLoaded;\n  },\n  clearTreeExpandLoaded: function clearTreeExpandLoaded(row) {\n    var treeOpts = this.treeOpts,\n        treeExpandeds = this.treeExpandeds,\n        fullAllDataRowMap = this.fullAllDataRowMap;\n    var lazy = treeOpts.lazy;\n    var rest = fullAllDataRowMap.get(row);\n\n    if (lazy && rest) {\n      rest.treeLoaded = false;\n      XEUtils.remove(treeExpandeds, function (item) {\n        return row === item;\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 重新加载树的子节点\r\n   * @param {Row} row 行对象\r\n   */\n  reloadTreeChilds: function reloadTreeChilds(row) {\n    var _this40 = this;\n\n    var treeOpts = this.treeOpts,\n        treeLazyLoadeds = this.treeLazyLoadeds;\n    var lazy = treeOpts.lazy,\n        hasChild = treeOpts.hasChild;\n\n    if (lazy && row[hasChild] && treeLazyLoadeds.indexOf(row) === -1) {\n      this.clearTreeExpandLoaded(row).then(function () {\n        return _this40.handleAsyncTreeExpandChilds(row);\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 展开树节点事件\r\n   */\n  triggerTreeExpandEvent: function triggerTreeExpandEvent(evnt, params) {\n    var treeOpts = this.treeOpts,\n        treeLazyLoadeds = this.treeLazyLoadeds;\n    var row = params.row,\n        column = params.column;\n    var lazy = treeOpts.lazy;\n\n    if (!lazy || treeLazyLoadeds.indexOf(row) === -1) {\n      var expanded = !this.isTreeExpandByRow(row);\n      var columnIndex = this.getColumnIndex(column);\n      var $columnIndex = this.getVMColumnIndex(column);\n      this.setTreeExpand(row, expanded);\n      this.emitEvent('toggle-tree-expand', {\n        expanded: expanded,\n        column: column,\n        columnIndex: columnIndex,\n        $columnIndex: $columnIndex,\n        row: row\n      }, evnt);\n    }\n  },\n\n  /**\r\n   * 切换/展开树节点\r\n   */\n  toggleTreeExpand: function toggleTreeExpand(row) {\n    return this.setTreeExpand(row, !this.isTreeExpandByRow(row));\n  },\n\n  /**\r\n   * 处理默认展开树节点\r\n   */\n  handleDefaultTreeExpand: function handleDefaultTreeExpand() {\n    var treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts,\n        tableFullData = this.tableFullData;\n\n    if (treeConfig) {\n      var expandAll = treeOpts.expandAll,\n          expandRowKeys = treeOpts.expandRowKeys;\n\n      if (expandAll) {\n        this.setAllTreeExpand(true);\n      } else if (expandRowKeys) {\n        var defExpandeds = [];\n        var rowkey = getRowkey(this);\n        expandRowKeys.forEach(function (rowid) {\n          var matchObj = XEUtils.findTree(tableFullData, function (item) {\n            return rowid === XEUtils.get(item, rowkey);\n          }, treeOpts);\n\n          if (matchObj) {\n            defExpandeds.push(matchObj.item);\n          }\n        });\n        this.setTreeExpand(defExpandeds, true);\n      }\n    }\n  },\n  handleAsyncTreeExpandChilds: function handleAsyncTreeExpandChilds(row) {\n    var _this41 = this;\n\n    var fullAllDataRowMap = this.fullAllDataRowMap,\n        treeExpandeds = this.treeExpandeds,\n        treeOpts = this.treeOpts,\n        treeLazyLoadeds = this.treeLazyLoadeds,\n        checkboxOpts = this.checkboxOpts;\n    var loadMethod = treeOpts.loadMethod;\n    var checkStrictly = checkboxOpts.checkStrictly;\n    var rest = fullAllDataRowMap.get(row);\n    return new Promise(function (resolve) {\n      treeLazyLoadeds.push(row);\n      loadMethod({\n        $table: _this41,\n        row: row\n      }).catch(function () {\n        return [];\n      }).then(function (childRecords) {\n        rest.treeLoaded = true;\n        XEUtils.remove(treeLazyLoadeds, function (item) {\n          return item === row;\n        });\n\n        if (!XEUtils.isArray(childRecords)) {\n          childRecords = [];\n        }\n\n        if (childRecords) {\n          _this41.loadChildren(row, childRecords).then(function (childRows) {\n            if (childRows.length && treeExpandeds.indexOf(row) === -1) {\n              treeExpandeds.push(row);\n            } // 如果当前节点已选中，则展开后子节点也被选中\n\n\n            if (!checkStrictly && _this41.isCheckedByCheckboxRow(row)) {\n              _this41.setCheckboxRow(childRows, true);\n            }\n          });\n        }\n\n        resolve(_this41.$nextTick().then(_this41.recalculate));\n      });\n    });\n  },\n\n  /**\r\n   * 设置所有树节点的展开与否\r\n   * @param {Boolean} expanded 是否展开\r\n   */\n  setAllTreeExpand: function setAllTreeExpand(expanded) {\n    var tableFullData = this.tableFullData,\n        treeOpts = this.treeOpts;\n    var lazy = treeOpts.lazy,\n        children = treeOpts.children;\n    var expandeds = [];\n    XEUtils.eachTree(tableFullData, function (row) {\n      var rowChildren = row[children];\n\n      if (lazy || rowChildren && rowChildren.length) {\n        expandeds.push(row);\n      }\n    }, treeOpts);\n    return this.setTreeExpand(expandeds, expanded);\n  },\n\n  /**\r\n   * 设置展开树形节点，二个参数设置这一行展开与否\r\n   * 支持单行\r\n   * 支持多行\r\n   * @param {Array/Row} rows 行数据\r\n   * @param {Boolean} expanded 是否展开\r\n   */\n  setTreeExpand: function setTreeExpand(rows, expanded) {\n    var _this42 = this;\n\n    var fullAllDataRowMap = this.fullAllDataRowMap,\n        tableFullData = this.tableFullData,\n        treeExpandeds = this.treeExpandeds,\n        treeOpts = this.treeOpts,\n        treeLazyLoadeds = this.treeLazyLoadeds,\n        treeNodeColumn = this.treeNodeColumn;\n    var reserve = treeOpts.reserve,\n        lazy = treeOpts.lazy,\n        hasChild = treeOpts.hasChild,\n        children = treeOpts.children,\n        accordion = treeOpts.accordion,\n        toggleMethod = treeOpts.toggleMethod;\n    var result = [];\n    var columnIndex = this.getColumnIndex(treeNodeColumn);\n    var $columnIndex = this.getVMColumnIndex(treeNodeColumn);\n\n    if (rows) {\n      if (!XEUtils.isArray(rows)) {\n        rows = [rows];\n      }\n\n      if (rows.length) {\n        var validRows = toggleMethod ? rows.filter(function (row) {\n          return toggleMethod({\n            expanded: expanded,\n            column: treeNodeColumn,\n            columnIndex: columnIndex,\n            $columnIndex: $columnIndex,\n            row: row\n          });\n        }) : rows;\n\n        if (accordion) {\n          validRows = validRows.length ? [validRows[validRows.length - 1]] : []; // 同一级只能展开一个\n\n          var matchObj = XEUtils.findTree(tableFullData, function (item) {\n            return item === validRows[0];\n          }, treeOpts);\n\n          if (matchObj) {\n            XEUtils.remove(treeExpandeds, function (item) {\n              return matchObj.items.indexOf(item) > -1;\n            });\n          }\n        }\n\n        if (expanded) {\n          validRows.forEach(function (row) {\n            if (treeExpandeds.indexOf(row) === -1) {\n              var rest = fullAllDataRowMap.get(row);\n              var isLoad = lazy && row[hasChild] && !rest.treeLoaded && treeLazyLoadeds.indexOf(row) === -1; // 是否使用懒加载\n\n              if (isLoad) {\n                result.push(_this42.handleAsyncTreeExpandChilds(row));\n              } else {\n                if (row[children] && row[children].length) {\n                  treeExpandeds.push(row);\n                }\n              }\n            }\n          });\n        } else {\n          XEUtils.remove(treeExpandeds, function (row) {\n            return validRows.indexOf(row) > -1;\n          });\n        }\n\n        if (reserve) {\n          validRows.forEach(function (row) {\n            return _this42.handleTreeExpandReserve(row, expanded);\n          });\n        }\n\n        return Promise.all(result).then(this.recalculate);\n      }\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 判断行是否为树形节点展开状态\r\n   * @param {Row} row 行对象\r\n   */\n  isTreeExpandByRow: function isTreeExpandByRow(row) {\n    return this.treeExpandeds.indexOf(row) > -1;\n  },\n\n  /**\r\n   * 手动清空树形节点的展开状态，数据会恢复成未展开的状态\r\n   */\n  clearTreeExpand: function clearTreeExpand() {\n    var _this43 = this;\n\n    var treeOpts = this.treeOpts,\n        treeExpandeds = this.treeExpandeds,\n        tableFullData = this.tableFullData;\n    var reserve = treeOpts.reserve;\n    var isExists = treeExpandeds.length;\n    this.treeExpandeds = [];\n\n    if (reserve) {\n      XEUtils.eachTree(tableFullData, function (row) {\n        return _this43.handleTreeExpandReserve(row, false);\n      }, treeOpts);\n    }\n\n    return this.$nextTick().then(function () {\n      if (isExists) {\n        _this43.recalculate();\n      }\n    });\n  },\n  clearTreeExpandReserve: function clearTreeExpandReserve() {\n    this.treeExpandedReserveRowMap = {};\n    return this.$nextTick();\n  },\n  handleTreeExpandReserve: function handleTreeExpandReserve(row, expanded) {\n    var treeExpandedReserveRowMap = this.treeExpandedReserveRowMap,\n        treeOpts = this.treeOpts;\n\n    if (treeOpts.reserve) {\n      var rowid = getRowid(this, row);\n\n      if (expanded) {\n        treeExpandedReserveRowMap[rowid] = row;\n      } else if (treeExpandedReserveRowMap[rowid]) {\n        delete treeExpandedReserveRowMap[rowid];\n      }\n    }\n  },\n\n  /**\r\n   * 获取表格的滚动状态\r\n   */\n  getScroll: function getScroll() {\n    var $refs = this.$refs,\n        scrollXLoad = this.scrollXLoad,\n        scrollYLoad = this.scrollYLoad;\n    var bodyElem = $refs.tableBody.$el;\n    return {\n      virtualX: scrollXLoad,\n      virtualY: scrollYLoad,\n      scrollTop: bodyElem.scrollTop,\n      scrollLeft: bodyElem.scrollLeft\n    };\n  },\n\n  /**\r\n   * 横向 X 可视渲染事件处理\r\n   */\n  triggerScrollXEvent: function triggerScrollXEvent() {\n    this.loadScrollXData();\n  },\n  loadScrollXData: function loadScrollXData() {\n    var mergeList = this.mergeList,\n        mergeFooterList = this.mergeFooterList,\n        scrollXStore = this.scrollXStore;\n    var startIndex = scrollXStore.startIndex,\n        endIndex = scrollXStore.endIndex,\n        offsetSize = scrollXStore.offsetSize;\n\n    var _computeVirtualX2 = computeVirtualX(this),\n        toVisibleIndex = _computeVirtualX2.toVisibleIndex,\n        visibleSize = _computeVirtualX2.visibleSize;\n\n    var offsetItem = {\n      startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),\n      endIndex: toVisibleIndex + visibleSize + offsetSize\n    };\n    calculateMergerOffserIndex(mergeList.concat(mergeFooterList), offsetItem, 'col');\n    var offsetStartIndex = offsetItem.startIndex,\n        offsetEndIndex = offsetItem.endIndex;\n\n    if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\n      if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\n        scrollXStore.startIndex = offsetStartIndex;\n        scrollXStore.endIndex = offsetEndIndex;\n        this.updateScrollXData();\n      }\n    }\n\n    this.closeTooltip();\n  },\n\n  /**\r\n   * 纵向 Y 可视渲染事件处理\r\n   */\n  triggerScrollYEvent: function triggerScrollYEvent(evnt) {\n    var _this44 = this;\n\n    var row = this.currentRow; //加\n\n    row && this.clearCurrentRow(); //加\n\n    var scrollYStore = this.scrollYStore;\n    var adaptive = scrollYStore.adaptive,\n        offsetSize = scrollYStore.offsetSize,\n        visibleSize = scrollYStore.visibleSize; // webkit 浏览器使用最佳的渲染方式，且最高渲染量不能大于 40 条\n\n    if (isWebkit && adaptive && offsetSize * 2 + visibleSize <= 40) {\n      this.loadScrollYData(evnt);\n    } else {\n      this.debounceScrollY(evnt);\n    }\n\n    row && this.$nextTick(function () {\n      return _this44.setCurrentRow(row);\n    }); //加\n  },\n  debounceScrollY: XEUtils.debounce(function (evnt) {\n    this.loadScrollYData(evnt);\n  }, debounceScrollYDuration, {\n    leading: false,\n    trailing: true\n  }),\n\n  /**\r\n   * 纵向 Y 可视渲染处理\r\n   */\n  loadScrollYData: function loadScrollYData(evnt) {\n    var mergeList = this.mergeList,\n        scrollYStore = this.scrollYStore;\n    var startIndex = scrollYStore.startIndex,\n        endIndex = scrollYStore.endIndex,\n        visibleSize = scrollYStore.visibleSize,\n        offsetSize = scrollYStore.offsetSize,\n        rowHeight = scrollYStore.rowHeight;\n    var scrollBodyElem = evnt.currentTarget || evnt.target;\n    var scrollTop = scrollBodyElem.scrollTop;\n    var toVisibleIndex = Math.floor(scrollTop / rowHeight);\n    var offsetItem = {\n      startIndex: Math.max(0, toVisibleIndex - 1 - offsetSize),\n      endIndex: toVisibleIndex + visibleSize + offsetSize\n    };\n    calculateMergerOffserIndex(mergeList, offsetItem, 'row');\n    var offsetStartIndex = offsetItem.startIndex,\n        offsetEndIndex = offsetItem.endIndex;\n\n    if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\n      if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\n        scrollYStore.startIndex = offsetStartIndex;\n        scrollYStore.endIndex = offsetEndIndex;\n        this.updateScrollYData();\n      }\n    }\n  },\n  // 计算可视渲染相关数据\n  computeScrollLoad: function computeScrollLoad() {\n    var _this45 = this;\n\n    return this.$nextTick().then(function () {\n      var sYOpts = _this45.sYOpts,\n          sXOpts = _this45.sXOpts,\n          scrollXLoad = _this45.scrollXLoad,\n          scrollYLoad = _this45.scrollYLoad,\n          scrollXStore = _this45.scrollXStore,\n          scrollYStore = _this45.scrollYStore; // 计算 X 逻辑\n\n      if (scrollXLoad) {\n        var _computeVirtualX3 = computeVirtualX(_this45),\n            visibleXSize = _computeVirtualX3.visibleSize;\n\n        var offsetXSize = sXOpts.oSize ? XEUtils.toNumber(sXOpts.oSize) : browse.msie ? 10 : browse.edge ? 5 : 0;\n        scrollXStore.offsetSize = offsetXSize;\n        scrollXStore.visibleSize = visibleXSize;\n        scrollXStore.endIndex = Math.max(scrollXStore.startIndex + scrollXStore.visibleSize + offsetXSize, scrollXStore.endIndex);\n\n        _this45.updateScrollXData();\n      } else {\n        _this45.updateScrollXSpace();\n      } // 计算 Y 逻辑\n\n\n      var _computeVirtualY = computeVirtualY(_this45),\n          rowHeight = _computeVirtualY.rowHeight,\n          visibleYSize = _computeVirtualY.visibleSize;\n\n      scrollYStore.rowHeight = rowHeight;\n\n      if (scrollYLoad) {\n        var offsetYSize = sYOpts.oSize ? XEUtils.toNumber(sYOpts.oSize) : browse.msie ? 20 : browse.edge ? 10 : 0;\n        scrollYStore.offsetSize = offsetYSize;\n        scrollYStore.visibleSize = visibleYSize;\n        scrollYStore.endIndex = Math.max(scrollYStore.startIndex + visibleYSize + offsetYSize, scrollYStore.endIndex);\n\n        _this45.updateScrollYData();\n      } else {\n        _this45.updateScrollYSpace();\n      }\n\n      _this45.rowHeight = rowHeight;\n\n      _this45.$nextTick(_this45.updateStyle);\n    });\n  },\n  handleTableColumn: function handleTableColumn() {\n    var scrollXLoad = this.scrollXLoad,\n        visibleColumn = this.visibleColumn,\n        scrollXStore = this.scrollXStore;\n    this.tableColumn = scrollXLoad ? visibleColumn.slice(scrollXStore.startIndex, scrollXStore.endIndex) : visibleColumn.slice(0);\n  },\n  updateScrollXData: function updateScrollXData() {\n    this.handleTableColumn();\n    this.updateScrollXSpace();\n  },\n  // 更新横向 X 可视渲染上下剩余空间大小\n  updateScrollXSpace: function updateScrollXSpace() {\n    var $refs = this.$refs,\n        elemStore = this.elemStore,\n        visibleColumn = this.visibleColumn,\n        scrollXStore = this.scrollXStore,\n        scrollXLoad = this.scrollXLoad,\n        tableWidth = this.tableWidth,\n        scrollbarWidth = this.scrollbarWidth;\n    var tableHeader = $refs.tableHeader,\n        tableBody = $refs.tableBody,\n        tableFooter = $refs.tableFooter;\n    var tableBodyElem = tableBody ? tableBody.$el : null;\n\n    if (tableBodyElem) {\n      var tableHeaderElem = tableHeader ? tableHeader.$el : null;\n      var tableFooterElem = tableFooter ? tableFooter.$el : null;\n      var headerElem = tableHeaderElem ? tableHeaderElem.querySelector('.vxe-table--header') : null;\n      var bodyElem = tableBodyElem.querySelector('.vxe-table--body');\n      var footerElem = tableFooterElem ? tableFooterElem.querySelector('.vxe-table--footer') : null;\n      var leftSpaceWidth = visibleColumn.slice(0, scrollXStore.startIndex).reduce(function (previous, column) {\n        return previous + column.renderWidth;\n      }, 0);\n      var marginLeft = '';\n\n      if (scrollXLoad) {\n        marginLeft = \"\".concat(leftSpaceWidth, \"px\");\n      }\n\n      if (headerElem) {\n        headerElem.style.marginLeft = marginLeft;\n      }\n\n      bodyElem.style.marginLeft = marginLeft;\n\n      if (footerElem) {\n        footerElem.style.marginLeft = marginLeft;\n      }\n\n      var containerList = ['main'];\n      containerList.forEach(function (name) {\n        var layoutList = ['header', 'body', 'footer'];\n        layoutList.forEach(function (layout) {\n          var xSpaceElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-xSpace\")];\n\n          if (xSpaceElem) {\n            xSpaceElem.style.width = scrollXLoad ? \"\".concat(tableWidth + (layout === 'header' ? scrollbarWidth : 0), \"px\") : '';\n          }\n        });\n      });\n      this.$nextTick(this.updateStyle);\n    }\n  },\n  updateScrollYData: function updateScrollYData() {\n    this.handleTableData();\n    this.updateScrollYSpace();\n  },\n  // 更新纵向 Y 可视渲染上下剩余空间大小\n  updateScrollYSpace: function updateScrollYSpace() {\n    var elemStore = this.elemStore,\n        scrollYStore = this.scrollYStore,\n        scrollYLoad = this.scrollYLoad,\n        afterFullData = this.afterFullData;\n    var startIndex = scrollYStore.startIndex,\n        rowHeight = scrollYStore.rowHeight;\n    var bodyHeight = afterFullData.length * rowHeight;\n    var topSpaceHeight = Math.max(0, startIndex * rowHeight);\n    var containerList = ['main', 'left', 'right'];\n    var marginTop = '';\n    var ySpaceHeight = '';\n\n    if (scrollYLoad) {\n      marginTop = \"\".concat(topSpaceHeight, \"px\");\n      ySpaceHeight = \"\".concat(bodyHeight, \"px\");\n    }\n\n    containerList.forEach(function (name) {\n      var layoutList = ['header', 'body', 'footer'];\n      var tableElem = elemStore[\"\".concat(name, \"-body-table\")];\n\n      if (tableElem) {\n        tableElem.style.marginTop = marginTop;\n      }\n\n      layoutList.forEach(function (layout) {\n        var ySpaceElem = elemStore[\"\".concat(name, \"-\").concat(layout, \"-ySpace\")];\n\n        if (ySpaceElem) {\n          ySpaceElem.style.height = ySpaceHeight;\n        }\n      });\n    });\n    this.$nextTick(this.updateStyle);\n  },\n\n  /**\r\n   * 如果有滚动条，则滚动到对应的位置\r\n   * @param {Number} scrollLeft 左距离\r\n   * @param {Number} scrollTop 上距离\r\n   */\n  scrollTo: function scrollTo(scrollLeft, scrollTop) {\n    var _this46 = this;\n\n    var $refs = this.$refs;\n    var tableBody = $refs.tableBody,\n        rightBody = $refs.rightBody,\n        tableFooter = $refs.tableFooter;\n    var tableBodyElem = tableBody ? tableBody.$el : null;\n    var rightBodyElem = rightBody ? rightBody.$el : null;\n    var tableFooterElem = tableFooter ? tableFooter.$el : null;\n\n    if (XEUtils.isNumber(scrollLeft)) {\n      setScrollLeft(tableFooterElem || tableBodyElem, scrollLeft);\n    }\n\n    if (XEUtils.isNumber(scrollTop)) {\n      setScrollTop(rightBodyElem || tableBodyElem, scrollTop);\n    }\n\n    if (this.scrollXLoad || this.scrollYLoad) {\n      return new Promise(function (resolve) {\n        return setTimeout(function () {\n          return resolve(_this46.$nextTick());\n        }, 50);\n      });\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 如果有滚动条，则滚动到对应的行\r\n   * @param {Row} row 行对象\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  scrollToRow: function scrollToRow(row, fieldOrColumn) {\n    var rest = [];\n\n    if (row) {\n      if (this.treeConfig) {\n        rest.push(this.scrollToTreeRow(row));\n      } else {\n        rest.push(DomTools.rowToVisible(this, row));\n      }\n    }\n\n    if (fieldOrColumn) {\n      rest.push(this.scrollToColumn(fieldOrColumn));\n    }\n\n    return Promise.all(rest);\n  },\n\n  /**\r\n   * 如果有滚动条，则滚动到对应的列\r\n   * @param {ColumnInfo} column 列配置\r\n   */\n  scrollToColumn: function scrollToColumn(fieldOrColumn) {\n    var column = handleFieldOrColumn(this, fieldOrColumn);\n\n    if (column && this.fullColumnMap.has(column)) {\n      return DomTools.colToVisible(this, column);\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 对于树形结构中，可以直接滚动到指定深层节点中\r\n   * 对于某些特定的场景可能会用到，比如定位到某一节点\r\n   * @param {Row} row 行对象\r\n   */\n  scrollToTreeRow: function scrollToTreeRow(row) {\n    var _this47 = this;\n\n    var tableFullData = this.tableFullData,\n        treeConfig = this.treeConfig,\n        treeOpts = this.treeOpts;\n\n    if (treeConfig) {\n      var matchObj = XEUtils.findTree(tableFullData, function (item) {\n        return item === row;\n      }, treeOpts);\n\n      if (matchObj) {\n        var nodes = matchObj.nodes;\n        nodes.forEach(function (row, index) {\n          if (index < nodes.length - 1 && !_this47.isTreeExpandByRow(row)) {\n            _this47.setTreeExpand(row, true);\n          }\n        });\n      }\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 手动清除滚动相关信息，还原到初始状态\r\n   */\n  clearScroll: function clearScroll() {\n    var $refs = this.$refs;\n    var tableBody = $refs.tableBody,\n        rightBody = $refs.rightBody,\n        tableFooter = $refs.tableFooter;\n    var tableBodyElem = tableBody ? tableBody.$el : null;\n    var rightBodyElem = rightBody ? rightBody.$el : null;\n    var tableFooterElem = tableFooter ? tableFooter.$el : null;\n\n    if (rightBodyElem) {\n      rightBodyElem.scrollTop = 0;\n    }\n\n    if (tableFooterElem) {\n      tableFooterElem.scrollLeft = 0;\n    }\n\n    if (tableBodyElem) {\n      tableBodyElem.scrollTop = 0;\n      tableBodyElem.scrollLeft = 0;\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 更新表尾合计\r\n   */\n  updateFooter: function updateFooter() {\n    var showFooter = this.showFooter,\n        visibleColumn = this.visibleColumn,\n        footerMethod = this.footerMethod;\n\n    if (showFooter && footerMethod) {\n      this.footerTableData = visibleColumn.length ? footerMethod({\n        columns: visibleColumn,\n        data: this.afterFullData,\n        $table: this,\n        $grid: this.$xegrid\n      }) : [];\n    }\n\n    return this.$nextTick();\n  },\n\n  /**\r\n   * 更新列状态\r\n   * 如果组件值 v-model 发生 change 时，调用改函数用于更新某一列编辑状态\r\n   * 如果单元格配置了校验规则，则会进行校验\r\n   */\n  updateStatus: function updateStatus(scope, cellValue) {\n    var _this48 = this;\n\n    var customVal = !XEUtils.isUndefined(cellValue);\n    return this.$nextTick().then(function () {\n      var $refs = _this48.$refs,\n          editRules = _this48.editRules,\n          validStore = _this48.validStore;\n\n      if (scope && $refs.tableBody && editRules) {\n        var row = scope.row,\n            column = scope.column;\n        var type = 'change';\n\n        if (_this48.hasCellRules(type, row, column)) {\n          var cell = _this48.getCell(row, column);\n\n          if (cell) {\n            return _this48.validCellRules(type, row, column, cellValue).then(function () {\n              if (customVal && validStore.visible) {\n                setCellValue(row, column, cellValue);\n              }\n\n              _this48.clearValidate();\n            }).catch(function (_ref7) {\n              var rule = _ref7.rule;\n\n              if (customVal) {\n                setCellValue(row, column, cellValue);\n              }\n\n              _this48.showValidTooltip({\n                rule: rule,\n                row: row,\n                column: column,\n                cell: cell\n              });\n            });\n          }\n        }\n      }\n    });\n  },\n  handleDefaultMergeCells: function handleDefaultMergeCells() {\n    this.setMergeCells(this.mergeCells);\n  },\n\n  /**\r\n   * 设置合并单元格\r\n   * @param {TableMergeConfig[]} merges { row: Row|number, column: ColumnInfo|number, rowspan: number, colspan: number }\r\n   */\n  setMergeCells: function setMergeCells(merges) {\n    var _this49 = this;\n\n    if (this.spanMethod) {\n      UtilTools.error('vxe.error.errConflicts', ['merge-cells', 'span-method']);\n    }\n\n    setMerges(this, merges, this.mergeList, this.afterFullData);\n    return this.$nextTick().then(function () {\n      return _this49.updateCellAreas();\n    });\n  },\n\n  /**\r\n   * 移除单元格合并\r\n   * @param {TableMergeConfig[]} merges 多个或数组 [{row:Row|number, col:ColumnInfo|number}]\r\n   */\n  removeMergeCells: function removeMergeCells(merges) {\n    var _this50 = this;\n\n    if (this.spanMethod) {\n      UtilTools.error('vxe.error.errConflicts', ['merge-cells', 'span-method']);\n    }\n\n    var rest = removeMerges(this, merges, this.mergeList, this.afterFullData);\n    return this.$nextTick().then(function () {\n      _this50.updateCellAreas();\n\n      return rest;\n    });\n  },\n\n  /**\r\n   * 获取所有被合并的单元格\r\n   */\n  getMergeCells: function getMergeCells() {\n    return this.mergeList.slice(0);\n  },\n\n  /**\r\n   * 清除所有单元格合并\r\n   */\n  clearMergeCells: function clearMergeCells() {\n    this.mergeList = [];\n    return this.$nextTick();\n  },\n  handleDefaultMergeFooterItems: function handleDefaultMergeFooterItems() {\n    this.setMergeFooterItems(this.mergeFooterItems);\n  },\n  setMergeFooterItems: function setMergeFooterItems(merges) {\n    var _this51 = this;\n\n    if (this.footerSpanMethod) {\n      UtilTools.error('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method']);\n    }\n\n    setMerges(this, merges, this.mergeFooterList, null);\n    return this.$nextTick().then(function () {\n      return _this51.updateCellAreas();\n    });\n  },\n  removeMergeFooterItems: function removeMergeFooterItems(merges) {\n    var _this52 = this;\n\n    if (this.footerSpanMethod) {\n      UtilTools.error('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method']);\n    }\n\n    var rest = removeMerges(this, merges, this.mergeFooterList, null);\n    return this.$nextTick().then(function () {\n      _this52.updateCellAreas();\n\n      return rest;\n    });\n  },\n\n  /**\r\n   * 获取所有被合并的表尾\r\n   */\n  getMergeFooterItems: function getMergeFooterItems() {\n    return this.mergeFooterList.slice(0);\n  },\n\n  /**\r\n   * 清除所有表尾合并\r\n   */\n  clearMergeFooterItems: function clearMergeFooterItems() {\n    this.mergeFooterList = [];\n    return this.$nextTick();\n  },\n  updateZindex: function updateZindex() {\n    if (this.zIndex) {\n      this.tZindex = this.zIndex;\n    } else if (this.tZindex < UtilTools.getLastZIndex()) {\n      this.tZindex = UtilTools.nextZIndex();\n    }\n  },\n  updateCellAreas: function updateCellAreas() {\n    if (this.mouseConfig && this.mouseOpts.area && this.handleUpdateCellAreas) {\n      this.handleUpdateCellAreas();\n    }\n  },\n  emitEvent: function emitEvent(type, params, evnt) {\n    this.$emit(type, Object.assign({\n      $table: this,\n      $grid: this.$xegrid,\n      $event: evnt\n    }, params));\n  },\n  focus: function focus() {\n    this.isActivated = true;\n    return this.$nextTick();\n  },\n  blur: function blur() {\n    this.isActivated = false;\n    return this.$nextTick();\n  },\n  // 连接工具栏\n  connect: function connect($toolbar) {\n    if ($toolbar && $toolbar.syncUpdate) {\n      $toolbar.syncUpdate({\n        collectColumn: this.collectColumn,\n        $table: this\n      });\n      this.$toolbar = $toolbar;\n    } else {\n      UtilTools.error('vxe.error.barUnableLink');\n    }\n\n    return this.$nextTick();\n  },\n\n  /*************************\r\n   * Publish methods\r\n   *************************/\n  getCell: function getCell(row, column) {\n    var $refs = this.$refs;\n    var rowid = getRowid(this, row);\n    var bodyElem = $refs[\"\".concat(column.fixed || 'table', \"Body\")] || $refs.tableBody;\n\n    if (bodyElem && bodyElem.$el) {\n      return bodyElem.$el.querySelector(\".vxe-body--row[rowid=\\\"\".concat(rowid, \"\\\"] .\").concat(column.id));\n    }\n\n    return null;\n  },\n  getCellLabel: function getCellLabel(row, column) {\n    var formatter = column.formatter;\n    var cellValue = UtilTools.getCellValue(row, column);\n    var cellLabel = cellValue;\n\n    if (formatter) {\n      var rest, formatData;\n      var fullAllDataRowMap = this.fullAllDataRowMap;\n      var colid = column.id;\n      var cacheFormat = fullAllDataRowMap.has(row);\n\n      if (cacheFormat) {\n        rest = fullAllDataRowMap.get(row);\n        formatData = rest.formatData;\n\n        if (!formatData) {\n          formatData = fullAllDataRowMap.get(row).formatData = {};\n        }\n\n        if (rest && formatData[colid]) {\n          if (formatData[colid].value === cellValue) {\n            return formatData[colid].label;\n          }\n        }\n      }\n\n      var formatParams = {\n        cellValue: cellValue,\n        row: row,\n        rowIndex: this.getRowIndex(row),\n        column: column,\n        columnIndex: this.getColumnIndex(column)\n      };\n\n      if (XEUtils.isString(formatter)) {\n        var globalFunc = formats.get(formatter);\n        cellLabel = globalFunc ? globalFunc(formatParams) : '';\n      } else if (XEUtils.isArray(formatter)) {\n        var _globalFunc = formats.get(formatter[0]);\n\n        cellLabel = _globalFunc ? _globalFunc.apply(void 0, [formatParams].concat(_toConsumableArray(formatter.slice(1)))) : '';\n      } else {\n        cellLabel = formatter(formatParams);\n      }\n\n      if (formatData) {\n        formatData[colid] = {\n          value: cellValue,\n          label: cellLabel\n        };\n      }\n    }\n\n    return cellLabel;\n  }\n  /*************************\r\n   * Publish methods\r\n   *************************/\n\n}; // Module methods\n\nvar funcs = 'setFilter,clearFilter,getCheckedFilters,closeMenu,setActiveCellArea,getActiveCellArea,getCellAreas,clearCellAreas,copyCellArea,cutCellArea,pasteCellArea,getCopyCellArea,clearCopyCellArea,setCellAreas,openFind,openReplace,getSelectedCell,clearSelected,insert,insertAt,remove,removeCheckboxRow,removeRadioRow,removeCurrentRow,getRecordset,getInsertRecords,getRemoveRecords,getUpdateRecords,clearActived,getActiveRecord,isActiveByRow,setActiveRow,setActiveCell,setSelectCell,clearValidate,fullValidate,validate,openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print'.split(',');\nfuncs.forEach(function (name) {\n  Methods[name] = function () {\n    return this[\"_\".concat(name)] ? this[\"_\".concat(name)].apply(this, arguments) : null;\n  };\n});\nexport default Methods;",null]}