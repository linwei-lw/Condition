{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\filter\\src\\mixin.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\filter\\src\\mixin.js","mtime":1635230121593},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/web.dom.iterable\";\nimport XEUtils from 'xe-utils';\nimport { UtilTools, DomTools } from '../../tools';\nimport { handleFieldOrColumn } from '../../table/src/util';\nimport VXETable from '../../v-x-e-table';\nexport default {\n  methods: {\n    /**\r\n     * 修改筛选条件列表\r\n     * @param {ColumnInfo} fieldOrColumn 列\r\n     * @param {Array} options 选项\r\n     */\n    _setFilter(fieldOrColumn, options) {\n      const column = handleFieldOrColumn(this, fieldOrColumn);\n\n      if (column && column.filters && options) {\n        column.filters = UtilTools.getFilters(options);\n      }\n\n      return this.$nextTick();\n    },\n\n    checkFilterOptions() {\n      const filterStore = this.filterStore;\n      filterStore.isAllSelected = filterStore.options.every(item => item._checked);\n      filterStore.isIndeterminate = !filterStore.isAllSelected && filterStore.options.some(item => item._checked);\n    },\n\n    /**\r\n     * 点击筛选事件\r\n     * 当筛选图标被点击时触发\r\n     * 更新选项是否全部状态\r\n     * 打开筛选面板\r\n     * @param {Event} evnt 事件\r\n     * @param {ColumnInfo} column 列配置\r\n     * @param {Object} params 参数\r\n     */\n    triggerFilterEvent(evnt, column, params) {\n      const filterStore = this.filterStore;\n\n      if (filterStore.column === column && filterStore.visible) {\n        filterStore.visible = false;\n      } else {\n        const targetElem = evnt.target,\n              pageX = evnt.pageX;\n        const filters = column.filters,\n              filterMultiple = column.filterMultiple,\n              filterRender = column.filterRender;\n        const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n        const filterRecoverMethod = column.filterRecoverMethod || (compConf ? compConf.filterRecoverMethod : null);\n\n        const _DomTools$getDomNode = DomTools.getDomNode(),\n              visibleWidth = _DomTools$getDomNode.visibleWidth;\n\n        Object.assign(filterStore, {\n          args: params,\n          multiple: filterMultiple,\n          options: filters,\n          column,\n          style: null,\n          visible: true\n        }); // 复原状态\n\n        filterStore.options.forEach(option => {\n          const _checked = option._checked,\n                checked = option.checked;\n          option._checked = checked;\n\n          if (!checked && _checked !== checked) {\n            if (filterRecoverMethod) {\n              filterRecoverMethod({\n                option,\n                column,\n                $table: this\n              });\n            }\n          }\n        });\n        this.checkFilterOptions();\n        this.initStore.filter = true;\n        this.$nextTick(() => {\n          const $refs = this.$refs;\n          const bodyElem = $refs.tableBody.$el;\n          const filterWrapperElem = $refs.filterWrapper.$el;\n          let filterWidth = 0;\n          let filterHeight = 0;\n          let filterHeadElem = null;\n          let filterFootElem = null;\n\n          if (filterWrapperElem) {\n            filterWidth = filterWrapperElem.offsetWidth;\n            filterHeight = filterWrapperElem.offsetHeight;\n            filterHeadElem = filterWrapperElem.querySelector('.vxe-table--filter-header');\n            filterFootElem = filterWrapperElem.querySelector('.vxe-table--filter-footer');\n          }\n\n          const centerWidth = filterWidth / 2;\n          const minMargin = 10;\n          const maxLeft = bodyElem.clientWidth - filterWidth - minMargin;\n          let left, right;\n          const style = {\n            top: `${targetElem.offsetTop + targetElem.offsetParent.offsetTop + targetElem.offsetHeight + 8}px` // 判断面板不能大于表格高度\n\n          };\n          let maxHeight = null;\n\n          if (filterHeight >= bodyElem.clientHeight) {\n            maxHeight = bodyElem.clientHeight - (filterFootElem ? filterFootElem.offsetHeight : 0) - (filterHeadElem ? filterHeadElem.offsetHeight : 0);\n          }\n\n          if (column.fixed === 'left') {\n            left = targetElem.offsetLeft + targetElem.offsetParent.offsetLeft - centerWidth;\n          } else if (column.fixed === 'right') {\n            right = targetElem.offsetParent.offsetWidth - targetElem.offsetLeft + (targetElem.offsetParent.offsetParent.offsetWidth - targetElem.offsetParent.offsetLeft) - column.renderWidth - centerWidth;\n          } else {\n            left = targetElem.offsetLeft + targetElem.offsetParent.offsetLeft - centerWidth - bodyElem.scrollLeft;\n          }\n\n          if (left) {\n            const overflowWidth = pageX + filterWidth - centerWidth + minMargin - visibleWidth;\n\n            if (overflowWidth > 0) {\n              left -= overflowWidth;\n            }\n\n            style.left = `${Math.min(maxLeft, Math.max(minMargin, left))}px`;\n          } else if (right) {\n            const overflowWidth = pageX + filterWidth - centerWidth + minMargin - visibleWidth;\n\n            if (overflowWidth > 0) {\n              right += overflowWidth;\n            }\n\n            style.right = `${Math.max(minMargin, right)}px`;\n          }\n\n          filterStore.style = style;\n          filterStore.maxHeight = maxHeight;\n        });\n      }\n    },\n\n    _getCheckedFilters() {\n      const tableFullColumn = this.tableFullColumn;\n      const filterList = [];\n      tableFullColumn.filter(column => {\n        const property = column.property,\n              filters = column.filters;\n        const valueList = [];\n        const dataList = [];\n\n        if (filters && filters.length) {\n          filters.forEach(item => {\n            if (item.checked) {\n              valueList.push(item.value);\n              dataList.push(item.data);\n            }\n          });\n\n          if (valueList.length) {\n            filterList.push({\n              column,\n              property,\n              values: valueList,\n              datas: dataList\n            });\n          }\n        }\n      });\n      return filterList;\n    },\n\n    /**\r\n     * 确认筛选\r\n     * 当筛选面板中的确定按钮被按下时触发\r\n     * @param {Event} evnt 事件\r\n     */\n    confirmFilterEvent(evnt) {\n      const filterStore = this.filterStore,\n            filterOpts = this.filterOpts,\n            scrollXLoad = this.scrollXLoad,\n            scrollYLoad = this.scrollYLoad;\n      const column = filterStore.column;\n      const property = column.property;\n      const values = [];\n      const datas = [];\n      column.filters.forEach(item => {\n        if (item.checked) {\n          values.push(item.value);\n          datas.push(item.data);\n        }\n      });\n      filterStore.visible = false;\n      const filterList = this.getCheckedFilters(); // 如果是服务端筛选，则跳过本地筛选处理\n\n      if (!filterOpts.remote) {\n        this.handleTableData(true);\n        this.checkSelectionStatus();\n      }\n\n      this.emitEvent('filter-change', {\n        column,\n        property,\n        values,\n        datas,\n        filters: filterList,\n        filterList\n      }, evnt);\n      this.updateFooter();\n\n      if (scrollXLoad || scrollYLoad) {\n        this.clearScroll();\n\n        if (scrollYLoad) {\n          this.updateScrollYSpace();\n        }\n      }\n\n      this.closeFilter();\n      this.$nextTick(() => {\n        this.recalculate();\n        this.updateCellAreas();\n      });\n    },\n\n    handleClearFilter(column) {\n      if (column) {\n        const filters = column.filters,\n              filterRender = column.filterRender;\n\n        if (filters) {\n          const compConf = filterRender ? VXETable.renderer.get(filterRender.name) : null;\n          const filterResetMethod = column.filterResetMethod || (compConf ? compConf.filterResetMethod : null);\n          filters.forEach(item => {\n            item._checked = false;\n            item.checked = false;\n\n            if (!filterResetMethod) {\n              item.data = XEUtils.clone(item.resetValue, true);\n            }\n          });\n\n          if (filterResetMethod) {\n            filterResetMethod({\n              options: filters,\n              column,\n              $table: this\n            });\n          }\n        }\n      }\n    },\n\n    /**\r\n     * 重置筛选\r\n     * 当筛选面板中的重置按钮被按下时触发\r\n     * @param {Event} evnt 事件\r\n     */\n    resetFilterEvent(evnt) {\n      this.handleClearFilter(this.filterStore.column);\n      this.confirmFilterEvent(evnt);\n    },\n\n    /**\r\n     * 清空指定列的筛选条件\r\n     * 如果为空则清空所有列的筛选条件\r\n     * @param {String} fieldOrColumn 列\r\n     */\n    _clearFilter(fieldOrColumn) {\n      const filterStore = this.filterStore;\n      let column;\n\n      if (fieldOrColumn) {\n        column = handleFieldOrColumn(this, fieldOrColumn);\n\n        if (column) {\n          this.handleClearFilter(column);\n        }\n      } else {\n        this.visibleColumn.forEach(this.handleClearFilter);\n      }\n\n      if (!fieldOrColumn || column !== filterStore.column) {\n        Object.assign(filterStore, {\n          isAllSelected: false,\n          isIndeterminate: false,\n          style: null,\n          options: [],\n          column: null,\n          multiple: false,\n          visible: false\n        });\n      }\n\n      return this.updateData();\n    }\n\n  }\n};",null]}