{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\common\\util\\Arrays.js","dependencies":[{"path":"D:\\cdRule\\src\\common\\util\\Arrays.js","mtime":1612227987785},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.array.sort\";\n/**\r\n * 将数组转成 MAP 结构体\r\n * @param {Array} array 元素数组\r\n * @param {String} [key] 组成map的key值是从元素的哪个字段取(默认值:id)\r\n * @param {Object} [map] 基于存在的map对象(默认值:{})\r\n * @returns {Object} 返回MAP结构体\r\n */\n\nexport function arrayToMap(array) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n  let map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!array || array.length == 0) return map;\n\n  for (let i = 0, len = array.length, item; i < len; i++) {\n    item = array[i];\n    map[item[key]] = item;\n  }\n\n  return map;\n}\n;\n/**\r\n * 在数组中查找索引号\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n * @returns {Number} 返回索引号\r\n */\n\nexport function arrayIndexOf(array, field, value) {\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i][field] === value) return i;\n  }\n\n  return -1;\n}\n/**\r\n * 从数组中删除元素\r\n * @param {Array} array \r\n * @param {Object} item \r\n * @returns {Number} 返回剩余数\r\n */\n\nexport function arrayRemoveItem(array, item) {\n  if (!array) return -1;\n  let i = array.indexOf(item);\n  i != -1 && array.splice(i, 1);\n  return array.length;\n}\n;\n/**\r\n * 从数组中删除元素\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n */\n\nexport function arrayRemoveValue(array, field, value) {\n  if (!array) return null;\n\n  for (let i = 0, len = array.length, item; i < len; i++) {\n    item = array[i];\n\n    if (item[field] === value) {\n      array.splice(i, 1);\n      return item;\n    }\n  }\n\n  return null;\n}\n;\n/**\r\n * 按过滤条件将数组中元素删除\r\n * @param {Array} array \r\n * @param {Function} filter (item, index, array) 返回true删除,false保留\r\n * @returns {Number} 返回剩余数\r\n */\n\nexport function arrayRemoveFilter(array, filter) {\n  if (!array || array.length == 0) return 0;\n\n  for (let i = array.length - 1; i >= 0; i--) {\n    filter(array[i], i, array) === true && array.splice(i, 1);\n  }\n\n  return array.length;\n}\n;\n/**\r\n * 从数组中查询元素\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n * @returns {*} 返回符合条件的第一个元素\r\n */\n\nexport function arrayFindItem(array, field, value) {\n  if (!array) return null;\n\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i][field] === value) {\n      return array[i];\n    }\n  }\n\n  return null;\n}\n;\n/**\r\n * 从数组中查询元素\r\n * @param {Array} array \r\n * @param {String} field \r\n * @param {*} value \r\n * @returns {Array} 返回符合条件的所有元素\r\n */\n\nexport function arrayFindItems(array, field, value) {\n  if (!array) return [];\n  let result = [];\n\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i][field] === value) {\n      result.push(array[i]);\n    }\n  }\n\n  return result;\n}\n;\n/**\r\n * 获取数组每个元素字段的值\r\n * @param {Array} array \r\n * @param {String} field \r\n * @returns {Array} 返回数组每个元素字段的值\r\n */\n\nexport function arrayGetValue(array, field) {\n  if (!array) return [];\n  let result = [];\n\n  for (let i = 0, len = array.length; i < len; i++) {\n    result.push(array[i][field]);\n  }\n\n  return result;\n}\n;\nexport function arraySort(array) {\n  let field = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let asc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!array || array.length == 0) return array;\n  return array.sort((a, b) => {\n    return (asc ? 1 : -1) * compare(a, b, field);\n  });\n}\nlet CHINA = {\n  '零': 10,\n  '一': 11,\n  '二': 12,\n  '三': 13,\n  '四': 14,\n  '五': 15,\n  '六': 16,\n  '七': 17,\n  '八': 18,\n  '九': 19,\n  '十': 20\n};\nexport function compare(v1, v2) {\n  let field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  if (v1 === null || v1 == undefined) return -1;\n  if (v2 === null || v2 == undefined) return 1;\n  v1 = field ? v1[field] : v1;\n  v2 = field ? v2[field] : v2;\n  if (v1 == v2) return 0;\n  if (v1 === null || v1 == undefined) return -1;\n  if (v2 === null || v2 == undefined) return 1;\n  let i1 = !isNaN(v1),\n      i2 = !isNaN(v2);\n  v1 = String(v1);\n  v2 = String(v2);\n\n  if (i1 || i2) {\n    return i1 && i2 ? v1.length > v2.length ? 1 : v1.length < v2.length ? -1 : Number(v1) > Number(v2) ? 1 : -1 : i1 ? -1 : 1;\n  }\n\n  for (let i = 0, len = Math.min(v1.length, v2.length), o1, o2, n1, n2; i < len; i++) {\n    o1 = v1.charAt(i);\n    o2 = v2.charAt(i);\n    if (o1 == o2) continue;\n    n1 = CHINA[o1] || Number(o1);\n    n2 = CHINA[o2] || Number(o2);\n\n    if (!isNaN(n1) && !isNaN(n2)) {\n      return n1 > n2 ? 1 : -1;\n    }\n\n    return o1.localeCompare(o2, \"zh\");\n  }\n\n  let len = v1.length - v2.length;\n  return len == 0 ? 0 : len > 0 ? 1 : -1;\n}",null]}