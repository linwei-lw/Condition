{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\cdRule\\src\\common\\tree\\AlarmTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\cdRule\\src\\common\\tree\\AlarmTree.vue","mtime":1656123617682},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SearchBox from \"@/components/Tree/SearchBox.vue\";\nimport { getAlarmType, getFavAlarmType, getGroupRoot } from '@/common/cache/CacheAlarm.js';\nimport { onAlarmTreeAdd, onAlarmTreeRemove } from '@/common/cache/CacheAlarm.js';\nimport { arrayRemoveItem, arrayRemoveFilter } from '@/common/util/Arrays.js';\nexport default {\n  components: {\n    SearchBox: SearchBox\n  },\n  props: {\n    setting: {\n      default: function _default() {\n        return {\n          type: 'group-fav-all'\n        };\n      }\n    },\n    // 参考ztree的setting配置 fav:关注报警 group:分组报警  all:所有报警\n    frozenRoot: {\n      type: Boolean,\n      default: false\n    },\n    // 冻结根结点，不显示根结点的+-图标\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可操作\n    border: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示边框\n    borderColor: {\n      type: String,\n      default: $_theme.border_color_dark\n    },\n    // 边框颜色\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示搜索栏\n    placeholder: String,\n    miniBar: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示搜索栏\n    showSearchIcon: {\n      type: Boolean,\n      default: true\n    },\n    // 是否显示搜索图标\n    onSearchItemSelected: Function,\n    // 选中了搜索栏查出的某个结点的回调函数，参数(node)\n    onTreeInited: Function\n  },\n  _tree: null,\n  getTreeRoots: function getTreeRoots(callback) {\n    return getAlarmType(function (o) {\n      return callback(o.tree);\n    });\n  },\n  getNodeText: function getNodeText(node) {\n    return node.name;\n  },\n  data: function data() {\n    return {\n      treeId: 'tree_' + $_theme.zindex(),\n      types: ['group', 'fav', 'all'],\n      model: 'group',\n      groupEmpty: false\n    };\n  },\n  created: function created() {\n    this.setting.type && (this.types = this.setting.type.split('-'));\n\n    if (this.types.indexOf('group') >= 0 && getGroupRoot().children.length == 0) {\n      this.groupEmpty = true;\n    }\n\n    if (this.types.indexOf('fav') >= 0 && getFavAlarmType().list.length == 0) {\n      arrayRemoveItem(this.types, 'fav');\n    }\n\n    this.model = this.types[0];\n\n    if (this.groupEmpty && this.model == 'group') {\n      if (this.types.length > 1) this.model = this.types[1];\n    }\n  },\n  watch: {\n    model: function model(v) {\n      //避免数据冲突\n      $.fn.zTree.destroy(this.treeId);\n      this.onModelChg(v);\n    }\n  },\n  mounted: function mounted() {\n    this.onModelChg(this.model);\n  },\n  methods: {\n    onModelChg: function onModelChg(v) {\n      switch (v) {\n        case 'fav':\n          return this.onLoaded(getFavAlarmType().root, 'fav_children', 'fav_parent');\n\n        case 'all':\n          return this.onLoaded(getAlarmType().root, 'children', 'parent');\n\n        case 'group':\n          return this.onLoaded(getGroupRoot(), 'group_children', 'group_parent');\n      }\n    },\n    onLoaded: function onLoaded(root, childrenKey, parentKey) {\n      var _this = this;\n\n      this.setting.view = this.setting.view || {};\n\n      this.setting.view.iconUrlFunction = function () {\n        return _this._icon;\n      };\n\n      this.setting.data = this.setting.data || {};\n      this.setting.data.key = this.setting.data.key || {};\n      this.setting.data.key.parent = parentKey;\n      this.setting.data.key.children = childrenKey;\n      this._root = this._root || [];\n\n      this._root.forEach(function (root) {\n        return delete root[_this.treeId];\n      });\n\n      this._root.length = 0;\n\n      this._root.push(root);\n\n      root[this.treeId] = {\n        open: true\n      };\n      this._tree = $.fn.zTree.init($(this.$refs.treeUl), this.setting, this._root);\n      this.searchable && this.$refs.searchBox.setTree(this._tree);\n      onAlarmTreeAdd(this.treeId, this);\n      this.onTreeInited && this.onTreeInited(this._root, this._tree, this);\n    },\n    getCheckedNodes: function getCheckedNodes() {\n      var onlyChecked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var onlyTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var hasOwnField = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var nodes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      return this._tree.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes);\n    },\n    checkNodes: function checkNodes(nodes) {\n      var checked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var checkTypeFlag = arguments.length > 2 ? arguments[2] : undefined;\n      var callbackFlag = arguments.length > 3 ? arguments[3] : undefined;\n      var value = arguments.length > 4 ? arguments[4] : undefined;\n      //多余节点\n      var deleteNodes = [];\n\n      for (var i = 0, len = nodes.length; i < len; i++) {\n        var node = this._tree.getNodeByParam('id', nodes[i].id);\n\n        node ? this._tree.checkNode(node, checked, checkTypeFlag, callbackFlag) : deleteNodes.push(nodes[i]);\n      } //删除多余节点\n\n\n      deleteNodes.forEach(function (item) {\n        arrayRemoveFilter(nodes, function (eq) {\n          return eq.id == item.id;\n        });\n        arrayRemoveItem(value, item.id);\n      });\n    },\n    selectNode: function selectNode(node) {\n      var isSilent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      this._tree.selectNode(node, false, isSilent);\n    },\n    getTree: function getTree() {\n      return this._tree;\n    },\n    getTreeId: function getTreeId() {\n      return this.treeId;\n    },\n    destroy: function destroy() {\n      onAlarmTreeRemove(this.treeId);\n\n      if (this._tree) {\n        this._tree.destroy();\n\n        this._tree = null;\n      }\n\n      if (this.searchable) {\n        this.$refs.searchBox.clear();\n        this.$refs.searchBox.setTree(null);\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroy();\n  }\n};",{"version":3,"sources":["AlarmTree.vue"],"names":[],"mappings":"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","sourcesContent":["\r\n<template>\r\n\r\n  <div :class=\"[$style.container, border && $style.border]\" :style=\"{borderColor:borderColor}\">\r\n    <Toolbar v-if=\"searchable\" :border=\"false\" small :mini=\"miniBar\" style=\"border-bottom-width:1px;border-bottom-style:solid;\" :style=\"{borderColor:theme.border_color_light}\">\r\n      <SearchBox :placeholder=\"placeholder\" :style=\"{width:miniBar?'calc(100% - 6px)':'calc(100% - 10px)'}\" :height=\"miniBar?26:theme.inputHeight\" :treeBorder=\"border\" :showSearchIcon=\"showSearchIcon\" :onItemSelected=\"onSearchItemSelected\" ref=\"searchBox\">\r\n        <Button v-if=\"types.indexOf('group')>=0\" @click=\"model='group'\" :padding=\"miniBar?'0 4px':'0 7px'\" :height=\"miniBar?24:(theme.inputHeight-2)\" :type=\"model=='group'?'primary':'plain'\" :title=\"$_L.get('显示分组报警')\" :border=\"false\" :icon=\"model=='group'?'el-icon-user-solid':'el-icon-user'\" style=\"float:right;margin:1px 1px 1px 0px;\" />\r\n        <Button v-if=\"types.indexOf('fav')>=0\" @click=\"model='fav'\" :padding=\"miniBar?'0 4px':'0 7px'\" :height=\"miniBar?24:(theme.inputHeight-2)\" :type=\"model=='fav'?'primary':'plain'\" :title=\"$_L.get('显示关注报警')\" :border=\"false\" :icon=\"model=='fav'?'el-icon-star-on':'el-icon-star-off'\" style=\"float:right;margin:1px 1px 1px 0px;\" />\r\n        <Button v-if=\"types.indexOf('all')>=0\" @click=\"model='all'\" :padding=\"miniBar?'0 4px':'0 7px'\" :height=\"miniBar?24:(theme.inputHeight-2)\" :type=\"model=='all'?'primary':'plain'\" :title=\"$_L.get('显示所有报警')\" :border=\"false\" :icon=\"model=='all'?'el-icon-success':'el-icon-circle-check'\" style=\"float:right;margin:1px 1px 1px 0px;\" />\r\n      </SearchBox>\r\n      <slot></slot>\r\n    </Toolbar>\r\n\r\n    <div style=\"overflow: auto;\" :style=\"{height: searchable ? (miniBar ? 'calc(100% - 32px)' : 'calc(100% - 42px)') : '100%'}\">\r\n      <ul :id=\"treeId\" :class=\"['ztree', frozenRoot && 'ztree_frozen']\" ref=\"treeUl\"></ul>\r\n      <span v-if=\"groupEmpty && model=='group'\" style=\"position:absolute;left:0;top:60px;width:100%;text-align:center\">\r\n        {{$_L.get('[更多]->[系统设置]->[报警分组] 进行设置')}}\r\n      </span>\r\n      <div v-if=\"disabled\" :class=\"$style.disabled\" />\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport SearchBox from \"@/components/Tree/SearchBox.vue\";\r\nimport { getAlarmType, getFavAlarmType, getGroupRoot } from '@/common/cache/CacheAlarm.js';\r\nimport { onAlarmTreeAdd, onAlarmTreeRemove } from '@/common/cache/CacheAlarm.js';\r\nimport { arrayRemoveItem, arrayRemoveFilter } from '@/common/util/Arrays.js';\r\n\r\nexport default {\r\n  components: { SearchBox },\r\n  props: {\r\n    setting: { default: () => { return { type: 'group-fav-all' } } },      // 参考ztree的setting配置 fav:关注报警 group:分组报警  all:所有报警\r\n    frozenRoot: { type: Boolean, default: false },                     // 冻结根结点，不显示根结点的+-图标\r\n    disabled: { type: Boolean, default: false },                     // 是否可操作\r\n    border: { type: Boolean, default: true },                     // 是否显示边框\r\n    borderColor: { type: String, default: $_theme.border_color_dark },  // 边框颜色\r\n    searchable: { type: Boolean, default: true },                     // 是否显示搜索栏\r\n    placeholder: String,\r\n    miniBar: { type: Boolean, default: false },                     // 是否显示搜索栏\r\n    showSearchIcon: { type: Boolean, default: true },                     // 是否显示搜索图标\r\n    onSearchItemSelected: Function,                                        // 选中了搜索栏查出的某个结点的回调函数，参数(node)\r\n    onTreeInited: Function\r\n  },\r\n\r\n  _tree: null,\r\n\r\n  getTreeRoots: callback => getAlarmType(o => callback(o.tree)),\r\n  getNodeText: node => node.name,\r\n\r\n  data() {\r\n    return {\r\n      treeId: 'tree_' + $_theme.zindex(),\r\n      types: ['group', 'fav', 'all'],\r\n      model: 'group',\r\n      groupEmpty: false,\r\n    };\r\n  },\r\n\r\n  created() {\r\n    this.setting.type && (this.types = this.setting.type.split('-'));\r\n    if (this.types.indexOf('group') >= 0 && getGroupRoot().children.length == 0) {\r\n      this.groupEmpty = true;\r\n    }\r\n    if (this.types.indexOf('fav') >= 0 && getFavAlarmType().list.length == 0) {\r\n      arrayRemoveItem(this.types, 'fav');\r\n    }\r\n    this.model = this.types[0];\r\n    if (this.groupEmpty && this.model == 'group') {\r\n      if (this.types.length > 1) this.model = this.types[1];\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    model: function (v) {\r\n      //避免数据冲突\r\n      $.fn.zTree.destroy(this.treeId);\r\n      this.onModelChg(v);\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.onModelChg(this.model);\r\n  },\r\n\r\n  methods: {\r\n    onModelChg(v) {\r\n      switch (v) {\r\n        case 'fav': return this.onLoaded(getFavAlarmType().root, 'fav_children', 'fav_parent');\r\n        case 'all': return this.onLoaded(getAlarmType().root, 'children', 'parent');\r\n        case 'group': return this.onLoaded(getGroupRoot(), 'group_children', 'group_parent');\r\n      }\r\n    },\r\n    onLoaded(root, childrenKey, parentKey) {\r\n      this.setting.view = this.setting.view || {};\r\n      this.setting.view.iconUrlFunction = () => this._icon;\r\n\r\n      this.setting.data = this.setting.data || {};\r\n      this.setting.data.key = this.setting.data.key || {};\r\n      this.setting.data.key.parent = parentKey;\r\n      this.setting.data.key.children = childrenKey;\r\n\r\n      this._root = this._root || [];\r\n      this._root.forEach(root => delete root[this.treeId]);\r\n      this._root.length = 0;\r\n      this._root.push(root);\r\n      root[this.treeId] = { open: true };\r\n\r\n      this._tree = $.fn.zTree.init($(this.$refs.treeUl), this.setting, this._root);\r\n      this.searchable && this.$refs.searchBox.setTree(this._tree);\r\n      onAlarmTreeAdd(this.treeId, this);\r\n      this.onTreeInited && this.onTreeInited(this._root, this._tree, this);\r\n    },\r\n    getCheckedNodes(onlyChecked = true, onlyTop = false, field = null, hasOwnField = null, nodes = null) {\r\n      return this._tree.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes);\r\n    },\r\n    checkNodes(nodes, checked = true, checkTypeFlag, callbackFlag, value) {\r\n      //多余节点\r\n      let deleteNodes = []\r\n      for (let i = 0, len = nodes.length; i < len; i++) {\r\n        let node = this._tree.getNodeByParam('id', nodes[i].id)\r\n        node ? this._tree.checkNode(node, checked, checkTypeFlag, callbackFlag) : deleteNodes.push(nodes[i]);\r\n      }\r\n      //删除多余节点\r\n      deleteNodes.forEach(item => {\r\n        arrayRemoveFilter(nodes, eq => eq.id == item.id)\r\n        arrayRemoveItem(value, item.id)\r\n      })\r\n    },\r\n    selectNode(node, isSilent = false) {\r\n      this._tree.selectNode(node, false, isSilent);\r\n    },\r\n    getTree() { return this._tree; },\r\n    getTreeId() { return this.treeId; },\r\n    destroy() {\r\n      onAlarmTreeRemove(this.treeId);\r\n      if (this._tree) {\r\n        this._tree.destroy();\r\n        this._tree = null;\r\n      }\r\n      if (this.searchable) {\r\n        this.$refs.searchBox.clear();\r\n        this.$refs.searchBox.setTree(null);\r\n      }\r\n    }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.destroy();\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ztree_frozen li span.button.switch.level0 {\r\n  display: none;\r\n}\r\n.ztree_frozen li ul.level0 {\r\n  padding: 0;\r\n  background: none;\r\n}\r\n</style>\r\n\r\n<style module>\r\n.container {\r\n  position: relative;\r\n  background-color: #fff;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n.border {\r\n  border-style: solid;\r\n  border-width: 1px;\r\n}\r\n.disabled {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  background-color: rgba(255, 255, 255, 0.6);\r\n  opacity: 0.6;\r\n  filter: alpha(opacity=60);\r\n  cursor: not-allowed;\r\n}\r\n</style>\r\n<style>\r\n/* @import '../../components/Tree/zTreeStyle.css'; */\r\n</style>\r\n"],"sourceRoot":"src/common/tree"}]}