{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Tree\\jquery.ztree.excheck.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Tree\\jquery.ztree.excheck.js","mtime":1673402177015},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/*\n * JQuery zTree excheck v3.5.40\n * http://treejs.cn/\n *\n * Copyright (c) 2010 Hunter.z\n *\n * Licensed same as jquery - MIT License\n * http://www.opensource.org/licenses/mit-license.php\n *\n * email: hunter.z@263.net\n * Date: 2019-01-18\n */\n(function ($) {\n  var _consts = {\n    event: {\n      CHECK: \"ztree_check\"\n    },\n    id: {\n      CHECK: \"_check\"\n    },\n    checkbox: {\n      DEFAULT: \"chk\"\n    }\n  },\n      _setting = {\n    check: {\n      enable: false,\n      //是否是多选树\n      P: true,\n      //是否级联勾选父结点\n      PX: false,\n      //是否级联勾选父结点（只半勾选）\n      S: true,\n      //是否级联勾选子结点\n      hasChecked: true,\n      //是否需要勾选上搜索的结点\n      hasOwnField: null //是否只对具有该属性的结点才可勾选\n\n    },\n    callback: {\n      beforeCheck: null,\n      onCheck: null\n    }\n  },\n      _bindEvent = function _bindEvent(setting) {\n    var o = setting.treeObj,\n        c = consts.event;\n    o.bind(c.CHECK, function (event, node, chgs, value, srcEvent) {\n      event.srcEvent = srcEvent;\n      tools.apply(setting.callback.onCheck, [node, chgs, value, event]);\n    });\n  },\n      _unbindEvent = function _unbindEvent(setting) {\n    setting.treeObj.unbind(consts.event.CHECK);\n  },\n      _eventProxy = function _eventProxy(e) {\n    var target = e.target,\n        setting = data.getSetting(e.data.treeId),\n        node = null,\n        nodeEventType = \"\",\n        treeEventType = \"\",\n        nodeEventCallback = null,\n        treeEventCallback = null;\n\n    if (setting.check.enable && tools.eqs(e.type, \"click\")) {\n      if (tools.eqs(target.tagName, \"span\") && target.getAttribute(\"treeNode\" + consts.id.CHECK) !== null) {\n        var tId = tools.getNodeMainDom(target).id;\n        nodeEventType = \"checkNode\";\n        node = data.getNodeCache(setting, tId);\n        nodeEventCallback = _handler.onCheckNode;\n      }\n    }\n\n    var proxyResult = {\n      stop: false,\n      //nodeEventType === \"checkNode\",\n      node: node,\n      nodeEventType: nodeEventType,\n      nodeEventCallback: nodeEventCallback,\n      treeEventType: treeEventType,\n      treeEventCallback: treeEventCallback\n    };\n    return proxyResult;\n  },\n      // add dom for check\n  _beforeA = function _beforeA(setting, node, html) {\n    if (setting.check.enable) {\n      html.push(\"<span ID='\", node[setting.treeId].tId, consts.id.CHECK, \"' class='\", view.makeChkClass(setting, node), \"' treeNode\", consts.id.CHECK, \"></span>\");\n    }\n  },\n      // update zTreeObj, add method of check\n  _zTreeTools = function _zTreeTools(setting, zTreeTools) {\n    zTreeTools.checkNode = function (node, value, checkTypeFlag, callbackFlag) {\n      callbackFlag = !!callbackFlag;\n      value = !!value ? 1 : 0;\n      if (!node[this.setting.treeId]) return;\n\n      if ((node[this.setting.treeId].value || 0) === value) {\n        return;\n      } else if (callbackFlag && tools.apply(this.setting.callback.beforeCheck, [node], true) == false) {\n        return;\n      }\n\n      if (this.setting.check.enable) {\n        node[this.setting.treeId].value = value;\n        view.setChkClass(this.setting, node);\n        var hasOwnField = this.setting.check.hasOwnField;\n        var chgs = !hasOwnField || node.hasOwnProperty(hasOwnField) ? [node] : [];\n        if (checkTypeFlag) view.checkNodeRelation(this.setting, node, value, chgs);\n\n        if (callbackFlag) {\n          this.setting.treeObj.trigger(consts.event.CHECK, [node, chgs, value]);\n        }\n      }\n    };\n\n    zTreeTools.checkAllNodes = function (value) {\n      view.repairAllChk(this.setting, !!value ? 1 : 0);\n    };\n    /*\n    * @param onlyChecked 只取全勾选，半勾选不要\n    * @param onlyTop     只取顶级勾选结点，子孙勾选不要\n    * @param field       取指定字段，为空表示取整个勾选结点\n    * @param hasOwnField 指定拥有该属性的结点，为空表示所有结点\n    * @param children    从这些结点中查找\n    * @param ignoreFun   忽略回调，返回true则忽略该结点（子结点不忽略，继续递归)\n    */\n\n\n    zTreeTools.getCheckedNodes = function () {\n      var onlyChecked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var onlyTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var hasOwnField = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var children = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var ignoreFun = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n      var result = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n      result = result || [];\n      children = children || data.getRoot(this.setting)[this.setting.data.key.children];\n      if (!children || children.length == 0) return result;\n\n      for (var i = 0, len = children.length, node, added, ignore, nodes, Z; i < len; i++) {\n        added = ignore = false;\n        node = children[i];\n        ignoreFun && (ignore = ignoreFun(node));\n        Z = node[this.setting.treeId];\n\n        if (Z && this.setting.view.hideFunction) {\n          if (Z.hide === true || Z.hide == undefined && this.setting.view.hideFunction(node) === true) {\n            continue;\n          }\n        }\n\n        if (Z && !ignore && (!hasOwnField || node.hasOwnProperty(hasOwnField))) {\n          if (Z.value === 1 || !onlyChecked && Z.value === 2) {\n            result.push(field ? node[field] : node);\n            added = true;\n          }\n        }\n\n        if (Z && !ignore && Z.value === 1 && onlyTop) continue; //如果结点选中，但又是只取选中顶点，直接跳过子结点\n\n        if (added == false || onlyTop == false) {\n          nodes = node[this.setting.data.key.children];\n\n          if (nodes && nodes.length > 0) {\n            zTreeTools.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes, ignoreFun, result);\n          }\n        }\n      }\n\n      return result;\n    };\n\n    var _updateNode = zTreeTools.updateNode;\n\n    zTreeTools.updateNode = function (node, checkTypeFlag) {\n      if (_updateNode) _updateNode.apply(zTreeTools, arguments);\n      if (!node || !this.setting.check.enable) return;\n      var nObj = $$(node, this.setting);\n\n      if (nObj.get(0)) {\n        view.setChkClass(this.setting, node);\n        if (checkTypeFlag == true) view.checkNodeRelation(this.setting, node, node[this.setting.treeId].value);\n      }\n    };\n  },\n      _data = {},\n      _event = {},\n      _handler = {\n    onCheckNode: function onCheckNode(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n      if (tools.apply(setting.callback.beforeCheck, [node], true) == false) return true;\n      var value = node[setting.treeId].value;\n      value = value == 1 || value == 2 ? 0 : 1;\n      node[setting.treeId].value = value;\n      view.setChkClass(setting, node);\n      var hasOwnField = setting.check.hasOwnField;\n      var chgs = !hasOwnField || node.hasOwnProperty(hasOwnField) ? [node] : [];\n      view.checkNodeRelation(setting, node, value, chgs);\n      setting.treeObj.trigger(consts.event.CHECK, [node, chgs, value, event]);\n      return true;\n    }\n  },\n      _tools = {},\n      _view = {\n    checkNodeRelation: function checkNodeRelation(setting, node, value, chgs) {\n      if (setting.check.S && node[setting.data.key.children]) {\n        view.setSonNodeCheckBox(setting, node, node[setting.data.key.children], value, chgs);\n      }\n\n      if (setting.check.P) {\n        view.setParentNodeCheckBox(setting, node, value, chgs);\n      } else if (setting.check.PX) {\n        view.setParentNodeCheckBox2(setting, node, value);\n      }\n    },\n    setParentNodeCheckBox: function setParentNodeCheckBox(setting, node, value, chgs) {\n      var parent = node[setting.data.key.parent];\n      if (!parent) return;\n      var Z = node[setting.treeId],\n          allChecked = value === 1,\n          allUnchecked = value === 0;\n\n      if (value !== 2) {\n        var children = parent[setting.data.key.children];\n\n        for (var i = 0, l = children.length; i < l; i++) {\n          Z = children[i][setting.treeId];\n\n          if (Z && Z.value !== 1) {\n            allChecked = false;\n            if (!allUnchecked) break;\n          }\n\n          if (Z && (Z.value || 0) !== 0) {\n            allUnchecked = false;\n            if (!allChecked) break;\n          }\n        }\n      }\n\n      Z = parent[setting.treeId];\n      if (!Z) return;\n      var chg = false;\n\n      if (allChecked) {\n        chg = Z.value !== 1;\n        Z.value = 1;\n        if (chg && chgs && (!setting.check.hasOwnField || parent.hasOwnProperty(setting.check.hasOwnField))) chgs.push(parent);\n      } else if (allUnchecked) {\n        chg = (Z.value || 0) !== 0;\n        Z.value = 0;\n        if (chg && chgs && (!setting.check.hasOwnField || parent.hasOwnProperty(setting.check.hasOwnField))) chgs.push(parent);\n      } else if (Z.value !== 2) {\n        if (Z.value === 1 && chgs && (!setting.check.hasOwnField || parent.hasOwnProperty(setting.check.hasOwnField))) chgs.push(parent);\n        chg = true;\n        Z.value = 2;\n      }\n\n      if (chg) {\n        view.setChkClass(setting, parent);\n        view.setParentNodeCheckBox(setting, parent, Z.value, chgs);\n      }\n    },\n    setParentNodeCheckBox2: function setParentNodeCheckBox2(setting, node, value) {\n      var parent = node[setting.data.key.parent];\n      if (!parent) return;\n      var Z = node[setting.treeId],\n          allChecked = value === 1,\n          allUnchecked = value === 0;\n\n      if (value !== 2) {\n        var children = parent[setting.data.key.children];\n\n        for (var i = 0, l = children.length; i < l; i++) {\n          Z = children[i][setting.treeId];\n\n          if (Z.value !== 1) {\n            allChecked = false;\n            if (!allUnchecked) break;\n          }\n\n          if ((Z.value || 0) !== 0) {\n            allUnchecked = false;\n            if (!allChecked) break;\n          }\n        }\n      }\n\n      Z = parent[setting.treeId];\n      if (!Z) return;\n      var chg = true;\n\n      if (allUnchecked) {\n        chg = (Z.value || 0) !== 0;\n        Z.value = 0;\n      } else if (Z.value !== 2) {\n        chg = true;\n        Z.value = 2;\n      }\n\n      if (chg) {\n        view.setChkClass(setting, parent);\n        view.setParentNodeCheckBox2(setting, parent, Z.value);\n      }\n    },\n    setSonNodeCheckBox: function setSonNodeCheckBox(setting, parent, children, value, chgs) {\n      var hasOwnField = setting.check.hasOwnField,\n          p;\n\n      for (var i = 0, l = children.length, node, Z; i < l; i++) {\n        node = children[i];\n        Z = node[setting.treeId];\n\n        if (setting.view.hideFunction && value == 1) {\n          // value == 1, 是解决结点未隐藏时被勾上了，然后被隐藏了，上级去勾时要带上这个结点。\n          if (Z.hide === true || Z.hide == undefined && setting.view.hideFunction(node) === true) {\n            continue;\n          }\n        }\n\n        if ((Z.value || 0) !== value) {\n          if (chgs && (!hasOwnField || node.hasOwnProperty(hasOwnField))) {\n            chgs.push(node);\n          }\n\n          Z.value = value;\n          view.setChkClass(setting, node);\n          node[setting.data.key.children] && view.setSonNodeCheckBox(setting, node, node[setting.data.key.children], value, chgs);\n        }\n\n        p = node[setting.data.key.parent];\n        if (p && p != parent) view.setParentNodeCheckBox(setting, node, value, chgs);\n      }\n    },\n    repairAllChk: function repairAllChk(setting, value) {\n      if (setting.check.enable) {\n        var root = data.getRoot(setting),\n            children = root[setting.data.key.children],\n            node;\n\n        for (var i = 0, l = children.length; i < l; i++) {\n          node = children[i];\n          node[setting.treeId].value = value;\n          view.setChkClass(setting, node);\n          node[setting.data.key.children] && view.setSonNodeCheckBox(setting, node, node[setting.data.key.children], value);\n        }\n      }\n    },\n    setChkClass: function setChkClass(setting, node) {\n      var obj = $$(node, consts.id.CHECK, setting);\n      obj && obj.attr('class', view.makeChkClass(setting, node));\n    },\n    makeChkClass: function makeChkClass(setting, node) {\n      return consts.className.BUTTON + \" \" + consts.checkbox.DEFAULT + \" checkbox_\" + (node[setting.treeId].value || 0);\n    }\n  },\n      _z = {\n    tools: _tools,\n    view: _view,\n    event: _event,\n    data: _data\n  };\n\n  $.extend(true, $.fn.zTree.consts, _consts);\n  $.extend(true, $.fn.zTree._z, _z);\n  var zt = $.fn.zTree,\n      tools = zt._z.tools,\n      consts = zt.consts,\n      view = zt._z.view,\n      data = zt._z.data,\n      event = zt._z.event,\n      $$ = tools.$;\n  data.exSetting(_setting);\n  data.addInitBind(_bindEvent);\n  data.addInitUnBind(_unbindEvent);\n  data.addInitProxy(_eventProxy, true);\n  data.addInnerAfterIcon(_beforeA);\n  data.addZTreeTools(_zTreeTools);\n})(jQuery);",{"version":3,"sources":["D:\\cdRule\\src\\components\\Tree\\jquery.ztree.excheck.js"],"names":["_consts","event","CHECK","id","checkbox","DEFAULT","_setting","check","enable","P","PX","S","hasChecked","hasOwnField","callback","beforeCheck","onCheck","_bindEvent","o","setting","c","consts","tools","_unbindEvent","_eventProxy","target","e","data","node","nodeEventType","treeEventType","nodeEventCallback","treeEventCallback","tId","_handler","proxyResult","stop","_beforeA","html","view","_zTreeTools","zTreeTools","callbackFlag","value","chgs","onlyChecked","onlyTop","field","children","ignoreFun","result","i","len","added","ignore","Z","nodes","_updateNode","nObj","$$","checkTypeFlag","_data","_event","onCheckNode","_tools","_view","checkNodeRelation","setParentNodeCheckBox","parent","allChecked","allUnchecked","l","chg","setParentNodeCheckBox2","setSonNodeCheckBox","p","repairAllChk","root","setChkClass","obj","makeChkClass","_z","$","zt"],"mappings":"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","sourcesContent":["/*\n * JQuery zTree excheck v3.5.40\n * http://treejs.cn/\n *\n * Copyright (c) 2010 Hunter.z\n *\n * Licensed same as jquery - MIT License\n * http://www.opensource.org/licenses/mit-license.php\n *\n * email: hunter.z@263.net\n * Date: 2019-01-18\n */\n(function($) {\n    var _consts = {\n        event: {\n            CHECK: \"ztree_check\"\n        },\n        id: {\n            CHECK: \"_check\"\n        },\n        checkbox: {\n            DEFAULT: \"chk\"\n        }\n    },\n    _setting = {\n        check: {\n            enable: false,        //是否是多选树\n            P: true,            //是否级联勾选父结点\n            PX: false,             //是否级联勾选父结点（只半勾选）\n            S: true,               //是否级联勾选子结点\n            hasChecked:true,//是否需要勾选上搜索的结点\n            hasOwnField: null    //是否只对具有该属性的结点才可勾选\n        },\n        callback: {\n            beforeCheck: null,\n            onCheck: null\n        }\n    },\n    _bindEvent = function(setting) {\n        var o = setting.treeObj, c = consts.event;\n        o.bind(c.CHECK, function(event, node, chgs, value, srcEvent) {\n            event.srcEvent = srcEvent;\n            tools.apply(setting.callback.onCheck, [node, chgs, value, event]);\n        });\n    },\n    _unbindEvent = function(setting) {\n        setting.treeObj.unbind(consts.event.CHECK);\n    },\n    _eventProxy = function(e) {\n        var target = e.target,\n        setting = data.getSetting(e.data.treeId),\n        node = null,\n        nodeEventType = \"\",\n        treeEventType = \"\",\n        nodeEventCallback = null,\n        treeEventCallback = null;\n        if (setting.check.enable && tools.eqs(e.type, \"click\")) {\n            if (tools.eqs(target.tagName, \"span\") && target.getAttribute(\"treeNode\" + consts.id.CHECK) !== null) {\n                var tId = tools.getNodeMainDom(target).id;\n                nodeEventType = \"checkNode\";\n                node = data.getNodeCache(setting, tId);\n                nodeEventCallback = _handler.onCheckNode;\n            }\n        }\n        var proxyResult = {\n            stop: false,\n            //nodeEventType === \"checkNode\",\n            node: node,\n            nodeEventType: nodeEventType,\n            nodeEventCallback: nodeEventCallback,\n            treeEventType: treeEventType,\n            treeEventCallback: treeEventCallback\n        };\n        return proxyResult\n    },\n    // add dom for check\n    _beforeA = function(setting, node, html) {\n        if (setting.check.enable) {\n            html.push(\"<span ID='\", node[setting.treeId].tId, consts.id.CHECK, \"' class='\", view.makeChkClass(setting, node), \"' treeNode\", consts.id.CHECK, \"></span>\");\n        }\n    },\n    // update zTreeObj, add method of check\n    _zTreeTools = function(setting, zTreeTools) {\n\n        zTreeTools.checkNode = function(node, value, checkTypeFlag, callbackFlag) {\n            callbackFlag = !!callbackFlag;\n            value = !!value ? 1 : 0;\n            if (!node[this.setting.treeId]) return;\n            if ((node[this.setting.treeId].value || 0) === value) {\n                return;\n            } else if (callbackFlag && tools.apply(this.setting.callback.beforeCheck, [node], true) == false) {\n                return;\n            }\n            if (this.setting.check.enable) {\n                node[this.setting.treeId].value = value;\n                view.setChkClass(this.setting, node);\n                var hasOwnField = this.setting.check.hasOwnField;\n                var chgs = !hasOwnField || node.hasOwnProperty(hasOwnField) ? [node] : [];\n                if (checkTypeFlag) view.checkNodeRelation(this.setting, node, value, chgs);\n                if (callbackFlag) {\n                    this.setting.treeObj.trigger(consts.event.CHECK, [node, chgs, value]);\n                }\n            }\n        }\n\n        zTreeTools.checkAllNodes = function(value) {\n            view.repairAllChk(this.setting, !!value ? 1 : 0);\n        }\n\n        /*\n       * @param onlyChecked 只取全勾选，半勾选不要\n       * @param onlyTop     只取顶级勾选结点，子孙勾选不要\n       * @param field       取指定字段，为空表示取整个勾选结点\n       * @param hasOwnField 指定拥有该属性的结点，为空表示所有结点\n       * @param children    从这些结点中查找\n       * @param ignoreFun   忽略回调，返回true则忽略该结点（子结点不忽略，继续递归)\n       */\n        zTreeTools.getCheckedNodes = function(onlyChecked = true, onlyTop = false, field = null, hasOwnField = null, children = null, ignoreFun = null, result = null) {\n            result = result || [];\n            children = children || data.getRoot(this.setting)[this.setting.data.key.children];\n            if (!children || children.length == 0) return result;\n            for (var i = 0, len = children.length, node, added, ignore, nodes, Z; i < len; i++) {\n                added = ignore = false;\n                node = children[i];\n                ignoreFun && (ignore = ignoreFun(node));\n                Z = node[this.setting.treeId];\n                if (Z && this.setting.view.hideFunction) {\n                    if (Z.hide === true || (Z.hide == undefined && this.setting.view.hideFunction(node) === true)) {\n                        continue;\n                    }\n                }\n                if (Z && !ignore && (!hasOwnField || node.hasOwnProperty(hasOwnField))) {\n                    if (Z.value === 1 || (!onlyChecked && Z.value === 2)) {\n                        result.push(field ? node[field] : node);\n                        added = true;\n                    }\n                }\n                if (Z && !ignore && Z.value === 1 && onlyTop) continue;//如果结点选中，但又是只取选中顶点，直接跳过子结点\n                if (added == false || onlyTop == false) {\n                    nodes = node[this.setting.data.key.children];\n                    if (nodes && nodes.length > 0) {\n                        zTreeTools.getCheckedNodes(onlyChecked, onlyTop, field, hasOwnField, nodes, ignoreFun, result);\n                    }\n                }\n            }\n            return result;\n        }\n\n        var _updateNode = zTreeTools.updateNode;\n        zTreeTools.updateNode = function(node, checkTypeFlag) {\n            if (_updateNode) _updateNode.apply(zTreeTools, arguments);\n            if (!node || !this.setting.check.enable) return;\n            var nObj = $$(node, this.setting);\n            if (nObj.get(0)) {\n                view.setChkClass(this.setting, node);\n                if (checkTypeFlag == true) view.checkNodeRelation(this.setting, node, node[this.setting.treeId].value);\n            }\n        }\n    },\n    _data = {},\n    _event = {},\n    _handler = {\n        onCheckNode: function(event, node) {\n            var setting = data.getSetting(event.data.treeId);\n            if (tools.apply(setting.callback.beforeCheck, [node], true) == false) return true;\n            var value = node[setting.treeId].value;\n            value = (value == 1 || value == 2) ? 0 : 1;\n            node[setting.treeId].value = value;\n            view.setChkClass(setting, node);\n            var hasOwnField = setting.check.hasOwnField;\n            var chgs = !hasOwnField || node.hasOwnProperty(hasOwnField) ? [node] : [];\n            view.checkNodeRelation(setting, node, value, chgs);\n            setting.treeObj.trigger(consts.event.CHECK, [node, chgs, value, event]);\n            return true;\n        }\n    },\n    _tools = {},\n    _view = {\n        checkNodeRelation: function(setting, node, value, chgs) {\n            if (setting.check.S && node[setting.data.key.children]) {\n                view.setSonNodeCheckBox(setting, node, node[setting.data.key.children], value, chgs);\n            }\n            if (setting.check.P) {\n                view.setParentNodeCheckBox(setting, node, value, chgs);\n            } else if (setting.check.PX) {\n                view.setParentNodeCheckBox2(setting, node, value);\n            }\n        },\n        setParentNodeCheckBox: function(setting, node, value, chgs) {\n            var parent = node[setting.data.key.parent];\n            if (!parent) return;\n            var Z = node[setting.treeId], allChecked = value === 1, allUnchecked = value === 0;\n            if (value !== 2) {\n                var children = parent[setting.data.key.children];\n                for (var i = 0, l = children.length; i < l; i++) {\n                    Z = children[i][setting.treeId];\n                    if (Z && Z.value !== 1) {\n                        allChecked = false;\n                        if (!allUnchecked) break;\n                    }\n                    if (Z && (Z.value || 0) !== 0) {\n                        allUnchecked = false;\n                        if (!allChecked) break;\n                    }\n                }\n            }\n            Z = parent[setting.treeId];\n            if (!Z) return;\n            var chg = false;\n            if (allChecked) {\n                chg = Z.value !== 1;\n                Z.value = 1;\n                if (chg && chgs && (!setting.check.hasOwnField || parent.hasOwnProperty(setting.check.hasOwnField))) chgs.push(parent);\n            } else if (allUnchecked) {\n                chg = (Z.value || 0) !== 0;\n                Z.value = 0;\n                if (chg && chgs && (!setting.check.hasOwnField || parent.hasOwnProperty(setting.check.hasOwnField))) chgs.push(parent);\n            } else if (Z.value !== 2) {\n                if (Z.value === 1 && chgs && (!setting.check.hasOwnField || parent.hasOwnProperty(setting.check.hasOwnField))) chgs.push(parent);\n                chg = true;\n                Z.value = 2;\n            }\n            if (chg) {\n                view.setChkClass(setting, parent);\n                view.setParentNodeCheckBox(setting, parent, Z.value, chgs);\n            }\n        },\n        setParentNodeCheckBox2: function(setting, node, value) {\n            var parent = node[setting.data.key.parent];\n            if (!parent) return;\n            var Z = node[setting.treeId], allChecked = value === 1,  allUnchecked = value === 0;\n            if (value !== 2) {\n                var children = parent[setting.data.key.children];\n                for (var i = 0, l = children.length; i < l; i++) {\n                    Z = children[i][setting.treeId];\n                    if (Z.value !== 1) {\n                        allChecked = false;\n                        if (!allUnchecked) break;\n                    }\n                    if ((Z.value || 0) !== 0) {\n                        allUnchecked = false;\n                        if (!allChecked) break;\n                    }\n                }\n            }\n            Z = parent[setting.treeId];\n            if (!Z) return;\n            var chg = true;\n            if (allUnchecked) {\n                chg = (Z.value || 0) !== 0;\n                Z.value = 0;\n            }else if (Z.value !== 2) {\n                chg = true;\n                Z.value = 2;\n            }\n            if (chg) {\n                view.setChkClass(setting, parent);\n                view.setParentNodeCheckBox2(setting, parent, Z.value);\n            }\n        },\n        setSonNodeCheckBox: function(setting, parent, children, value, chgs) {\n            var hasOwnField = setting.check.hasOwnField, p;\n            for (var i = 0, l = children.length, node, Z; i < l; i++) {\n                node = children[i];\n                Z = node[setting.treeId];\n                if (setting.view.hideFunction && value == 1) {// value == 1, 是解决结点未隐藏时被勾上了，然后被隐藏了，上级去勾时要带上这个结点。\n                    if (Z.hide === true || (Z.hide == undefined && setting.view.hideFunction(node) === true)) {\n                        continue;\n                    }\n                }\n                if ((Z.value || 0) !== value) {\n                    if (chgs && (!hasOwnField || node.hasOwnProperty(hasOwnField))) {\n                        chgs.push(node);\n                    }\n                    Z.value = value;\n                    view.setChkClass(setting, node);\n                    node[setting.data.key.children] && view.setSonNodeCheckBox(setting, node, node[setting.data.key.children], value, chgs);\n                }\n                p = node[setting.data.key.parent];\n                if (p && p != parent) view.setParentNodeCheckBox(setting, node, value, chgs);\n            }\n        },\n        repairAllChk: function(setting, value) {\n            if (setting.check.enable) {\n                var root = data.getRoot(setting), children = root[setting.data.key.children], node;\n                for (var i = 0, l = children.length; i < l; i++) {\n                    node = children[i];\n                    node[setting.treeId].value = value;\n                    view.setChkClass(setting, node);\n                    node[setting.data.key.children] && view.setSonNodeCheckBox(setting, node, node[setting.data.key.children], value);\n                }\n            }\n        },\n        setChkClass: function(setting, node) {\n            var obj = $$(node, consts.id.CHECK, setting);\n            obj && obj.attr('class', view.makeChkClass(setting, node));\n        },\n        makeChkClass: function(setting, node) {\n            return consts.className.BUTTON + \" \" + consts.checkbox.DEFAULT + \" checkbox_\" + (node[setting.treeId].value || 0);\n        }\n    },\n    _z = {\n        tools: _tools,\n        view: _view,\n        event: _event,\n        data: _data\n    };\n\n    $.extend(true, $.fn.zTree.consts, _consts);\n    $.extend(true, $.fn.zTree._z, _z);\n\n    var zt = $.fn.zTree,\n    tools = zt._z.tools,\n    consts = zt.consts,\n    view = zt._z.view,\n    data = zt._z.data,\n    event = zt._z.event,\n    $$ = tools.$;\n\n    data.exSetting(_setting);\n    data.addInitBind(_bindEvent);\n    data.addInitUnBind(_unbindEvent);\n    data.addInitProxy(_eventProxy, true);\n    data.addInnerAfterIcon(_beforeA);\n    data.addZTreeTools(_zTreeTools);\n\n})(jQuery);"]}]}