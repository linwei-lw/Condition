{"remainingRequest":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\components\\Table\\grid\\src\\grid.js","dependencies":[{"path":"D:\\cdRule\\src\\components\\Table\\grid\\src\\grid.js","mtime":1635230121576},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"D:\\\\cdRule\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport Table from '../../table';\nimport XEUtils from 'xe-utils';\nimport GlobalConfig from '../../v-x-e-table/src/conf';\nimport vSize from '../../mixins/size';\nimport VXETable from '../../v-x-e-table';\nimport { UtilTools, DomTools, GlobalEvent, isEnableConf } from '../../tools';\nimport { getOffsetHeight, getPaddingTopBottomSize } from '../../tools/src/dom';\nconst methods = {};\nconst propKeys = Object.keys(Table.props);\n\nfunction renderDefaultForm(h, _vm) {\n  const $scopedSlots = _vm.$scopedSlots,\n        proxyConfig = _vm.proxyConfig,\n        proxyOpts = _vm.proxyOpts,\n        formData = _vm.formData,\n        formConfig = _vm.formConfig,\n        formOpts = _vm.formOpts;\n\n  if (isEnableConf(formConfig) && formOpts.items && formOpts.items.length) {\n    const formSlots = {};\n\n    if (!formOpts.inited) {\n      formOpts.inited = true;\n      const beforeItem = proxyOpts.beforeItem;\n\n      if (proxyOpts && beforeItem) {\n        formOpts.items.forEach(item => {\n          beforeItem.call(_vm, {\n            $grid: _vm,\n            item\n          });\n        });\n      }\n    } // 处理插槽\n\n\n    formOpts.items.forEach(item => {\n      XEUtils.each(item.slots, func => {\n        if (!XEUtils.isFunction(func)) {\n          if ($scopedSlots[func]) {\n            formSlots[func] = $scopedSlots[func];\n          }\n        }\n      });\n    });\n    return [h('vxe-form', {\n      props: Object.assign({}, formOpts, {\n        data: proxyConfig && proxyOpts.form ? formData : formOpts.data\n      }),\n      on: {\n        submit: _vm.submitEvent,\n        reset: _vm.resetEvent,\n        'submit-invalid': _vm.submitInvalidEvent,\n        'toggle-collapse': _vm.togglCollapseEvent\n      },\n      scopedSlots: formSlots\n    })];\n  }\n\n  return [];\n}\n\nfunction getFuncSlot(_vm, optSlots, slotKey) {\n  const $scopedSlots = _vm.$scopedSlots;\n  const funcSlot = optSlots[slotKey];\n\n  if (funcSlot) {\n    if (XEUtils.isString(funcSlot)) {\n      if ($scopedSlots[funcSlot]) {\n        return $scopedSlots[funcSlot];\n      } else {\n        if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n          UtilTools.error('vxe.error.notSlot', [funcSlot]);\n        }\n      }\n    } else {\n      return funcSlot;\n    }\n  }\n\n  return null;\n}\n\nfunction getToolbarSlots(_vm) {\n  const $scopedSlots = _vm.$scopedSlots,\n        toolbarOpts = _vm.toolbarOpts;\n  const toolbarOptSlots = toolbarOpts.slots;\n  let buttonsSlot;\n  let toolsSlot;\n  const slots = {};\n\n  if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n    if ($scopedSlots.buttons && (!toolbarOptSlots || toolbarOptSlots.buttons !== 'buttons')) {\n      UtilTools.warn('vxe.error.reqProp', ['toolbar-config.slots.buttons']);\n    }\n\n    if ($scopedSlots.tools && (!toolbarOptSlots || toolbarOptSlots.tools !== 'tools')) {\n      UtilTools.warn('vxe.error.reqProp', ['toolbar-config.slots.tools']);\n    }\n  }\n\n  if (toolbarOptSlots) {\n    buttonsSlot = getFuncSlot(_vm, toolbarOptSlots, 'buttons');\n    toolsSlot = getFuncSlot(_vm, toolbarOptSlots, 'tools');\n\n    if (buttonsSlot) {\n      slots.buttons = buttonsSlot;\n    }\n\n    if (toolsSlot) {\n      slots.tools = toolsSlot;\n    }\n  }\n\n  return slots;\n}\n\nfunction getPagerSlots(_vm) {\n  const pagerOpts = _vm.pagerOpts;\n  const pagerOptSlots = pagerOpts.slots;\n  const slots = {};\n  let leftSlot;\n  let rightSlot;\n\n  if (pagerOptSlots) {\n    leftSlot = getFuncSlot(_vm, pagerOptSlots, 'left');\n    rightSlot = getFuncSlot(_vm, pagerOptSlots, 'right');\n\n    if (leftSlot) {\n      slots.left = leftSlot;\n    }\n\n    if (rightSlot) {\n      slots.right = rightSlot;\n    }\n  }\n\n  return slots;\n}\n\nfunction getTableOns(_vm) {\n  const $listeners = _vm.$listeners,\n        proxyConfig = _vm.proxyConfig,\n        proxyOpts = _vm.proxyOpts;\n  const ons = {};\n  XEUtils.each($listeners, (cb, type) => {\n    ons[type] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _vm.$emit(type, ...args);\n    };\n  });\n\n  if (proxyConfig) {\n    if (proxyOpts.sort) {\n      ons['sort-change'] = _vm.sortChangeEvent;\n    }\n\n    if (proxyOpts.filter) {\n      ons['filter-change'] = _vm.filterChangeEvent;\n    }\n  }\n\n  return ons;\n}\n\nObject.keys(Table.methods).forEach(name => {\n  methods[name] = function () {\n    return this.$refs.xTable && this.$refs.xTable[name](...arguments);\n  };\n});\nexport default {\n  name: 'VxeGrid',\n  mixins: [vSize],\n  props: _objectSpread(_objectSpread({}, Table.props), {}, {\n    columns: Array,\n    pagerConfig: [Boolean, Object],\n    proxyConfig: Object,\n    toolbar: [Boolean, Object],\n    toolbarConfig: [Boolean, Object],\n    formConfig: [Boolean, Object],\n    zoomConfig: Object,\n    size: {\n      type: String,\n      default: () => GlobalConfig.grid.size || GlobalConfig.size\n    }\n  }),\n\n  provide() {\n    return {\n      $xegrid: this\n    };\n  },\n\n  data() {\n    return {\n      tableLoading: false,\n      isZMax: false,\n      tableData: [],\n      pendingRecords: [],\n      filterData: [],\n      formData: {},\n      sortData: [],\n      tZindex: 0,\n      tablePage: {\n        total: 0,\n        pageSize: 10,\n        currentPage: 1\n      }\n    };\n  },\n\n  computed: {\n    isMsg() {\n      return this.proxyOpts.message !== false;\n    },\n\n    proxyOpts() {\n      return Object.assign({}, GlobalConfig.grid.proxyConfig, this.proxyConfig);\n    },\n\n    pagerOpts() {\n      return Object.assign({}, GlobalConfig.grid.pagerConfig, this.pagerConfig);\n    },\n\n    formOpts() {\n      return Object.assign({}, GlobalConfig.grid.formConfig, this.formConfig);\n    },\n\n    toolbarOpts() {\n      return Object.assign({}, GlobalConfig.grid.toolbarConfig, this.toolbarConfig || this.toolbar);\n    },\n\n    zoomOpts() {\n      return Object.assign({}, GlobalConfig.grid.zoomConfig, this.zoomConfig);\n    },\n\n    renderStyle() {\n      return this.isZMax ? {\n        zIndex: this.tZindex,\n        height: '100%'\n      } : {\n        height: '100%'\n      };\n    },\n\n    tableExtendProps() {\n      const rest = {};\n      propKeys.forEach(key => {\n        rest[key] = this[key];\n      });\n      return rest;\n    },\n\n    tableProps() {\n      const isZMax = this.isZMax,\n            seqConfig = this.seqConfig,\n            pagerConfig = this.pagerConfig,\n            loading = this.loading,\n            editConfig = this.editConfig,\n            proxyConfig = this.proxyConfig,\n            proxyOpts = this.proxyOpts,\n            tableExtendProps = this.tableExtendProps,\n            tableLoading = this.tableLoading,\n            tablePage = this.tablePage,\n            tableData = this.tableData;\n      const tableProps = Object.assign({}, tableExtendProps);\n\n      if (isZMax) {\n        if (tableExtendProps.maxHeight) {\n          tableProps.maxHeight = 'auto';\n        } else {\n          tableProps.height = 'auto';\n        }\n      }\n\n      if (proxyConfig) {\n        tableProps.loading = loading || tableLoading;\n        tableProps.data = tableData;\n        tableProps.rowClassName = this.handleRowClassName;\n\n        if (proxyOpts.seq && isEnableConf(pagerConfig)) {\n          tableProps.seqConfig = Object.assign({}, seqConfig, {\n            startIndex: (tablePage.currentPage - 1) * tablePage.pageSize\n          });\n        }\n      }\n\n      if (editConfig) {\n        tableProps.editConfig = Object.assign({}, editConfig, {\n          activeMethod: this.handleActiveMethod\n        });\n      }\n\n      return tableProps;\n    }\n\n  },\n  watch: {\n    columns(value) {\n      this.$nextTick(() => this.loadColumn(value));\n    },\n\n    toolbar(value) {\n      if (value) {\n        this.initToolbar();\n      }\n    },\n\n    toolbarConfig(value) {\n      if (value) {\n        this.initToolbar();\n      }\n    },\n\n    proxyConfig() {\n      this.initProxy();\n    },\n\n    pagerConfig() {\n      this.initPages();\n    }\n\n  },\n\n  created() {\n    const data = this.data,\n          formOpts = this.formOpts,\n          proxyOpts = this.proxyOpts,\n          proxyConfig = this.proxyConfig;\n\n    if (proxyConfig && (data || proxyOpts.form && formOpts.data)) {\n      console.error('[vxe-grid] There is a conflict between the props proxy-config and data.');\n    }\n\n    if (process.env.VUE_APP_VXE_TABLE_ENV === 'development') {\n      if (this.toolbar) {\n        UtilTools.warn('vxe.error.delProp', ['grid.toolbar', 'grid.toolbar-config']);\n      }\n\n      if (this.toolbarConfig && !XEUtils.isObject(this.toolbarConfig)) {\n        UtilTools.warn('vxe.error.errProp', [`grid.toolbar-config=${this.toolbarConfig}`, 'grid.toolbar-config={}']);\n      }\n    }\n\n    GlobalEvent.on(this, 'keydown', this.handleGlobalKeydownEvent);\n  },\n\n  mounted() {\n    if (this.columns && this.columns.length) {\n      this.loadColumn(this.columns);\n    }\n\n    this.initToolbar();\n    this.initPages();\n    this.initProxy();\n  },\n\n  destroyed() {\n    GlobalEvent.off(this, 'keydown');\n  },\n\n  render(h) {\n    const $scopedSlots = this.$scopedSlots,\n          vSize = this.vSize,\n          isZMax = this.isZMax;\n    const hasForm = !!($scopedSlots.form || isEnableConf(this.formConfig));\n    const hasToolbar = !!($scopedSlots.toolbar || isEnableConf(this.toolbarConfig) || this.toolbar);\n    const hasPager = !!($scopedSlots.pager || isEnableConf(this.pagerConfig));\n    return h('div', {\n      class: ['vxe-grid', {\n        [`size--${vSize}`]: vSize,\n        'is--animat': !!this.animat,\n        'is--round': this.round,\n        'is--maximize': isZMax,\n        'is--loading': this.loading || this.tableLoading\n      }],\n      style: this.renderStyle\n    }, [\n    /**\r\n     * 渲染表单\r\n     */\n    hasForm ? h('div', {\n      ref: 'formWrapper',\n      class: 'vxe-grid--form-wrapper'\n    }, $scopedSlots.form ? $scopedSlots.form.call(this, {\n      $grid: this\n    }, h) : renderDefaultForm(h, this)) : null,\n    /**\r\n     * 渲染工具栏\r\n     */\n    hasToolbar ? h('div', {\n      ref: 'toolbarWrapper',\n      class: 'vxe-grid--toolbar-wrapper'\n    }, $scopedSlots.toolbar ? $scopedSlots.toolbar.call(this, {\n      $grid: this\n    }, h) : [h('vxe-toolbar', {\n      props: this.toolbarOpts,\n      ref: 'xToolbar',\n      scopedSlots: getToolbarSlots(this)\n    })]) : null,\n    /**\r\n     * 渲染表格顶部区域\r\n     */\n    $scopedSlots.top ? h('div', {\n      ref: 'topWrapper',\n      class: 'vxe-grid--top-wrapper'\n    }, $scopedSlots.top.call(this, {\n      $grid: this\n    }, h)) : null,\n    /**\r\n     * 渲染表格\r\n     */\n    h('vxe-table', {\n      props: this.tableProps,\n      on: getTableOns(this),\n      scopedSlots: $scopedSlots,\n      ref: 'xTable'\n    }),\n    /**\r\n     * 渲染表格底部区域\r\n     */\n    $scopedSlots.bottom ? h('div', {\n      ref: 'bottomWrapper',\n      class: 'vxe-grid--bottom-wrapper'\n    }, $scopedSlots.bottom.call(this, {\n      $grid: this\n    }, h)) : null,\n    /**\r\n     * 渲染分页\r\n     */\n    hasPager ? h('div', {\n      ref: 'pagerWrapper',\n      class: 'vxe-grid--pager-wrapper'\n    }, $scopedSlots.pager ? $scopedSlots.pager.call(this, {\n      $grid: this\n    }, h) : [h('vxe-pager', {\n      props: _objectSpread(_objectSpread({}, this.pagerOpts), this.proxyConfig ? this.tablePage : {}),\n      on: {\n        'page-change': this.pageChangeEvent\n      },\n      scopedSlots: getPagerSlots(this)\n    })]) : null]);\n  },\n\n  methods: _objectSpread(_objectSpread({}, methods), {}, {\n    callSlot(slotFunc, params, h, vNodes) {\n      if (slotFunc) {\n        const $scopedSlots = this.$scopedSlots;\n\n        if (XEUtils.isString(slotFunc)) {\n          slotFunc = $scopedSlots[slotFunc] || null;\n        }\n\n        if (XEUtils.isFunction(slotFunc)) {\n          return slotFunc.call(this, params, h, vNodes);\n        }\n      }\n\n      return [];\n    },\n\n    getParentHeight() {\n      const $el = this.$el,\n            isZMax = this.isZMax;\n      return (isZMax ? DomTools.getDomNode().visibleHeight : XEUtils.toNumber(getComputedStyle($el.parentNode).height)) - this.getExcludeHeight();\n    },\n\n    /**\r\n     * 获取需要排除的高度\r\n     */\n    getExcludeHeight() {\n      const $refs = this.$refs,\n            $el = this.$el,\n            isZMax = this.isZMax,\n            height = this.height;\n      const formWrapper = $refs.formWrapper,\n            toolbarWrapper = $refs.toolbarWrapper,\n            topWrapper = $refs.topWrapper,\n            bottomWrapper = $refs.bottomWrapper,\n            pagerWrapper = $refs.pagerWrapper;\n      const parentPaddingSize = isZMax || height !== 'auto' ? 0 : getPaddingTopBottomSize($el.parentNode);\n      return parentPaddingSize + getPaddingTopBottomSize($el) + getOffsetHeight(formWrapper) + getOffsetHeight(toolbarWrapper) + getOffsetHeight(topWrapper) + getOffsetHeight(bottomWrapper) + getOffsetHeight(pagerWrapper);\n    },\n\n    handleRowClassName(params) {\n      const rowClassName = this.rowClassName;\n      const clss = [];\n\n      if (this.pendingRecords.some(item => item === params.row)) {\n        clss.push('row--pending');\n      }\n\n      clss.push(rowClassName ? XEUtils.isFunction(rowClassName) ? rowClassName(params) : rowClassName : '');\n      return clss;\n    },\n\n    handleActiveMethod(params) {\n      const editConfig = this.editConfig;\n      const activeMethod = editConfig ? editConfig.activeMethod : null;\n      return this.pendingRecords.indexOf(params.row) === -1 && (!activeMethod || activeMethod(params));\n    },\n\n    initToolbar() {\n      this.$nextTick(() => {\n        const _this$$refs = this.$refs,\n              xTable = _this$$refs.xTable,\n              xToolbar = _this$$refs.xToolbar;\n\n        if (xTable && xToolbar) {\n          xTable.connect(xToolbar);\n        }\n      });\n    },\n\n    initPages() {\n      const tablePage = this.tablePage,\n            pagerConfig = this.pagerConfig,\n            pagerOpts = this.pagerOpts;\n      const currentPage = pagerOpts.currentPage,\n            pageSize = pagerOpts.pageSize;\n\n      if (pagerConfig) {\n        if (currentPage) {\n          tablePage.currentPage = currentPage;\n        }\n\n        if (pageSize) {\n          tablePage.pageSize = pageSize;\n        }\n      }\n    },\n\n    initProxy() {\n      const proxyInited = this.proxyInited,\n            proxyConfig = this.proxyConfig,\n            proxyOpts = this.proxyOpts,\n            formConfig = this.formConfig,\n            formOpts = this.formOpts;\n\n      if (proxyConfig) {\n        if (isEnableConf(formConfig) && proxyOpts.form && formOpts.items) {\n          const formData = {};\n          formOpts.items.forEach(_ref => {\n            let field = _ref.field,\n                itemRender = _ref.itemRender;\n\n            if (field) {\n              formData[field] = itemRender && !XEUtils.isUndefined(itemRender.defaultValue) ? itemRender.defaultValue : undefined;\n            }\n          });\n          this.formData = formData;\n        }\n\n        if (!proxyInited && proxyOpts.autoLoad !== false) {\n          this.proxyInited = true;\n          this.$nextTick(() => this.commitProxy('_init'));\n        }\n      }\n    },\n\n    handleGlobalKeydownEvent(evnt) {\n      const isEsc = evnt.keyCode === 27;\n\n      if (isEsc && this.isZMax && this.zoomOpts.escRestore !== false) {\n        this.triggerZoomEvent(evnt);\n      }\n    },\n\n    /**\r\n     * 提交指令，支持 code 或 button\r\n     * @param {String/Object} code 字符串或对象\r\n     */\n    commitProxy(proxyTarget) {\n      const $refs = this.$refs,\n            toolbar = this.toolbar,\n            toolbarConfig = this.toolbarConfig,\n            toolbarOpts = this.toolbarOpts,\n            proxyOpts = this.proxyOpts,\n            tablePage = this.tablePage,\n            pagerConfig = this.pagerConfig,\n            formData = this.formData,\n            isMsg = this.isMsg;\n      const beforeQuery = proxyOpts.beforeQuery,\n            afterQuery = proxyOpts.afterQuery,\n            beforeDelete = proxyOpts.beforeDelete,\n            afterDelete = proxyOpts.afterDelete,\n            beforeSave = proxyOpts.beforeSave,\n            afterSave = proxyOpts.afterSave,\n            _proxyOpts$ajax = proxyOpts.ajax,\n            ajax = _proxyOpts$ajax === void 0 ? {} : _proxyOpts$ajax,\n            _proxyOpts$props = proxyOpts.props,\n            proxyProps = _proxyOpts$props === void 0 ? {} : _proxyOpts$props;\n      const $xetable = $refs.xTable;\n      let button;\n      let code;\n\n      if (XEUtils.isString(proxyTarget)) {\n        const matchObj = toolbarConfig || toolbar ? XEUtils.findTree(toolbarOpts.buttons, item => item.code === proxyTarget, {\n          children: 'dropdowns'\n        }) : null;\n        code = proxyTarget;\n        button = matchObj ? matchObj.item : null;\n      } else {\n        button = proxyTarget;\n        code = button.code;\n      }\n\n      const btnParams = button ? button.params : null;\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      switch (code) {\n        case 'insert':\n          this.insert();\n          break;\n\n        case 'insert_actived':\n          this.insert().then(_ref2 => {\n            let row = _ref2.row;\n            return this.setActiveRow(row);\n          });\n          break;\n\n        case 'mark_cancel':\n          this.triggerPendingEvent(code);\n          break;\n\n        case 'remove':\n          return this.handleDeleteRow(code, 'vxe.grid.removeSelectRecord', () => this.removeCheckboxRow());\n\n        case 'import':\n          this.importData(btnParams);\n          break;\n\n        case 'open_import':\n          this.openImport(btnParams);\n          break;\n\n        case 'export':\n          this.exportData(btnParams);\n          break;\n\n        case 'open_export':\n          this.openExport(btnParams);\n          break;\n\n        case 'reset_custom':\n          this.resetColumn(true);\n          break;\n\n        case '_init':\n        case 'reload':\n        case 'query':\n          {\n            const ajaxMethods = ajax.query;\n\n            if (ajaxMethods) {\n              const isInited = code === '_init';\n              const isReload = code === 'reload';\n              let sortList = [];\n              let filterList = [];\n              let pageParams = {};\n\n              if (pagerConfig) {\n                if (isInited || isReload) {\n                  tablePage.currentPage = 1;\n                }\n\n                if (isEnableConf(pagerConfig)) {\n                  pageParams = _objectSpread({}, tablePage);\n                }\n              }\n\n              if (isInited) {\n                const sortOpts = $xetable.sortOpts;\n                let defaultSort = sortOpts.defaultSort; // 如果使用默认排序\n\n                if (defaultSort) {\n                  if (!XEUtils.isArray(defaultSort)) {\n                    defaultSort = [defaultSort];\n                  }\n\n                  sortList = defaultSort.map(item => {\n                    return {\n                      property: item.field,\n                      order: item.order\n                    };\n                  });\n                }\n\n                filterList = $xetable.getCheckedFilters();\n              } else {\n                if (isReload) {\n                  this.pendingRecords = [];\n                  $xetable.clearAll();\n                } else {\n                  sortList = $xetable.getSortColumns();\n                  filterList = $xetable.getCheckedFilters();\n                }\n              }\n\n              const params = {\n                code,\n                button,\n                $grid: this,\n                page: pageParams,\n                sort: sortList.length ? sortList[0] : {},\n                sorts: sortList,\n                filters: filterList,\n                form: formData,\n                options: ajaxMethods\n              };\n              this.sortData = sortList;\n              this.filterData = filterList;\n              this.tableLoading = true;\n              const applyArgs = [params].concat(args);\n              return Promise.resolve((beforeQuery || ajaxMethods)(...applyArgs)).catch(e => e).then(rest => {\n                this.tableLoading = false;\n\n                if (rest) {\n                  if (isEnableConf(pagerConfig)) {\n                    const total = XEUtils.get(rest, proxyProps.total || 'page.total') || 0;\n                    tablePage.total = total;\n                    this.tableData = XEUtils.get(rest, proxyProps.result || 'result') || []; // 检验当前页码，不能超出当前最大页数\n\n                    const pageCount = Math.max(Math.ceil(total / tablePage.pageSize), 1);\n\n                    if (tablePage.currentPage > pageCount) {\n                      tablePage.currentPage = pageCount;\n                    }\n                  } else {\n                    this.tableData = (proxyProps.list ? XEUtils.get(rest, proxyProps.list) : rest) || [];\n                  }\n                } else {\n                  this.tableData = [];\n                }\n\n                if (afterQuery) {\n                  afterQuery(...applyArgs);\n                }\n              });\n            } else {\n              UtilTools.error('vxe.error.notFunc', ['query']);\n            }\n\n            break;\n          }\n\n        case 'delete':\n          {\n            const ajaxMethods = ajax.delete;\n\n            if (ajaxMethods) {\n              const removeRecords = this.getCheckboxRecords();\n              const body = {\n                removeRecords\n              };\n              const applyArgs = [{\n                $grid: this,\n                code,\n                button,\n                body,\n                options: ajaxMethods\n              }].concat(args);\n\n              if (removeRecords.length) {\n                return this.handleDeleteRow(code, 'vxe.grid.deleteSelectRecord', () => {\n                  this.tableLoading = true;\n                  return Promise.resolve((beforeDelete || ajaxMethods)(...applyArgs)).then(rest => {\n                    this.tableLoading = false;\n                    this.pendingRecords = this.pendingRecords.filter(row => removeRecords.indexOf(row) === -1);\n\n                    if (isMsg) {\n                      VXETable.modal.message({\n                        content: this.getRespMsg(rest, 'vxe.grid.delSuccess'),\n                        status: 'success'\n                      });\n                    }\n\n                    if (afterDelete) {\n                      afterDelete(...applyArgs);\n                    } else {\n                      this.commitProxy('query');\n                    }\n                  }).catch(rest => {\n                    this.tableLoading = false;\n\n                    if (isMsg) {\n                      VXETable.modal.message({\n                        id: code,\n                        content: this.getRespMsg(rest, 'vxe.grid.operError'),\n                        status: 'error'\n                      });\n                    }\n                  });\n                });\n              } else {\n                if (isMsg) {\n                  VXETable.modal.message({\n                    id: code,\n                    content: GlobalConfig.i18n('vxe.grid.selectOneRecord'),\n                    status: 'warning'\n                  });\n                }\n              }\n            } else {\n              UtilTools.error('vxe.error.notFunc', [code]);\n            }\n\n            break;\n          }\n\n        case 'save':\n          {\n            const ajaxMethods = ajax.save;\n\n            if (ajaxMethods) {\n              const body = Object.assign({\n                pendingRecords: this.pendingRecords\n              }, this.getRecordset());\n              const insertRecords = body.insertRecords,\n                    removeRecords = body.removeRecords,\n                    updateRecords = body.updateRecords,\n                    pendingRecords = body.pendingRecords;\n              const applyArgs = [{\n                $grid: this,\n                code,\n                button,\n                body,\n                options: ajaxMethods\n              }].concat(args); // 排除掉新增且标记为删除的数据\n\n              if (insertRecords.length) {\n                body.pendingRecords = pendingRecords.filter(row => insertRecords.indexOf(row) === -1);\n              } // 排除已标记为删除的数据\n\n\n              if (pendingRecords.length) {\n                body.insertRecords = insertRecords.filter(row => pendingRecords.indexOf(row) === -1);\n              } // 只校验新增和修改的数据\n\n\n              return this.validate(body.insertRecords.concat(updateRecords)).then(() => {\n                if (body.insertRecords.length || removeRecords.length || updateRecords.length || body.pendingRecords.length) {\n                  this.tableLoading = true;\n                  return Promise.resolve((beforeSave || ajaxMethods)(...applyArgs)).then(rest => {\n                    this.tableLoading = false;\n                    this.pendingRecords = [];\n\n                    if (isMsg) {\n                      VXETable.modal.message({\n                        content: this.getRespMsg(rest, 'vxe.grid.saveSuccess'),\n                        status: 'success'\n                      });\n                    }\n\n                    if (afterSave) {\n                      afterSave(...applyArgs);\n                    } else {\n                      this.commitProxy('query');\n                    }\n                  }).catch(rest => {\n                    this.tableLoading = false;\n\n                    if (isMsg) {\n                      VXETable.modal.message({\n                        id: code,\n                        content: this.getRespMsg(rest, 'vxe.grid.operError'),\n                        status: 'error'\n                      });\n                    }\n                  });\n                } else {\n                  if (isMsg) {\n                    VXETable.modal.message({\n                      id: code,\n                      content: GlobalConfig.i18n('vxe.grid.dataUnchanged'),\n                      status: 'info'\n                    });\n                  }\n                }\n              }).catch(errMap => errMap);\n            } else {\n              UtilTools.error('vxe.error.notFunc', [code]);\n            }\n\n            break;\n          }\n\n        default:\n          {\n            const btnMethod = VXETable.commands.get(code);\n\n            if (btnMethod) {\n              btnMethod({\n                code,\n                button,\n                $grid: this,\n                $table: $xetable\n              }, ...args);\n            }\n          }\n      }\n\n      return this.$nextTick();\n    },\n\n    getRespMsg(rest, defaultMsg) {\n      const _this$proxyOpts$props = this.proxyOpts.props,\n            proxyProps = _this$proxyOpts$props === void 0 ? {} : _this$proxyOpts$props;\n      let msg;\n\n      if (rest && proxyProps.message) {\n        msg = XEUtils.get(rest, proxyProps.message);\n      }\n\n      return msg || GlobalConfig.i18n(defaultMsg);\n    },\n\n    handleDeleteRow(code, alertKey, callback) {\n      const selectRecords = this.getCheckboxRecords();\n\n      if (this.isMsg) {\n        if (selectRecords.length) {\n          return VXETable.modal.confirm({\n            id: `cfm_${code}`,\n            content: GlobalConfig.i18n(alertKey),\n            escClosable: true\n          }).then(type => {\n            if (type === 'confirm') {\n              callback();\n            }\n          });\n        } else {\n          VXETable.modal.message({\n            id: `msg_${code}`,\n            content: GlobalConfig.i18n('vxe.grid.selectOneRecord'),\n            status: 'warning'\n          });\n        }\n      } else {\n        if (selectRecords.length) {\n          callback();\n        }\n      }\n\n      return Promise.resolve();\n    },\n\n    getFormItems(itemIndex) {\n      const formConfig = this.formConfig,\n            formOpts = this.formOpts;\n      const itemList = [];\n      XEUtils.eachTree(isEnableConf(formConfig) && formOpts.items ? formOpts.items : [], item => {\n        itemList.push(item);\n      }, {\n        children: 'children'\n      });\n      return XEUtils.isUndefined(itemIndex) ? itemList : itemList[itemIndex];\n    },\n\n    getPendingRecords() {\n      return this.pendingRecords;\n    },\n\n    triggerToolbarBtnEvent(button, evnt) {\n      this.commitProxy(button, evnt);\n      this.$emit('toolbar-button-click', {\n        code: button.code,\n        button,\n        $grid: this,\n        $event: evnt\n      });\n    },\n\n    triggerToolbarTolEvent(tool, evnt) {\n      this.commitProxy(tool, evnt);\n      this.$emit('toolbar-tool-click', {\n        code: tool.code,\n        tool,\n        $grid: this,\n        $event: evnt\n      });\n    },\n\n    triggerPendingEvent(code) {\n      const pendingRecords = this.pendingRecords,\n            isMsg = this.isMsg;\n      const selectRecords = this.getCheckboxRecords();\n\n      if (selectRecords.length) {\n        const plus = [];\n        const minus = [];\n        selectRecords.forEach(data => {\n          if (pendingRecords.some(item => data === item)) {\n            minus.push(data);\n          } else {\n            plus.push(data);\n          }\n        });\n\n        if (minus.length) {\n          this.pendingRecords = pendingRecords.filter(item => minus.indexOf(item) === -1).concat(plus);\n        } else if (plus.length) {\n          this.pendingRecords = pendingRecords.concat(plus);\n        }\n\n        this.clearCheckboxRow();\n      } else {\n        if (isMsg) {\n          VXETable.modal.message({\n            id: code,\n            content: GlobalConfig.i18n('vxe.grid.selectOneRecord'),\n            status: 'warning'\n          });\n        }\n      }\n    },\n\n    pageChangeEvent(params) {\n      const proxyConfig = this.proxyConfig,\n            tablePage = this.tablePage;\n      const currentPage = params.currentPage,\n            pageSize = params.pageSize;\n      tablePage.currentPage = currentPage;\n      tablePage.pageSize = pageSize;\n      this.$emit('page-change', Object.assign({\n        $grid: this\n      }, params));\n\n      if (proxyConfig) {\n        this.commitProxy('query');\n      }\n    },\n\n    sortChangeEvent(params) {\n      const $table = params.$table,\n            column = params.column,\n            sortList = params.sortList;\n      const isRemote = XEUtils.isBoolean(column.remoteSort) ? column.remoteSort : $table.sortOpts.remote; // 如果是服务端排序\n\n      if (isRemote) {\n        this.sortData = sortList;\n\n        if (this.proxyConfig) {\n          this.tablePage.currentPage = 1;\n          this.commitProxy('query');\n        }\n      }\n\n      this.$emit('sort-change', Object.assign({\n        $grid: this\n      }, params));\n    },\n\n    filterChangeEvent(params) {\n      const $table = params.$table,\n            filterList = params.filterList; // 如果是服务端过滤\n\n      if ($table.filterOpts.remote) {\n        this.filterData = filterList;\n\n        if (this.proxyConfig) {\n          this.tablePage.currentPage = 1;\n          this.commitProxy('query');\n        }\n      }\n\n      this.$emit('filter-change', Object.assign({\n        $grid: this\n      }, params));\n    },\n\n    submitEvent(params) {\n      const proxyConfig = this.proxyConfig;\n\n      if (proxyConfig) {\n        this.commitProxy('reload');\n      }\n\n      this.$emit('form-submit', Object.assign({\n        $grid: this\n      }, params));\n    },\n\n    resetEvent(params) {\n      const proxyConfig = this.proxyConfig;\n\n      if (proxyConfig) {\n        this.commitProxy('reload');\n      }\n\n      this.$emit('form-reset', Object.assign({\n        $grid: this\n      }, params));\n    },\n\n    submitInvalidEvent(params) {\n      this.$emit('form-submit-invalid', Object.assign({\n        $grid: this\n      }, params));\n    },\n\n    togglCollapseEvent(params) {\n      this.$nextTick(() => this.recalculate(true));\n      this.$emit('form-toggle-collapse', Object.assign({\n        $grid: this\n      }, params));\n    },\n\n    triggerZoomEvent(evnt) {\n      this.zoom();\n      this.$emit('zoom', {\n        $grid: this,\n        type: this.isZMax ? 'max' : 'revert',\n        $event: evnt\n      });\n    },\n\n    zoom() {\n      return this[this.isZMax ? 'revert' : 'maximize']();\n    },\n\n    isMaximized() {\n      return this.isZMax;\n    },\n\n    maximize() {\n      return this.handleZoom(true);\n    },\n\n    revert() {\n      return this.handleZoom();\n    },\n\n    handleZoom(isMax) {\n      const isZMax = this.isZMax;\n\n      if (isMax ? !isZMax : isZMax) {\n        this.isZMax = !isZMax;\n\n        if (this.tZindex < UtilTools.getLastZIndex()) {\n          this.tZindex = UtilTools.nextZIndex();\n        }\n      }\n\n      return this.$nextTick().then(() => this.recalculate(true)).then(() => this.isZMax);\n    },\n\n    getProxyInfo() {\n      const sortData = this.sortData,\n            proxyConfig = this.proxyConfig;\n\n      if (proxyConfig) {\n        return {\n          data: this.tableData,\n          filter: this.filterData,\n          form: this.formData,\n          sort: sortData.length ? sortData[0] : {},\n          sorts: sortData,\n          pager: this.tablePage,\n          pendingRecords: this.pendingRecords\n        };\n      }\n\n      return null;\n    }\n\n  }, process.env.VUE_APP_VXE_TABLE_ENV === 'development' ? {\n    loadColumn(columns) {\n      const $scopedSlots = this.$scopedSlots;\n      XEUtils.eachTree(columns, column => {\n        if (column.slots) {\n          XEUtils.each(column.slots, func => {\n            if (!XEUtils.isFunction(func)) {\n              if (!$scopedSlots[func]) {\n                UtilTools.error('vxe.error.notSlot', [func]);\n              }\n            }\n          });\n        }\n      });\n      return this.$refs.xTable.loadColumn(columns);\n    },\n\n    reloadColumn(columns) {\n      this.clearAll();\n      return this.loadColumn(columns);\n    }\n\n  } : null)\n};",null]}