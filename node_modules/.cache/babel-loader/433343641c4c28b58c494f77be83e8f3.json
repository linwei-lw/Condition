{"remainingRequest":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js!D:\\cdRule\\src\\common\\cache\\CacheChina.js","dependencies":[{"path":"D:\\cdRule\\src\\common\\cache\\CacheChina.js","mtime":1656139477885},{"path":"D:\\cdRule\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\cdRule\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/web.dom.iterable\";\nvar CACHE = {\n  all: {\n    tree: null,\n    map: null\n  },\n  fav: {\n    tree: null,\n    map: null\n  }\n};\nvar main = window.$_main.root ? window.$_main.root.$_cache_china : null;\nexport function getAllChina(callback) {\n  if (main) return main.getAllChina(callback);\n\n  if (CACHE.all.tree) {\n    return callback ? callback(CACHE.all) : CACHE.all;\n  }\n\n  var fun = function fun(root) {\n    CACHE.all.tree = root || [];\n    CACHE.all.map = treeToMap(CACHE.all.tree, CACHE.all.tree);\n    CACHE.all.tree.forEach(function (root) {\n      return delete root.parent;\n    });\n    return callback ? callback(CACHE.all) : CACHE.all;\n  };\n\n  return callback ? window.$_main.http.get('h5/map?getAllChina').then(fun) : fun(window.$_main.http.syncGet('h5/map?getAllChina'));\n}\n\nfunction treeToMap(result, tree, map) {\n  map = map || {};\n\n  if (tree && tree.length > 0) {\n    for (var i = 0, len = tree.length, node; i < len; i++) {\n      node = tree[i];\n      node.$ref && (tree[i] = node = eval(node.$ref.substr(2)));\n      node.parent && node.parent.$ref && (node.parent = eval(node.parent.$ref.substr(2)));\n      map[node.id] = node;\n      node.children && treeToMap(result, node.children, map);\n    }\n  }\n\n  return map;\n}",{"version":3,"sources":["D:\\cdRule\\src\\common\\cache\\CacheChina.js"],"names":["CACHE","all","tree","map","fav","main","window","callback","fun","root","treeToMap","i","len","node","eval"],"mappings":";;AAAA,IAAIA,KAAK,GAAG;AAACC,EAAAA,GAAG,EAAC;AAACC,IAAAA,IAAI,EAAL,IAAA;AAAWC,IAAAA,GAAG,EAAC;AAAf,GAAL;AAA0BC,EAAAA,GAAG,EAAC;AAACF,IAAAA,IAAI,EAAL,IAAA;AAAWC,IAAAA,GAAG,EAAC;AAAf;AAA9B,CAAZ;AAEA,IAAIE,IAAI,GAAGC,MAAM,CAANA,MAAAA,CAAAA,IAAAA,GAAqBA,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAArBA,aAAAA,GAAX,IAAA;AAEA,OAAO,SAAA,WAAA,CAAA,QAAA,EAA+B;AACpC,MAAA,IAAA,EAAU,OAAOD,IAAI,CAAJA,WAAAA,CAAP,QAAOA,CAAP;;AACV,MAAIL,KAAK,CAALA,GAAAA,CAAJ,IAAA,EAAoB;AAClB,WAAOO,QAAQ,GAAGA,QAAQ,CAACP,KAAK,CAAjB,GAAW,CAAX,GAAyBA,KAAK,CAA7C,GAAA;AACD;;AACD,MAAIQ,GAAG,GAAG,SAANA,GAAM,CAAA,IAAA,EAAQ;AAChBR,IAAAA,KAAK,CAALA,GAAAA,CAAAA,IAAAA,GAAiBS,IAAI,IAArBT,EAAAA;AACAA,IAAAA,KAAK,CAALA,GAAAA,CAAAA,GAAAA,GAAgBU,SAAS,CAACV,KAAK,CAALA,GAAAA,CAAD,IAAA,EAAiBA,KAAK,CAALA,GAAAA,CAA1CA,IAAyB,CAAzBA;AACAA,IAAAA,KAAK,CAALA,GAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CAAuB,UAAA,IAAA,EAAI;AAAA,aAAI,OAAOS,IAAI,CAAf,MAAA;AAA3BT,KAAAA;AACA,WAAOO,QAAQ,GAAGA,QAAQ,CAACP,KAAK,CAAjB,GAAW,CAAX,GAAyBA,KAAK,CAA7C,GAAA;AAJF,GAAA;;AAMA,SAAOO,QAAQ,GAAGD,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,oBAAAA,EAAAA,IAAAA,CAAH,GAAGA,CAAH,GAA4DE,GAAG,CAACF,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CAA/E,oBAA+EA,CAAD,CAA9E;AACD;;AAED,SAAA,SAAA,CAAA,MAAA,EAAA,IAAA,EAAA,GAAA,EAAsC;AACpCH,EAAAA,GAAG,GAAGA,GAAG,IAATA,EAAAA;;AACA,MAAID,IAAI,IAAIA,IAAI,CAAJA,MAAAA,GAAZ,CAAA,EAA6B;AAC3B,SAAK,IAAIS,CAAC,GAAL,CAAA,EAAQC,GAAG,GAACV,IAAI,CAAhB,MAAA,EAAL,IAAA,EAAmCS,CAAC,GAApC,GAAA,EAA0CA,CAA1C,EAAA,EAA+C;AAC7CE,MAAAA,IAAI,GAAGX,IAAI,CAAXW,CAAW,CAAXA;AACAA,MAAAA,IAAI,CAAJA,IAAAA,KAAcX,IAAI,CAAJA,CAAI,CAAJA,GAAUW,IAAI,GAAGC,IAAI,CAACD,IAAI,CAAJA,IAAAA,CAAAA,MAAAA,CAApCA,CAAoCA,CAAD,CAAnCA;AACAA,MAAAA,IAAI,CAAJA,MAAAA,IAAeA,IAAI,CAAJA,MAAAA,CAAfA,IAAAA,KAAoCA,IAAI,CAAJA,MAAAA,GAAcC,IAAI,CAACD,IAAI,CAAJA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAvDA,CAAuDA,CAAD,CAAtDA;AACAV,MAAAA,GAAG,CAACU,IAAI,CAARV,EAAG,CAAHA,GAAAA,IAAAA;AACAU,MAAAA,IAAI,CAAJA,QAAAA,IAAiBH,SAAS,CAAA,MAAA,EAASG,IAAI,CAAb,QAAA,EAA1BA,GAA0B,CAA1BA;AACD;AACF;;AACD,SAAA,GAAA;AACD","sourcesContent":["let CACHE = {all:{tree:null,map:null},fav:{tree:null,map:null}};\r\n\r\nlet main = window.$_main.root ? window.$_main.root.$_cache_china : null;\r\n\r\nexport function getAllChina(callback) {\r\n  if (main) return main.getAllChina(callback);\r\n  if (CACHE.all.tree) {\r\n    return callback ? callback(CACHE.all) : CACHE.all;\r\n  }\r\n  let fun = root => {\r\n    CACHE.all.tree = root || [];\r\n    CACHE.all.map = treeToMap(CACHE.all.tree, CACHE.all.tree);\r\n    CACHE.all.tree.forEach(root => delete root.parent);\r\n    return callback ? callback(CACHE.all) : CACHE.all;\r\n  }\r\n  return callback ? window.$_main.http.get('h5/map?getAllChina').then(fun) : fun(window.$_main.http.syncGet('h5/map?getAllChina'));\r\n}\r\n\r\nfunction treeToMap(result, tree, map) {\r\n  map = map || {};\r\n  if (tree && tree.length > 0) {\r\n    for (let i=0,len=tree.length,node; i<len; i++) {\r\n      node = tree[i];\r\n      node.$ref && (tree[i] = node = eval(node.$ref.substr(2)));\r\n      node.parent && node.parent.$ref && (node.parent = eval(node.parent.$ref.substr(2)));\r\n      map[node.id] = node;\r\n      node.children && treeToMap(result, node.children, map);\r\n    }\r\n  }\r\n  return map;\r\n}\r\n"]}]}