var VueEasyPrinter = (function (exports) {
    'use strict';

    //
    //
    //
    //
    //
    //
    //

    var script = {
        name:'PrinterModel',
        props:{
            orientation:{type:String, enum:['portrait','landscape'],default:'lanscape'},
            content:{type:String},
            title:{type:String}
        },
        mounted() {
            console.log(this.orientation);
        }
    };

    function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
    /* server only */
    , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
      if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
      } // Vue.extend constructor export interop.


      var options = typeof script === 'function' ? script.options : script; // render functions

      if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true; // functional template

        if (isFunctionalTemplate) {
          options.functional = true;
        }
      } // scopedId


      if (scopeId) {
        options._scopeId = scopeId;
      }

      var hook;

      if (moduleIdentifier) {
        // server build
        hook = function hook(context) {
          // 2.3 injection
          context = context || // cached call
          this.$vnode && this.$vnode.ssrContext || // stateful
          this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
          // 2.2 with runInNewContext: true

          if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
            context = __VUE_SSR_CONTEXT__;
          } // inject component styles


          if (style) {
            style.call(this, createInjectorSSR(context));
          } // register component module identifier for async chunk inference


          if (context && context._registeredComponents) {
            context._registeredComponents.add(moduleIdentifier);
          }
        }; // used by ssr in case component is cached and beforeCreate
        // never gets called


        options._ssrRegister = hook;
      } else if (style) {
        hook = shadowMode ? function () {
          style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
        } : function (context) {
          style.call(this, createInjector(context));
        };
      }

      if (hook) {
        if (options.functional) {
          // register for functional component in vue file
          var originalRender = options.render;

          options.render = function renderWithStyleInjection(h, context) {
            hook.call(context);
            return originalRender(h, context);
          };
        } else {
          // inject component registration as beforeCreate hook
          var existing = options.beforeCreate;
          options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
      }

      return script;
    }

    var normalizeComponent_1 = normalizeComponent;

    var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    function createInjector(context) {
      return function (id, style) {
        return addStyle(id, style);
      };
    }
    var HEAD = document.head || document.getElementsByTagName('head')[0];
    var styles = {};

    function addStyle(id, css) {
      var group = isOldIE ? css.media || 'default' : id;
      var style = styles[group] || (styles[group] = {
        ids: new Set(),
        styles: []
      });

      if (!style.ids.has(id)) {
        style.ids.add(id);
        var code = css.source;

        if (css.map) {
          // https://developer.chrome.com/devtools/docs/javascript-debugging
          // this makes source maps inside style tags work properly in Chrome
          code += '\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875

          code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
        }

        if (!style.element) {
          style.element = document.createElement('style');
          style.element.type = 'text/css';
          if (css.media) style.element.setAttribute('media', css.media);
          HEAD.appendChild(style.element);
        }

        if ('styleSheet' in style.element) {
          style.styles.push(code);
          style.element.styleSheet.cssText = style.styles.filter(Boolean).join('\n');
        } else {
          var index = style.ids.size - 1;
          var textNode = document.createTextNode(code);
          var nodes = style.element.childNodes;
          if (nodes[index]) style.element.removeChild(nodes[index]);
          if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);
        }
      }
    }

    var browser = createInjector;

    /* script */
    const __vue_script__ = script;

    /* template */
    var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:_vm.orientation},[_c('div',{domProps:{"innerHTML":_vm._s(_vm.content)}})])};
    var __vue_staticRenderFns__ = [];

      /* style */
      const __vue_inject_styles__ = function (inject) {
        if (!inject) return
        inject("data-v-3ff3cdf6_0", { source: "body[data-v-3ff3cdf6]{margin:0;background:#ccc}div.landscape[data-v-3ff3cdf6],div.portrait[data-v-3ff3cdf6]{margin:10px auto;padding:5mm;border:solid 1px #000;overflow:hidden;page-break-after:always;background:#fff}div.portrait[data-v-3ff3cdf6]{width:320mm;height:370mm}div.landscape[data-v-3ff3cdf6]{width:370mm;height:320mm}@media print{body[data-v-3ff3cdf6]{background:0 0;-ms-zoom:1.665}div.landscape[data-v-3ff3cdf6],div.portrait[data-v-3ff3cdf6]{margin:0;padding:0;border:none;background:0 0}div.landscape[data-v-3ff3cdf6]{transform:rotate(270deg) translate(-370mm,0);transform-origin:0 0}}.ui.table thead th[data-v-3ff3cdf6]{font-size:12px;padding:0}", map: undefined, media: undefined });

      };
      /* scoped */
      const __vue_scope_id__ = "data-v-3ff3cdf6";
      /* module identifier */
      const __vue_module_identifier__ = undefined;
      /* functional template */
      const __vue_is_functional_template__ = false;
      /* style inject SSR */
      

      
      var PrintModelComponent = normalizeComponent_1(
        { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
        __vue_inject_styles__,
        __vue_script__,
        __vue_scope_id__,
        __vue_is_functional_template__,
        __vue_module_identifier__,
        browser,
        undefined
      );

    var helpers = {
        gPrint(elementId, title = null, orientation = 'portrait') {
            console.log('plugin en cours');
            // Get HTML to print from element
            let prtHtml = document.getElementById(elementId).outerHTML;

            if (!prtHtml) {
                alert('element not Found');
            }
            var printModel = new Vue({
                ...PrintModelComponent,
                propsData: {
                    content: prtHtml,
                    orientation: orientation,
                }
            }).$mount();

            // Get all stylesheets HTML
            let stylesHtml = '';
            for (const node of [...document.querySelectorAll('link[rel="stylesheet"], style')]) {
                stylesHtml += node.outerHTML;
            }
            // Open the print window
            const WinPrint = window.open('', '', 'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0');

            WinPrint.document.write(`<!DOCTYPE html>
                                    <html>
                                      <head>
                                      <title>${title}</title>
                                        ${stylesHtml}
                                      </head>
                                      <body>
                                        ${printModel.$el.outerHTML}
                                      </body>
                                    </html>`);

            setTimeout(() => {

                WinPrint.document.close();
                WinPrint.focus();
                WinPrint.open();
                WinPrint.print();
                WinPrint.close();
            }, 1000);
        },
        gPrintComponent(component, propsData={},title=null, orientation = 'portrait') {
            console.log('dedans');
            // Get HTML to print from element
            var printComponent = new Vue({
                ...component,
                propsData: {
                    ...propsData
                }
            }).$mount();

            if(!printComponent){
                alert('Check Your Component');
            }

            var printModel = new Vue({
                ...PrintModelComponent,
                propsData: {
                    content: printComponent.$el.outerHTML,
                    orientation: orientation,
                }
            }).$mount();

            // Get all stylesheets HTML
            let stylesHtml = '';
            for (const node of [...document.querySelectorAll('link[rel="stylesheet"], style')]) {
                stylesHtml += node.outerHTML;
            }
            // Open the print window
            const WinPrint = window.open('', '', 'left=0,top=0,width=800,height=900,toolbar=0,scrollbars=0,status=0');

            WinPrint.document.write(`<!DOCTYPE html>
                                    <html>
                                      <head>
                                      <title>${title}</title>
                                        ${stylesHtml}
                                      </head>
                                      <body>
                                        ${printModel.$el.outerHTML}
                                      </body>
                                    </html>`);

            setTimeout(() => {
                WinPrint.document.close();
                WinPrint.focus();
                WinPrint.open();
                WinPrint.print();
                WinPrint.close();
            }, 1000);
        },

    };

    function install(Vue) {
      if (install.installed) return;
      install.installed = true;
      Vue.component(PrintModelComponent.name, PrintModelComponent);
            Vue.easyPrint = function (elementId,title=null,orientation='portrait') {
                return helpers.gPrint(elementId,title,orientation);
            };

            Vue.easyPrintComponent = function (component, propsData={},title=null, orientation = 'portrait') {
                return helpers.gPrintComponent(component, propsData,title, orientation);
            };
            Vue.prototype.$easyPrint = function (elementId,title=null,orientation='portrait') {
                return helpers.gPrint(elementId,title,orientation);
            };

            Vue.prototype.$easyPrintComponent = function (component, propsData={},title=null, orientation = 'portrait') {
                return helpers.gPrintComponent(component, propsData,title, orientation);
            };
    }

    // Create module definition for Vue.use()
    const VueEasyPrinter = {
      install,
    };

    // To auto-install when vue is found
    /* global window global */
    let GlobalVue = null;
    if (typeof window !== 'undefined') {
      GlobalVue = window.Vue;
    } else if (typeof global !== 'undefined') {
      GlobalVue = global.Vue;
    }
    if (GlobalVue) {
      GlobalVue.use(VueEasyPrinter);
    }

    exports.default = VueEasyPrinter;

    return exports;

}({}));
